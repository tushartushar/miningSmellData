Implementation smell,Namespace,Class,File,Method,Description
Long Method,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupLetsEncryptTask,The method has 101 lines of code.
Long Method,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The method has 125 lines of code.
Long Method,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteClusterConfigurationAndGetSettingsZip,The method has 192 lines of code.
Long Method,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SimulateRunningServer,The method has 103 lines of code.
Long Method,Raven.Server.Config.Categories,ConfigurationCategory,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\ConfigurationCategory.cs,Initialize,The method has 155 lines of code.
Long Method,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutAttachment,The method has 112 lines of code.
Long Method,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The method has 327 lines of code.
Long Method,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,AddConflict,The method has 144 lines of code.
Long Method,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,Dispose,The method has 121 lines of code.
Long Method,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,PutDocument,The method has 160 lines of code.
Long Method,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Delete,The method has 139 lines of code.
Long Method,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,MergeTransactionsWithAsyncCommit,The method has 101 lines of code.
Long Method,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,Run,The method has 110 lines of code.
Long Method,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The method has 159 lines of code.
Long Method,Raven.Server.Documents.Handlers,MergedBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,Execute,The method has 124 lines of code.
Long Method,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,ReadSingleCommand,The method has 149 lines of code.
Long Method,Raven.Server.Documents.Handlers,MultiGetHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\MultiGetHandler.cs,PostMultiGet,The method has 141 lines of code.
Long Method,Raven.Server.Documents.Handlers.Debugging,MemoryStatsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\MemoryStatsHandler.cs,MemoryStatsInternal,The method has 129 lines of code.
Long Method,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,ExecuteIndexing,The method has 207 lines of code.
Long Method,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The method has 172 lines of code.
Long Method,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,HandleTreeReduction,The method has 155 lines of code.
Long Method,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndex.cs,HandleMap,The method has 105 lines of code.
Long Method,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The method has 224 lines of code.
Long Method,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqPrettifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqPrettifier.cs,VisitInvocationExpression,The method has 124 lines of code.
Long Method,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The method has 148 lines of code.
Long Method,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,Execute,The method has 106 lines of code.
Long Method,Raven.Server.Documents.Patch,PatchDocumentCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchDocumentCommand.cs,Execute,The method has 108 lines of code.
Long Method,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,RunPeriodicBackup,The method has 147 lines of code.
Long Method,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,Execute,The method has 149 lines of code.
Long Method,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToLuceneQuery,The method has 202 lines of code.
Long Method,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The method has 107 lines of code.
Long Method,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,GetSelectField,The method has 108 lines of code.
Long Method,Raven.Server.Documents.Queries.Parser,QueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryParser.cs,Operator,The method has 130 lines of code.
Long Method,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,TryGetValue,The method has 145 lines of code.
Long Method,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The method has 173 lines of code.
Long Method,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReplicateToDestination,The method has 235 lines of code.
Long Method,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,ExecuteReplicationOnce,The method has 124 lines of code.
Long Method,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The method has 100 lines of code.
Long Method,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ParseSubscriptionQuery,The method has 111 lines of code.
Long Method,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteDatabaseStatistics,The method has 102 lines of code.
Long Method,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,Main,The method has 138 lines of code.
Long Method,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,Initialize,The method has 110 lines of code.
Long Method,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The method has 107 lines of code.
Long Method,Raven.Server.Rachis,Candidate,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Candidate.cs,Run,The method has 124 lines of code.
Long Method,Raven.Server.Rachis,CandidateAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\CandidateAmbassador.cs,Run,The method has 190 lines of code.
Long Method,Raven.Server.Rachis,Elector,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Elector.cs,HandleVoteRequest,The method has 196 lines of code.
Long Method,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,FollowerSteadyState,The method has 142 lines of code.
Long Method,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateWithLeader,The method has 117 lines of code.
Long Method,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,Run,The method has 218 lines of code.
Long Method,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,RefreshAmbassadors,The method has 113 lines of code.
Long Method,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Apply,The method has 158 lines of code.
Long Method,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKey,The method has 119 lines of code.
Long Method,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The method has 154 lines of code.
Long Method,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,OnValueChanged,The method has 104 lines of code.
Long Method,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ListenToMaintenanceWorker,The method has 108 lines of code.
Long Method,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,UpdateDatabaseTopology,The method has 186 lines of code.
Long Method,Raven.Server.Storage.Schema.Updates.Documents,From10,C:\repos\ravendb_ravendb\src\Raven.Server\Storage\Schema\Updates\Documents\From10.cs,Update,The method has 116 lines of code.
Long Method,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,StartCli,The method has 153 lines of code.
Long Method,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,ParseLine,The method has 109 lines of code.
Long Method,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,MigrateDatabaseOffline,The method has 135 lines of code.
Long Method,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,GetOngoingTaskInfo,The method has 106 lines of code.
Complex Method,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,SetMaxWorkingSet,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,ThrowIfCannotActivateLicense,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,ValidateSetupInfo,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Config.Categories,ConfigurationCategory,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\ConfigurationCategory.cs,Initialize,Cyclomatic complexity of the method is 14
Complex Method,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,CheckDirectoryPermissions,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachment,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentConflicts,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,SendDocumentChanges,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,HandleClusterDatabaseChanged,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents,DocumentCompare,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentCompare.cs,ComparePropertiesExceptStartingWithAt,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents,DocumentCompare,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentCompare.cs,ShouldResolveAttachmentsConflict,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Delete,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Documents,DocumentTombstoneCleaner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentTombstoneCleaner.cs,ExecuteCleanup,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents,JsonClassGenerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents,JsonClassGenerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GuessTokenTypeFromContent,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents,LiveIOStatsCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\LiveIOStatsCollector.cs,PrepareIOMetrics,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,GetRelevantProcesses,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,CanContinueBatch,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,ReadSingleCommand,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Handlers.Debugging,MemoryStatsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\MemoryStatsHandler.cs,MemoryStatsInternal,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Handlers.Debugging,MemoryStatsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\MemoryStatsHandler.cs,LongestCommonPrefixLength,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,IsStale,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,GetMemoryStats,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,WriteReferences,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleStaticIndexChange,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,GetIndexCreationOptions,Cyclomatic complexity of the method is 14
Complex Method,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,OpenIndexesFromRecord,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleUnusedAutoIndexes,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,TryReplaceIndexes,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,SetupPrefix,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Indexes.IndexMerging,IndexMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexMerging\IndexMerger.cs,CheckForUnsuitableIndexForMerging,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Indexes.IndexMerging,IndexMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexMerging\IndexMerger.cs,CanMergeIndexes,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,Cyclomatic complexity of the method is 30
Complex Method,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,HandleTreeReduction,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Indexes.MapReduce.Auto,ReduceMapResultsOfAutoIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\ReduceMapResultsOfAutoIndex.cs,AggregateOn,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ValidateReduceResultsCollectionName,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CheckIfThereIsAnIndexWhichWillOutputReduceDocumentsWhichWillBeUsedAsMapOnTheSpecifiedIndex,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,AnonymousLuceneDocumentConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\AnonymousLuceneDocumentConverter.cs,GetFields,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,Cyclomatic complexity of the method is 34
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetValueType,Cyclomatic complexity of the method is 20
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,UpdateFacetResults,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,ApplyAggregation,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexQueryingScope,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexQueryingScope.cs,RecordAlreadyPagedItemsInPreviousPage,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,GetSort,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,MoreLikeThis,Cyclomatic complexity of the method is 15
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexReader.cs,QueryOverSingleWord,Cyclomatic complexity of the method is 16
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,AddDocument,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene.Suggestions,JaroWinklerDistance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Suggestions\JaroWinklerDistance.cs,Matches,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Documents.Indexes.Persistence.Lucene.Suggestions,NGramDistance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Suggestions\NGramDistance.cs,GetDistance,Cyclomatic complexity of the method is 16
Complex Method,Raven.Server.Documents.Indexes.Static,DynamicBlittableJson,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\DynamicBlittableJson.cs,TryGetByName,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqOptimizer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqOptimizer.cs,VisitQueryExpression,Cyclomatic complexity of the method is 14
Complex Method,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters.ReduceIndex,QuerySyntaxRetriever,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\ReduceIndex\GroupByFieldsRetriever.cs,VisitGroupClause,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseGeoUri,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Patch,JsBlittableBridge,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\JsBlittableBridge.cs,GetObjectProperties,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Patch,PatchDocumentCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchDocumentCommand.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,IncludeDoc,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,GetDebugValue,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,TranslateToJs,Cyclomatic complexity of the method is 17
Complex Method,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,ValidateArguments,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries,Enumerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,MoveNext,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Queries,Enumerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Queries,FieldsToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,GetFieldToFetch,Cyclomatic complexity of the method is 17
Complex Method,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,AnalyzedTerm,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,GetAnalyzedWildcardTerm,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToLuceneQuery,Cyclomatic complexity of the method is 16
Complex Method,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSearch,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,GetValues,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,Unescape,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,GetValueTokenType,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,Build,Cyclomatic complexity of the method is 15
Complex Method,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSelectFunctionBody,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,Cyclomatic complexity of the method is 21
Complex Method,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,GetSelectField,Cyclomatic complexity of the method is 28
Complex Method,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,CreateFacet,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,GetUpdateBody,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitIn,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries,QueryMethod,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMethod.cs,GetMethodType,Cyclomatic complexity of the method is 27
Complex Method,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteSuggestionQuery,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Queries,WhereExpressionVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\WhereExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,VisitMethod,Cyclomatic complexity of the method is 18
Complex Method,Raven.Server.Documents.Queries.AST,QueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\QueryVisitor.cs,Visit,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMapping,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMapping.cs,Create,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,MatchIndex,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,CleanupSupercededAutoIndexes,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,Cyclomatic complexity of the method is 15
Complex Method,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,AssertMapReduceFields,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Queries.Facets,FacetedQueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetedQueryParser.cs,ProcessFacetSetup,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries.Facets,FacetField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetField.cs,GetOptions,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Queries.MoreLikeThis,RavenMoreLikeThis,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\RavenMoreLikeThis.cs,RavenMoreLikeThis,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Queries.Parser,QueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryParser.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries.Parser,QueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryParser.cs,Field,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,TryNumber,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,GetProjection,Cyclomatic complexity of the method is 14
Complex Method,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,GetProjectionFromDocument,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,TryGetValue,Cyclomatic complexity of the method is 26
Complex Method,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,GetTerms,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,GetOptions,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Replication,LiveReplicationPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\LiveReplicationPerformanceCollector.cs,PreparePerformanceStats,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,DropOutgoingConnections,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,WaitForReplicationAsync,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ParseSubscriptionQuery,Cyclomatic complexity of the method is 17
Complex Method,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteFacetResult,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteIndexDefinition,Cyclomatic complexity of the method is 13
Complex Method,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteMetadata,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteTreePagesRecursively,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Json,BlittableJsonTraverserHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverserHelper.cs,TryReadComputedProperties,Cyclomatic complexity of the method is 15
Complex Method,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,DoActualCertificateRefresh,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server,RavenServerStartup,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServerStartup.cs,MaybeSetExceptionStatusCode,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,RefreshAmbassadors,Cyclomatic complexity of the method is 17
Complex Method,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,OnVoterConfirmation,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,Build,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Routing,MatchResult,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,SearchTrie,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.ServerWide,RachisLogIndexNotifications,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,WaitForIndexNotification,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,IdleOperations,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.ServerWide.Commands,DeleteDatabaseCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\DeleteDatabaseCommand.cs,UpdateDatabaseRecord,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,UpdateDatabaseTopology,Cyclomatic complexity of the method is 26
Complex Method,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryPromote,Cyclomatic complexity of the method is 14
Complex Method,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,RemoveOtherNodesIfNeeded,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryFindFitNode,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ProcessFieldsIfNeeded,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ConvertRecordToDocumentItem,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ParseValue,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadArray,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadLegacyAttachments,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadDocuments,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadTombstones,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadConflicts,Cyclomatic complexity of the method is 10
Complex Method,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,GetType,Cyclomatic complexity of the method is 11
Complex Method,Raven.Server.Smuggler.Documents.Processors,IndexProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Processors\IndexProcessor.cs,ReadLegacyIndexDefinition,Cyclomatic complexity of the method is 16
Complex Method,Raven.Server.Smuggler.Migration,OfflineMigrationConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\OfflineMigrationConfiguration.cs,GenerateExporterCommandLine,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.SqlMigration,SqlMigrationDocumentFactory,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationDocumentFactory.cs,FromReaderInternal,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Utils,ChangeVectorUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ChangeVectorUtils.cs,GetConflictStatus,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Utils,ConflictResolverAdvisor,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ConflictResolverAdvisor.cs,TryHandleArrayValue,Cyclomatic complexity of the method is 8
Complex Method,Raven.Server.Utils,DiskSpaceChecker,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\DiskSpaceChecker.cs,GetFreeDiskSpace,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Utils,IncludeUtil,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IncludeUtil.cs,GetDocIdFromInclude,Cyclomatic complexity of the method is 12
Complex Method,Raven.Server.Utils,TypeConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\TypeConverter.cs,ToBlittableSupportedType,Cyclomatic complexity of the method is 21
Complex Method,Raven.Server.Utils,TypeConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\TypeConverter.cs,ConvertForIndexing,Cyclomatic complexity of the method is 13
Complex Method,Raven.Server.Utils,TypeConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\TypeConverter.cs,Convert,Cyclomatic complexity of the method is 17
Complex Method,Raven.Server.Utils.Cli,ConsoleMessage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\ConsoleMessage.cs,ConsoleWriteWithColor,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Utils.Cli,JavaScriptCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\JavaScriptCli.cs,CreateScript,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,StartCli,Cyclomatic complexity of the method is 24
Complex Method,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,ParseLine,Cyclomatic complexity of the method is 19
Complex Method,Raven.Server.Web.Studio,StudioCollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionsHandler.cs,WriteDocument,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Web.System,DatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabasesHandler.cs,WriteDatabaseInfo,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,VerifyPeriodicBackupConfiguration,Cyclomatic complexity of the method is 9
Complex Method,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,CollectEtlTasks,Cyclomatic complexity of the method is 10
Long Parameter List,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteAuthorizationAndGetCertificate,The method has 8 parameters. Parameters: onValdiationSuccessful' token' setupInfo' dictionary' acmeClient' challengeResult' cache' serverStore
Long Parameter List,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,InitialLetsEncryptChallenge,The method has 6 parameters. Parameters: token' setupInfo' cache' acmeClient' dictionary' serverStore
Long Parameter List,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The method has 5 parameters. Parameters: onProgress' progress' token' map' setupInfo
Long Parameter List,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,GetServerUrlFromCertificate,The method has 5 parameters. Parameters: cert' setupInfo' nodeTag' port' domain
Long Parameter List,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteClusterConfigurationAndGetSettingsZip,The method has 6 parameters. Parameters: onProgress' progress' token' setupMode' setupInfo' serverStore
Long Parameter List,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SimulateRunningServer,The method has 7 parameters. Parameters: serverCertificate' serverUrl' addresses' token' setupInfo' settingsPath' setupMode
Long Parameter List,Raven.Server.Config.Categories,ConfigurationCategory,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\ConfigurationCategory.cs,Initialize,The method has 5 parameters. Parameters: getSetting' serverDataDir' type' resourceName' throwIfThereIsNoSetMethod
Long Parameter List,Raven.Server.Dashboard,DatabasesInfoNotificationSender,C:\repos\ravendb_ravendb\src\Raven.Server\Dashboard\DatabasesInfoNotificationSender.cs,DatabasesInfoNotificationSender,The method has 5 parameters. Parameters: resourceName' serverStore' watchers' notificationsThrottle' shutdown
Long Parameter List,Raven.Server.Dashboard,DatabasesInfoNotificationSender,C:\repos\ravendb_ravendb\src\Raven.Server\Dashboard\DatabasesInfoNotificationSender.cs,SetOfflineDatabaseInfo,The method has 5 parameters. Parameters: serverStore' databaseName' existingDatabasesInfo' existingDrivesUsage' disabled
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutAttachment,The method has 8 parameters. Parameters: context' documentId' name' contentType' hash' expectedChangeVector' stream' updateDocument
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutDirect,The method has 6 parameters. Parameters: context' key' name' contentType' base64Hash' changeVector
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,UpdateDocumentAfterAttachmentChange,The method has 5 parameters. Parameters: context' lowerDocumentId' documentId' tvr' changeVector
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutRevisionAttachment,The method has 5 parameters. Parameters: context' lowerId' lowerIdSize' changeVector' attachment
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,TryGetDocumentTableValueReaderForAttachment,The method has 5 parameters. Parameters: context' documentId' name' lowerDocumentId' tvr
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachment,The method has 5 parameters. Parameters: context' documentId' name' type' changeVector
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentDirect,The method has 5 parameters. Parameters: context' documentId' name' type' changeVector
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentKey,The method has 11 parameters. Parameters: context' lowerId' lowerIdSize' lowerName' lowerNameSize' base64Hash' lowerContentTypePtr' lowerContentTypeSize' type' changeVector' keySlice
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentPartialKey,The method has 8 parameters. Parameters: context' lowerId' lowerIdSize' lowerName' lowerNameSize' type' changeVector' partialKeySlice
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentPartialKey,The method has 5 parameters. Parameters: context' key' base64HashSize' lowerContentTypeSize' partialKeySlice
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentPrefix,The method has 6 parameters. Parameters: context' lowerId' lowerIdSize' type' changeVector' prefixSlice
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentPrefix,The method has 5 parameters. Parameters: context' lowerId' type' changeVector' prefixSlice
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentKeyInternal,The method has 12 parameters. Parameters: context' lowerId' lowerIdSize' lowerName' lowerNameSize' base64Hash' lowerContentTypePtr' lowerContentTypeSize' keyType' type' changeVector' keySlice
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachment,The method has 5 parameters. Parameters: context' documentId' name' expectedChangeVector' updateDocument
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentConflicts,The method has 5 parameters. Parameters: context' lowerId' document' conflictDocument' changeVector
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentDirect,The method has 6 parameters. Parameters: context' lowerId' conflictName' conflictContentType' conflictHash' changeVector
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentDirect,The method has 6 parameters. Parameters: context' key' isPartialKey' name' expectedChangeVector' changeVector
Long Parameter List,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteInternal,The method has 5 parameters. Parameters: context' key' etag' hash' changeVector
Long Parameter List,Raven.Server.Documents,CollectionRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionRunner.cs,ExecutePatch,The method has 6 parameters. Parameters: collectionName' options' patch' patchArgs' onProgress' token
Long Parameter List,Raven.Server.Documents,CollectionRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionRunner.cs,ExecuteOperation,The method has 6 parameters. Parameters: collectionName' options' context' onProgress' action' token
Long Parameter List,Raven.Server.Documents,CollectionRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionRunner.cs,GetDocuments,The method has 5 parameters. Parameters: context' collectionName' startEtag' batchSize' isAllDocs
Long Parameter List,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,DeleteAttachmentConflicts,The method has 5 parameters. Parameters: context' lowerId' document' before' changeVector
Long Parameter List,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,MergeConflictChangeVectorIfNeededAndDeleteConflicts,The method has 5 parameters. Parameters: documentChangeVector' context' id' newEtag' document
Long Parameter List,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,AddConflict,The method has 8 parameters. Parameters: context' id' lastModifiedTicks' incomingDoc' incomingChangeVector' incomingTombstoneCollection' flags' nonPersistentFlags
Long Parameter List,Raven.Server.Documents,DatabaseRequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabaseRequestHandler.cs,DatabaseConfigurations,The method has 5 parameters. Parameters: setupConfigurationFunc' debug' beforeSetupConfiguration' fillJson' statusCode
Long Parameter List,Raven.Server.Documents,DatabaseRequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabaseRequestHandler.cs,AddPagingPerformanceHint,The method has 6 parameters. Parameters: operation' action' details' numberOfResults' pageSize' duration
Long Parameter List,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,CreateDatabaseConfiguration,The method has 5 parameters. Parameters: databaseName' ignoreDisabledDatabase' ignoreBeenDeleted' ignoreNotRelevant' databaseRecord
Long Parameter List,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetSliceFromUnicodeKey,The method has 5 parameters. Parameters: context' key' keySlice' buffer' byteCount
Long Parameter List,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,UnicodeGetLowerIdAndStorageKey,The method has 6 parameters. Parameters: context' str' lowerIdSlice' idSlice' maxStrSize' escapePositionsSize
Long Parameter List,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,PutDocument,The method has 8 parameters. Parameters: context' id' expectedChangeVector' document' lastModifiedTicks' changeVector' flags' nonPersistentFlags
Long Parameter List,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,BuildChangeVectorAndResolveConflicts,The method has 9 parameters. Parameters: context' id' lowerId' newEtag' document' changeVector' excpectedChangeVector' flags' oldValue
Long Parameter List,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,RecreateAttachments,The method has 5 parameters. Parameters: context' lowerId' document' metadata' flags
Long Parameter List,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,ShouldRecreateAttachments,The method has 6 parameters. Parameters: context' lowerId' oldDoc' document' flags' nonPersistentFlags
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetDocumentsStartingWith,The method has 8 parameters. Parameters: context' idPrefix' matches' exclude' startAfterId' start' take' collection
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetDocumentsStartingWith,The method has 7 parameters. Parameters: context' idPrefix' matches' exclude' startAfterId' start' take
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetDocuments,The method has 5 parameters. Parameters: context' ids' start' take' totalCount
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetDocuments,The method has 6 parameters. Parameters: context' ids' collection' start' take' totalCount
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetDocumentsFrom,The method has 5 parameters. Parameters: context' collection' etag' start' take
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetTombstonesFrom,The method has 5 parameters. Parameters: context' collection' etag' start' take
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Delete,The method has 9 parameters. Parameters: context' lowerId' id' expectedChangeVector' lastModifiedTicks' changeVector' collectionName' nonPersistentFlags' documentFlags
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,CreateTombstone,The method has 8 parameters. Parameters: context' lowerId' documentEtag' collectionName' docChangeVector' lastModifiedTicks' changeVector' flags
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Put,The method has 8 parameters. Parameters: context' id' excpectedChangeVector' document' lastModifiedTicks' changeVector' flags' nonPersistentFlags
Long Parameter List,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetNumberOfItemsToProcess,The method has 5 parameters. Parameters: context' collection' afterEtag' tombstones' totalCount
Long Parameter List,Raven.Server.Documents,ExecuteRateLimitedOperations<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ExecuteRateLimitedOperations.cs,ExecuteRateLimitedOperations,The method has 5 parameters. Parameters: documentIds' commandToExecute' rateGate' token' batchSize
Long Parameter List,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,EtlProcess,The method has 5 parameters. Parameters: transformation' configuration' database' serverStore' tag
Long Parameter List,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,InsertItems,The method has 5 parameters. Parameters: tableName' pkName' toInsert' token' commandCallback
Long Parameter List,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,DeleteItems,The method has 6 parameters. Parameters: tableName' pkName' parameterize' toDelete' token' commandCallback
Long Parameter List,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriterSimulator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriterSimulator.cs,GenerateDeleteItemsCommandText,The method has 5 parameters. Parameters: tableName' pkName' parameterize' toSqlItems' token
Long Parameter List,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetIdentitiesValues,The method has 6 parameters. Parameters: ctx' database' serverStore' identities' positionInListToCommandIndex' cmds
Long Parameter List,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,ReadSingleCommand,The method has 6 parameters. Parameters: ctx' stream' state' parser' buffer' token
Long Parameter List,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,ReadJsonObject,The method has 7 parameters. Parameters: ctx' stream' id' parser' state' buffer' token
Long Parameter List,Raven.Server.Documents.Handlers,DocumentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\DocumentHandler.cs,WriteDocumentsJson,The method has 5 parameters. Parameters: context' metadataOnly' documentsToWrite' includes' numberOfResults
Long Parameter List,Raven.Server.Documents.Handlers,IndexHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IndexHandler.cs,SendDataOrHeartbeatToWebSocket,The method has 5 parameters. Parameters: receive' webSocket' collector' ms' timeToWait
Long Parameter List,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,SendDataOrHeartbeatToWebSocket,The method has 5 parameters. Parameters: receive' webSocket' collector' ms' timeToWait
Long Parameter List,Raven.Server.Documents.Handlers,QueriesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\QueriesHandler.cs,ExecuteQueryOperation,The method has 5 parameters. Parameters: query' operation' context' returnContextToPool' operationType
Long Parameter List,Raven.Server.Documents.Handlers,QueriesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\QueriesHandler.cs,Debug,The method has 5 parameters. Parameters: context' debug' token' tracker' method
Long Parameter List,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,SendPerformanceStatsOrHeartbeatToWebSocket,The method has 5 parameters. Parameters: receive' webSocket' collector' ms' timeToWait
Long Parameter List,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,SendPulsesOrHeartbeatToWebSocket,The method has 5 parameters. Parameters: receive' webSocket' collector' ms' timeToWait
Long Parameter List,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,SendKeyToNodeAsync,The method has 6 parameters. Parameters: name' base64' ctx' server' node' url
Long Parameter List,Raven.Server.Documents.Handlers,StreamCsvDocumentQueryResultWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StreamCsvDocumentQueryResultWriter.cs,WriteQueryStatistics,The method has 5 parameters. Parameters: resultEtag' isStale' indexName' totalResults' timestamp
Long Parameter List,Raven.Server.Documents.Handlers,StreamingHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StreamingHandler.cs,GetQueryResultWriter,The method has 5 parameters. Parameters: format' response' context' responseBodyStream' propertiesArray
Long Parameter List,Raven.Server.Documents.Handlers.Debugging,ServerWideDebugInfoPackageHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\ServerWideDebugInfoPackageHandler.cs,WriteDebugInfoPackageForNodeAsync,The method has 6 parameters. Parameters: jsonOperationContext' archive' tag' url' databaseNames' certificate
Long Parameter List,Raven.Server.Documents.Handlers.Debugging,ServerWideDebugInfoPackageHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\ServerWideDebugInfoPackageHandler.cs,WriteForDatabase,The method has 5 parameters. Parameters: archive' jsonOperationContext' localEndpointClient' databaseName' path
Long Parameter List,Raven.Server.Documents.Indexes,BloomFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\CollectionOfBloomFilters.cs,BloomFilter,The method has 7 parameters. Parameters: key' tree' writeable' m' ptrSize' capacity' allocator
Long Parameter List,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,HandleDelete,The method has 5 parameters. Parameters: tombstone' collection' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,HandleMap,The method has 5 parameters. Parameters: lowerId' mapResults' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,StreamQuery,The method has 5 parameters. Parameters: response' writer' query' documentsContext' token
Long Parameter List,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,GetTerms,The method has 5 parameters. Parameters: field' fromValue' pageSize' documentsContext' token
Long Parameter List,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,FillFacetedQueryResult,The method has 5 parameters. Parameters: result' isStale' facetSetupEtag' documentsContext' indexContext
Long Parameter List,Raven.Server.Documents.Indexes,IndexDefinitionBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionBase.cs,IndexDefinitionBase,The method has 5 parameters. Parameters: name' collections' lockMode' priority' mapFields
Long Parameter List,Raven.Server.Documents.Indexes,MapIndexBase<T;TField>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapIndexBase.cs,HandleDelete,The method has 5 parameters. Parameters: tombstone' collection' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes,MapIndexBase<T;TField>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapIndexBase.cs,HandleMap,The method has 5 parameters. Parameters: lowerId' mapResults' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,CanReplace,The method has 5 parameters. Parameters: index' isStale' database' databaseContext' indexContext
Long Parameter List,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,CanReplace,The method has 5 parameters. Parameters: index' isStale' database' databaseContext' indexContext
Long Parameter List,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The method has 5 parameters. Parameters: index' databaseContext' indexContext' cutoff' stalenessReasons
Long Parameter List,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The method has 5 parameters. Parameters: index' databaseContext' indexContext' cutoff' stalenessReasons
Long Parameter List,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,CalculateIndexEtag,The method has 6 parameters. Parameters: index' length' indexEtagBytes' writePos' documentsContext' indexContext
Long Parameter List,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,CalculateIndexEtag,The method has 6 parameters. Parameters: index' length' indexEtagBytes' writePos' documentsContext' indexContext
Long Parameter List,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The method has 6 parameters. Parameters: index' compiled' databaseContext' indexContext' cutoff' stalenessReasons
Long Parameter List,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,CalculateIndexEtag,The method has 7 parameters. Parameters: index' compiled' length' indexEtagBytes' writePos' documentsContext' indexContext
Long Parameter List,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,GetIdentifiersOfMappedDocuments,The method has 5 parameters. Parameters: self' startsWith' start' take' docIds
Long Parameter List,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,IterateKeys,The method has 5 parameters. Parameters: it' prefix' start' take' context
Long Parameter List,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,IterateTrees,The method has 6 parameters. Parameters: self' mapEntries' reducePhaseTree' typePerHash' indexContext' scope
Long Parameter List,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,RenderTree,The method has 5 parameters. Parameters: tree' reduceKeyHash' idToDocIdHash' index' context
Long Parameter List,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,RenderNestedSection,The method has 5 parameters. Parameters: section' reduceKeyHash' idToDocIdHash' index' context
Long Parameter List,Raven.Server.Documents.Indexes.Errors,FaultyIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Errors\FaultyIndexDefinition.cs,FaultyIndexDefinition,The method has 5 parameters. Parameters: name' collections' lockMode' priority' mapFields
Long Parameter List,Raven.Server.Documents.Indexes.Errors,FaultyInMemoryIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Errors\FaultyInMemoryIndex.cs,HandleDelete,The method has 5 parameters. Parameters: tombstone' collection' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes.Errors,FaultyInMemoryIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Errors\FaultyInMemoryIndex.cs,HandleMap,The method has 5 parameters. Parameters: lowerId' mapResults' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes.Errors,FaultyInMemoryIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Errors\FaultyInMemoryIndex.cs,StreamQuery,The method has 5 parameters. Parameters: response' writer' query' documentsContext' token
Long Parameter List,Raven.Server.Documents.Indexes.Errors,FaultyInMemoryIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Errors\FaultyInMemoryIndex.cs,GetTerms,The method has 5 parameters. Parameters: field' fromValue' pageSize' documentsContext' token
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,MapReduceIndexBase<T;TField>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\MapReduceIndexBase.cs,HandleDelete,The method has 5 parameters. Parameters: tombstone' collection' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,MapReduceResultsStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\MapReduceResultsStore.cs,MapReduceResultsStore,The method has 5 parameters. Parameters: reduceKeyHash' type' indexContext' mapReduceContext' create
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,ReduceMapResultsBase,The method has 5 parameters. Parameters: index' indexDefinition' indexStorage' metrics' mapReduceContext
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,Execute,The method has 5 parameters. Parameters: databaseContext' indexContext' writeOperation' stats' token
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,CanContinueBatch,The method has 6 parameters. Parameters: documentsContext' indexingContext' stats' currentEtag' maxEtag' count
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,HandleNestedValuesReduction,The method has 6 parameters. Parameters: indexContext' stats' token' modifiedStore' writer' reduceKeyHash
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,HandleTreeReduction,The method has 8 parameters. Parameters: indexContext' stats' token' modifiedStore' lowLevelTransaction' writer' reduceKeyHash' table
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,AggregateBranchPage,The method has 5 parameters. Parameters: page' table' indexContext' remainingBranchesToAggregate' token
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,LogReductionError,The method has 6 parameters. Parameters: error' reduceKeyHash' stats' updateStats' page' numberOfNestedValues
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndex.cs,HandleMap,The method has 5 parameters. Parameters: lowerId' mapResults' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce.Auto,ReduceMapResultsOfAutoIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\ReduceMapResultsOfAutoIndex.cs,ReduceMapResultsOfAutoIndex,The method has 5 parameters. Parameters: index' indexDefinition' indexStorage' metrics' mapReduceContext
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,HandleDelete,The method has 5 parameters. Parameters: tombstone' collection' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,HandleMap,The method has 5 parameters. Parameters: lowerId' mapResults' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndexDefinition.cs,MapReduceIndexDefinition,The method has 5 parameters. Parameters: definition' collections' outputFields' groupByFields' hasDynamicFields
Long Parameter List,Raven.Server.Documents.Indexes.MapReduce.Static,ReduceMapResultsOfStaticIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\ReduceMapResultsOfStaticIndex.cs,ReduceMapResultsOfStaticIndex,The method has 6 parameters. Parameters: index' reducingFunc' indexDefinition' indexStorage' metrics' mapReduceContext
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,Win32NativeMethods,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\CollationKeyFilter.cs,LCMapStringEx,The method has 9 parameters. Parameters: lpLocaleName' dwMapFlags' lpSrcStr' cchSrc' lpDestStr' cchDest' lpVersionInformation' lpReserved' sortHandle
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,PosixNativeMethods,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\CollationKeyFilter.cs,GetSortKey,The method has 6 parameters. Parameters: sortHandle' str' strLength' sortKey' sortKeyLength' options
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The method has 5 parameters. Parameters: instance' field' value' indexContext' nestedArray
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetComplexObjectFields,The method has 5 parameters. Parameters: path' val' storage' indexing' termVector
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateField,The method has 7 parameters. Parameters: name' value' lazyValue' blittableValue' store' index' termVector
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,FieldCacheKey,The method has 5 parameters. Parameters: name' index' store' termVector' multipleItemsSameField
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,IsSame,The method has 5 parameters. Parameters: name' index' store' termVector' multipleItemsSameField
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,IsSame,The method has 5 parameters. Parameters: name' index' store' termVector' multipleItemsSameField
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,GetHashCode,The method has 5 parameters. Parameters: name' index' store' termVector' multipleItemsSameField
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,GetHashCode,The method has 5 parameters. Parameters: name' index' store' termVector' multipleItemsSameField
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexedTerms,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexedTerms.cs,GetTermsAndDocumentsFor,The method has 5 parameters. Parameters: reader' docBase' field' indexName' state
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,IndexFacetedReadOperation,The method has 7 parameters. Parameters: index' fields' directory' searcherHolder' queryBuilderFactories' readTransaction' documentDatabase
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,ApplyAggregation,The method has 6 parameters. Parameters: aggregations' value' docsInQuery' indexReader' docBase' state
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexOperationBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexOperationBase.cs,GetLuceneQuery,The method has 5 parameters. Parameters: metadata' whereExpression' parameters' analyzer' factories
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexQueryingScope,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexQueryingScope.cs,IndexQueryingScope,The method has 6 parameters. Parameters: indexType' query' fieldsToFetch' searcher' retriever' state
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IndexReadOperation,The method has 5 parameters. Parameters: index' directory' searcherHolder' queryBuilderFactories' readTransaction
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,Query,The method has 8 parameters. Parameters: query' fieldsToFetch' totalResults' skippedResults' retriever' documentsContext' getSpatialField' token
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The method has 8 parameters. Parameters: query' fieldsToFetch' totalResults' skippedResults' retriever' documentsContext' getSpatialField' token
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IndexEntries,The method has 5 parameters. Parameters: query' totalResults' documentsContext' getSpatialField' token
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexWriteOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexWriteOperation.cs,IndexWriteOperation,The method has 5 parameters. Parameters: index' directory' converter' writeTransaction' persistence
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneIndexWriter.cs,LuceneIndexWriter,The method has 7 parameters. Parameters: d' a' deletionPolicy' mfl' indexReaderWarmer' documentDatabase' state
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,LuceneSuggestionIndexWriter,The method has 6 parameters. Parameters: field' directory' snapshotter' maxFieldLength' database' state
Long Parameter List,Raven.Server.Documents.Indexes.Persistence.Lucene,OutputReduceIndexWriteOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\OutputReduceIndexWriteOperation.cs,OutputReduceIndexWriteOperation,The method has 5 parameters. Parameters: index' directory' converter' writeTransaction' persistence
Long Parameter List,Raven.Server.Documents.Indexes.Static,CurrentIndexingScope,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\CurrentIndexingScope.cs,CurrentIndexingScope,The method has 5 parameters. Parameters: documentsStorage' documentsContext' indexDefinition' indexContext' getSpatialField
Long Parameter List,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,HandleDelete,The method has 5 parameters. Parameters: tombstone' collection' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,CleanupDeletedDocuments,The method has 5 parameters. Parameters: index' documentsStorage' indexStorage' configuration' mapReduceContext
Long Parameter List,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,Execute,The method has 5 parameters. Parameters: databaseContext' indexContext' writeOperation' stats' token
Long Parameter List,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,CanContinueBatch,The method has 6 parameters. Parameters: documentsContext' indexingContext' stats' currentEtag' maxEtag' count
Long Parameter List,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleReferences,The method has 5 parameters. Parameters: index' referencedCollections' documentsStorage' indexStorage' configuration
Long Parameter List,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,Execute,The method has 5 parameters. Parameters: databaseContext' indexContext' writeOperation' stats' token
Long Parameter List,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,CanContinueBatch,The method has 6 parameters. Parameters: documentsContext' indexingContext' stats' currentEtag' maxEtag' count
Long Parameter List,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The method has 8 parameters. Parameters: actionType' databaseContext' indexContext' writeOperation' stats' pageSize' maxTimeForDocumentTransactionToRemainOpen' token
Long Parameter List,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDelete,The method has 5 parameters. Parameters: tombstone' collection' writer' indexContext' stats
Long Parameter List,Raven.Server.Documents.Indexes.Workers,IIndexingWork,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\IIndexingWork.cs,Execute,The method has 5 parameters. Parameters: databaseContext' indexContext' writeOperation' stats' token
Long Parameter List,Raven.Server.Documents.Indexes.Workers,IIndexingWork,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\IIndexingWork.cs,CanContinueBatch,The method has 6 parameters. Parameters: documentsContext' indexingContext' stats' currentEtag' maxEtag' count
Long Parameter List,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,MapDocuments,The method has 5 parameters. Parameters: index' documentsStorage' indexStorage' mapReduceContext' configuration
Long Parameter List,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,Execute,The method has 5 parameters. Parameters: databaseContext' indexContext' writeOperation' stats' token
Long Parameter List,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,CanContinueBatch,The method has 6 parameters. Parameters: documentsContext' indexingContext' stats' currentEtag' maxEtag' count
Long Parameter List,Raven.Server.Documents.Operations,Operations,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Operations\Operations.cs,AddOperation,The method has 6 parameters. Parameters: database' description' operationType' taskFactory' id' token
Long Parameter List,Raven.Server.Documents.Patch,BlittableObjectInstance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\BlittableObjectInstance.cs,BlittableObjectInstance,The method has 6 parameters. Parameters: engine' parent' blittable' docId' lastModified' changeVector
Long Parameter List,Raven.Server.Documents.Patch,JsBlittableBridge,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\JsBlittableBridge.cs,Translate,The method has 5 parameters. Parameters: context' scriptEngine' objectInstance' modifier' usageMode
Long Parameter List,Raven.Server.Documents.Patch,PatchDocumentCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchDocumentCommand.cs,PatchDocumentCommand,The method has 10 parameters. Parameters: context' id' expectedChangeVector' skipPatchIfChangeVectorMismatch' patch' patchIfMissing' database' isTest' debugMode' collectResultsNeeded
Long Parameter List,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsClient.cs,RavenAwsClient,The method has 5 parameters. Parameters: awsAccessKey' awsSecretKey' awsRegionName' uploadProgress' cancellationToken
Long Parameter List,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,RavenAwsGlacierClient,The method has 6 parameters. Parameters: awsAccessKey' awsSecretKey' awsRegionName' vaultName' uploadProgress' cancellationToken
Long Parameter List,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,UploadPart,The method has 5 parameters. Parameters: baseStream' client' url' length' retryCount
Long Parameter List,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsS3Client,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsS3Client.cs,RavenAwsS3Client,The method has 6 parameters. Parameters: awsAccessKey' awsSecretKey' awsRegionName' bucketName' uploadProgress' cancellationToken
Long Parameter List,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsS3Client,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsS3Client.cs,UploadPart,The method has 5 parameters. Parameters: baseStream' client' url' length' retryCount
Long Parameter List,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,RavenAzureClient,The method has 6 parameters. Parameters: accountName' accountKey' containerName' uploadProgress' cancellationToken' isTest
Long Parameter List,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,PutBlock,The method has 5 parameters. Parameters: baseStream' client' url' length' retryCount
Long Parameter List,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,GetFileName,The method has 5 parameters. Parameters: isFullBackup' backupFolder' now' backupType' backupFilePath
Long Parameter List,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,CreateLocalBackupOrSnapshot,The method has 7 parameters. Parameters: configuration' isFullBackup' status' backupFilePath' startDocumentEtag' context' tx
Long Parameter List,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,UploadToServer,The method has 6 parameters. Parameters: configuration' backupStatus' backupPath' folderName' fileName' isFullBackup
Long Parameter List,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,CreateUploadTaskIfNeeded,The method has 7 parameters. Parameters: settings' tasks' backupPath' isFullBackup' uploadToServer' uploadStatus' backupDestination
Long Parameter List,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,UploadToS3,The method has 6 parameters. Parameters: settings' stream' folderName' fileName' uploadProgress' archiveDescription
Long Parameter List,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,UploadToGlacier,The method has 5 parameters. Parameters: settings' stream' folderName' fileName' uploadProgress
Long Parameter List,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,UploadToFtp,The method has 5 parameters. Parameters: settings' stream' folderName' fileName' uploadProgress
Long Parameter List,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,UploadToAzure,The method has 6 parameters. Parameters: settings' stream' folderName' fileName' uploadProgress' archiveDecription
Long Parameter List,Raven.Server.Documents.PeriodicBackup,RavenFtpClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RavenFtpClient.cs,RavenFtpClient,The method has 8 parameters. Parameters: url' port' userName' password' certificateAsBase64' certificateFileName' uploadProgress' cancellationToken
Long Parameter List,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,RestoreFromLastFile,The method has 5 parameters. Parameters: onProgress' database' lastFile' context' result
Long Parameter List,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,SmugglerRestore,The method has 6 parameters. Parameters: backupDirectory' database' context' databaseRecord' onProgress' result
Long Parameter List,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,ImportSingleBackupFile,The method has 8 parameters. Parameters: database' onProgress' restoreResult' filePath' context' destination' options' onIndexAction
Long Parameter List,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecuteStreamQuery,The method has 5 parameters. Parameters: query' documentsContext' response' writer' token
Long Parameter List,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecuteDeleteQuery,The method has 5 parameters. Parameters: query' options' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecutePatchQuery,The method has 7 parameters. Parameters: query' options' patch' patchArgs' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecuteDelete,The method has 6 parameters. Parameters: query' index' options' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecutePatch,The method has 8 parameters. Parameters: query' index' options' patch' patchArgs' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecuteOperation,The method has 7 parameters. Parameters: query' index' options' context' onProgress' func' token
Long Parameter List,Raven.Server.Documents.Queries,CollectionQueryEnumerable,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,CollectionQueryEnumerable,The method has 8 parameters. Parameters: database' documents' fieldsToFetch' collection' query' context' includeDocumentsCommand' totalResults
Long Parameter List,Raven.Server.Documents.Queries,Enumerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,Enumerator,The method has 9 parameters. Parameters: database' documents' fieldsToFetch' collection' isAllDocsCollection' query' context' includeDocumentsCommand' totalResults
Long Parameter List,Raven.Server.Documents.Queries,FieldsToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,GetFieldToFetch,The method has 6 parameters. Parameters: indexDefinition' selectField' results' selectFieldKey' anyExtractableFromIndex' extractAllStoredFields
Long Parameter List,Raven.Server.Documents.Queries,FieldsToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,GetFieldsToFetch,The method has 5 parameters. Parameters: selectFields' indexDefinition' anyExtractableFromIndex' extractAllStoredFields' singleFieldNoAlias
Long Parameter List,Raven.Server.Documents.Queries,FieldToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,FieldToFetch,The method has 5 parameters. Parameters: name' queryField' projectedName' canExtractFromIndex' isDocumentId
Long Parameter List,Raven.Server.Documents.Queries,InvalidQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\InvalidQueryRunner.cs,ExecuteStreamQuery,The method has 5 parameters. Parameters: query' documentsContext' response' writer' token
Long Parameter List,Raven.Server.Documents.Queries,InvalidQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\InvalidQueryRunner.cs,ExecuteDeleteQuery,The method has 5 parameters. Parameters: query' options' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,InvalidQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\InvalidQueryRunner.cs,ExecutePatchQuery,The method has 7 parameters. Parameters: query' options' patch' patchArgs' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,IStreamQueryResultWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\IStreamDocumentQueryResultWriter.cs,WriteQueryStatistics,The method has 5 parameters. Parameters: resultEtag' isStale' indexName' totalResults' timestamp
Long Parameter List,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,Between,The method has 5 parameters. Parameters: fieldName' termType' fromValue' toValue' exact
Long Parameter List,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,Term,The method has 6 parameters. Parameters: fieldName' term' type' boost' similarity' exact
Long Parameter List,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,AnalyzedTerm,The method has 6 parameters. Parameters: fieldName' term' type' analyzer' boost' similarity
Long Parameter List,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,CreateRange,The method has 8 parameters. Parameters: fieldName' minValue' minValueType' inclusiveMin' maxValue' maxValueType' inclusiveMax' exact
Long Parameter List,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,CreateRange,The method has 5 parameters. Parameters: fieldName' minValue' inclusiveMin' maxValue' inclusiveMax
Long Parameter List,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,CreateRange,The method has 5 parameters. Parameters: fieldName' minValue' inclusiveMin' maxValue' inclusiveMax
Long Parameter List,Raven.Server.Documents.Queries,OrderByField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\OrderByField.cs,OrderByField,The method has 5 parameters. Parameters: name' orderingType' ascending' method' arguments
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,BuildQuery,The method has 5 parameters. Parameters: metadata' whereExpression' parameters' analyzer' factories
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,BuildMoreLikeThisQuery,The method has 6 parameters. Parameters: context' metadata' whereExpression' parameters' analyzer' factories
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToMoreLikeThisQuery,The method has 9 parameters. Parameters: context' query' expression' metadata' parameters' analyzer' factories' baseDocument' options
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToLuceneQuery,The method has 7 parameters. Parameters: query' expression' metadata' parameters' analyzer' factories' exact
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleLucene,The method has 5 parameters. Parameters: query' expression' metadata' parameters' analyzer
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleBoost,The method has 7 parameters. Parameters: query' expression' metadata' parameters' analyzer' factories' exact
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleRegex,The method has 5 parameters. Parameters: query' expression' metadata' parameters' factories
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSearch,The method has 5 parameters. Parameters: query' expression' metadata' parameters' analyzer
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSpatial,The method has 6 parameters. Parameters: query' expression' metadata' parameters' spatialMethod' getSpatialField
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleWkt,The method has 6 parameters. Parameters: query' expression' metadata' parameters' fieldName' spatialField
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleCircle,The method has 6 parameters. Parameters: query' expression' metadata' parameters' fieldName' spatialField
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,GetSpatialUnits,The method has 5 parameters. Parameters: query' value' metadata' parameters' fieldName
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleExact,The method has 6 parameters. Parameters: query' expression' metadata' parameters' analyzer' factories
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,GetValue,The method has 5 parameters. Parameters: query' metadata' parameters' expression' allowObjectsInParameters
Long Parameter List,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ThrowMethodExpectsArgumentOfTheFollowingType,The method has 5 parameters. Parameters: methodName' expectedType' gotType' queryText' parameters
Long Parameter List,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,AddWhereField,The method has 7 parameters. Parameters: fieldName' parameters' search' exact' spatial' operatorType' isNegated
Long Parameter List,Raven.Server.Documents.Queries,ExpressionEvaluator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExpressionEvaluator,The method has 5 parameters. Parameters: metadata' operatorType' left' right' parameters
Long Parameter List,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteStreamQuery,The method has 5 parameters. Parameters: query' documentsContext' response' writer' token
Long Parameter List,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteGetTermsQuery,The method has 7 parameters. Parameters: indexName' field' fromValue' existingResultEtag' pageSize' context' token
Long Parameter List,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteDeleteQuery,The method has 5 parameters. Parameters: query' options' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecutePatchQuery,The method has 7 parameters. Parameters: query' options' patch' patchArgs' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,SelectField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\SelectField.cs,Create,The method has 8 parameters. Parameters: name' alias' sourceAlias' array' hasSourceAlias' isParameter' isQuoted' loadFromAlias
Long Parameter List,Raven.Server.Documents.Queries,StaticIndexQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\StaticIndexQueryRunner.cs,ExecuteStreamQuery,The method has 5 parameters. Parameters: query' documentsContext' response' writer' token
Long Parameter List,Raven.Server.Documents.Queries,StaticIndexQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\StaticIndexQueryRunner.cs,ExecuteDeleteQuery,The method has 5 parameters. Parameters: query' options' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,StaticIndexQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\StaticIndexQueryRunner.cs,ExecutePatchQuery,The method has 7 parameters. Parameters: query' options' patch' patchArgs' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries,StreamJsonDocumentQueryResultWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\StreamJsonDocumentQueryResultWriter.cs,WriteQueryStatistics,The method has 5 parameters. Parameters: resultEtag' isStale' indexName' totalResults' timestamp
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,ExecuteStreamQuery,The method has 5 parameters. Parameters: query' documentsContext' response' writer' token
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,ExecuteDeleteQuery,The method has 5 parameters. Parameters: query' options' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,ExecutePatchQuery,The method has 7 parameters. Parameters: query' options' patch' patchArgs' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,ExecuteCollectionQuery,The method has 5 parameters. Parameters: resultToFill' query' collection' context' cancellationToken
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMappingItem,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMappingItem.cs,DynamicQueryMappingItem,The method has 7 parameters. Parameters: name' aggregationOperation' groupByArrayBehavior' isSpecifiedInWhere' isFullTextSearch' isExactSearch' spatial
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMappingItem,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMappingItem.cs,Create,The method has 5 parameters. Parameters: name' aggregation' isFullTextSearch' isExactSearch' spatial
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,ExecuteStreamQuery,The method has 5 parameters. Parameters: query' documentsContext' response' writer' token
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,ExecuteDeleteQuery,The method has 5 parameters. Parameters: query' options' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,ExecutePatchQuery,The method has 7 parameters. Parameters: query' options' patch' patchArgs' context' onProgress' token
Long Parameter List,Raven.Server.Documents.Queries.Results,MapQueryResultRetriever,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\MapQueryResultRetriever.cs,MapQueryResultRetriever,The method has 6 parameters. Parameters: database' query' documentsStorage' context' fieldsToFetch' includeDocumentsCommand
Long Parameter List,Raven.Server.Documents.Queries.Results,MapReduceQueryResultRetriever,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\MapReduceQueryResultRetriever.cs,MapReduceQueryResultRetriever,The method has 6 parameters. Parameters: database' query' documentsStorage' context' fieldsToFetch' includeDocumentsCommand
Long Parameter List,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,QueryResultRetrieverBase,The method has 7 parameters. Parameters: database' query' fieldsToFetch' documentsStorage' context' reduceResults' includeDocumentsCommand
Long Parameter List,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,GetProjectionFromDocument,The method has 6 parameters. Parameters: doc' luceneDoc' score' fieldsToFetch' context' state
Long Parameter List,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,TryGetValue,The method has 5 parameters. Parameters: fieldToFetch' document' luceneDoc' state' value
Long Parameter List,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,HandleConflictForDocument,The method has 8 parameters. Parameters: documentsContext' id' collection' lastModifiedTicks' doc' changeVector' conflictedChangeVector' flags
Long Parameter List,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,TryResolveIdenticalDocument,The method has 5 parameters. Parameters: context' id' incomingDoc' lastModifiedTicks' incomingChangeVector
Long Parameter List,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The method has 5 parameters. Parameters: documentsContext' replicatedItemsCount' attachmentStreamCount' lastEtag' stats
Long Parameter List,Raven.Server.Documents.Replication,InterruptibleRead,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\InterruptibleRead.cs,ParseToMemory,The method has 5 parameters. Parameters: interrupt' debugTag' timeout' buffer' token
Long Parameter List,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,OutgoingReplicationHandler,The method has 5 parameters. Parameters: parent' database' node' external' connectionInfo
Long Parameter List,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,TryResolveConflictByScriptInternal,The method has 5 parameters. Parameters: context' scriptResolver' conflicts' collection' resolvedConflict
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,ShouldVersionDocument,The method has 6 parameters. Parameters: collectionName' nonPersistentFlags' existingDocument' document' documentFlags' configuration
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Put,The method has 9 parameters. Parameters: context' id' document' flags' nonPersistentFlags' changeVector' lastModifiedTicks' configuration' collectionName
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,DeleteOldRevisions,The method has 7 parameters. Parameters: context' table' lowerId' collectionName' configuration' nonPersistentFlags' changeVector
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,DeleteOldRevisions,The method has 8 parameters. Parameters: context' table' prefixSlice' collectionName' configuration' revisionsCount' nonPersistentFlags' changeVector
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,DeleteRevisions,The method has 7 parameters. Parameters: context' table' prefixSlice' collectionName' numberOfRevisionsToDelete' minimumTimeToKeep' changeVector
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,CreateTombstone,The method has 5 parameters. Parameters: context' keySlice' revisionEtag' collectionName' changeVector
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Delete,The method has 8 parameters. Parameters: context' id' lowerId' collectionName' changeVector' lastModifiedTicks' nonPersistentFlags' flags
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Delete,The method has 7 parameters. Parameters: context' id' deleteRevisionDocument' changeVector' lastModifiedTicks' nonPersistentFlags' flags
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Delete,The method has 10 parameters. Parameters: context' lowerId' idSlice' id' collectionName' deleteRevisionDocument' changeVector' lastModifiedTicks' nonPersistentFlags' flags
Long Parameter List,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,GetRevisions,The method has 5 parameters. Parameters: context' prefixSlice' lastKey' start' take
Long Parameter List,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,SubscriptionDocumentsFetcher,The method has 8 parameters. Parameters: db' maxBatchSize' subscriptionId' remoteEndpoint' collection' revisions' subscription' patch
Long Parameter List,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,ShouldSendDocument,The method has 7 parameters. Parameters: subscriptionState' run' patch' dbContext' doc' transformResult' exception
Long Parameter List,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,ShouldSendDocumentWithRevisions,The method has 8 parameters. Parameters: subscriptionState' run' patch' dbContext' item' revision' transformResult' exception
Long Parameter List,Raven.Server.Extensions,WhoIsLocking,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\WhoIsLocking.cs,RmRegisterResources,The method has 7 parameters. Parameters: pSessionHandle' nFiles' rgsFilenames' nApplications' rgApplications' nServices' rgsServiceNames
Long Parameter List,Raven.Server.Extensions,WhoIsLocking,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\WhoIsLocking.cs,RmGetList,The method has 5 parameters. Parameters: dwSessionHandle' pnProcInfoNeeded' pnProcInfo' rgAffectedApps' lpdwRebootReasons
Long Parameter List,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteDocumentQueryResult,The method has 5 parameters. Parameters: writer' context' result' metadataOnly' numberOfResults
Long Parameter List,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteQueryResult,The method has 6 parameters. Parameters: writer' context' result' metadataOnly' numberOfResults' partial
Long Parameter List,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteDocuments,The method has 5 parameters. Parameters: writer' context' documents' metadataOnly' numberOfResults
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects,DatabaseIndexScalarObjectBase<TData>,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\DatabaseIndexScalarObjectBase.cs,DatabaseIndexScalarObjectBase,The method has 6 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex' dots
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexErrors,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexErrors.cs,DatabaseIndexErrors,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexExists,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexExists.cs,DatabaseIndexExists,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexIsInvalid,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexIsInvalid.cs,DatabaseIndexIsInvalid,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexLastIndexingTime,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexLastIndexingTime.cs,DatabaseIndexLastIndexingTime,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexLastQueryTime,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexLastQueryTime.cs,DatabaseIndexLastQueryTime,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexLockMode,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexLockMode.cs,DatabaseIndexLockMode,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexMapsPerSec,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexMapsPerSec.cs,DatabaseIndexMapsPerSec,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexName,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexName.cs,DatabaseIndexName,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexPriority,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexPriority.cs,DatabaseIndexPriority,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexReducesPerSec,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexReducesPerSec.cs,DatabaseIndexReducesPerSec,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexState,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexState.cs,DatabaseIndexState,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexStatus,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexStatus.cs,DatabaseIndexStatus,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexTimeSinceLastIndexing,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexTimeSinceLastIndexing.cs,DatabaseIndexTimeSinceLastIndexing,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexTimeSinceLastQuery,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexTimeSinceLastQuery.cs,DatabaseIndexTimeSinceLastQuery,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseIndexType,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\4\DatabaseIndexType.cs,DatabaseIndexType,The method has 5 parameters. Parameters: databaseName' indexName' landlord' databaseIndex' indexIndex
Long Parameter List,Raven.Server.NotificationCenter,NotificationsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationsStorage.cs,Store,The method has 5 parameters. Parameters: id' createdAt' postponedUntil' action' tx
Long Parameter List,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,Add,The method has 6 parameters. Parameters: operation' action' details' numberOfResults' pageSize' duration
Long Parameter List,Raven.Server.NotificationCenter,RequestTimeTracker,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\RequestTimeTracker.cs,RequestTimeTracker,The method has 5 parameters. Parameters: context' logger' database' source' doPerformanceHintIfTooLong
Long Parameter List,Raven.Server.NotificationCenter.Notifications,AlertRaised,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\AlertRaised.cs,Create,The method has 7 parameters. Parameters: database' title' msg' type' severity' key' details
Long Parameter List,Raven.Server.NotificationCenter.Notifications,DatabaseStatsChanged,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\DatabaseStatsChanged.cs,Create,The method has 10 parameters. Parameters: database' countOfConflicts' countOfDocs' countOfIndexes' countOfStaleIndexes' globalChangeVector' lastEtag' countOfIndexingErrors' lastIndexingErrorTime' modifiedCollections
Long Parameter List,Raven.Server.NotificationCenter.Notifications,OperationChanged,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\OperationChanged.cs,Create,The method has 5 parameters. Parameters: database' id' description' state' killable
Long Parameter List,Raven.Server.NotificationCenter.Notifications,PerformanceHint,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\PerformanceHint.cs,Create,The method has 7 parameters. Parameters: database' title' msg' type' notificationSeverity' source' details
Long Parameter List,Raven.Server.NotificationCenter.Notifications.Details,PagingPerformanceDetails,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\Details\PagingPerformanceDetails.cs,Update,The method has 6 parameters. Parameters: action' details' numberOfResults' pageSize' duration' occurrence
Long Parameter List,Raven.Server.NotificationCenter.Notifications.Server,ClusterTopologyChanged,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\Server\ClusterTopologyChanged.cs,Create,The method has 6 parameters. Parameters: clusterTopology' leaderTag' nodeTag' term' status' nodeLicenseDetails
Long Parameter List,Raven.Server.Rachis,CandidateAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\CandidateAmbassador.cs,CandidateAmbassador,The method has 5 parameters. Parameters: engine' candidate' tag' url' certificate
Long Parameter List,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,FollowerAmbassador,The method has 7 parameters. Parameters: engine' leader' wakeLeader' tag' url' certificate' connection
Long Parameter List,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,TryModifyTopology,The method has 6 parameters. Parameters: nodeTag' nodeUrl' modification' task' validateNotInTopology' beforeCommit
Long Parameter List,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,SetNewState,The method has 5 parameters. Parameters: rachisState' disposable' expectedTerm' stateChangedReason' beforeStateChangedEvent
Long Parameter List,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,SetNewStateInTx,The method has 6 parameters. Parameters: context' rachisState' disposable' expectedTerm' stateChangedReason' beforeStateChangedEvent
Long Parameter List,Raven.Server.Rachis,RachisStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisStateMachine.cs,Apply,The method has 5 parameters. Parameters: context' cmd' index' leader' serverStore
Long Parameter List,Raven.Server.Routing,RouteInformation,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RouteInformation.cs,RouteInformation,The method has 5 parameters. Parameters: method' path' authorizationStatus' skipUsagesCount' isDebugInformationEndpoint
Long Parameter List,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,Build,The method has 6 parameters. Parameters: current' source' sortedKeys' matchStart' start' count
Long Parameter List,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,HandleStarRoute,The method has 6 parameters. Parameters: current' source' sortedKeys' matchStart' start' count
Long Parameter List,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,AddChild,The method has 6 parameters. Parameters: current' source' sortedKeys' matchingIndex' childStart' childCount
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Apply,The method has 5 parameters. Parameters: context' cmd' index' leader' serverStore
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,SetValueForTypedDatabaseCommand,The method has 6 parameters. Parameters: context' type' cmd' index' leader' result
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,DeleteDatabaseRecord,The method has 5 parameters. Parameters: context' index' items' lowerKey' databaseName
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,UpdateValue,The method has 5 parameters. Parameters: index' items' lowerKey' key' updated
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,SetDatabaseValues,The method has 5 parameters. Parameters: databaseValues' databaseName' context' index' items
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,DeleteValue,The method has 5 parameters. Parameters: context' type' cmd' index' leader
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,DeleteMultipleValues,The method has 5 parameters. Parameters: context' type' cmd' index' leader
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,UpdateValue,The method has 5 parameters. Parameters: context' type' cmd' index' leader
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,PutValue,The method has 5 parameters. Parameters: context' type' cmd' index' leader
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,UpdateDatabase,The method has 6 parameters. Parameters: context' type' cmd' index' leader' serverStore
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,CompareExchange,The method has 5 parameters. Parameters: context' type' cmd' index' result
Long Parameter List,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,GetCmpXchgByPrefix,The method has 5 parameters. Parameters: context' dbName' prefix' currentPage' pageSize
Long Parameter List,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The method has 5 parameters. Parameters: context' name' secretKey' overwrite' cloneKey
Long Parameter List,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,ToggleTaskState,The method has 5 parameters. Parameters: taskId' taskName' type' disable' dbName
Long Parameter List,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,WriteDatabaseRecordAsync,The method has 5 parameters. Parameters: databaseName' record' index' databaseValues' isRestore
Long Parameter List,Raven.Server.ServerWide.Commands,IncrementClusterIdentitiesBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\IncrementClusterIdentitiesBatchCommand.cs,Execute,The method has 6 parameters. Parameters: context' items' index' record' state' result
Long Parameter List,Raven.Server.ServerWide.Commands,IncrementClusterIdentitiesBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\IncrementClusterIdentitiesBatchCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands,IncrementClusterIdentityCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\IncrementClusterIdentityCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands,IncrementClusterIdentityCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\IncrementClusterIdentityCommand.cs,Execute,The method has 6 parameters. Parameters: context' items' index' record' state' result
Long Parameter List,Raven.Server.ServerWide.Commands,UpdateClusterIdentityCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\UpdateClusterIdentityCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands,UpdateClusterIdentityCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\UpdateClusterIdentityCommand.cs,Execute,The method has 6 parameters. Parameters: context' items' index' record' state' result
Long Parameter List,Raven.Server.ServerWide.Commands,UpdateValueForDatabaseCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\UpdateValueForDatabaseCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands,UpdateValueForDatabaseCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\UpdateValueForDatabaseCommand.cs,Execute,The method has 6 parameters. Parameters: context' items' index' record' state' result
Long Parameter List,Raven.Server.ServerWide.Commands.ETL,RemoveEtlProcessStateCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\ETL\DeleteEtlProcessStateCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands.ETL,UpdateEtlProcessStateCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\ETL\UpdateEtlProcessStateCommand.cs,UpdateEtlProcessStateCommand,The method has 6 parameters. Parameters: databaseName' configurationName' transformationName' lastProcessedEtag' changeVector' nodeTag
Long Parameter List,Raven.Server.ServerWide.Commands.ETL,UpdateEtlProcessStateCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\ETL\UpdateEtlProcessStateCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands.Monitoring.Snmp,UpdateSnmpDatabaseIndexesMappingCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Monitoring\Snmp\UpdateSnmpDatabaseIndexesMappingCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' previousValue' state
Long Parameter List,Raven.Server.ServerWide.Commands.PeriodicBackup,UpdatePeriodicBackupStatusCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\PeriodicBackup\UpdatePeriodicBackupStatusCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands.Subscriptions,AcknowledgeSubscriptionBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\AcknowledgeSubscriptionBatchCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands.Subscriptions,DeleteSubscriptionCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\DeleteSubscriptionCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands.Subscriptions,DeleteSubscriptionCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\DeleteSubscriptionCommand.cs,Execute,The method has 6 parameters. Parameters: context' items' index' record' state' result
Long Parameter List,Raven.Server.ServerWide.Commands.Subscriptions,PutSubscriptionCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\PutSubscriptionCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands.Subscriptions,PutSubscriptionCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\PutSubscriptionCommand.cs,Execute,The method has 6 parameters. Parameters: context' items' index' record' state' result
Long Parameter List,Raven.Server.ServerWide.Commands.Subscriptions,ToggleSubscriptionStateCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\ToggleSubscriptionStateCommand.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Commands.Subscriptions,ToggleSubscriptionStateCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\ToggleSubscriptionStateCommand.cs,Execute,The method has 6 parameters. Parameters: context' items' index' record' state' result
Long Parameter List,Raven.Server.ServerWide.Commands.Subscriptions,UpdateSubscriptionClientConnectionTime,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\UpdateSubscriptionClientConnectionTime.cs,GetUpdatedValue,The method has 5 parameters. Parameters: index' record' context' existingValue' state
Long Parameter List,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ClusterNode,The method has 5 parameters. Parameters: clusterTag' url' contextPool' parent' token
Long Parameter List,Raven.Server.ServerWide.Maintenance,ClusterNodeStatusReport,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterNodeStatusReport.cs,ClusterNodeStatusReport,The method has 5 parameters. Parameters: report' reportStatus' error' updateDateTime' lastSuccessfulReport
Long Parameter List,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,ClusterObserver,The method has 5 parameters. Parameters: server' maintenance' engine' contextPool' token
Long Parameter List,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,UpdateDatabaseTopology,The method has 6 parameters. Parameters: dbName' record' clusterTopology' current' previous' deletions
Long Parameter List,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryGetMentorNode,The method has 5 parameters. Parameters: dbName' topology' clusterTopology' promotable' mentorNode
Long Parameter List,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryPromote,The method has 6 parameters. Parameters: dbName' topology' current' previous' mentorNode' promotable
Long Parameter List,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,RemoveOtherNodesIfNeeded,The method has 5 parameters. Parameters: dbName' record' clusterTopology' current' deletions
Long Parameter List,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryFindFitNode,The method has 6 parameters. Parameters: badNode' db' topology' clusterTopology' current' bestNode
Long Parameter List,Raven.Server.ServerWide.Memory,MemoryUsageGuard,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Memory\MemoryUsageGuard.cs,TryIncreasingMemoryUsageForThread,The method has 5 parameters. Parameters: threadStats' currentMaximumAllowedMemory' isRunningOn32Bits' logger' currentUsage
Long Parameter List,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,DatabaseSmuggler,The method has 8 parameters. Parameters: database' source' destination' time' options' result' onProgress' token
Long Parameter List,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,ExportDatabaseInternal,The method has 5 parameters. Parameters: options' startDocumentEtag' onProgress' context' token
Long Parameter List,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,ImportDocumentsFromCsvStream,The method has 7 parameters. Parameters: stream' context' entity' options' result' onProgress' token
Long Parameter List,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,DoImportInternal,The method has 6 parameters. Parameters: context' stream' options' result' onProgress' token
Long Parameter List,Raven.Server.Smuggler.Migration,AbstractMigrator,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\AbstractMigrator.cs,AbstractMigrator,The method has 6 parameters. Parameters: serverUrl' databaseName' result' onProgress' database' cancelToken
Long Parameter List,Raven.Server.Smuggler.Migration,Importer,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Importer.cs,Importer,The method has 7 parameters. Parameters: serverUrl' sourceDatabaseName' result' onProgress' database' migrationStateKey' cancelToken
Long Parameter List,Raven.Server.Smuggler.Migration,Migrator_V2,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V2.cs,Migrator_V2,The method has 7 parameters. Parameters: serverUrl' databaseName' result' onProgress' database' client' cancelToken
Long Parameter List,Raven.Server.Smuggler.Migration,Migrator_V3,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V3.cs,Migrator_V3,The method has 9 parameters. Parameters: serverUrl' databaseName' result' onProgress' database' client' migrationStateKey' majorVersion' cancelToken
Long Parameter List,Raven.Server.SqlMigration,SqlDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.cs,SqlDatabase,The method has 5 parameters. Parameters: connection' connectionString' factory' context' tablesToWrite
Long Parameter List,Raven.Server.SqlMigration,SqlEmbeddedTable,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlEmbeddedTable.cs,SqlEmbeddedTable,The method has 5 parameters. Parameters: tableName' query' database' newName' parentTable
Long Parameter List,Raven.Server.SqlMigration,SqlParentTable,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlParentTable.cs,SqlParentTable,The method has 5 parameters. Parameters: tableName' query' database' newName' patch
Long Parameter List,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedCertificateBasedOnPrivateKey,The method has 7 parameters. Parameters: commonNameValue' issuer' key' isClientCertificate' isCaCertificate' yearsUntilExpiration' certBytes
Long Parameter List,Raven.Server.Utils,ConflictResolverAdvisor,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ConflictResolverAdvisor.cs,WriteConflictResolver,The method has 5 parameters. Parameters: name' documentWriter' metadataWriter' resolver' indent
Long Parameter List,Raven.Server.Utils,ParentProcessUtilities,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ParentProcessUtilities.cs,NtQueryInformationProcess,The method has 5 parameters. Parameters: processHandle' processInformationClass' processInformation' processInformationLength' returnLength
Long Parameter List,Raven.Server.Utils.Cli,JavaScriptCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\JavaScriptCli.cs,CreateScript,The method has 5 parameters. Parameters: reader' writer' consoleColoring' database' server
Long Parameter List,Raven.Server.Utils.Metrics,MeterValue,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Metrics\MeterValue.cs,MeterValue,The method has 6 parameters. Parameters: name' count' meanRate' oneMinuteRate' fiveMinuteRate' fifteenMinuteRate
Long Parameter List,Raven.Server.Web.Studio,StudioCollectionFieldsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionFieldsHandler.cs,FetchFieldsForCollection,The method has 5 parameters. Parameters: context' collection' prefix' fields' buffers
Long Parameter List,Raven.Server.Web.Studio,StudioCollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionsHandler.cs,WriteDocument,The method has 5 parameters. Parameters: writer' context' document' propertiesPreviewToSend' fullPropertiesToSend
Long Parameter List,Raven.Server.Web.Studio,StudioCollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionsHandler.cs,ExecuteCollectionOperation,The method has 5 parameters. Parameters: operation' context' returnContextToPool' operationType' excludeIds
Long Parameter List,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CreateDatabase,The method has 5 parameters. Parameters: name' databaseRecord' context' replicationFactor' index
Long Parameter List,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,WaitForExecutionOnRelevantNodes,The method has 5 parameters. Parameters: context' database' clusterTopology' members' index
Long Parameter List,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,AssignNodesToDatabase,The method has 5 parameters. Parameters: context' factor' name' isEncrypted' nodeUrlsAddedTo
Long Parameter List,Raven.Server.Web.System,DatabaseHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabaseHelper.cs,CheckExistingDatabaseName,The method has 5 parameters. Parameters: database' id' dbId' etag' errorMessage
Long Parameter List,Raven.Server.Web.System,DatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabasesHandler.cs,GetNode,The method has 5 parameters. Parameters: databaseName' clusterTopology' rehab' mentor' promotableTask
Long Parameter List,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,GetOngoingTaskBackup,The method has 5 parameters. Parameters: taskId' databaseRecord' backupConfiguration' dbTopology' clusterTopology
Long Parameter List,Raven.Server.Web.System,DeleteOngoingTaskAction,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,DeleteOngoingTaskAction,The method has 5 parameters. Parameters: id' type' serverStore' database' context
Long Identifier,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,,The length of the parameter _disableCalculatingLicenseLimits is 32.
Long Identifier,Raven.Server.Config.Categories,SecurityConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\SecurityConfiguration.cs,Validate,The length of the parameter serverIsWithinUnsecuredAccessRange is 34.
Long Identifier,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentConflicts,The length of the parameter attachmentFoundInResolveDocument is 32.
Long Identifier,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,CreateLazyStringValueFromParserState,The length of the parameter lazyStringValueFromParserState is 30.
Long Identifier,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,,The length of the parameter LegacyHasRevisionsDocumentState is 31.
Long Identifier,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,,The length of the parameter _matchingDocumentsInCollection is 30.
Long Identifier,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,,The length of the parameter _concurrentDatabaseLoadTimeout is 30.
Long Identifier,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,FullBackupTo,The length of the parameter databaseSmugglerOptionsServerSide is 33.
Long Identifier,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetStorageEnvironmentOptionsFromConfiguration,The length of the parameter catastrophicFailureNotification is 31.
Long Identifier,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,,The length of the parameter _alreadyListeningToPreviousOperationEnd is 39.
Long Identifier,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,,The length of the parameter LongStatementWarnThresholdInMs is 30.
Long Identifier,Raven.Server.Documents.Handlers,BatchHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,WaitForReplicationAsync,The length of the parameter throwOnTimeoutInWaitForReplicas is 31.
Long Identifier,Raven.Server.Documents.Handlers,MergedBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,,The length of the parameter _documentsToUpdateAfterAttachmentChange is 39.
Long Identifier,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,,The length of the parameter MaxSizeOfCommandsInBatchToCache is 31.
Long Identifier,Raven.Server.Documents.Handlers,DocumentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\DocumentHandler.cs,Patch,The length of the parameter skipPatchIfChangeVectorMismatch is 31.
Long Identifier,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,,The length of the parameter _indexingProcessCancellationTokenSource is 39.
Long Identifier,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,,The length of the parameter _indexValidationStalenessCheck is 30.
Long Identifier,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,,The length of the parameter _indexOutputsPerDocumentWarning is 31.
Long Identifier,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,,The length of the parameter DefaultMaximumMemoryAllocation is 30.
Long Identifier,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,,The length of the parameter DefaultWaitForNonStaleResultsTimeout is 36.
Long Identifier,Raven.Server.Documents.Indexes,IndexingStatsScope,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexingStatsAggregator.cs,RecordMapMemoryStats,The length of the parameter currentProcessPrivateMemorySize is 31.
Long Identifier,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleUnusedAutoIndexes,The length of the parameter timeToWaitBeforeMarkingAutoIndexAsIdle is 38.
Long Identifier,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleUnusedAutoIndexes,The length of the parameter timeToWaitBeforeDeletingAutoIndexMarkedAsIdle is 45.
Long Identifier,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleUnusedAutoIndexes,The length of the parameter differenceBetweenNewestAndCurrentQueryingTime is 45.
Long Identifier,Raven.Server.Documents.Indexes.IndexMerging,IndexData,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexMerging\IndexData.cs,BuildExpression,The length of the parameter anonymousObjectCreationExpression is 33.
Long Identifier,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,,The length of the parameter PageNumberToReduceResultTableName is 33.
Long Identifier,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,,The length of the parameter _nestedValuesReductionStatsInstance is 35.
Long Identifier,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,,The length of the parameter OutputReduceToCollectionPropertyAccessor is 40.
Long Identifier,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexQueryingScope,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexQueryingScope.cs,,The length of the parameter _alreadySeenDocumentKeysInPreviousPage is 38.
Long Identifier,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,,The length of the parameter _maxNumberOfOutputsPerDocument is 30.
Long Identifier,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexSearcherHoldingState,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexSearcherHolder.cs,,The length of the parameter _indexSearcherInitializationState is 33.
Long Identifier,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneIndexPersistence,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneIndexPersistence.cs,,The length of the parameter _suggestionsIndexSearcherHolders is 32.
Long Identifier,Raven.Server.Documents.Indexes.Persistence.Lucene,OutputReduceIndexWriteOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\OutputReduceIndexWriteOperation.cs,,The length of the parameter _outputReduceToCollectionCommand is 32.
Long Identifier,Raven.Server.Documents.Indexes.Static,StaticIndexDocsEnumerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\StaticIndexDocsEnumerator.cs,,The length of the parameter _multipleIndexingFunctionsEnumerator is 36.
Long Identifier,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqOptimizer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqOptimizer.cs,VisitQueryExpression,The length of the parameter stripExpressionParentParenthesis is 32.
Long Identifier,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RewritersHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RewritersHelper.cs,ExtractFields,The length of the parameter anonymousObjectCreationExpressionSyntax is 39.
Long Identifier,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,SpatialFieldRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\SpatialFieldRewriter.cs,GetAnonymousObjectMemberDeclaratorSyntax,The length of the parameter anonymousObjectMemberDeclaratorSyntax is 37.
Long Identifier,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,Execute,The length of the parameter maxTimeForDocumentTransactionToRemainOpen is 41.
Long Identifier,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,Execute,The length of the parameter maxTimeForDocumentTransactionToRemainOpen is 41.
Long Identifier,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The length of the parameter maxTimeForDocumentTransactionToRemainOpen is 41.
Long Identifier,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,Execute,The length of the parameter maxTimeForDocumentTransactionToRemainOpen is 41.
Long Identifier,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,MaybeRenewTransaction,The length of the parameter maxTimeForDocumentTransactionToRemainOpen is 41.
Long Identifier,Raven.Server.Documents.Patch,PatchDocumentCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchDocumentCommand.cs,PatchDocumentCommand,The length of the parameter skipPatchIfChangeVectorMismatch is 31.
Long Identifier,Raven.Server.Documents.Patch,PatchDocumentCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchDocumentCommand.cs,,The length of the parameter _skipPatchIfChangeVectorMismatch is 32.
Long Identifier,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,,The length of the parameter MinOnePartUploadSizeLimitInBytes is 32.
Long Identifier,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsS3Client,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsS3Client.cs,,The length of the parameter MinOnePartUploadSizeLimitInBytes is 32.
Long Identifier,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,GetLastProcessedDocumentTombstonesPerCollection,The length of the parameter processedTombstonesPerCollection is 32.
Long Identifier,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,,The length of the parameter _inactiveRunningPeriodicBackupsTasks is 36.
Long Identifier,Raven.Server.Documents.PeriodicBackup,Restore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Restore.cs,FetchRestorePoints,The length of the parameter legacyIncrementalBackupExtension is 32.
Long Identifier,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,,The length of the parameter UnsopportedQueryMethodsInJavascript is 35.
Long Identifier,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,MatchIndex,The length of the parameter createAutoIndexIfNoMatchIsFound is 31.
Long Identifier,Raven.Server.Documents.Queries.Facets,FacetField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetField.cs,AddOptions,The length of the parameter optionsAsStringOrParameterName is 30.
Long Identifier,Raven.Server.Documents.Queries.Facets,FacetField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetField.cs,,The length of the parameter _optionsAsStringOrParameterName is 31.
Long Identifier,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,AddOptions,The length of the parameter optionsAsStringOrParameterName is 30.
Long Identifier,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,,The length of the parameter _optionsAsStringOrParameterName is 31.
Long Identifier,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,SendHeartbeatStatusToSource,The length of the parameter currentLastEtagMatchingChangeVector is 35.
Long Identifier,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the parameter maxReceivedChangeVectorByDatabase is 33.
Long Identifier,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReadHeaderResponseAndThrowIfUnAuthorized,The length of the parameter replicationTcpConnectReplyMessage is 33.
Long Identifier,Raven.Server.Documents.Replication,OutgoingReplicationRunStats,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationStatsAggregator.cs,,The length of the parameter AttachmentTombstoneOutputCount is 30.
Long Identifier,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AcceptIncomingConnection,The length of the parameter incomingConnectionRejectionInfos is 32.
Long Identifier,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,,The length of the parameter DebugWaitAndRunReplicationOnce is 30.
Long Identifier,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,,The length of the parameter _concurrentConnectionsSemiSemaphore is 35.
Long Identifier,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ProcessSubscriptionAsync,The length of the parameter subscriptionChangeVectorBeforeCurrentBatch is 42.
Long Identifier,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ProcessSubscriptionAsync,The length of the parameter anyDocumentsSentInCurrentIteration is 34.
Long Identifier,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,WaitForClientAck,The length of the parameter subscriptionChangeVectorBeforeCurrentBatch is 42.
Long Identifier,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,TrySendingBatchToClient,The length of the parameter anyDocumentsSentInCurrentIteration is 34.
Long Identifier,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,,The length of the parameter WaitForChangedDocumentsTimeoutInMs is 34.
Long Identifier,Raven.Server.Extensions,ClusterTopologyExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\ClusterTopologyExtensions.cs,ReplaceCurrentNodeUrlWithClientRequestedNodeUrlIfNecessary,The length of the parameter currentNodeUrlAsSeenByTheClient is 31.
Long Identifier,Raven.Server.Json,BlittableJsonTraverser,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverser.cs,,The length of the parameter CollectionSeparatorStartBracket is 31.
Long Identifier,Raven.Server.Json,BlittableJsonTraverser,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverser.cs,,The length of the parameter CollectionAndPropertySeparators is 31.
Long Identifier,Raven.Server.Json,JsonDeserializationServer,C:\repos\ravendb_ravendb\src\Raven.Server\Json\JsonDeserializationServer.cs,,The length of the parameter SubscriptionConnectionClientMessage is 35.
Long Identifier,Raven.Server.Json,JsonDeserializationServer,C:\repos\ravendb_ravendb\src\Raven.Server\Json\JsonDeserializationServer.cs,,The length of the parameter SingleDatabaseMigrationConfiguration is 36.
Long Identifier,Raven.Server.Json,JsonDeserializationServer,C:\repos\ravendb_ravendb\src\Raven.Server\Json\JsonDeserializationServer.cs,,The length of the parameter DatabasesMigrationConfiguration is 31.
Long Identifier,Raven.Server.Json,Parameters,C:\repos\ravendb_ravendb\src\Raven.Server\Json\JsonDeserializationServer.cs,,The length of the parameter DisableDatabaseToggleParameters is 31.
Long Identifier,Raven.Server.Monitoring.Snmp,Databases,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpOids.cs,,The length of the parameter MapReduceIndexReducedPerSecond is 30.
Long Identifier,Raven.Server,AuthenticateConnection,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,,The length of the parameter _caseSensitiveAuthorizedDatabases is 33.
Long Identifier,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,OnVoterConfirmation,The length of the parameter changedFromLeaderElectToLeader is 30.
Long Identifier,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,EnsureThatWeHaveLeadership,The length of the parameter peersHeardFromInElectionTimeout is 31.
Long Identifier,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AppendToLog,The length of the parameter firstIndexInEntriesThatWeHaveNotSeen is 36.
Long Identifier,Raven.Server.Rachis,RachisStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisStateMachine.cs,,The length of the parameter ContextPoolForReadOnlyOperations is 32.
Long Identifier,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,TryAuthorize,The length of the parameter userWantsToAccessStudioMainPage is 31.
Long Identifier,Raven.Server.ServerWide,JsonDeserializationCluster,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\JsonDeserializationCluster.cs,,The length of the parameter IncrementClusterIdentityCommand is 31.
Long Identifier,Raven.Server.ServerWide,JsonDeserializationCluster,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\JsonDeserializationCluster.cs,,The length of the parameter IncrementClusterIdentitiesBatchCommand is 38.
Long Identifier,Raven.Server.ServerWide,JsonDeserializationCluster,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\JsonDeserializationCluster.cs,,The length of the parameter InstallUpdatedServerCertificateCommand is 38.
Long Identifier,Raven.Server.ServerWide,JsonDeserializationCluster,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\JsonDeserializationCluster.cs,,The length of the parameter ConfirmReceiptServerCertificateCommand is 38.
Long Identifier,Raven.Server.ServerWide,JsonDeserializationCluster,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\JsonDeserializationCluster.cs,,The length of the parameter RecheckStatusOfServerCertificateCommand is 39.
Long Identifier,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,,The length of the parameter _frequencyToCheckForIdleDatabases is 33.
Long Identifier,Raven.Server.ServerWide.Commands.Subscriptions,AcknowledgeSubscriptionBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\AcknowledgeSubscriptionBatchCommand.cs,,The length of the parameter LastKnownSubscriptionChangeVector is 33.
Long Identifier,Raven.Server.ServerWide.Commands.Subscriptions,AcknowledgeSubscriptionBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\AcknowledgeSubscriptionBatchCommand.cs,,The length of the parameter LastTimeServerMadeProgressWithDocuments is 39.
Long Identifier,Raven.Server.ServerWide.Memory,MemoryUsageGuard,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Memory\MemoryUsageGuard.cs,TryIncreasingMemoryUsageForThread,The length of the parameter memoryAssumedFreeOrCheapToFree is 30.
Long Identifier,Raven.Server.Smuggler.Documents,StreamDocumentActions,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamDestination.cs,,The length of the parameter _attachmentStreamsAlreadyExported is 33.
Long Identifier,Raven.Server.SqlMigration,SqlQueries,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlQueries.cs,,The length of the parameter SelectKeyColumnUsageWhereConstraintName is 39.
Long Identifier,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedCertificate,The length of the parameter selfSignedCertificateBasedOnPrivateKey is 38.
Long Identifier,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandHelp,The length of the parameter commandExperimentalDescription is 30.
Long Identifier,Raven.Server.Web.System,DatabaseHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabaseHelper.cs,,The length of the parameter ServerWideOnlyConfigurationKeys is 31.
Long Identifier,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,,The length of the parameter FileExtensionToContentTypeMapping is 33.
Long Statement,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,ChangeLicenseLimits,The length of the statement  "                var utilizedCores = licenseLimits.NodeLicenseDetails.Sum(x => x.Value.UtilizedCores) - oldAssignedCores + newAssignedCores; " is 123.
Long Statement,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,GetNodeInfo,The length of the statement  "            using (var requestExecutor = ClusterRequestExecutor.CreateForSingleNode(nodeUrl' _serverStore.Server.Certificate.Certificate)) " is 126.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupSecuredTask,The length of the statement  "                        await CompleteClusterConfigurationAndGetSettingsZip(onProgress' progress' token' SetupMode.Secured' setupInfo' serverStore); " is 124.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,RefreshLetsEncryptTask,The length of the statement  "                    throw new InvalidOperationException($"Failed to update DNS record(s) and challenge(s) in {setupInfo.Domain.ToLower()}.{RavenDbDomain}"' e); " is 139.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,RefreshLetsEncryptTask,The length of the statement  "                    Logger.Operations($"Successfully updated DNS record(s) and challenge(s) in {setupInfo.Domain.ToLower()}.{RavenDbDomain}"); " is 122.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupLetsEncryptTask,The length of the statement  "                    throw new InvalidOperationException("The provided license for " + setupInfo.License.Name + " has expired (" + licenseStatus.Expiration + ")"); " is 142.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupLetsEncryptTask,The length of the statement  "                        throw new InvalidOperationException($"Failed to update DNS record(s) and challenge(s) in {setupInfo.Domain.ToLower()}.{RavenDbDomain}"' e); " is 139.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupLetsEncryptTask,The length of the statement  "                    progress.AddInfo($"Successfully updated DNS record(s) and challenge(s) in {setupInfo.Domain.ToLower()}.{RavenDbDomain}"); " is 121.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupLetsEncryptTask,The length of the statement  "                            await CompleteClusterConfigurationAndGetSettingsZip(onProgress' progress' token' SetupMode.LetsEncrypt' setupInfo' serverStore); " is 128.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertNoClusterDefined,The length of the statement  "                throw new InvalidOperationException("This node is part of an already configured cluster and cannot be setup automatically any longer." + " is 136.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertNoClusterDefined,The length of the statement  "                                                    "Either setup manually by editing the 'settings.json' file or delete the existing cluster' restart the server and try running setup again." +  " is 141.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,DeleteAllExistingCertificates,The length of the statement  "                existingCertificateKeys = serverStore.Cluster.ItemsStartingWith(context' Constants.Certificates.Prefix' 0' int.MaxValue) " is 120.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,TrySaveLetEncryptCachedDetails,The length of the statement  "            var cachePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' ".ravendb"' "le.cache"); " is 123.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,TryGetLetsEncryptCachedDetails,The length of the statement  "            var cachePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' ".ravendb"' "le.cache"); " is 123.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupLetsEncryptAccount,The length of the statement  "            if (cache?.KeysByUrl != null && cache.KeysByUrl.TryGetValue(serverStore.Configuration.Core.AcmeUrl' out var accountKey)) " is 120.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsForCertificateRefreshTask,The length of the statement  "            using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token)) " is 133.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsForCertificateRefreshTask,The length of the statement  "                            throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error " is 140.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsForCertificateRefreshTask,The length of the statement  "                                $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}"); " is 124.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The length of the statement  "            using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token)) " is 133.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The length of the statement  "                if (map == null && registrationInfo.SubDomains.Exists(x => x.SubDomain.StartsWith("A."' StringComparison.OrdinalIgnoreCase)) == false) " is 134.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The length of the statement  "                    progress.AddInfo("DNS update started successfully' since current node (A) DNS record didn't change' not waiting for full DNS propogation."); " is 140.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The length of the statement  "                            throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error " is 140.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The length of the statement  "                                $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}"); " is 124.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteAuthorizationFor,The length of the statement  "            using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(1)).Token)) " is 132.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteAuthorizationFor,The length of the statement  "                    throw new InvalidOperationException("Failed to authorize certificate: " + authz.Data.Status + Environment.NewLine + authz.Json); " is 128.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertLocalNodeCanListenToEndpoints,The length of the statement  "            var currentServerEndpoints = serverStore.Server.ListenEndpoints.Addresses.Select(ip => new IPEndPoint(ip' serverStore.Server.ListenEndpoints.Port)).ToArray(); " is 158.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertLocalNodeCanListenToEndpoints,The length of the statement  "                    throw new InvalidOperationException($"The requested endpoint '{requestedEndpoint.Address}:{requestedEndpoint.Port}' is already in use by another process. You may go back in the wizard' change the settings and try again."); " is 222.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,ValidateServerCanRunWithSuppliedSettings,The length of the statement  "                await SimulateRunningServer(serverCert' localServerUrl' ips' token' setupInfo' serverStore.Configuration.ConfigPath' setupMode); " is 128.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,ValidateServerCanRunWithSuppliedSettings,The length of the statement  "                throw new InvalidOperationException("Failed to simulate running the server with the supplied settings using: " + localServerUrl' e); " is 132.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,ValidateSetupInfo,The length of the statement  "                if (string.IsNullOrWhiteSpace(node.Key) || node.Key.Length != 1 || !char.IsLetter(node.Key[0]) || !char.IsUpper(node.Key[0])) " is 125.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteClusterConfigurationAndGetSettingsZip,The length of the statement  "                            publicServerUrl = GetServerUrlFromCertificate(serverCert' setupInfo' LocalNodeTag' setupInfo.NodeSetupInfos[LocalNodeTag].Port' out domainFromCert); " is 148.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteClusterConfigurationAndGetSettingsZip,The length of the statement  "                                SecretProtection.ValidateCertificateAndCreateCertificateHolder("Setup"' serverCert' serverCertBytes' setupInfo.Password); " is 121.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteClusterConfigurationAndGetSettingsZip,The length of the statement  "                                    await serverStore.AddNodeToClusterAsync(setupInfo.NodeSetupInfos[node.Key].PublicServerUrl' node.Key' validateNotInTopology: false); " is 132.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteClusterConfigurationAndGetSettingsZip,The length of the statement  "                            clientCert = new X509Certificate2(certBytes' (string)null' X509KeyStorageFlags.Exportable | X509KeyStorageFlags.PersistKeySet); " is 127.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteClusterConfigurationAndGetSettingsZip,The length of the statement  "                                jsonObj[RavenConfiguration.GetKey(x => x.Core.ServerUrls)] = string.Join(";"' node.Value.Addresses.Select(ip => IpAddressToUrl(ip' node.Value.Port))); " is 150.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteClusterConfigurationAndGetSettingsZip,The length of the statement  "                        var currentHostName = setupMode == SetupMode.LetsEncrypt ? BuildHostName("A"' setupInfo.Domain) : new Uri(publicServerUrl).Host; " is 128.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,RegisterClientCertInOs,The length of the statement  "                    progress.AddInfo($"Successfully registered the admin client certificate in the OS Personal CurrentUser Store '{userPersonalStore.Name}'."); " is 139.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,RegisterClientCertInOs,The length of the statement  "                        Logger.Info($"Failed to register client certificate in the current user personal store '{userPersonalStore.Name}'."' e); " is 120.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CreateReadmeText,The length of the statement  "                str += ($"The current node (A - {currentHostName}) has already been configured and requires no further action on your part" + " is 125.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CreateReadmeText,The length of the statement  "                    ($"An administrator client certificate ({clientCertificateName}) has been installed on this machine ({Environment.MachineName}) and you can now access the server in a secure fashion." + Environment.NewLine); " is 207.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CreateReadmeText,The length of the statement  "                    ($"An administrator client certificate ({clientCertificateName}) has been generated which can use to access the server." + Environment.NewLine); " is 144.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CreateReadmeText,The length of the statement  "                "If you are using Firefox' the certificate must be imported directly to the browser' you can do that via: Tools > Options > Advanced > 'Certificates: View Certificates'." + " is 172.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CreateReadmeText,The length of the statement  "                "It is recommended that you'll generate additional certificates with reduced access rights for applications and users to use. You can do that in the 'Manage Server' > 'Certificates' page in the RavenDB Studio." + " is 212.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CreateReadmeText,The length of the statement  "                    "As you are setting up a cluster' you will find the configuration for each of the nodes available in the folders in this zip file. All you'll" + " is 144.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CreateReadmeText,The length of the statement  "                    "to do is to extract the files from each folder to the base directory of the RavenDB node in question and start it. The cluster will configure" + " is 145.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CreateReadmeText,The length of the statement  "                    "Make sure that the various nodes can talk to each other using the URLs you have defined and that there is no firewall blocking communication between them." " is 156.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SimulateRunningServer,The length of the statement  "                            throw new InvalidOperationException($"Client failed to contact webhost listening to '{serverUrl}'.{Environment.NewLine}" + " is 122.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                        throw new InvalidOperationException($"Tried to resolve '{hostname}' using google's api ({GoogleDnsApi}).{Environment.NewLine}" " is 126.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                        throw new InvalidOperationException($"Tried to resolve '{hostname}' using google's api ({GoogleDnsApi}).{Environment.NewLine}" " is 126.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                                                            Environment.NewLine + "Please wait a while until DNS propogation is finished and try again. If you are trying to update existing DNS records' it might take hours to update because of DNS caching. If the issue persists' contact RavenDB's support."); " is 248.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                        throw new InvalidOperationException($"Tried to resolve '{hostname}' using google's api ({GoogleDnsApi}).{Environment.NewLine}" " is 126.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                                                            + $"Expected to get these ips: {string.Join("' "' expectedIps)} while google's actual result was: {string.Join("' "' googleIps)}" " is 129.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                                                            + Environment.NewLine + "Please wait a while until DNS propogation is finished and try again. If you are trying to update existing DNS records' it might take hours to update because of DNS caching. If the issue persists' contact RavenDB's support."); " is 250.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                        + Environment.NewLine + "Another temporary solution is to configure your local network connection to use google's DNS server (8.8.8.8)."' e); " is 141.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                        + Environment.NewLine + $"Expected to get these ips: {string.Join("' "' expectedIps)} while the actual result was: {string.Join("' "' actualIps)}" " is 146.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The length of the statement  "                        + Environment.NewLine + "Another temporary solution is to configure your local network connection to use google's DNS server (8.8.8.8)."); " is 138.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,GenerateCertificateTask,The length of the statement  "                throw new InvalidOperationException($"Cannot generate the client certificate '{name}' because the server certificate is not loaded."); " is 134.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,GenerateCertificateTask,The length of the statement  "            var selfSignedCertificate = CertificateUtils.CreateSelfSignedClientCertificate(name' serverStore.Server.Certificate' out var certBytes); " is 136.
Long Statement,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,GenerateCertificateTask,The length of the statement  "            var res = await serverStore.PutValueInClusterAsync(new PutCertificateCommand(Constants.Certificates.Prefix + selfSignedCertificate.Thumbprint' newCertDef)); " is 156.
Long Statement,Raven.Server.Config.Categories,ConfigurationCategory,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\ConfigurationCategory.cs,Initialize,The length of the statement  "                    if (type != ResourceType.Server && entry.Scope == ConfigurationEntryScope.ServerWideOnly && settingValue.CurrentValue != null) " is 126.
Long Statement,Raven.Server.Config.Categories,ConfigurationCategory,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\ConfigurationCategory.cs,Initialize,The length of the statement  "                                throw new NotSupportedException("Min value for " + property.PropertyType + " is not supported. Property name: " + property.Name); " is 129.
Long Statement,Raven.Server.Config.Categories,CoreConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\CoreConfiguration.cs,GetNodeHost,The length of the statement  "            throw new InvalidOperationException($"Arguments '{nameof(serverWebUri)}' and '{nameof(serverUrlSettingValue)}' are invalid."); " is 126.
Long Statement,Raven.Server.Config.Categories,CoreConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\CoreConfiguration.cs,ValidatePublicUrls,The length of the statement  "                throw new ArgumentException($"Configuration key '{RavenConfiguration.GetKey(x => x.Core.PublicServerUrl)}' must be specified when there is more than one '{RavenConfiguration.GetKey(x => x.Core.ServerUrls)}'."); " is 210.
Long Statement,Raven.Server.Config.Categories,CoreConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\CoreConfiguration.cs,ValidatePublicUrls,The length of the statement  "                throw new ArgumentException($"Configuration key '{RavenConfiguration.GetKey(x => x.Core.PublicTcpServerUrl)}' must be specified when there is more than one '{RavenConfiguration.GetKey(x => x.Core.TcpServerUrls)}'."); " is 216.
Long Statement,Raven.Server.Config.Categories,CoreConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\CoreConfiguration.cs,ValidateServerUrl,The length of the statement  "                    throw new ArgumentException($"URI scheme '{ parsedUri.Scheme }' is invalid for '{configurationKey}' configuration setting' it must be one of the following: { string.Join("' "' expectedSchemes) }."); " is 198.
Long Statement,Raven.Server.Config.Categories,CoreConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\CoreConfiguration.cs,ValidateServerUrl,The length of the statement  "                    throw new ArgumentException($"URI '{url}' scheme does not match. Expected '{firstUri.Scheme}'. Was '{parsedUri.Scheme}'."); " is 123.
Long Statement,Raven.Server.Config.Categories,CoreConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\CoreConfiguration.cs,ValidateSchemePublicVsBoundUrl,The length of the statement  "                throw new ArgumentException($"ServerUrl and PublicServerUrl schemes do not match: {ServerUrls} and {PublicServerUrl.Value.UriValue}."); " is 135.
Long Statement,Raven.Server.Config.Categories,IndexingConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\IndexingConfiguration.cs,ValidateProperty,The length of the statement  "                throw new InvalidOperationException($"No {nameof(IndexUpdateTypeAttribute)} available for '{property.Name}' property."); " is 120.
Long Statement,Raven.Server.Config.Categories,SecurityConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\SecurityConfiguration.cs,Validate,The length of the statement  "                var serverIsWithinUnsecuredAccessRange = serverAddresses.Any(x => SecurityUtils.IsUnsecuredAccessAllowedForAddress(unsecuredAccessAddressRange' x)); " is 148.
Long Statement,Raven.Server.Config.Categories,SecurityConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\SecurityConfiguration.cs,Validate,The length of the statement  "                            $"When the server certificate in either `{RavenConfiguration.GetKey(x => x.Security.CertificatePath)}` or `{RavenConfiguration.GetKey(x => x.Security.CertificateExec)}`  is specified' the `{RavenConfiguration.GetKey(x => x.Core.ServerUrls)}` must be using https' but was " + " is 274.
Long Statement,Raven.Server.Config.Categories,SecurityConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\SecurityConfiguration.cs,Validate,The length of the statement  "                        throw new InvalidOperationException($"Configured server address { string.Join("' "' configuration.Core.ServerUrls) } requires HTTPS. Please set up certification information under { RavenConfiguration.GetKey(x => x.Security.CertificatePath) } configuration key."); " is 263.
Long Statement,Raven.Server.Config.Categories,SecurityConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\SecurityConfiguration.cs,Validate,The length of the statement  "                            $"Configured {RavenConfiguration.GetKey(x => x.Core.ServerUrls)} \"{string.Join("' "' configuration.Core.ServerUrls)}\" is not set within allowed unsecured access address range - { configuration.Security.UnsecuredAccessAllowed }. Use a server url within unsecure access address range ({RavenConfiguration.GetKey(x => x.Security.UnsecuredAccessAllowed)} option) or fill in server certificate information."; " is 405.
Long Statement,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,SetSetting,The length of the statement  "                throw new InvalidOperationException("Configuration already initialized. You cannot specify an already initialized setting."); " is 125.
Long Statement,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,GetKey,The length of the statement  "                throw new InvalidOperationException($"Property '{property.Name}' does not contain '{nameof(ConfigurationEntryAttribute)}'. Please make sure that this is a valid configuration property."); " is 187.
Long Statement,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,GetDataDirectoryPath,The length of the statement  "            var dataDirectoryPath = dataDirectory != null ? coreConfiguration.DataDirectory.Combine(Inflector.Pluralize(type.ToString())).Combine(name).ToFullPath() : " is 154.
Long Statement,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,GetDataDirectoryPath,The length of the statement  "                GenerateDefaultDataDirectory(coreConfiguration.GetDefaultValue<CoreConfiguration>(v => v.DataDirectory).ToString()' type' name); " is 128.
Long Statement,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,CreateFrom,The length of the statement  "                Settings = new ConfigurationRoot(new List<IConfigurationProvider> { new MemoryConfigurationProvider(new MemoryConfigurationSource()) }) " is 135.
Long Statement,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,CheckDirectoryPermissions,The length of the statement  "            foreach (var configurationProperty in typeof(RavenConfiguration).GetProperties(BindingFlags.Instance | BindingFlags.Public)) " is 124.
Long Statement,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,CheckDirectoryPermissions,The length of the statement  "                foreach (var categoryProperty in configurationProperty.PropertyType.GetProperties(BindingFlags.Instance | BindingFlags.Public)) " is 127.
Long Statement,Raven.Server.Config,RavenConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,CheckDirectoryPermissions,The length of the statement  "            var sb = new StringBuilder("Could not access some of the specified paths. Please check if you have sufficient privileges to access following paths:"); " is 150.
Long Statement,Raven.Server.Config,EnvironmentVariablesConfigurationSource,C:\repos\ravendb_ravendb\src\Raven.Server\Config\RavenConfiguration.cs,Load,The length of the statement  "                    if (key.StartsWith(Prefix1' StringComparison.OrdinalIgnoreCase) == false && key.StartsWith(Prefix2' StringComparison.OrdinalIgnoreCase) == false) " is 145.
Long Statement,Raven.Server.Dashboard,DatabasesInfoNotificationSender,C:\repos\ravendb_ravendb\src\Raven.Server\Dashboard\DatabasesInfoNotificationSender.cs,FetchDatabasesInfo,The length of the statement  "                foreach (var databaseTuple in serverStore.Cluster.ItemsStartingWith(transactionContext' Constants.Documents.Prefix' 0' int.MaxValue)) " is 133.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutAttachment,The length of the statement  "                var hasDoc = TryGetDocumentTableValueReaderForAttachment(context' documentId' name' lowerDocumentId' out TableValueReader tvr); " is 127.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutAttachment,The length of the statement  "                using (DocumentIdWorker.GetLowerIdSliceAndStorageKey(context' contentType' out Slice lowerContentType' out Slice contentTypePtr)) " is 129.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutAttachment,The length of the statement  "                using (Slice.From(context.Allocator' hash' out Slice base64Hash)) // Hash is a base64 string' so this is a special case that we do not need to escape " is 149.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutAttachment,The length of the statement  "                using (GetAttachmentKey(context' lowerDocumentId.Content.Ptr' lowerDocumentId.Size' lowerName.Content.Ptr' lowerName.Size' base64Hash' " is 134.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutAttachment,The length of the statement  "                                throw new ConcurrencyException($"Attachment {name} has change vector '{oldChangeVector}'' but Put was called with the change vector '{expectedChangeVector}'. Optimistic concurrency violation' transaction will be aborted.") " is 222.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,UpdateDocumentAfterAttachmentChange,The length of the statement  "                return _documentsStorage.Put(context' documentId' null' data' null' changeVector' flags' NonPersistentDocumentFlags.ByAttachmentUpdate).ChangeVector; " is 149.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,UpdateDocumentAfterAttachmentChange,The length of the statement  "                var exists = _documentsStorage.GetTableValueReaderForDocument(context' lowerDocumentId' throwOnConflict: true' tvr: out TableValueReader tvr); " is 142.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,RevisionAttachments,The length of the statement  "            using (GetAttachmentPrefix(context' lowerId.Content.Ptr' lowerId.Size' AttachmentType.Document' Slices.Empty' out Slice prefixSlice)) " is 133.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutRevisionAttachment,The length of the statement  "            using (DocumentIdWorker.GetLowerIdSliceAndStorageKey(context' attachment.ContentType' out Slice lowerContentType' out Slice contentTypePtr)) " is 140.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,TryGetDocumentTableValueReaderForAttachment,The length of the statement  "                hasDoc = _documentsStorage.GetTableValueReaderForDocument(context' lowerDocumentId' throwOnConflict: true' tvr: out tvr); " is 121.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,TryGetDocumentTableValueReaderForAttachment,The length of the statement  "                throw new InvalidOperationException($"Cannot put/delete an attachment {name} on a document '{documentId}' when it has an unresolved conflict."' e); " is 147.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachment,The length of the statement  "                throw new FileNotFoundException($"Attachment's stream {name} on {documentId} was not found. This should not happen and is likely a bug."); " is 138.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentDirect,The length of the statement  "            using (GetAttachmentPartialKey(context' lowerId.Content.Ptr' lowerId.Size' lowerName.Content.Ptr' lowerName.Size' type' changeVector' out Slice partialKeySlice)) " is 161.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentKey,The length of the statement  "            return GetAttachmentKeyInternal(context' lowerId' lowerIdSize' lowerName' lowerNameSize' base64Hash' lowerContentTypePtr' lowerContentTypeSize' KeyType.Key' type' changeVector' out keySlice); " is 191.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentPartialKey,The length of the statement  "            return Slice.External(context.Allocator' key.Content' 0' key.Size - base64HashSize - 1 - lowerContentTypeSize' out partialKeySlice); " is 132.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentPrefix,The length of the statement  "            return GetAttachmentKeyInternal(context' lowerId' lowerIdSize' null' 0' default(Slice)' null' 0' KeyType.Prefix' type' changeVector' out prefixSlice); " is 150.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentPrefix,The length of the statement  "            return GetAttachmentKeyInternal(context' lowerId.Content.Ptr' lowerId.Size' null' 0' default(Slice)' null' 0' KeyType.Prefix' type' changeVector' out prefixSlice); " is 163.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,TableValueToAttachment,The length of the statement  "                Key = TableValueToString(context' (int)AttachmentsTable.LowerDocumentIdAndLowerNameAndTypeAndHashAndContentType' ref tvr)' " is 122.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,ThrowConcurrentExceptionOnMissingAttachment,The length of the statement  "                $"Attachment {name} of '{documentId}' does not exist' but Put was called with change vector '{expectedChangeVector}'. Optimistic concurrency violation' transaction will be aborted.") " is 182.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachment,The length of the statement  "                var hasDoc = TryGetDocumentTableValueReaderForAttachment(context' documentId' name' lowerDocumentId' out TableValueReader docTvr); " is 130.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachment,The length of the statement  "                using (GetAttachmentPartialKey(context' lowerDocumentId.Content.Ptr' lowerDocumentId.Size' lowerName.Content.Ptr' lowerName.Size'  " is 129.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentConflicts,The length of the statement  "            if (conflictDocument.TryGet(Constants.Documents.Metadata.Key' out BlittableJsonReaderObject conflictMetadata) == false || " is 121.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentConflicts,The length of the statement  "                conflictMetadata.TryGet(Constants.Documents.Metadata.Attachments' out BlittableJsonReaderArray conflictAttachments) == false) " is 125.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentDirect,The length of the statement  "                base64Hash' lowerContentType.Content.Ptr' lowerContentType.Size' AttachmentType.Document' Slices.Empty' out Slice keySlice)) " is 124.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentDirect,The length of the statement  "                TableValueToSlice(context' (int)AttachmentsTable.LowerDocumentIdAndLowerNameAndTypeAndHashAndContentType' ref tvr' out key) " is 123.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentDirect,The length of the statement  "                    throw new ConcurrencyException($"Attachment {name} with key '{key}' has change vector '{currentChangeVector}'' but Delete was called with change vector '{expectedChangeVector}'. Optimistic concurrency violation' transaction will be aborted.") " is 242.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentsOfDocumentInternal,The length of the statement  "                    using (TableValueToSlice(context' (int)AttachmentsTable.LowerDocumentIdAndLowerNameAndTypeAndHashAndContentType' ref before.Reader' out Slice key)) " is 147.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteRevisionAttachments,The length of the statement  "            using (GetAttachmentPrefix(context' revision.LowerId.Buffer' revision.LowerId.Size' AttachmentType.Revision' changeVectorSlice' out Slice prefixSlice)) " is 151.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,DeleteAttachmentsOfDocument,The length of the statement  "            using (GetAttachmentPrefix(context' lowerId.Content.Ptr' lowerId.Size' AttachmentType.Document' Slices.Empty' out Slice prefixSlice)) " is 133.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,AssertAttachments,The length of the statement  "                    Debug.Assert(false' $"Found {DocumentFlags.HasAttachments} flag bug {Constants.Documents.Metadata.Attachments} is missing from metadata."); " is 139.
Long Statement,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,AssertAttachments,The length of the statement  "                    Debug.Assert(false' $"Found {Constants.Documents.Metadata.Attachments}({attachments.Length}) in metadata but {DocumentFlags.HasAttachments} flag is missing."); " is 159.
Long Statement,Raven.Server.Documents,AttachmentsStorageHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorageHelper.cs,CopyStreamToFileAndCalculateHash,The length of the statement  "                    var count = await requestStream.ReadAsync(buffer.Buffer.Array' buffer.Buffer.Offset + bufferRead' buffer.Buffer.Count - bufferRead' cancellationToken); " is 151.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The length of the statement  "                    if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853) " is 123.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The length of the statement  "                    if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853) " is 123.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The length of the statement  "                    if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853) " is 123.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The length of the statement  "                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded()); " is 137.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The length of the statement  "                        ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded()); " is 137.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadWithStateUnlikely,The length of the statement  "                    ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded()); " is 137.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,ThrowExpectedFieldTypeOfString,The length of the statement  "            throw new InvalidDataException($"Expected property @metadata.{field} to have string type' but was: {state.CurrentTokenType}"); " is 126.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,ThrowInvalidEtagType,The length of the statement  "            throw new InvalidDataException($"Expected property @metadata.@etag to have string or long type' but was: {state.CurrentTokenType}"); " is 132.
Long Statement,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,ThrowInvalidReplicationHistoryType,The length of the statement  "            throw new InvalidDataException($"Expected property @metadata.Raven-Replication-History to have array type' but was: {state.CurrentTokenType}"); " is 143.
Long Statement,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,SendDocumentChanges,The length of the statement  "            // this is a precaution' in order to overcome an observed race condition between change client disconnection and raising changes " is 128.
Long Statement,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,SendDocumentChanges,The length of the statement  "            var hasCollection = change.CollectionName != null && HasItemEqualsTo(_matchingDocumentsInCollection' change.CollectionName); " is 124.
Long Statement,Raven.Server.Documents,CollectionRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionRunner.cs,ExecuteDelete,The length of the statement  "            return ExecuteOperation(collectionName' options' Context' onProgress' key => new DeleteDocumentCommand(key' null' Database)' token); " is 132.
Long Statement,Raven.Server.Documents,CollectionRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionRunner.cs,GetTotalCountForCollection,The length of the statement  "                Database.DocumentsStorage.GetNumberOfDocumentsToProcess(context' CollectionName.HiLoCollection' 0' out long hiloDocsCount); " is 123.
Long Statement,Raven.Server.Documents,CompactDatabaseTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CompactDatabaseTask.cs,Execute,The length of the statement  "                throw new InvalidOperationException($"Database '{_database}' cannot be compacted because compaction is already in progress."); " is 126.
Long Statement,Raven.Server.Documents,CompactDatabaseTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CompactDatabaseTask.cs,Execute,The length of the statement  "            using (var src = DocumentsStorage.GetStorageEnvironmentOptionsFromConfiguration(configuration' new IoChangesNotifications()' " is 124.
Long Statement,Raven.Server.Documents,CompactDatabaseTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CompactDatabaseTask.cs,Execute,The length of the statement  "                new CatastrophicFailureNotification(exception => throw new InvalidOperationException($"Failed to compact database {_database}"' exception)))) " is 141.
Long Statement,Raven.Server.Documents,CompactDatabaseTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CompactDatabaseTask.cs,Execute,The length of the statement  "                    using (var dst = DocumentsStorage.GetStorageEnvironmentOptionsFromConfiguration(configuration' new IoChangesNotifications()' " is 124.
Long Statement,Raven.Server.Documents,CompactDatabaseTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CompactDatabaseTask.cs,Execute,The length of the statement  "                        new CatastrophicFailureNotification(exception => throw new InvalidOperationException($"Failed to compact database {_database}"' exception)))) " is 141.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,ParseRawDataSectionConflictWithValidation,The length of the statement  "                throw new ArgumentException("Document size is invalid' possible corruption when parsing BlittableJsonReaderObject"' nameof(size)); " is 130.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,ThrowDocumentConflictException,The length of the statement  "            throw new DocumentConflictException($"Conflict detected on '{docId}'' conflict must be resolved before the document will be accessible."' docId' etag); " is 151.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,GetConflictsMaxEtagFor,The length of the statement  "            foreach (var tvr in conflictsTable.SeekForwardFrom(ConflictsSchema.Indexes[IdAndChangeVectorSlice]' prefixSlice' 0' true)) " is 122.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,HasHigherChangeVector,The length of the statement  "            foreach (var tvr in conflictsTable.SeekForwardFrom(ConflictsSchema.Indexes[IdAndChangeVectorSlice]' prefixSlice' 0' true)) " is 122.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,DeleteConflictsFor,The length of the statement  "                conflictsTable.DeleteForwardFrom(ConflictsSchema.Indexes[IdAndChangeVectorSlice]' prefixSlice' true' long.MaxValue' conflictDocument => " is 135.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,DeleteConflictsFor,The length of the statement  "                            context' conflicted.Id' conflicted.Doc' conflicted.Flags | DocumentFlags.Conflicted' nonPersistentFlags' conflicted.ChangeVector' " is 129.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,DeleteConflictsFor,The length of the statement  "                    nonPersistentFlags |= DeleteAttachmentConflicts(context' lowerId' document' conflictDocument' deleteAttachmentChangeVector); " is 124.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,DeleteAttachmentConflicts,The length of the statement  "                _documentsStorage.AttachmentsStorage.DeleteAttachmentConflicts(context' lowerId' document' conflictDocument' changeVector); " is 123.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,GetConflictForChangeVector,The length of the statement  "                foreach (var tvr in conflictsTable.SeekForwardFrom(ConflictsSchema.Indexes[IdAndChangeVectorSlice]' prefixSlice' 0' true)) " is 122.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,GetConflictsFor,The length of the statement  "            foreach (var tvr in conflictsTable.SeekForwardFrom(ConflictsSchema.Indexes[IdAndChangeVectorSlice]' prefixSlice' 0' true)) " is 122.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,GetMergedConflictChangeVectorsAndDeleteConflicts,The length of the statement  "            var newChangeVector = ChangeVectorUtils.NewChangeVector(_documentDatabase.ServerStore.NodeTag' newEtag' _documentsStorage.Environment.Base64Id); " is 144.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,MergeVectorsWithoutConflicts,The length of the statement  "                var result = ChangeVectorUtils.TryUpdateChangeVector(_documentDatabase.ServerStore.NodeTag' _documentsStorage.Environment.Base64Id' newEtag' existing); " is 151.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,MergeVectorsWithoutConflicts,The length of the statement  "            return ChangeVectorUtils.NewChangeVector(_documentDatabase.ServerStore.NodeTag' newEtag' _documentsStorage.Environment.Base64Id); " is 129.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,ThrowConcurrencyExceptionOnConflict,The length of the statement  "                $"Tried to resolve document conflict with etag = {expectedEtag}' but the current max conflict etag is {currentMaxConflictEtag}. " + " is 131.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,AddConflict,The length of the statement  "            var fromSmuggler = (nonPersistentFlags & NonPersistentDocumentFlags.FromSmuggler) == NonPersistentDocumentFlags.FromSmuggler; " is 125.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,AddConflict,The length of the statement  "                        using (DocumentIdWorker.GetStringPreserveCase(context' CollectionName.GetLazyCollectionNameFrom(context' existingDoc.Data)' out Slice collectionSlice)) " is 151.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,AddConflict,The length of the statement  "                var result = ChangeVectorUtils.TryUpdateChangeVector(_documentDatabase.ServerStore.NodeTag' _documentDatabase.DbBase64Id' etag' context.LastDatabaseChangeVector); " is 162.
Long Statement,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,ThrowConcurrencyExceptionOnConflictIfNeeded,The length of the statement  "                throw new ConcurrencyException($"Failed to resolve document conflict with change vector = {expectedChangeVector}' beacuse we have a newer change vector."); " is 155.
Long Statement,Raven.Server.Documents,DatabaseRequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabaseRequestHandler.cs,DatabaseConfigurations,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(Database.Name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 150.
Long Statement,Raven.Server.Documents,DatabaseRequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabaseRequestHandler.cs,CreateTimeLimitedQueryOperationToken,The length of the statement  "            return new OperationCancelToken(Database.Configuration.Databases.QueryOperationTimeout.AsTimeSpan' Database.DatabaseShutdown); " is 126.
Long Statement,Raven.Server.Documents,DatabaseRequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabaseRequestHandler.cs,CreateTimeLimitedDeleteDocsOperationToken,The length of the statement  "            return new OperationCancelToken(Database.Configuration.Databases.DeleteDocsOperationTimeout.AsTimeSpan' Database.DatabaseShutdown); " is 131.
Long Statement,Raven.Server.Documents,DatabaseRequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabaseRequestHandler.cs,CreateTimeLimitedIndexTermsOperationToken,The length of the statement  "            return new OperationCancelToken(Database.Configuration.Databases.IndexTermsOperationTimeout.AsTimeSpan' Database.DatabaseShutdown); " is 131.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,HandleClusterDatabaseChanged,The length of the statement  "                _serverStore.NotificationCenter.Add(AlertRaised.Create(t.DatabaseName' title' e.Message' AlertType.DeletionError' NotificationSeverity.Error' " is 141.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,ShouldDeleteDatabase,The length of the statement  "                // A delete command was issued while we were in rehabilitation. We need to check if we recieved any new documents while we were in that state. " is 142.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,DeleteDatabase,The length of the statement  "                        configuration = CreateDatabaseConfiguration(dbName' ignoreDisabledDatabase: true' ignoreBeenDeleted: true' ignoreNotRelevant: true' " is 131.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,NotifyLeaderAboutRemoval,The length of the statement  "                            _logger.Info($"Failed to notify leader about removal of node {_serverStore.NodeTag} from database {dbName}"' t.Exception); " is 122.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,UnlikelyCreateDatabaseUnderContention,The length of the statement  "                throw new DatabaseConcurrentLoadTimeoutException("Too many databases loading concurrently' timed out waiting for them to load."); " is 129.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,CreateDatabaseUnderResourceSemaphore,The length of the statement  "                var task = new Task<DocumentDatabase>(() => ActuallyCreateDatabase(databaseName' config)' TaskCreationOptions.RunContinuationsAsynchronously); " is 142.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,ActuallyCreateDatabase,The length of the statement  "                    _logger.Info("Failed to load database because couldn't access certain file. Please check permissions' and make sure that nothing locks that file (an antivirus is a good example of something that can lock the file)"' e); " is 219.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,CreateDatabaseConfiguration,The length of the statement  "                            $"The database {databaseName.Value} is encrypted' and must be accessed only via HTTPS' but the web url used is {_serverStore.Server.WebUrl}"); " is 142.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,CreateDatabaseConfiguration,The length of the statement  "                return CreateDatabaseConfiguration(databaseName' ignoreDisabledDatabase' ignoreBeenDeleted' ignoreNotRelevant' databaseRecord); " is 127.
Long Statement,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,UnloadAndLockDatabase,The length of the statement  "            var tcs = Task.FromException<DocumentDatabase>(new DatabaseDisabledException($"The database {dbName} is currently locked because {reason}" ) " is 140.
Long Statement,Raven.Server.Documents,DocumentCompare,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentCompare.cs,IsMetadataEqualTo,The length of the statement  "                    if (currentMetadata.Count == 1 && currentMetadata.GetPropertyNames()[0].Equals(Constants.Documents.Metadata.Attachments' StringComparison.OrdinalIgnoreCase)) " is 157.
Long Statement,Raven.Server.Documents,DocumentCompare,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentCompare.cs,ComparePropertiesExceptStartingWithAt,The length of the statement  "            return DocumentCompareResult.Equal | (resolvedAttachmetConflict ? DocumentCompareResult.ShouldRecreateDocument : DocumentCompareResult.None); " is 141.
Long Statement,Raven.Server.Documents,DocumentCompare,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentCompare.cs,ShouldResolveAttachmentsConflict,The length of the statement  "            Debug.Assert(currentAttachments != null || modifiedAttachments != null' "Cannot happen. We verified that we have a conflict in @attachments."); " is 143.
Long Statement,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,Initialize,The length of the statement  "                DocumentsStorage.Initialize((options & InitializeOptions.GenerateNewDatabaseId) == InitializeOptions.GenerateNewDatabaseId); " is 124.
Long Statement,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,FullBackupTo,The length of the statement  "                    var databaseRecordBlittable = EntityToBlittable.ConvertEntityToBlittable(databaseRecord' DocumentConventions.Default' context); " is 127.
Long Statement,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,NotifyFeaturesAboutStateChange,The length of the statement  "                // index and LastDatabaseRecordIndex could have equal values when we transit from/to passive and want to update the tasks.  " is 122.
Long Statement,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,NotifyFeaturesAboutStateChange,The length of the statement  "                        _logger.Info($"Skipping record {index} (current {LastDatabaseRecordIndex}) for {record.DatabaseName} because it was already precessed."); " is 137.
Long Statement,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLowerIdSliceAndStorageKey,The length of the statement  "                // TODO: We may remove this before RTM' but given the criticality of this code I would prefer this assertion to be here until then.  " is 131.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,PutDocument,The length of the statement  "                var table = context.Transaction.InnerTransaction.OpenTable(DocsSchema' collectionName.GetTableName(CollectionTableType.Documents)); " is 131.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,PutDocument,The length of the statement  "                    if ((nonPersistentFlags & NonPersistentDocumentFlags.ByAttachmentUpdate) != NonPersistentDocumentFlags.ByAttachmentUpdate && " is 124.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,PutDocument,The length of the statement  "                var result = BuildChangeVectorAndResolveConflicts(context' id' lowerId' newEtag' document' changeVector' expectedChangeVector' flags' oldValue); " is 144.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,PutDocument,The length of the statement  "                        var shouldVersion = _documentDatabase.DocumentsStorage.RevisionsStorage.ShouldVersionDocument(collectionName' nonPersistentFlags' oldDoc' document' " is 147.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,BuildChangeVectorAndResolveConflicts,The length of the statement  "                _documentsStorage.ConflictsStorage.ThrowConcurrencyExceptionOnConflictIfNeeded(context' lowerId' excpectedChangeVector); " is 120.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,BuildChangeVectorAndResolveConflicts,The length of the statement  "                    var result = _documentsStorage.ConflictsStorage.MergeConflictChangeVectorIfNeededAndDeleteConflicts(changeVector' context' id' newEtag' document); " is 146.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,BuildChangeVectorAndResolveConflicts,The length of the statement  "                oldChangeVector = oldValue.Pointer != null ? TableValueToChangeVector(context' (int)DocumentsTable.ChangeVector' ref oldValue) : null; " is 134.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,ShouldRecreateAttachments,The length of the statement  "            if ((nonPersistentFlags & NonPersistentDocumentFlags.ResolveAttachmentsConflict) == NonPersistentDocumentFlags.ResolveAttachmentsConflict) " is 138.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,ShouldRecreateAttachments,The length of the statement  "                (nonPersistentFlags & NonPersistentDocumentFlags.ByAttachmentUpdate) != NonPersistentDocumentFlags.ByAttachmentUpdate && " is 120.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,ThrowConcurrentExceptionOnMissingDoc,The length of the statement  "                $"Document {id} does not exist' but Put was called with change vector: {excpectedChangeVector}. Optimistic concurrency violation' transaction will be aborted.") " is 160.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,ThrowInvalidCollectionNameChange,The length of the statement  "                $"Changing '{id}' from '{oldCollectionName.Name}' to '{collectionName.Name}' via update is not supported.{Environment.NewLine}" + " is 129.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,ThrowConcurrentException,The length of the statement  "                $"Document {id} has change vector {oldChangeVector}' but Put was called with {(expectedChangeVector.Length == 0 ? "expecting new document" : "change vector " + expectedChangeVector)}. Optimistic concurrency violation' transaction will be aborted.") " is 248.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,DeleteTombstoneIfNeeded,The length of the statement  "            var tombstoneTable = context.Transaction.InnerTransaction.OpenTable(TombstonesSchema' collectionName.GetTableName(CollectionTableType.Tombstones)); " is 147.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,DeleteTombstoneIfNeeded,The length of the statement  "                tombstoneTable = context.Transaction.InnerTransaction.OpenTable(TombstonesSchema' collectionName.GetTableName(CollectionTableType.Tombstones)); " is 143.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,SetDocumentChangeVectorForLocalChange,The length of the statement  "                var result = ChangeVectorUtils.TryUpdateChangeVector(_documentDatabase.ServerStore.NodeTag' _documentsStorage.Environment.Base64Id' newEtag' oldChangeVector); " is 158.
Long Statement,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,AssertMetadataWasFiltered,The length of the statement  "                throw new InvalidOperationException("Document's metadata should filter properties on before put to storage." + Environment.NewLine + data); " is 139.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Initialize,The length of the statement  "            var options = GetStorageEnvironmentOptionsFromConfiguration(DocumentDatabase.Configuration' DocumentDatabase.IoChanges' DocumentDatabase.CatastrophicFailureNotification); " is 170.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Initialize,The length of the statement  "            options.CompressTxAboveSizeInBytes = DocumentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes); " is 121.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Initialize,The length of the statement  "            options.TimeToSyncAfterFlashInSec = (int)DocumentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds; " is 125.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Initialize,The length of the statement  "            options.NumOfConcurrentSyncsPerPhysDrive = DocumentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive; " is 122.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,AssertTransaction,The length of the statement  "                throw new InvalidOperationException("No active transaction found in the context' and at least read transaction is needed"); " is 123.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetNewChangeVector,The length of the statement  "            var result = ChangeVectorUtils.TryUpdateChangeVector(DocumentDatabase.ServerStore.NodeTag' Environment.Base64Id' newEtag' changeVector); " is 136.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,ParseDocument,The length of the statement  "                TransactionMarker = TableValueToShort((int)DocumentsTable.TransactionMarker' nameof(DocumentsTable.TransactionMarker)' ref tvr)' " is 128.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,ParseRawDataSectionDocumentWithValidation,The length of the statement  "                throw new ArgumentException("Data size is invalid' possible corruption when parsing BlittableJsonReaderObject"' nameof(size)); " is 126.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Delete,The length of the statement  "                    throw new ConcurrencyException($"Document {local.Tombstone.LowerId} does not exist' but delete was called with change vector '{expectedChangeVector}'. " + " is 154.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Delete,The length of the statement  "                var table = context.Transaction.InnerTransaction.OpenTable(DocsSchema' collectionName.GetTableName(CollectionTableType.Documents)); " is 131.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Delete,The length of the statement  "                    var tombstoneEtag = CreateTombstone(context' tombstone' doc.Etag' collectionName' doc.ChangeVector' modifiedTicks' changeVector' doc.Flags); " is 140.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Delete,The length of the statement  "                        revisionsStorage.Delete(context' id' lowerId' collectionName' changeVector' modifiedTicks' doc.NonPersistentFlags' flags); " is 122.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Delete,The length of the statement  "                    throw new ConcurrencyException($"Document {lowerId} does not exist' but delete was called with change vector '{expectedChangeVector}'. " + " is 138.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GenerateNextEtag,The length of the statement  "            return Interlocked.Increment(ref _lastEtag); // use interlocked so the GetDatabaseChangeVector can read the latest version " is 122.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Put,The length of the statement  "            return DocumentPut.PutDocument(context' id' excpectedChangeVector' document' lastModifiedTicks' changeVector' flags' nonPersistentFlags); " is 137.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,GetCollections,The length of the statement  "                var collectionTable = context.Transaction.InnerTransaction.OpenTable(DocsSchema' kvp.Value.GetTableName(CollectionTableType.Documents)); " is 136.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,DeleteTombstonesBefore,The length of the statement  "            var deleteCount = table.DeleteBackwardFrom(TombstonesSchema.FixedSizeIndexes[CollectionEtagsSlice]' etag' long.MaxValue); " is 121.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,ExtractCollectionName,The length of the statement  "                    var collectionNames = new Dictionary<string' CollectionName>(_collectionsCache' OrdinalIgnoreCaseStringStructComparer.Instance) " is 127.
Long Statement,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,ThrowNoActiveTransactionException,The length of the statement  "            throw new InvalidOperationException("This method requires active transaction' and no active transactions in the current context..."); " is 133.
Long Statement,Raven.Server.Documents,DocumentTombstoneCleaner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentTombstoneCleaner.cs,ExecuteCleanup,The length of the statement  "                await _documentDatabase.TxMerger.Enqueue(new DeleteTombstonesCommand(tombstones' minAllDocsEtag' _documentDatabase' Logger)); " is 125.
Long Statement,Raven.Server.Documents,LiveIOStatsCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\LiveIOStatsCollector.cs,OnIOChange,The length of the statement  "            var collection = _perEnvironmentsFilesMetrics.GetOrAdd(recentFileIoItem.FileName' new BlockingCollection<IoMeterBuffer.MeterItem>()); " is 133.
Long Statement,Raven.Server.Documents,ResourceCache<TResource>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ResourceCache.cs,RemoveLockAndReturn,The length of the statement  "                var task = Task.FromException<TResource>(new DatabaseDisabledException("The database " + databaseName + " has been unloaded and locked by " + caller) " is 149.
Long Statement,Raven.Server.Documents,ResourceCache<TResource>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ResourceCache.cs,RemoveLockAndReturn,The length of the statement  "                    throw new DatabaseConcurrentLoadTimeoutException($"Attempting to unload database {databaseName} that is loading is not allowed (by {caller})"); " is 143.
Long Statement,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,MergeTransactionsWithAsyncCommit,The length of the statement  "                        _log.Info($"BeginAsyncCommit on {previous.InnerTransaction.LowLevelTransaction.Id} with {_operations.Count} additional operations pending"); " is 140.
Long Statement,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,MergeTransactionsWithAsyncCommit,The length of the statement  "                                    $"Failed to run merged transaction with {currentPendingOps.Count:#'#0} operations in async manner' will retry independently"' " is 125.
Long Statement,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,ExecutePendingOperationsInTransaction,The length of the statement  "                            $"Stopping merged operations because previous transaction async commit completed. Took {sp.Elapsed} with {pendingOps.Count} operations and {_operations.Count} remaining operations"); " is 182.
Long Statement,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,ExecutePendingOperationsInTransaction,The length of the statement  "                        _log.Info($"Stopping merged operations because {sp.Elapsed} passed {pendingOps.Count} operations and {_operations.Count} remaining operations"); " is 144.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,ValidateConfiguration,The length of the statement  "            if (_databaseRecord.Encrypted && config.UsingEncryptedCommunicationChannel() == false && config.AllowEtlOnNonEncryptedChannel == false) " is 135.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,ValidateConfiguration,The length of the statement  "                        $"{_database.Name} is encrypted' but connection to ETL destination {config.GetDestination()} does not use encryption' so ETL is not allowed. " + " is 144.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,ValidateConfiguration,The length of the statement  "                        $"You can change this behavior by setting {nameof(config.AllowEtlOnNonEncryptedChannel)} when creating the ETL configuration" " is 125.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,ValidateConfiguration,The length of the statement  "            if (_databaseRecord.Encrypted && config.UsingEncryptedCommunicationChannel() == false && config.AllowEtlOnNonEncryptedChannel) " is 126.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,ValidateConfiguration,The length of the statement  "                        $"{_database.Name} is encrypted and connection to ETL destination {config.GetDestination()} does not use encryption' " + " is 120.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,LogConfigurationError,The length of the statement  "            var errorMessage = $"Invalid ETL configuration for '{config.Name}'{(config.Connection != null ? $" ({config.GetDestination()})" : string.Empty)}. " + " is 149.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,LogConfigurationError,The length of the statement  "            var alert = AlertRaised.Create(_database.Name'AlertTitle' errorMessage' AlertType.Etl_Error' NotificationSeverity.Error); " is 121.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,LogConfigurationWarning,The length of the statement  "            var warnMessage = $"Warning about ETL configuration for '{config.Name}'{(config.Connection != null ? $" ({config.GetDestination()})" : string.Empty)}. " + " is 154.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,LogConfigurationWarning,The length of the statement  "            var alert = AlertRaised.Create(_database.Name' AlertTitle' warnMessage' AlertType.Etl_Warning' NotificationSeverity.Warning); " is 125.
Long Statement,Raven.Server.Documents.ETL,EtlLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlLoader.cs,HandleDatabaseValueChanged,The length of the statement  "                    var state = _serverStore.Cluster.Read(context' EtlProcessState.GenerateItemName(record.DatabaseName' process.ConfigurationName' process.TransformationName)); " is 157.
Long Statement,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,Extract,The length of the statement  "                var enumerators = new List<(IEnumerator<Document> Docs' IEnumerator<DocumentTombstone> Tombstones' string Collection)>(Transformation.Collections.Count); " is 153.
Long Statement,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,Extract,The length of the statement  "                        var tombstones = Database.DocumentsStorage.GetTombstonesFrom(context' collection' fromEtag' 0' int.MaxValue).GetEnumerator(); " is 125.
Long Statement,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,CanContinueBatch,The length of the statement  "                    var reason = $"Stopping the batch because cannot budget additional memory. Current budget: {_threadAllocations.TotalAllocated}. Current memory usage: " + " is 153.
Long Statement,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,Run,The length of the statement  "                        var command = new UpdateEtlProcessStateCommand(Database.Name' Configuration.Name' Transformation.Name' Statistics.LastProcessedEtag' " is 132.
Long Statement,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,GetProcessState,The length of the statement  "                var stateBlittable = _serverStore.Cluster.Read(context' EtlProcessState.GenerateItemName(Database.Name' Configuration.Name' Transformation.Name)); " is 146.
Long Statement,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,GetPerformanceStats,The length of the statement  "                // .Select(x => x == lastStats ? x.ToEtlPerformanceStats().ToIndexingPerformanceLiveStatsWithDetails() : x.ToIndexingPerformanceStats()) " is 136.
Long Statement,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,LogSuccessfulBatchInfo,The length of the statement  "                $"{Tag} process '{Name}' extracted {stats.NumberOfExtractedItems} docs' transformed and loaded {stats.NumberOfTransformedItems} docs in {stats.Duration}. "); " is 157.
Long Statement,Raven.Server.Documents.ETL,EtlProcessStatistics,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcessStatistics.cs,RecordLoadError,The length of the statement  "            var message = $"[{_name}] Load error hit ratio too high. Could not tolerate load error ratio and stopped current ETL cycle"; " is 124.
Long Statement,Raven.Server.Documents.ETL,EtlTransformer<TExtracted;TTransformed>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlTransformer.cs,Initalize,The length of the statement  "            SingleRun.ScriptEngine.SetValue(Transformation.LoadTo' new ClrFunctionInstance(SingleRun.ScriptEngine'LoadToFunctionTranslator)); " is 129.
Long Statement,Raven.Server.Documents.ETL,EtlTransformer<TExtracted;TTransformed>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlTransformer.cs,Initalize,The length of the statement  "            SingleRun.ScriptEngine.SetValue(Transformation.LoadAttachment' new ClrFunctionInstance(SingleRun.ScriptEngine'LoadAttachment)); " is 127.
Long Statement,Raven.Server.Documents.ETL,EtlTransformer<TExtracted;TTransformed>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlTransformer.cs,Initalize,The length of the statement  "                var clrFunctionInstance = new ClrFunctionInstance(SingleRun.ScriptEngine'(value' values) => LoadToFunctionTranslator(collection' value' values)); " is 145.
Long Statement,Raven.Server.Documents.ETL.Providers.Raven,RavenEtlDocumentTransformer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\Raven\RavenEtlDocumentTransformer.cs,Transform,The length of the statement  "                    if (_script.LoadToCollections.Length > 1 || _script.IsLoadedToDefaultCollection(item' _script.LoadToCollections[0]) == false) " is 125.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlDocumentTransformer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlDocumentTransformer.cs,GetOrAdd,The length of the statement  "                    table = new SqlTableWithRecords(_config.SqlTables.Find(x => x.TableName.Equals(tableName' StringComparison.OrdinalIgnoreCase))); " is 128.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,LogStats,The length of the statement  "                    Logger.Info($"[{Name}] Inserted {stats.InsertedRecordsCount} (out of {table.Inserts.Count}) records to '{table.TableName}' table " + " is 132.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,LogStats,The length of the statement  "                    Logger.Info($"[{Name}] Deleted {stats.DeletedRecordsCount} (out of {table.Deletes.Count}) records from '{table.TableName}' table " + " is 132.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,Simulate,The length of the statement  "                    var commands = simulatedwriter.SimulateExecuteCommandText(records' CancellationToken).Select(x => new TableQuerySummary.CommandData " is 131.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,SimulateSqlEtl,The length of the statement  "            if (serverStore.LoadDatabaseRecord(database.Name' out _).SqlConnectionStrings.TryGetValue(simulateSqlEtl.Configuration.ConnectionStringName' out var connectionString) == false) " is 176.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,SimulateSqlEtl,The length of the statement  "                throw new InvalidOperationException($"Connection string named {simulateSqlEtl.Configuration.ConnectionStringName} was not found in the database record"); " is 153.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,SimulateSqlEtl,The length of the statement  "                throw new InvalidOperationException($"Invalid number of transformations. You have provided {simulateSqlEtl.Configuration.Transforms.Count} " + " is 142.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,SimulateSqlEtl,The length of the statement  "                throw new InvalidOperationException($"Invalid number of collections specified in the transformation script. You have provided {simulateSqlEtl.Configuration.Transforms[0].Collections.Count} " + " is 192.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,SimulateSqlEtl,The length of the statement  "                var transformed = etl.Transform(new[] {new ToSqlItem(document' collection)}' context' new EtlStatsScope(new EtlRunStats())' new EtlProcessState()); " is 147.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,GetDbProviderFactory,The length of the statement  "                var message = $"Could not find provider factory {configuration.FactoryName} to replicate to sql for {configuration.Name}' ignoring."; " is 133.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,DeleteItems,The length of the statement  "                            _logger.Info("Failure to replicate changes to relational database for: " + _etl.Name + "' will continue trying." + Environment.NewLine + cmd.CommandText' e); " is 157.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,HandleSlowSql,The length of the statement  "            _database.NotificationCenter.Add(AlertRaised.Create(_database.Name'_etl.Tag' message' AlertType.SqlEtl_SlowSql' NotificationSeverity.Warning)); " is 143.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,Write,The length of the statement  "                stats.DeletedRecordsCount = DeleteItems(table.TableName' table.DocumentIdColumn' _etl.Configuration.ParameterizeDeletes' table.Deletes' token' collectCommands); " is 160.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,Write,The length of the statement  "                stats.InsertedRecordsCount = InsertItems(table.TableName' table.DocumentIdColumn' table.Inserts' token' collectCommands); " is 121.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,GenerateStringParsers,The length of the statement  "                        if (DateTime.TryParseExact(value' DefaultFormat.OnlyDateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out DateTime dateTime)) " is 151.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriterSimulator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriterSimulator.cs,SimulateExecuteCommandText,The length of the statement  "                foreach (var deleteQuery in GenerateDeleteItemsCommandText(records.TableName' records.DocumentIdColumn' _configuration.ParameterizeDeletes' " is 139.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriterSimulator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriterSimulator.cs,SimulateExecuteCommandText,The length of the statement  "            foreach (var insertQuery in GenerteInsertItemCommandText(records.TableName' records.DocumentIdColumn' records.Inserts' token)) " is 126.
Long Statement,Raven.Server.Documents.ETL.Providers.SQL.Simulation,TableQuerySummary,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\Simulation\TableQuerySummary.cs,GenerateSummaryFromCommands,The length of the statement  "                        Params = x.Parameters.Cast<DbParameter>().Select(y => new KeyValuePair<string' object>(y.ParameterName' y.Value)).ToArray() " is 123.
Long Statement,Raven.Server.Documents.Expiration,ExpirationStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Expiration\ExpirationStorage.cs,PutInternal,The length of the statement  "            if (DateTime.TryParseExact(expirationDate' DefaultFormat.DateTimeFormatsToRead' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out DateTime date) == false) " is 168.
Long Statement,Raven.Server.Documents.Expiration,ExpirationStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Expiration\ExpirationStorage.cs,PutInternal,The length of the statement  "                throw new InvalidOperationException($"The expiration date format is not valid: '{expirationDate}'. Use the following format: {_database.Time.GetUtcNow():O}"); " is 158.
Long Statement,Raven.Server.Documents.Expiration,ExpirationStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Expiration\ExpirationStorage.cs,PutInternal,The length of the statement  "            // We explicitly enable adding documents that have already been expired' we have to' because if the time lag is short' it is possible " is 133.
Long Statement,Raven.Server.Documents.Expiration,ExpirationStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Expiration\ExpirationStorage.cs,PutInternal,The length of the statement  "            // that we add a document that expire in 1 second' but by the time we process it' it already expired. The user did nothing wrong here " is 133.
Long Statement,Raven.Server.Documents.Expiration,ExpirationStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Expiration\ExpirationStorage.cs,HasExpired,The length of the statement  "            if (DateTime.TryParseExact(expirationDate' DefaultFormat.DateTimeFormatsToRead' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out var date) == false) " is 163.
Long Statement,Raven.Server.Documents.Expiration,ExpiredDocumentsCleaner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Expiration\ExpiredDocumentsCleaner.cs,CleanupExpiredDocs,The length of the statement  "                        var expired = _database.DocumentsStorage.ExpirationStorage.GetExpiredDocuments(context' currentTime' CancellationToken' out var duration); " is 138.
Long Statement,Raven.Server.Documents.Expiration,ExpiredDocumentsCleaner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Expiration\ExpiredDocumentsCleaner.cs,CleanupExpiredDocs,The length of the statement  "                            Logger.Info($"Successfully deleted {command.DeletionCount:#'#;;0} documents in {duration.ElapsedMilliseconds:#'#;;0} ms."); " is 123.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                throw new InvalidOperationException($"Cannot add node '{nodeUrl}' to cluster because it will create invalid mix of HTTPS & HTTP endpoints. A cluster must be only HTTPS or only HTTP."); " is 184.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                        throw new InvalidOperationException($"Can't add a new node on {nodeUrl} to cluster because this url is already used by node {possibleNode.NodeTag}"); " is 149.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                        throw new InvalidOperationException($"Can't add a new node on {nodeUrl} to cluster because it's already in the cluster under tag :{nodeInfo.NodeTag} and URL: {clusterTopology.GetUrlFromTag(nodeInfo.NodeTag)}"); " is 210.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                        throw new InvalidOperationException($"Can't add a new node on {nodeUrl} to cluster because it's a synonym of the current node URL:{ServerStore.GetNodeHttpServerUrl()}"); " is 169.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                            $"Adding a new node to cluster failed. The new node is already in another cluster. Expected topology id: {topologyId}' but we get {nodeInfo.TopologyId}"); " is 154.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                            throw  new InvalidOperationException($"Cannot add node {nodeTag} with url {nodeUrl} to cluster because it has no certificate while trying to use HTTPS"); " is 153.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                                    $"Cannot add node {nodeTag} with url {nodeUrl} to cluster because its certificate '{certificate.FriendlyName}' is not yet valid. It starts on {certificate.NotBefore}"); " is 168.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                            throw new InvalidOperationException($"Cannot add node {nodeTag} with url {nodeUrl} to cluster because its certificate '{certificate.FriendlyName}' expired on {certificate.NotAfter}"); " is 183.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                                throw new InvalidOperationException($"Cannot add node {nodeTag} with url {nodeUrl} to cluster because its certificate thumbprint '{certificate.Thumbprint}' doesn't match the expected thumbprint '{expected}'."); " is 210.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                            var res = await ServerStore.PutValueInClusterAsync(new PutCertificateCommand(Constants.Certificates.Prefix + certificate.Thumbprint' certificateDefinition)); " is 157.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,AddNode,The length of the statement  "                                throw new ConcurrencyException("After adding the certificate' it was removed' shouldn't happen unless another admin removed it midway through."); " is 145.
Long Statement,Raven.Server.Documents.Handlers.Admin,RachisAdminHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Admin\RachisAdminHandler.cs,DemoteNode,The length of the statement  "                    $"Failed to demote node {nodeTag} beacuse {nodeTag} is the current leader in the cluster topology. In order to demote {nodeTag} perform a Step-Down first"); " is 156.
Long Statement,Raven.Server.Documents.Handlers,AttachmentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\AttachmentHandler.cs,Head,The length of the statement  "                var attachment = Database.DocumentsStorage.AttachmentsStorage.GetAttachment(context' documentId' name' AttachmentType.Document' null); " is 134.
Long Statement,Raven.Server.Documents.Handlers,AttachmentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\AttachmentHandler.cs,GetAttachment,The length of the statement  "                var attachment = Database.DocumentsStorage.AttachmentsStorage.GetAttachment(context' documentId' name' type' changeVector); " is 123.
Long Statement,Raven.Server.Documents.Handlers,AttachmentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\AttachmentHandler.cs,GetAttachment,The length of the statement  "                    HttpContext.Response.Headers["Content-Disposition"] = $"attachment; filename=\"{fileName}\"; filename*=UTF-8''{fileName}"; " is 122.
Long Statement,Raven.Server.Documents.Handlers,AttachmentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\AttachmentHandler.cs,Put,The length of the statement  "                    var hash = await AttachmentsStorageHelper.CopyStreamToFileAndCalculateHash(context' RequestBodyStream()' stream' Database.DatabaseShutdown); " is 140.
Long Statement,Raven.Server.Documents.Handlers,BatchHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,BulkDocs,The length of the statement  "                    command.ParsedCommands = await BatchRequestParser.BuildCommandsAsync(context' RequestBodyStream()' Database' ServerStore); " is 122.
Long Statement,Raven.Server.Documents.Handlers,BatchHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,ThrowNotSupportedType,The length of the statement  "            throw new InvalidOperationException($"The requested Content type '{contentType}' is not supported. Use 'application/json' or 'multipart/mixed'."); " is 146.
Long Statement,Raven.Server.Documents.Handlers,BatchHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,ParseMultipart,The length of the statement  "                attachmentStream.Hash = await AttachmentsStorageHelper.CopyStreamToFileAndCalculateHash(context' bodyStream' attachmentStream.Stream' Database.DatabaseShutdown); " is 161.
Long Statement,Raven.Server.Documents.Handlers,MergedBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,Execute,The length of the statement  "                            Database.DocumentsStorage.AttachmentsStorage.DeleteAttachment(context' cmd.Id' cmd.Name' cmd.ChangeVector' updateDocument: false); " is 130.
Long Statement,Raven.Server.Documents.Handlers,MergedBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,Execute,The length of the statement  "                        var changeVector = Database.DocumentsStorage.AttachmentsStorage.UpdateDocumentAfterAttachmentChange(context' documentId); " is 121.
Long Statement,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,BuildCommandsAsync,The length of the statement  "                    if (commandData.Type == CommandType.PUT && string.IsNullOrEmpty(commandData.Id) == false && commandData.Id[commandData.Id.Length - 1] == '|') " is 141.
Long Statement,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,RefillParserBuffer,The length of the statement  "            var read = await stream.ReadAsync(buffer.Buffer.Array' buffer.Buffer.Offset' buffer.Buffer.Count' token).WithCancellation(token); " is 129.
Long Statement,Raven.Server.Documents.Handlers,ChangesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ChangesHandler.cs,HandleConnection,The length of the statement  "                            using (var builder = new BlittableJsonDocumentBuilder(context' BlittableJsonDocumentBuilder.UsageMode.None' debugTag' parser' jsonParserState)) " is 143.
Long Statement,Raven.Server.Documents.Handlers,CollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\CollectionsHandler.cs,GetCollectionDocuments,The length of the statement  "                var documents = Database.DocumentsStorage.GetDocumentsInReverseEtagOrder(context' GetStringQueryString("name")' GetStart()' pageSize); " is 134.
Long Statement,Raven.Server.Documents.Handlers,CollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\CollectionsHandler.cs,GetCollectionDocuments,The length of the statement  "                AddPagingPerformanceHint(PagingOperationType.Documents' "Collection"' HttpContext.Request.QueryString.Value' numberOfResults' pageSize' sw.ElapsedMilliseconds); " is 160.
Long Statement,Raven.Server.Documents.Handlers,DocumentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\DocumentHandler.cs,GetDocuments,The length of the statement  "            AddPagingPerformanceHint(PagingOperationType.Documents' isStartsWith ? nameof(DocumentsStorage.GetDocumentsStartingWith) : nameof(GetDocuments)' HttpContext.Request.QueryString.Value' numberOfResults' pageSize' sw.ElapsedMilliseconds); " is 235.
Long Statement,Raven.Server.Documents.Handlers,DocumentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\DocumentHandler.cs,GetDocumentsById,The length of the statement  "            AddPagingPerformanceHint(PagingOperationType.Documents' nameof(GetDocumentsById)' HttpContext.Request.QueryString.Value' numberOfResults' documents.Count' sw.ElapsedMilliseconds); " is 179.
Long Statement,Raven.Server.Documents.Handlers,DocumentHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\DocumentHandler.cs,Patch,The length of the statement  "            var skipPatchIfChangeVectorMismatch = GetBoolValueQueryString("skipPatchIfChangeVectorMismatch"' required: false) ?? false; " is 123.
Long Statement,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The length of the statement  "            if (DateTime.TryParseExact(lastRangeAtStr' DefaultFormat.DateTimeOffsetFormatsToWrite' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out DateTime lastRangeAt) == false) " is 182.
Long Statement,Raven.Server.Documents.Handlers,MergedNextHiLoCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,Execute,The length of the statement  "                        using (var freshHilo = context.ReadObject(hiloDocReader' hiLoDocumentId' BlittableJsonDocumentBuilder.UsageMode.ToDisk)) " is 120.
Long Statement,Raven.Server.Documents.Handlers,MergedHiLoReturnCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,Execute,The length of the statement  "                using (var hiloReader = context.ReadObject(document.Data' hiLoDocumentId' BlittableJsonDocumentBuilder.UsageMode.ToDisk)) " is 121.
Long Statement,Raven.Server.Documents.Handlers,IndexHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IndexHandler.cs,Debug,The length of the statement  "                    using (index.GetIdentifiersOfMappedDocuments(GetStringQueryString("startsWith"' required: false)' GetStart()' GetPageSize()' out IEnumerable<string> ids)) " is 154.
Long Statement,Raven.Server.Documents.Handlers,IndexHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IndexHandler.cs,Terms,The length of the statement  "                var result = Database.QueryRunner.ExecuteGetTermsQuery(name' field' fromValue' existingResultEtag' GetPageSize()' context' token); " is 130.
Long Statement,Raven.Server.Documents.Handlers,QueriesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\QueriesHandler.cs,FacetedQuery,The length of the statement  "            AddPagingPerformanceHint(PagingOperationType.Queries' $"{nameof(FacetedQuery)} ({result.IndexName})"' indexQuery.Query' numberOfResults' indexQuery.PageSize' result.DurationInMs); " is 179.
Long Statement,Raven.Server.Documents.Handlers,QueriesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\QueriesHandler.cs,Query,The length of the statement  "            AddPagingPerformanceHint(PagingOperationType.Queries' $"{nameof(Query)} ({result.IndexName})"' indexQuery.Query' numberOfResults' indexQuery.PageSize' result.DurationInMs); " is 172.
Long Statement,Raven.Server.Documents.Handlers,QueriesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\QueriesHandler.cs,SuggestQuery,The length of the statement  "            AddPagingPerformanceHint(PagingOperationType.Queries' $"{nameof(SuggestQuery)} ({result.IndexName})"' indexQuery.Query' numberOfResults' indexQuery.PageSize' result.DurationInMs); " is 179.
Long Statement,Raven.Server.Documents.Handlers,QueriesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\QueriesHandler.cs,Delete,The length of the statement  "            var returnContextToPool = ContextPool.AllocateOperationContext(out DocumentsOperationContext context); // we don't dispose this as operation is async " is 149.
Long Statement,Raven.Server.Documents.Handlers,QueriesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\QueriesHandler.cs,Patch,The length of the statement  "            var returnContextToPool = ContextPool.AllocateOperationContext(out DocumentsOperationContext context); // we don't dispose this as operation is async " is 149.
Long Statement,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,Performance,The length of the statement  "                writer.WriteArray(context' nameof(ReplicationPerformance.Incoming)' Database.ReplicationLoader.IncomingHandlers' (w' c' handler) => " is 131.
Long Statement,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,Performance,The length of the statement  "                    w.WriteArray(c' nameof(ReplicationPerformance.IncomingStats.Performance)' handler.GetReplicationPerformance()' (innerWriter' innerContext' performance) => " is 154.
Long Statement,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,Performance,The length of the statement  "                writer.WriteArray(context' nameof(ReplicationPerformance.Outgoing)' Database.ReplicationLoader.OutgoingHandlers' (w' c' handler) => " is 131.
Long Statement,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,Performance,The length of the statement  "                    w.WriteArray(c' nameof(ReplicationPerformance.OutgoingStats.Performance)' handler.GetReplicationPerformance()' (innerWriter' innerContext' performance) => " is 154.
Long Statement,Raven.Server.Documents.Handlers,RevisionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\RevisionsHandler.cs,GetRevisionByChangeVector,The length of the statement  "            AddPagingPerformanceHint(PagingOperationType.Documents' nameof(GetRevisionByChangeVector)' HttpContext.Request.QueryString.Value' numberOfResults' revisions.Count' sw.ElapsedMilliseconds); " is 188.
Long Statement,Raven.Server.Documents.Handlers,RevisionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\RevisionsHandler.cs,GetRevisions,The length of the statement  "            AddPagingPerformanceHint(PagingOperationType.Revisions' nameof(GetRevisions)' HttpContext.Request.QueryString.Value' count' pageSize' sw.ElapsedMilliseconds); " is 158.
Long Statement,Raven.Server.Documents.Handlers,RevisionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\RevisionsHandler.cs,GetRevisionsBin,The length of the statement  "                AddPagingPerformanceHint(PagingOperationType.Revisions' nameof(GetRevisionsBin)' HttpContext.Request.QueryString.Value' count' pageSize' sw.ElapsedMilliseconds); " is 161.
Long Statement,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,DistributeKeyInCluster,The length of the statement  "                            throw new InvalidOperationException($"Cannot put secret key for {name} on node {node} with url {url} because it is not using HTTPS"); " is 133.
Long Statement,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,SendKeyToNodeAsync,The length of the statement  "            using (var shortLived = RequestExecutor.CreateForSingleNodeWithoutConfigurationUpdates(url' name' server.Server.Certificate.Certificate' DocumentConventions.Default)) " is 166.
Long Statement,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,SendKeyToNodeAsync,The length of the statement  "                    throw new InvalidOperationException($"Failed to store secret key for {name} in Node {node}' url={url}. StatusCode = {command.StatusCode}"); " is 139.
Long Statement,Raven.Server.Documents.Handlers,StatsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StatsHandler.cs,Stats,The length of the statement  "                        stats.LastIndexingTime = stats.LastIndexingTime >= index.LastIndexingTime ? stats.LastIndexingTime : index.LastIndexingTime; " is 124.
Long Statement,Raven.Server.Documents.Handlers,StatsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StatsHandler.cs,BytesMetrics,The length of the statement  "                        [nameof(Database.Metrics.Attachments.BytesPutsPerSec)] = Database.Metrics.Docs.BytesPutsPerSec.CreateMeterData(true' empty) " is 123.
Long Statement,Raven.Server.Documents.Handlers,StreamingHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StreamingHandler.cs,StreamQueryGet,The length of the statement  "            using (var tracker = new RequestTimeTracker(HttpContext' Logger' Database' "StreamQuery"' doPerformanceHintIfTooLong: false)) " is 125.
Long Statement,Raven.Server.Documents.Handlers,StreamingHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StreamingHandler.cs,StreamQueryGet,The length of the statement  "                using (var writer = new StreamCsvDocumentQueryResultWriter(HttpContext.Response' ResponseBodyStream()' context' propertiesArray)) " is 129.
Long Statement,Raven.Server.Documents.Handlers,StreamingHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StreamingHandler.cs,StreamQueryGet,The length of the statement  "                        await Database.QueryRunner.ExecuteStreamQuery(query' context' HttpContext.Response' writer' token).ConfigureAwait(false); " is 121.
Long Statement,Raven.Server.Documents.Handlers,StreamingHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StreamingHandler.cs,StreamQueryPost,The length of the statement  "            using (var tracker = new RequestTimeTracker(HttpContext' Logger' Database' "StreamQuery"' doPerformanceHintIfTooLong: false)) " is 125.
Long Statement,Raven.Server.Documents.Handlers,StreamingHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\StreamingHandler.cs,StreamQueryPost,The length of the statement  "                        await Database.QueryRunner.ExecuteStreamQuery(query' context' HttpContext.Response' writer' token).ConfigureAwait(false); " is 121.
Long Statement,Raven.Server.Documents.Handlers,SubscriptionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SubscriptionsHandler.cs,Try,The length of the statement  "                    new IPEndPoint(HttpContext.Connection.RemoteIpAddress' HttpContext.Connection.RemotePort)' collection' revisions' state' patch); " is 128.
Long Statement,Raven.Server.Documents.Handlers,SubscriptionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SubscriptionsHandler.cs,Try,The length of the statement  "                            state.ChangeVectorForNextBatchStartingPoint = Database.DocumentsStorage.GetLastDocumentChangeVector(context' collection); " is 121.
Long Statement,Raven.Server.Documents.Handlers,TcpManagementHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\TcpManagementHandler.cs,GetAll,The length of the statement  "                operation = (TcpConnectionHeaderMessage.OperationTypes)Enum.Parse(typeof(TcpConnectionHeaderMessage.OperationTypes)' operationString' ignoreCase: true); " is 152.
Long Statement,Raven.Server.Documents.Handlers.Debugging,AllDocumentIdsDebugHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\ExportAllDocIdsHandler.cs,ExportAllDocIds,The length of the statement  "            var fileName = $"ids-for-{Uri.EscapeDataString(Database.Name)}-{Database.Time.GetUtcNow().GetDefaultRavenFormat(isUtc: true)}.txt"; " is 131.
Long Statement,Raven.Server.Documents.Handlers.Debugging,ServerWideDebugInfoPackageHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\ServerWideDebugInfoPackageHandler.cs,GetClusterwideInfoPackageForRemote,The length of the statement  "                            await transactionOperationContext.ReadForMemoryAsync(HttpContext.Request.Body' "remote-cluster-info-package/read request header")) " is 130.
Long Statement,Raven.Server.Documents.Handlers.Debugging,ServerWideDebugInfoPackageHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\ServerWideDebugInfoPackageHandler.cs,WriteDebugInfoPackageForNodeAsync,The length of the statement  "            //note : theoretically GetDebugInfoFromNodeAsync() can throw' error handling is done at the level of WriteDebugInfoPackageForNodeAsync() calls " is 142.
Long Statement,Raven.Server.Documents.Handlers.Debugging,ServerWideDebugInfoPackageHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\ServerWideDebugInfoPackageHandler.cs,GetInfoPackage,The length of the statement  "            var contentDisposition = $"attachment; filename={DateTime.UtcNow:yyyy-MM-dd H:mm:ss} - Node [{ServerStore.NodeTag}].zip"; " is 121.
Long Statement,Raven.Server.Documents.Handlers.Debugging,ServerWideDebugInfoPackageHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\ServerWideDebugInfoPackageHandler.cs,WriteForDatabase,The length of the statement  "                        using (var endpointOutput = await localEndpointClient.InvokeAndReadObjectAsync(route' jsonOperationContext' endpointParameters)) " is 128.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Open,The length of the statement  "                options.CompressTxAboveSizeInBytes = documentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes); " is 121.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Open,The length of the statement  "                options.TimeToSyncAfterFlashInSec = (int)documentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds; " is 125.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Open,The length of the statement  "                options.NumOfConcurrentSyncsPerPhysDrive = documentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive; " is 122.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Initialize,The length of the statement  "                options.CompressTxAboveSizeInBytes = documentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes); " is 121.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Initialize,The length of the statement  "                options.TimeToSyncAfterFlashInSec = (int)documentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds; " is 125.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Initialize,The length of the statement  "                options.NumOfConcurrentSyncsPerPhysDrive = documentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive; " is 122.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Initialize,The length of the statement  "                        using (DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext documentsContext)) " is 126.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Start,The length of the statement  "                _indexingProcessCancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(DocumentDatabase.DatabaseShutdown); " is 125.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Dispose,The length of the statement  "                    // IndexPersistence = null; - let it access IndexPersistence.ContainsField in AssertKnownField when storage operation is running " is 128.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,ExecuteIndexing,The length of the statement  "                        var stats = _lastStats = new IndexingStatsAggregator(DocumentDatabase.IndexStore.Identities.GetNextIndexingStatsId()' _lastStats); " is 130.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,DoIndexingWork,The length of the statement  "            using (DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext databaseContext)) " is 125.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,DoIndexingWork,The length of the statement  "                    new CurrentIndexingScope(DocumentDatabase.DocumentsStorage' databaseContext' Definition' indexContext' GetOrAddSpatialField)) " is 125.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,DoIndexingWork,The length of the statement  "                    var writeOperation = new Lazy<IndexWriteOperation>(() => IndexPersistence.OpenIndexWriter(indexContext.Transaction.InnerTransaction)); " is 134.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,GetMemoryStats,The length of the statement  "                var isTempPath = indexTempPath != null && string.Equals(indexTempPath.FullPath' directory' StringComparison.OrdinalIgnoreCase); " is 127.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,FacetedQuery,The length of the statement  "                            FillFacetedQueryResult(result' IsStale(documentsContext' indexContext)' facetQuery.FacetsEtag' documentsContext' indexContext); " is 127.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,IndexEntries,The length of the statement  "                foreach (var indexEntry in reader.IndexEntries(query' totalResults' documentsContext' GetOrAddSpatialField' token.Token)) " is 121.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,ThrowErrored,The length of the statement  "                $"Index '{Name}' is marked as errored. Please check index errors avaiable at '/databases/{DocumentDatabase.Name}/indexes/errors?name={Name}'."); " is 144.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,MinimumSizeForCalculateIndexEtagLength,The length of the statement  "            var length = sizeof(long) * 4 * Collections.Count + // last document etag' last tombstone etag and last mapped etags per collection " is 131.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,GetIndexEtag,The length of the statement  "            using (DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext documentsContext)) " is 126.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,HandleIndexOutputsPerDocument,The length of the statement  "            if (PerformanceHints.MaxWarnIndexOutputsPerDocument <= 0 || numberOfOutputs <= PerformanceHints.MaxWarnIndexOutputsPerDocument) " is 127.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,HandleIndexOutputsPerDocument,The length of the statement  "                $"Index '{Name}' has produced more than {PerformanceHints.MaxWarnIndexOutputsPerDocument:#'#} map results from a single document"' " is 130.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The length of the statement  "            if (_lowMemoryFlag.IsRaised() && count > MinBatchSize && DocumentDatabase.IndexStore.StoppedConcurrentIndexBatches.Wait(0)) " is 123.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The length of the statement  "                    $"Number of errors ({stats.ErrorsCount}) reached maximum number of allowed errors per batch ({IndexStorage.MaxNumberOfKeptErrors})"); " is 133.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The length of the statement  "                IPagerLevelTransactionState pagerLevelTransactionState = documentsOperationContext.Transaction?.InnerTransaction?.LowLevelTransaction; " is 134.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The length of the statement  "                    stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in docs ctx"); " is 121.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The length of the statement  "                    stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in index ctx"); " is 122.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The length of the statement  "                        var srcOptions = StorageEnvironmentOptions.ForPath(environmentOptions.BasePath.FullPath' null' null' DocumentDatabase.IoChanges' " is 128.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The length of the statement  "                        srcOptions.CompressTxAboveSizeInBytes = DocumentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes); " is 124.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The length of the statement  "                        srcOptions.TimeToSyncAfterFlashInSec = (int)DocumentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds; " is 128.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The length of the statement  "                        srcOptions.NumOfConcurrentSyncsPerPhysDrive = DocumentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive; " is 125.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The length of the statement  "                            compactOptions.CompressTxAboveSizeInBytes = DocumentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes); " is 128.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The length of the statement  "                            compactOptions.TimeToSyncAfterFlashInSec = (int)DocumentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds; " is 132.
Long Statement,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The length of the statement  "                            compactOptions.NumOfConcurrentSyncsPerPhysDrive = DocumentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive; " is 129.
Long Statement,Raven.Server.Documents.Indexes,QueryDoneRunning,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,ThrowLockTimeoutException,The length of the statement  "                    $"Could not get the index read lock in a reasonable time' {_parent.Name} is probably undergoing maintenance now' try again later"); " is 131.
Long Statement,Raven.Server.Documents.Indexes,IndexDefinitionBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionBase.cs,ReadMetadataFile,The length of the statement  "                throw new InvalidOperationException($"Unable to read metadata file for index '{Name}' at {options.BasePath.Combine(MetadataFileName).FullPath}"' e); " is 148.
Long Statement,Raven.Server.Documents.Indexes,IndexDefinitionCodeGenerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionCodeGenerator.cs,GetText,The length of the statement  "                    .WithParameterList(ParameterList().WithCloseParenToken(Token(TriviaList()' SyntaxKind.CloseParenToken' TriviaList(LineFeed)))) " is 126.
Long Statement,Raven.Server.Documents.Indexes,IndexDefinitionCodeGenerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionCodeGenerator.cs,GetText,The length of the statement  "                .AddBaseListTypes(SimpleBaseType(IdentifierName(Identifier(TriviaList()' "AbstractIndexCreationTask"' TriviaList(LineFeed))))) " is 126.
Long Statement,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,ReadErrors,The length of the statement  "                foreach (var tvr in table.SeekForwardFrom(_errorsSchema.Indexes[IndexSchema.ErrorTimestampsSlice]' Slices.BeforeAllKeys' 0)) " is 124.
Long Statement,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,ReadStats,The length of the statement  "            stats.CreatedTimestamp = DateTime.FromBinary(statsTree.Read(IndexSchema.CreatedTimestampSlice).Reader.ReadLittleEndianInt64()); " is 127.
Long Statement,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,WriteLastReferenceTombstoneEtag,The length of the statement  "            using (Slice.From(tx.InnerTransaction.Allocator' referencedCollection.Name' ByteStringType.Immutable' out Slice collectionSlice)) " is 129.
Long Statement,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,WriteLastReferenceEtag,The length of the statement  "            using (Slice.From(tx.InnerTransaction.Allocator' referencedCollection.Name' ByteStringType.Immutable' out Slice collectionSlice)) " is 129.
Long Statement,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,UpdateStats,The length of the statement  "                var currentMaxNumberOfOutputs = statsTree.Read(IndexSchema.MaxNumberOfOutputsPerDocument)?.Reader.ReadLittleEndianInt32(); " is 122.
Long Statement,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,CleanupErrors,The length of the statement  "            table.DeleteForwardFrom(_errorsSchema.Indexes[IndexSchema.ErrorTimestampsSlice]' Slices.BeforeAllKeys' false' numberOfEntriesToDelete); " is 135.
Long Statement,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,WriteReferences,The length of the statement  "            // $Users (tree) - holding highest visible etag of 'referenced collection' per collection' so we will have a starting point for references processing " is 149.
Long Statement,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,WriteReferences,The length of the statement  "                        using (Slice.From(tx.InnerTransaction.Allocator' collectionName.Name' ByteStringType.Immutable' out Slice collectionKey)) " is 121.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleAutoIndexChange,The length of the statement  "            if (creationOptions == IndexCreationOptions.UpdateWithoutUpdatingCompiledIndex || creationOptions == IndexCreationOptions.Update) " is 129.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleChangesForStaticIndexes,The length of the statement  "                    var configuration = new FaultyInMemoryIndexConfiguration(_documentDatabase.Configuration.Indexing.StoragePath' _documentDatabase.Configuration); " is 144.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleStaticIndexChange,The length of the statement  "                    creationOptions = GetIndexCreationOptions(definition' replacementIndex' out IndexDefinitionCompareDifferences sideBySideDifferences); " is 133.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,GetIndexCreationOptions,The length of the statement  "            if ((differences & IndexDefinitionCompareDifferences.MapsFormatting) == IndexDefinitionCompareDifferences.MapsFormatting || " is 123.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,GetIndexCreationOptions,The length of the statement  "                (differences & IndexDefinitionCompareDifferences.ReduceFormatting) == IndexDefinitionCompareDifferences.ReduceFormatting) " is 121.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,ValidateIndexName,The length of the statement  "                throw new ArgumentException($"Index name '{name.Replace("//"' "__")}' not permitted. Index name cannot contain // (double slashes)"' nameof(name)); " is 147.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,ValidateIndexName,The length of the statement  "                throw new ArgumentException($"Index name '{name}' not permitted. Static index name cannot start with 'Auto/'"' nameof(name)); " is 125.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,OpenIndexesFromRecord,The length of the statement  "            //foreach (var indexDirectory in new DirectoryInfo(path.FullPath).GetDirectories().Concat(indexesCustomPaths.Values.SelectMany(x => new DirectoryInfo(x).GetDirectories()))) " is 172.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleUnusedAutoIndexes,The length of the statement  "            var timeToWaitBeforeMarkingAutoIndexAsIdle = _documentDatabase.Configuration.Indexing.TimeToWaitBeforeMarkingAutoIndexAsIdle; " is 125.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleUnusedAutoIndexes,The length of the statement  "            var timeToWaitBeforeDeletingAutoIndexMarkedAsIdle = _documentDatabase.Configuration.Indexing.TimeToWaitBeforeDeletingAutoIndexMarkedAsIdle; " is 139.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleUnusedAutoIndexes,The length of the statement  "            var ageThreshold = timeToWaitBeforeMarkingAutoIndexAsIdle.AsTimeSpan.Add(timeToWaitBeforeMarkingAutoIndexAsIdle.AsTimeSpan); // idle * 2 " is 136.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,HandleUnusedAutoIndexes,The length of the statement  "                                _logger.Info($"Changed index '{item.Index.Name}' priority to idle. Age: {age}. Last query: {lastQuery}. Query difference: {differenceBetweenNewestAndCurrentQueryingTime}."); " is 173.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,TryReplaceIndexes,The length of the statement  "                        if (newIndex.Definition.LockMode == IndexLockMode.Unlock && newIndexDefinition.LockMode.HasValue == false && oldIndexDefinition.LockMode.HasValue) " is 146.
Long Statement,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,TryReplaceIndexes,The length of the statement  "                        if (newIndex.Definition.Priority == IndexPriority.Normal && newIndexDefinition.Priority.HasValue == false && oldIndexDefinition.Priority.HasValue) " is 146.
Long Statement,Raven.Server.Documents.Indexes,MapIndexBase<T;TField>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapIndexBase.cs,GetQueryResultRetriever,The length of the statement  "            return new MapQueryResultRetriever(DocumentDatabase' query' DocumentDatabase.DocumentsStorage' documentsContext' fieldsToFetch' includeDocumentsCommand); " is 153.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                    var lastDocEtag = databaseContext.DocumentDatabase.DocumentsStorage.GetLastDocumentEtag(databaseContext' referencedCollection.Name); " is 132.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                    var lastProcessedReferenceEtag = index._indexStorage.ReadLastProcessedReferenceEtag(indexContext.Transaction' collection' referencedCollection); " is 144.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                    var lastProcessedTombstoneEtag = index._indexStorage.ReadLastProcessedReferenceTombstoneEtag(indexContext.Transaction' collection' referencedCollection); " is 153.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                            stalenessReasons.Add($"There are still some document references to process from collection '{referencedCollection.Name}'. " + " is 125.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                        var lastTombstoneEtag = databaseContext.DocumentDatabase.DocumentsStorage.GetLastTombstoneEtag(databaseContext' referencedCollection.Name); " is 139.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                            var lastTombstone = databaseContext.DocumentDatabase.DocumentsStorage.GetTombstoneByEtag(databaseContext' lastTombstoneEtag); " is 125.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                            stalenessReasons.Add($"There are still some tombstone references to process from collection '{referencedCollection.Name}'. " + " is 126.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                            stalenessReasons.Add($"There are still some document references to process from collection '{referencedCollection.Name}'. " + " is 125.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                        var hasTombstones = databaseContext.DocumentDatabase.DocumentsStorage.HasTombstonesWithDocumentEtagBetween(databaseContext' referencedCollection.Name' " is 150.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,IsStale,The length of the statement  "                            stalenessReasons.Add($"There are still tomstones tombstones to process from collection '{referencedCollection.Name}' with etag range '{lastProcessedTombstoneEtag} - {cutoff.Value}'."); " is 184.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,CalculateIndexEtag,The length of the statement  "                    var lastDocEtag = documentsContext.DocumentDatabase.DocumentsStorage.GetLastDocumentEtag(documentsContext' referencedCollection.Name); " is 134.
Long Statement,Raven.Server.Documents.Indexes,StaticIndexHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\StaticIndexHelper.cs,CalculateIndexEtag,The length of the statement  "                    var lastMappedEtag = index._indexStorage.ReadLastProcessedReferenceEtag(indexContext.Transaction' collection' referencedCollection); " is 132.
Long Statement,Raven.Server.Documents.Indexes.Auto,AutoMapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Auto\AutoMapIndex.cs,CreateNew,The length of the statement  "            instance.Initialize(documentDatabase' documentDatabase.Configuration.Indexing' documentDatabase.Configuration.PerformanceHints); " is 128.
Long Statement,Raven.Server.Documents.Indexes.Auto,AutoMapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Auto\AutoMapIndex.cs,Open,The length of the statement  "            instance.Initialize(environment' documentDatabase' documentDatabase.Configuration.Indexing' documentDatabase.Configuration.PerformanceHints); " is 141.
Long Statement,Raven.Server.Documents.Indexes.Auto,AutoMapIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Auto\AutoMapIndexDefinition.cs,Compare,The length of the statement  "            if (Collections.SetEquals(otherDefinition.Collections) == false || DictionaryExtensions.ContentEquals(MapFields' otherDefinition.MapFields) == false) " is 149.
Long Statement,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,GetReduceTree,The length of the statement  "                var mapPhaseTree = tx.InnerTransaction.ReadTree(MapReduceIndexBase<MapReduceIndexDefinition' IndexField>.MapPhaseTreeName); " is 123.
Long Statement,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,GetReduceTree,The length of the statement  "                var reducePhaseTree = tx.InnerTransaction.ReadTree(MapReduceIndexBase<MapReduceIndexDefinition' IndexField>.ReducePhaseTreeName); " is 129.
Long Statement,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,GetReduceTree,The length of the statement  "                scope.EnsureDispose(typePerHash = reducePhaseTree.FixedTreeFor(MapReduceIndexBase<MapReduceIndexDefinition' IndexField>.ResultsStoreTypesTreeName' sizeof(byte))); " is 162.
Long Statement,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,GetReduceResult,The length of the statement  "                var query = new IndexQueryServerSide($"FROM INDEX '{index.Name}' WHERE '{Constants.Documents.Indexing.Fields.ReduceKeyHashFieldName}' = $p0"' queryParameters); " is 159.
Long Statement,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,GetReduceResult,The length of the statement  "                     .Query(query' fieldsToFetch' new Reference<int>()' new Reference<int>()' retriever' context' null' CancellationToken.None) " is 122.
Long Statement,Raven.Server.Documents.Indexes.IndexMerging,IndexMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexMerging\IndexMerger.cs,MergeSelectExpressionsAndFields,The length of the statement  "                            expression = SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' innerMember' expression.Name); " is 121.
Long Statement,Raven.Server.Documents.Indexes.IndexMerging,IndexMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexMerging\IndexMerger.cs,MergeSelectExpressionsAndFields,The length of the statement  "                            expression = SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' SyntaxFactory.IdentifierName("doc")' expression.Name); " is 145.
Long Statement,Raven.Server.Documents.Indexes.IndexMerging,IndexVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexMerging\IndexVisitor.cs,VisitInvocationExpression,The length of the statement  "            _indexData.FromIdentifier = (invocationExpression.ArgumentList.Arguments[0].Expression as SimpleLambdaExpressionSyntax)?.Parameter.Identifier.ValueText; " is 152.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,MapReduceIndexBase<T;TField>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\MapReduceIndexBase.cs,InitializeIndexingWork,The length of the statement  "            MapReduceWorkContext.ResultsStoreTypes = MapReduceWorkContext.ReducePhaseTree.FixedTreeFor(ResultsStoreTypesTreeName' sizeof(byte)); " is 132.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,MapReduceIndexBase<T;TField>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\MapReduceIndexBase.cs,HandleDelete,The length of the statement  "            using (Slice.External(indexContext.Allocator' tombstone.LowerId.Buffer' tombstone.LowerId.Length' out Slice docKeyAsSlice)) " is 123.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,MapReduceIndexBase<T;TField>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\MapReduceIndexBase.cs,GetQueryResultRetriever,The length of the statement  "            return new MapReduceQueryResultRetriever(DocumentDatabase' query' DocumentDatabase.DocumentsStorage'documentsContext' fieldsToFetch' includeDocumentsCommand); " is 158.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,MapReduceIndexBase<T;TField>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\MapReduceIndexBase.cs,GenerateStorageReport,The length of the statement  "                    aggregatedTree.UsedSpaceInBytes = calculateExactSizes ? aggregatedTree.UsedSpaceInBytes + treeReport.UsedSpaceInBytes : -1; " is 123.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,MapReduceResultsStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\MapReduceResultsStore.cs,GetNestedResultsSection,The length of the statement  "            _nestedSection = new NestedMapResultsSection(_indexContext.Environment' tree ?? _mapReduceContext.ReducePhaseTree' _nestedValueKey); " is 132.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,NestedMapResultsSection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\NestedMapResultsSection.cs,Get,The length of the statement  "                throw new InvalidOperationException($"Could not find a map result wit id '{id}' within a nested values section stored under '{_nestedValueKey}' key"); " is 150.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,NestedMapResultsSection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\NestedMapResultsSection.cs,Get,The length of the statement  "            throw new InvalidOperationException($"Could not find a map result wit id '{id}' within a nested values section stored under '{_nestedValueKey}' key"); " is 150.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,Execute,The length of the statement  "                WriteLastEtags(indexContext); // we need to write etags here' because if we filtered everything during map then we will loose last indexed etag information and this will cause an endless indexing loop " is 200.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,Execute,The length of the statement  "            var table = indexContext.Transaction.InnerTransaction.OpenTable(ReduceResultsSchema' PageNumberToReduceResultTableName); " is 120.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,Execute,The length of the statement  "                                HandleTreeReduction(indexContext' treeScopeStats' token' modifiedStore' lowLevelTransaction' writer' reduceKeyHash' table); " is 123.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,HandleNestedValuesReduction,The length of the statement  "                LogReductionError(e' reduceKeyHash' stats' updateStats: true' page: null' numberOfNestedValues: numberOfEntriesToReduce); " is 121.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,HandleTreeReduction,The length of the statement  "                    // we still have unaggregated branches which were modified but their children were not modified (branch page splitting) so we missed them " is 137.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,AggregateBranchPage,The length of the statement  "                                // we have a modified branch page but its children were not modified (branch page splitting) so we didn't aggregated it yet' let's do it now " is 140.
Long Statement,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,EnsureValidNestedValuesReductionStats,The length of the statement  "            _nestedValuesReductionStats.NestedValuesAggregation = stats.For(IndexingOperation.Reduce.NestedValuesAggregation' start: false); " is 128.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndex.cs,CreateNew,The length of the statement  "            instance.Initialize(documentDatabase' documentDatabase.Configuration.Indexing' documentDatabase.Configuration.PerformanceHints); " is 128.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndex.cs,Open,The length of the statement  "            instance.Initialize(environment' documentDatabase' documentDatabase.Configuration.Indexing' documentDatabase.Configuration.PerformanceHints); " is 141.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndex.cs,CreateIndexWorkExecutors,The length of the statement  "                new CleanupDeletedDocuments(this' DocumentDatabase.DocumentsStorage' _indexStorage' Configuration' MapReduceWorkContext)' " is 121.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndex.cs,GetFieldValue,The length of the statement  "                    BlittableJsonTraverserHelper.TryRead(BlittableJsonTraverser.Default' document' autoIndexField.Name' out object fieldValue); " is 123.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndexDefinition.cs,GetOrCreateIndexDefinitionInternal,The length of the statement  "            var map = $"{Collections.First()}:[{string.Join(";"' MapFields.Select(x => x.Value.As<AutoIndexField>()).Select(x => $"<Name:{x.Name}#Operation:{x.Aggregation}>"))}]"; " is 167.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndexDefinition.cs,Compare,The length of the statement  "            if (Collections.SetEquals(otherDefinition.Collections) == false || DictionaryExtensions.ContentEquals(MapFields' otherDefinition.MapFields) == false) " is 149.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,ReduceMapResultsOfAutoIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\ReduceMapResultsOfAutoIndex.cs,AggregateOn,The length of the statement  "            var aggregatedResultsByReduceKey = new Dictionary<BlittableJsonReaderObject' Dictionary<string' PropertyResult>>(ReduceKeyComparer.Instance); " is 141.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,ReduceMapResultsOfAutoIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\ReduceMapResultsOfAutoIndex.cs,AggregateOn,The length of the statement  "                if (aggregatedResultsByReduceKey.TryGetValue(reduceKey' out Dictionary<string' PropertyResult> existingAggregate) == false) " is 123.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Auto,ReduceKeyComparer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\ReduceMapResultsOfAutoIndex.cs,GetHashCode,The length of the statement  "                return 1; // calculated hash of a reduce key is the same for all entries in a tree' we have to force Equals method to be called " is 127.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ValidateReduceResultsCollectionName,The length of the statement  "                if (otherIndex.Definition.OutputReduceToCollection.Equals(outputReduceToCollection' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ValidateReduceResultsCollectionName,The length of the statement  "                    var sideBySideIndex = definition.Name.StartsWith(Constants.Documents.Indexing.SideBySideIndexNamePrefix' StringComparison.OrdinalIgnoreCase); " is 141.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ValidateReduceResultsCollectionName,The length of the statement  "                    CheckIfThereIsAnIndexWhichWillOutputReduceDocumentsWhichWillBeUsedAsMapOnTheSpecifiedIndex(otherIndex' collections' indexes' out string description)) " is 149.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ValidateReduceResultsCollectionName,The length of the statement  "                    description += Environment.NewLine + $"--> {definition.Name}: {string.Join("'"' collections)} => *{outputReduceToCollection}*"; " is 127.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CheckIfThereIsAnIndexWhichWillOutputReduceDocumentsWhichWillBeUsedAsMapOnTheSpecifiedIndex,The length of the statement  "            description = $"{otherIndex.Name}: {string.Join("'"' otherIndex.Collections)} => {otherIndex.Definition.OutputReduceToCollection}"; " is 131.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CheckIfThereIsAnIndexWhichWillOutputReduceDocumentsWhichWillBeUsedAsMapOnTheSpecifiedIndex,The length of the statement  "                    var failed = CheckIfThereIsAnIndexWhichWillOutputReduceDocumentsWhichWillBeUsedAsMapOnTheSpecifiedIndex(index' indexCollections' indexes' out string innerDescription); " is 167.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,Update,The length of the statement  "            var staticMapIndexDefinition = new MapReduceIndexDefinition(definition' staticIndex.Maps.Keys.ToHashSet()' staticIndex.OutputFields' " is 132.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,Update,The length of the statement  "            staticMapIndex.Update(staticMapIndexDefinition' new SingleIndexConfiguration(definition.Configuration' documentDatabase.Configuration)); " is 136.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CreateIndexInstance,The length of the statement  "            var staticMapIndexDefinition = new MapReduceIndexDefinition(definition' staticIndex.Maps.Keys.ToHashSet()' staticIndex.OutputFields' " is 132.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CreateIndexWorkExecutors,The length of the statement  "            workers.Add(new CleanupDeletedDocuments(this' DocumentDatabase.DocumentsStorage' _indexStorage' Configuration' MapReduceWorkContext)); " is 134.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CreateIndexWorkExecutors,The length of the statement  "                workers.Add(_handleReferences = new HandleReferences(this' _compiled.ReferencedCollections' DocumentDatabase.DocumentsStorage' _indexStorage' Configuration)); " is 158.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CreateIndexWorkExecutors,The length of the statement  "            workers.Add(new MapDocuments(this' DocumentDatabase.DocumentsStorage' _indexStorage' MapReduceWorkContext' Configuration)); " is 123.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CreateIndexWorkExecutors,The length of the statement  "            workers.Add(new ReduceMapResultsOfStaticIndex(this' _compiled.Reduce' Definition' _indexStorage' DocumentDatabase.Metrics' MapReduceWorkContext)); " is 146.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,HandleMap,The length of the statement  "            if (_enumerationWrappers.TryGetValue(CurrentIndexingScope.Current.SourceCollection' out AnonymousObjectToBlittableMapResultsEnumerableWrapper wrapper) == false) " is 160.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,HandleMap,The length of the statement  "                _enumerationWrappers[CurrentIndexingScope.Current.SourceCollection] = wrapper = new AnonymousObjectToBlittableMapResultsEnumerableWrapper(this' indexContext); " is 158.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CalculateIndexEtag,The length of the statement  "                         sizeof(long) * 2 * (Collections.Count * _referencedCollections.Count); // last referenced collection etags and last processed reference collection etags " is 152.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ShouldReplace,The length of the statement  "                _isSideBySide = Name.StartsWith(Constants.Documents.Indexing.SideBySideIndexNamePrefix' StringComparison.OrdinalIgnoreCase); " is 124.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ShouldReplace,The length of the statement  "            using (DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext databaseContext)) " is 125.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ShouldReplace,The length of the statement  "                    var canReplace = StaticIndexHelper.CanReplace(this' IsStale(databaseContext' indexContext)' DocumentDatabase' databaseContext' indexContext); " is 141.
Long Statement,Raven.Server.Documents.Indexes.MapReduce.Static,Enumerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,ThrowMissingGroupByFieldsInMapOutput,The length of the statement  "                        $"The output of the mapping function does not contain all fields that the index is supposed to group by.{Environment.NewLine}" + " is 128.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,CollationKeyFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\CollationKeyFilter.cs,GetCollationKeyWin32,The length of the statement  "            var length = Win32NativeMethods.LCMapStringEx(_cultureInfo.CompareInfo.Name' Win32NativeMethods.LCMAP_SORTKEY' text' text.Length' IntPtr.Zero' 0' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero); " is 185.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,CollationKeyFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\CollationKeyFilter.cs,GetCollationKeyWin32,The length of the statement  "                length = Win32NativeMethods.LCMapStringEx(_cultureInfo.CompareInfo.Name' Win32NativeMethods.LCMAP_SORTKEY' text' text.Length' (IntPtr)pSortKey' sortKey.Length' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero); " is 199.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Encode,The length of the statement  "                        output[outputCharNum] = (char)(((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((SupportClass.Number.URShift((input[inputByteNum + 1] & 0xFF)' codingCase.finalShift)) & codingCase.finalMask) & (short)0x7FFF); " is 220.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Encode,The length of the statement  "                        output[outputCharNum] = (char)(((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((input[inputByteNum + 1] & 0xFF) << codingCase.middleShift) + ((SupportClass.Number.URShift((input[inputByteNum + 2] & 0xFF)' codingCase.finalShift)) & codingCase.finalMask) & (short)0x7FFF); " is 283.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Encode,The length of the statement  "                    output[outputCharNum++] = (char)((((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((input[inputByteNum + 1] & 0xFF) << codingCase.middleShift)) & (short)0x7FFF); " is 173.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The length of the statement  "                            output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift))); " is 128.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The length of the statement  "                        output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift))); " is 128.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The length of the statement  "                        output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift)); " is 125.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The length of the statement  "                output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift))); " is 128.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The length of the statement  "                        output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.finalMask)' codingCase.finalShift)); " is 123.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The length of the statement  "                        output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift)); " is 125.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenPerFieldAnalyzerWrapper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenPerFieldAnalyzerWrapper.cs,ToString,The length of the statement  "            return "PerFieldAnalyzerWrapper(" + string.Join("'"' _analyzerMap.Select(x => x.Key + " -> " + x.Value)) + "' default=" + _defaultAnalyzer + ")"; " is 145.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardAnalyzer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardAnalyzer.cs,TokenStream,The length of the statement  "            StandardTokenizer tokenStream = new StandardTokenizer(_matchVersion' reader) { MaxTokenLength = DEFAULT_MAX_TOKEN_LENGTH }; " is 123.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,IncrementToken,The length of the statement  "            if (type == APOSTROPHE_TYPE && bufferLength >= 2 && buffer[bufferLength - 2] == '\'' && (buffer[bufferLength - 1] == 's' || buffer[bufferLength - 1] == 'S')) " is 157.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Collectors,IntersectionCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Collectors\IntersectionCollector.cs,Collect,The length of the statement  "            var key = document.Get(Constants.Documents.Indexing.Fields.DocumentIdFieldName' state) ?? document.Get(Constants.Documents.Indexing.Fields.ReduceKeyHashFieldName' state); " is 170.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,AnonymousLuceneDocumentConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\AnonymousLuceneDocumentConverter.cs,GetFields,The length of the statement  "                    throw new InvalidOperationException($"Field '{property.Key}' is not defined. Available fields: {string.Join("' "' _fields.Keys)}."' e); " is 135.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverter.cs,GetFields,The length of the statement  "                            if (BlittableJsonTraverserHelper.TryRead(_blittableTraverser' document' spatialOptions.MethodArguments[0]' out var wktValue) == false) " is 134.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverter.cs,GetFields,The length of the statement  "                            if (BlittableJsonTraverserHelper.TryRead(_blittableTraverser' document' spatialOptions.MethodArguments[0]' out var latValue) ==false) " is 133.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverter.cs,GetFields,The length of the statement  "                            if (BlittableJsonTraverserHelper.TryRead(_blittableTraverser' document' spatialOptions.MethodArguments[1]' out var lngValue) ==false) " is 133.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverter.cs,GetFields,The length of the statement  "                    if (BlittableJsonTraverserHelper.TryRead(_blittableTraverser' document' indexField.OriginalName ?? indexField.Name' out value) == false) " is 136.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                instance.Add(GetOrCreateField(path' Constants.Documents.Indexing.Fields.NullValue' null' null' storage' Field.Index.NOT_ANALYZED_NO_NORMS' Field.TermVector.NO)); " is 161.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                    instance.Add(GetOrCreateField(path' Constants.Documents.Indexing.Fields.NullValue' null' null' storage' Field.Index.NOT_ANALYZED_NO_NORMS' Field.TermVector.NO)); " is 161.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                instance.Add(GetOrCreateField(path' Constants.Documents.Indexing.Fields.EmptyString' null' null' storage' Field.Index.NOT_ANALYZED_NO_NORMS' Field.TermVector.NO)); " is 163.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                instance.Add(GetOrCreateField(path' (bool)value ? TrueString : FalseString' null' null' storage' indexing' termVector)); " is 120.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                if (field.Indexing != FieldIndexing.Default && (indexing == Field.Index.NOT_ANALYZED || indexing == Field.Index.NOT_ANALYZED_NO_NORMS)) " is 135.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                instance.Add(GetOrCreateField(path' timeSpan.ToString("c"' CultureInfo.InvariantCulture)' null' null' storage' indexing' termVector)); " is 134.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                    instance.Add(GetOrCreateField(path + IsArrayFieldSuffix' TrueString' null' null' storage' Field.Index.NOT_ANALYZED_NO_NORMS' Field.TermVector.NO)); " is 147.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                foreach (var complexObjectField in GetComplexObjectFields(path' dynamicJson.BlittableJson' storage' indexing' termVector)) " is 122.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                foreach (var jsonField in GetComplexObjectFields(path' Scope.CreateJson(json' indexContext)' storage' indexing' termVector)) " is 124.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "            else if (valueType == ValueType.Convertible) // we need this to store numbers in invariant format' so JSON could read them " is 122.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetRegularFields,The length of the statement  "                instance.Add(GetOrCreateField(path' ((IConvertible)value).ToString(CultureInfo.InvariantCulture)' null' null' storage' indexing' termVector)); " is 142.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetComplexObjectFields,The length of the statement  "                yield return GetOrCreateField(path + ConvertToJsonSuffix' TrueString' null' null' storage' Field.Index.NOT_ANALYZED_NO_NORMS' Field.TermVector.NO); " is 147.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateKeyField,The length of the statement  "                return GetOrCreateField(Constants.Documents.Indexing.Fields.DocumentIdFieldName' null' key' null' Field.Store.YES' Field.Index.NOT_ANALYZED_NO_NORMS' Field.TermVector.NO); " is 171.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateKeyField,The length of the statement  "            return GetOrCreateField(Constants.Documents.Indexing.Fields.ReduceKeyHashFieldName' null' key' null' Field.Store.NO' Field.Index.NOT_ANALYZED_NO_NORMS' Field.TermVector.NO); " is 173.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateField,The length of the statement  "                if ((lazyValue != null || blittableValue != null) && store.IsStored() == false && index.IsIndexed() && index.IsAnalyzed()) " is 122.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateField,The length of the statement  "                if ((lazyValue != null || blittableValue != null) && store.IsStored() == false && index.IsIndexed() && index.IsAnalyzed()) " is 122.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateField,The length of the statement  "                    field.SetValue(cached.LazyStringReader?.GetTextReaderFor(lazyValue) ?? cached.BlittableObjectReader.GetTextReaderFor(blittableValue)); " is 134.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateField,The length of the statement  "                    field.SetValue(value ?? LazyStringReader.GetStringFor(lazyValue) ?? cached.BlittableObjectReader.GetStringFor(blittableValue)); " is 127.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,PropertyAccessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\PropertyAccessor.cs,CreateGetMethodForValueType,The length of the statement  "            var binder = Microsoft.CSharp.RuntimeBinder.Binder.GetMember(CSharpBinderFlags.None' prop.Name' type' new[] { CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None' null) }); " is 175.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,PropertyAccessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\PropertyAccessor.cs,CreateGetMethodForClass,The length of the statement  "                throw new InvalidOperationException(string.Format("Could not retrieve GetMethod for the {0} property of {1} type"' propertyInfo.Name' type.FullName)); " is 150.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,PropertyAccessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\PropertyAccessor.cs,CreateGetMethodForClass,The length of the statement  "            var getterMethod = new DynamicMethod(string.Concat("_Get"' propertyInfo.Name' "_")' typeof(object)' arguments' propertyInfo.DeclaringType); " is 139.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,HandleRangeFacets,The length of the statement  "                var termsForField = IndexedTerms.GetTermsAndDocumentsFor(readerFacetInfo.Reader' readerFacetInfo.DocBase' name' _indexName' _state); " is 132.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,HandleRangeFacets,The length of the statement  "                            var intersectedDocuments = GetIntersectedDocuments(new ArraySegment<int>(kvp.Value)' readerFacetInfo.Results' needToApplyAggregation); " is 134.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,HandleRangeFacets,The length of the statement  "                                ApplyAggregation(result.Value.Aggregations' facetValue' docsInQuery' readerFacetInfo.Reader' readerFacetInfo.DocBase' _state); " is 126.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,HandleFacets,The length of the statement  "                var termsForField = IndexedTerms.GetTermsAndDocumentsFor(readerFacetInfo.Reader' readerFacetInfo.DocBase' result.Value.AggregateBy' _indexName' _state); " is 152.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,HandleFacets,The length of the statement  "                    var intersectedDocuments = GetIntersectedDocuments(new ArraySegment<int>(kvp.Value)' readerFacetInfo.Results' needToApplyAggregation); " is 134.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,HandleFacets,The length of the statement  "                        ApplyAggregation(result.Value.Aggregations' facetValue' docsInQuery' readerFacetInfo.Reader' readerFacetInfo.DocBase' _state); " is 126.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IntArraysPool,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,FreeArray,The length of the statement  "                var matchingQueue = _arraysPoolBySize.GetOrAdd(returnedArray.Length' x => new ObjectPool<int[]>(() => new int[returnedArray.Length])); " is 134.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexingExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexingExtensions.cs,CreateAnalyzerInstance,The length of the statement  "                throw new InvalidOperationException($"Could not create new analyzer instance '{analyzerTypeAsString}' for field: {name}"' e); " is 125.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexingExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexingExtensions.cs,CreateAnalyzerInstance,The length of the statement  "            throw new InvalidOperationException($"Could not create new analyzer instance '{analyzerTypeAsString}' for field: {name}. No recognizable constructor found."); " is 158.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexOperationBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexOperationBase.cs,CreateAnalyzer,The length of the statement  "                throw new InvalidOperationException($"Detected '{Constants.Documents.Indexing.Fields.AllFields}'. This field should not be present here' because inheritance is done elsewhere."); " is 178.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexOperationBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexOperationBase.cs,GetAnalyzer,The length of the statement  "                    .GetOrAdd(analyzerType' t => analyzerInstance.GetType().GetTypeInfo().GetCustomAttributes<NotForQueryingAttribute>(false).Any()); " is 129.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The length of the statement  "                throw new InvalidQueryException($"Invalid intersect query. WHERE clause must contains just an intersect() method call while it got {query.Metadata.Query.Where.Type} expression"' query.Metadata.QueryText' query.QueryParameters); " is 227.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The length of the statement  "                throw new InvalidQueryException($"Invalid intersect query. WHERE clause must contains just a single intersect() method call while it got '{methodName}' method"' query.Metadata.QueryText' query.QueryParameters); " is 210.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The length of the statement  "                throw new InvalidQueryException("The valid intersect query must have multiple intersect clauses."' query.Metadata.QueryText' query.QueryParameters); " is 148.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The length of the statement  "                    throw new InvalidQueryException($"Invalid intersect query. The intersect clause at position {i} isn't a valid expression"' query.Metadata.QueryText' query.QueryParameters); " is 172.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The length of the statement  "                subQueries[i] = GetLuceneQuery(query.Metadata' whereExpression' query.QueryParameters' _analyzer' _queryBuilderFactories); " is 122.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The length of the statement  "                    && previousBaseQueryMatches < currentBaseQueryMatches); //stop if increasing the page size didn't result in any more "base query" results " is 137.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,MoreLikeThis,The length of the statement  "            var moreLikeThisQuery = QueryBuilder.BuildMoreLikeThisQuery(context' query.Metadata' query.Metadata.Query.Where' query.QueryParameters' _analyzer' _queryBuilderFactories); " is 171.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,MoreLikeThis,The length of the statement  "            var options = moreLikeThisQuery.Options != null ? JsonDeserializationServer.MoreLikeThisOptions(moreLikeThisQuery.Options) : MoreLikeThisOptions.Default; " is 153.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,MoreLikeThis,The length of the statement  "                if (stopWordsDoc.Data.TryGet(nameof(MoreLikeThisStopWords.StopWords)' out BlittableJsonReaderArray value) && value != null) " is 123.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,MoreLikeThis,The length of the statement  "                    throw new InvalidOperationException("Given filtering expression did not yield any documents that could be used as a base of comparison"); " is 137.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,MoreLikeThis,The length of the statement  "                    .Where(x => x != Constants.Documents.Indexing.Fields.DocumentIdFieldName && x != Constants.Documents.Indexing.Fields.ReduceKeyHashFieldName) " is 140.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,MoreLikeThis,The length of the statement  "                var id = doc.Get(Constants.Documents.Indexing.Fields.DocumentIdFieldName' _state) ?? doc.Get(Constants.Documents.Indexing.Fields.ReduceKeyHashFieldName' _state); " is 161.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,ParseJsonStringIntoBlittable,The length of the statement  "                var blittableJson = context.ParseBuffer(ptr' bytes.Length' "MoreLikeThis/ExtractTermsFromJson"' BlittableJsonDocumentBuilder.UsageMode.None); " is 141.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneIndexPersistence,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneIndexPersistence.cs,OpenIndexReader,The length of the statement  "            return new IndexReadOperation(_index' _directory' _indexSearcherHolder' _index._queryBuilderFactories' readTransaction); " is 120.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneIndexPersistence,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneIndexPersistence.cs,OpenFacetedIndexReader,The length of the statement  "            return new IndexFacetedReadOperation(_index' _index.Definition.IndexFields' _directory' _indexSearcherHolder' _index._queryBuilderFactories' readTransaction' _index._indexStorage.DocumentDatabase); " is 197.
Long Statement,Raven.Server.Documents.Indexes.Persistence.Lucene,OutputReduceToCollectionCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\OutputReduceIndexWriteOperation.cs,Execute,The length of the statement  "                        _database.DocumentsStorage.Put(context' key' null' document' flags: DocumentFlags.Artificial | DocumentFlags.FromIndex); " is 120.
Long Statement,Raven.Server.Documents.Indexes.Static,CurrentIndexingScope,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\CurrentIndexingScope.cs,LoadDocument,The length of the statement  "                // we can't share one DynamicBlittableJson instance among all documents because we can have multiple LoadDocuments in a single scope " is 132.
Long Statement,Raven.Server.Documents.Indexes.Static,CurrentIndexingScope,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\CurrentIndexingScope.cs,GetReferenceEtags,The length of the statement  "                ReferenceEtagsByCollection.Add(SourceCollection' referenceEtags = new Dictionary<string' long>(StringComparer.OrdinalIgnoreCase)); " is 130.
Long Statement,Raven.Server.Documents.Indexes.Static,CurrentIndexingScope,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\CurrentIndexingScope.cs,GetReferencesForDocument,The length of the statement  "            if (ReferencesByCollection.TryGetValue(SourceCollection' out Dictionary<string' HashSet<Slice>> referencesByCollection) == false) " is 129.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,Compile,The length of the statement  "            var compilationResult = CompileInternal(definition.Name' cSharpSafeName' @class' extentions: definition.AdditionalSources); " is 123.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,CompileInternal,The length of the statement  "            var result = compilation.Emit(asm' pdb' options: new EmitOptions(debugInformationFormat: DebugInformationFormat.PortablePdb)); " is 126.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,CreateClass,The length of the statement  "                statements.Add(RoslynHelper.This(nameof(StaticIndexBase.GroupByFields)).Assign(groupByFieldsArray).AsExpressionStatement()); " is 124.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,CreateClass,The length of the statement  "            statements.Add(RoslynHelper.This(nameof(StaticIndexBase.OutputFields)).Assign(outputFieldsArray).AsExpressionStatement()); " is 122.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,CreateClass,The length of the statement  "                statements.Add(RoslynHelper.This(nameof(StaticIndexBase.HasDynamicFields)).Assign(SyntaxFactory.LiteralExpression(SyntaxKind.TrueLiteralExpression)).AsExpressionStatement()); " is 174.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,CreateClass,The length of the statement  "                statements.Add(RoslynHelper.This(nameof(StaticIndexBase.HasBoostedFields)).Assign(SyntaxFactory.LiteralExpression(SyntaxKind.TrueLiteralExpression)).AsExpressionStatement()); " is 174.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleMap,The length of the statement  "                    return HandleSyntaxInMap(fieldNamesValidator' new MapFunctionProcessor(CollectionNameRetriever.QuerySyntax' SelectManyRewriter.QuerySyntax)' queryExpression' ref members); " is 171.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleMap,The length of the statement  "                    return HandleSyntaxInMap(fieldNamesValidator' new MapFunctionProcessor(CollectionNameRetriever.MethodSyntax' SelectManyRewriter.MethodSyntax)' invocationExpression' ref members); " is 178.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleReduce,The length of the statement  "                        throw new InvalidOperationException($"Group by field '{groupByField}' was not found on the list of index fields ({string.Join("' "'fieldNamesValidator.Fields)})"); " is 163.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The length of the statement  "            var collectionName = string.IsNullOrWhiteSpace(mapRewriter.CollectionName) ? Constants.Documents.Collections.AllDocumentsCollection : mapRewriter.CollectionName; " is 161.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The length of the statement  "            var collection = SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' SyntaxFactory.Literal(collectionName)); " is 124.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The length of the statement  "                var method = SyntaxFactory.MethodDeclaration(SyntaxFactory.IdentifierName("IEnumerable")' SyntaxFactory.Identifier("Map_" + members.Count)) " is 139.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The length of the statement  "                results.Add(RoslynHelper.This(nameof(StaticIndexBase.AddMap)).Invoke(collection' RoslynHelper.This(method.Identifier.Text)).AsExpressionStatement()); // this.AddMap("Users"' docs => from doc in docs ... ) " is 204.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The length of the statement  "                var indexingFunction = SyntaxFactory.SimpleLambdaExpression(SyntaxFactory.Parameter(SyntaxFactory.Identifier("docs"))' rewrittenExpression); " is 140.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The length of the statement  "                results.Add(RoslynHelper.This(nameof(StaticIndexBase.AddMap)).Invoke(collection' indexingFunction).AsExpressionStatement()); // this.AddMap("Users"' docs => from doc in docs ... ) " is 179.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The length of the statement  "                    var rc = SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' SyntaxFactory.Literal(referencedCollection)); " is 122.
Long Statement,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The length of the statement  "                    results.Add(RoslynHelper.This(nameof(StaticIndexBase.AddReferencedCollection)).Invoke(collection' rc).AsExpressionStatement()); " is 127.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,CreateIndexWorkExecutors,The length of the statement  "                workers.Add(_handleReferences = new HandleReferences(this' _compiled.ReferencedCollections' DocumentDatabase.DocumentsStorage' _indexStorage' Configuration)); " is 158.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,CalculateIndexEtag,The length of the statement  "                         sizeof(long) * 2 * (Collections.Count * _referencedCollections.Count); // last referenced collection etags and last processed reference collection etags " is 152.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,ShouldReplace,The length of the statement  "                _isSideBySide = Name.StartsWith(Constants.Documents.Indexing.SideBySideIndexNamePrefix' StringComparison.OrdinalIgnoreCase); " is 124.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,ShouldReplace,The length of the statement  "            using (DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext databaseContext)) " is 125.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,ShouldReplace,The length of the statement  "                    var canReplace = StaticIndexHelper.CanReplace(this' IsStale(databaseContext' indexContext)' DocumentDatabase' databaseContext' indexContext); " is 141.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,GetLastProcessedDocumentTombstonesPerCollection,The length of the statement  "                        if (_compiled.ReferencedCollections.TryGetValue(collection' out HashSet<CollectionName> referencedCollections) == false) " is 120.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,Update,The length of the statement  "            var staticMapIndexDefinition = new MapIndexDefinition(definition' staticIndex.Maps.Keys.ToHashSet()' staticIndex.OutputFields' staticIndex.HasDynamicFields); " is 157.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,Update,The length of the statement  "            staticMapIndex.Update(staticMapIndexDefinition' new SingleIndexConfiguration(definition.Configuration' documentDatabase.Configuration)); " is 136.
Long Statement,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,CreateIndexInstance,The length of the statement  "            var staticMapIndexDefinition = new MapIndexDefinition(definition' staticIndex.Maps.Keys.ToHashSet()' staticIndex.OutputFields' staticIndex.HasDynamicFields); " is 157.
Long Statement,Raven.Server.Documents.Indexes.Static,StaticIndexBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\StaticIndexBase.cs,CreateField,The length of the statement  "            _createFieldsConverter.GetRegularFields(new StaticIndexLuceneDocumentWrapper(result)' field' value' CurrentIndexingScope.Current.IndexContext); " is 143.
Long Statement,Raven.Server.Documents.Indexes.Static.Extensions,LinqOnDynamic,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Extensions\LinqOnDynamic.cs,GroupBy,The length of the statement  "            return Enumerable.GroupBy(source' keySelector' resultSelector).Select(inner => new DynamicArray.DynamicGrouping(inner)); " is 120.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn,RoslynHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\RoslynHelper.cs,This,The length of the statement  "            return SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' SyntaxFactory.ThisExpression()' SyntaxFactory.IdentifierName(methodName)); " is 159.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn,RoslynHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\RoslynHelper.cs,Assign,The length of the statement  "            return member.Assign(SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' SyntaxFactory.Literal(value))); " is 120.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn,RoslynHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\RoslynHelper.cs,WithBaseClass,The length of the statement  "            return @class.WithBaseList(SyntaxFactory.BaseList(SyntaxFactory.SingletonSeparatedList<BaseTypeSyntax>(SyntaxFactory.SimpleBaseType(SyntaxFactory.IdentifierName(typeof(T).Name))))); " is 181.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn,RoslynHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\RoslynHelper.cs,Invoke,The length of the statement  "            return SyntaxFactory.InvocationExpression(member' SyntaxFactory.ArgumentList(SyntaxFactory.SeparatedList(arguments.Select(SyntaxFactory.Argument)))); " is 149.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,DynamicExtensionMethodsRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\DynamicExtensionMethodsRewriter.cs,VisitInvocationExpression,The length of the statement  "            var extensionMethod = (MemberAccessExpressionSyntax)SyntaxFactory.ParseExpression($"{nameof(DynamicExtensionMethods)}.{dynamicExtensionMethod.Identifier.Text}"); " is 161.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,DynamicLambdaExpressionsRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\DynamicLambdaExpressionsRewriter.cs,ModifyLambdaForSelectMany,The length of the statement  "            if (currentInvocation.ArgumentList.Arguments.Count > 0 && currentInvocation.ArgumentList.Arguments[0].Expression == node) " is 121.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,DynamicLambdaExpressionsRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\DynamicLambdaExpressionsRewriter.cs,ModifyLambdaForSelectMany,The length of the statement  "            if (currentInvocation.ArgumentList.Arguments.Count > 1 && currentInvocation.ArgumentList.Arguments[1].Expression == node) " is 121.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,MethodDetectorRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\MethodDetectorRewriter.cs,VisitObjectCreationExpression,The length of the statement  "            if (type == nameof(Field) || type == nameof(NumericField) || type == typeof(Field).FullName || type == typeof(NumericField).FullName) " is 133.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,MethodDynamicParametersRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\MethodDynamicParametersRewriter.cs,VisitMethodDeclaration,The length of the statement  "                statements.Add(SyntaxFactory.ParseStatement($"{param.Type} {param.Identifier.WithoutTrivia()} = ({param.Type})d_{param.Identifier.WithoutTrivia()};")); " is 151.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,MethodDynamicParametersRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\MethodDynamicParametersRewriter.cs,VisitMethodDeclaration,The length of the statement  "            return modifiedParameterList.WithBody(modifiedParameterList.Body.WithStatements(modifiedParameterList.Body.Statements.InsertRange(0' statements))); //TODO: deal with indentation " is 177.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqOptimizer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqOptimizer.cs,VisitQueryExpression,The length of the statement  "                if (_recursiveCallCounter == 0 && _validator.Validate(stmt.ToFullString()' selectClauseSyntax.Expression' throwOnError: false) == false) " is 136.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqOptimizer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqOptimizer.cs,ThrowIndexRewritingException,The length of the statement  "            throw new InvalidOperationException("Rewriting the function to an optimized version resulted in creating invalid indexing outputs. " + " is 134.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqPrettifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqPrettifier.cs,VisitInvocationExpression,The length of the statement  "                            .WithClauses(SyntaxFactory.SingletonList<QueryClauseSyntax>(SyntaxFactory.WhereClause((ExpressionSyntax)Visit(whereClause.Body))))); " is 132.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqPrettifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqPrettifier.cs,GetSelectorLambdaFromSelectManyExpression,The length of the statement  "                expressionSyntax = RavenLinqOptimizer.StripExpressionParenthesis(castExpressionSyntax.Expression) as ParenthesizedLambdaExpressionSyntax; " is 137.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqPrettifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqPrettifier.cs,GetSimpleLambdaExpressionSyntax,The length of the statement  "                expressionSyntax = RavenLinqOptimizer.StripExpressionParenthesis(castExpressionSyntax.Expression) as SimpleLambdaExpressionSyntax; " is 130.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,ReferencedCollectionsRetriever,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\ReferencedCollectionsRetriever.cs,VisitInvocationExpression,The length of the statement  "            var collectionLiteral = node.ArgumentList.Arguments[node.ArgumentList.Arguments.Count - 1].Expression as LiteralExpressionSyntax; " is 129.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,ThrowOnInvalidMethodCalls,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\ThrowOnInvalidMethodCalls.cs,VisitOrderByClause,The length of the statement  "            var parent = node.Ancestors().FirstOrDefault(x => x.IsKind(SyntaxKind.InvocationExpression) || x.IsKind(SyntaxKind.QueryExpression)); " is 133.
Long Statement,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,ThrowOnInvalidMethodCalls,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\ThrowOnInvalidMethodCalls.cs,VisitInvocationExpression,The length of the statement  "            var parent = node.Ancestors().FirstOrDefault(x => x.IsKind(SyntaxKind.InvocationExpression) || x.IsKind(SyntaxKind.QueryExpression)); " is 133.
Long Statement,Raven.Server.Documents.Indexes.Static.Spatial,RecursivePrefixTreeStrategyThatSupportsWithin,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\RecursivePrefixTreeStrategyThatSupportsWithin.cs,MakeFilter,The length of the statement  "            if (SpatialOperation.Is(op' SpatialOperation.IsWithin' SpatialOperation.Intersects' SpatialOperation.BBoxWithin' SpatialOperation.BBoxIntersects) == false) " is 155.
Long Statement,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseGeoUri,The length of the statement  "                        coordinate = new[] { double.Parse(coord.Groups[1].Value' CultureInfo.InvariantCulture)' double.Parse(coord.Groups[2].Value' CultureInfo.InvariantCulture) }; " is 156.
Long Statement,Raven.Server.Documents.Indexes.Static.Spatial,SpatialField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\SpatialField.cs,CreateIndexableFields,The length of the statement  "                fields[fields.Length - 1] = new Field(Constants.Documents.Indexing.Fields.SpatialShapeFieldName' WriteShape(shape)' Field.Store.YES' Field.Index.NO); " is 149.
Long Statement,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,Execute,The length of the statement  "                        _logger.Info($"Executing cleanup for '{_index} ({_index.Name})'. LastMappedEtag: {lastMappedEtag}. LastTombstoneEtag: {lastTombstoneEtag}."); " is 141.
Long Statement,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,Execute,The length of the statement  "                                    _logger.Info($"Executing cleanup for '{_index} ({_index.Name})'. Processing tombstone {tombstone.LowerId} ({tombstone.Etag})."); " is 128.
Long Statement,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,Execute,The length of the statement  "                                if (CanContinueBatch(databaseContext' indexContext' collectionStats' lastEtag' lastCollectionEtag' batchCount) == false) " is 120.
Long Statement,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,Execute,The length of the statement  "                                if (MapDocuments.MaybeRenewTransaction(databaseContext' sw' _configuration' ref maxTimeForDocumentTransactionToRemainOpen)) " is 123.
Long Statement,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,Execute,The length of the statement  "                        _logger.Info($"Executing cleanup for '{_index} ({_index.Name})'. Processed {count} tombstones in '{collection}' collection in {collectionStats.Duration.TotalMilliseconds:#'#;;0} ms."); " is 184.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,Execute,The length of the statement  "            var moreWorkFound = HandleDocuments(ActionType.Tombstone' databaseContext' indexContext' writeOperation' stats' pageSize' maxTimeForDocumentTransactionToRemainOpen' token); " is 172.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,Execute,The length of the statement  "            moreWorkFound |= HandleDocuments(ActionType.Document' databaseContext' indexContext' writeOperation' stats' pageSize' maxTimeForDocumentTransactionToRemainOpen' token); " is 168.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The length of the statement  "                    lastIndexedEtagsByCollection[collection] = lastIndexedEtag = _indexStorage.ReadLastIndexedEtag(indexContext.Transaction' collection); " is 133.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The length of the statement  "                            _logger.Info($"Executing handle references for '{_index.Name}'. Collection: {referencedCollection.Name}. Type: {actionType}."); " is 127.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The length of the statement  "                                lastReferenceEtag = _indexStorage.ReadLastProcessedReferenceEtag(indexContext.Transaction' collection' referencedCollection); " is 125.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The length of the statement  "                                lastReferenceEtag = _indexStorage.ReadLastProcessedReferenceTombstoneEtag(indexContext.Transaction' collection' referencedCollection); " is 134.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The length of the statement  "                                            if (CanContinueBatch(databaseContext' indexContext' collectionStats' lastEtag' lastCollectionEtag' batchCount) == false) " is 120.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The length of the statement  "                                            if (MapDocuments.MaybeRenewTransaction(databaseContext' sw' _configuration' ref maxTimeForDocumentTransactionToRemainOpen)) " is 123.
Long Statement,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,HandleDocuments,The length of the statement  "                            _logger.Info($"Executing handle references for '{_index} ({_index.Name})'. Processed {count} references in '{referencedCollection.Name}' collection in {collectionStats.Duration.TotalMilliseconds:#'#;;0} ms."); " is 209.
Long Statement,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,Execute,The length of the statement  "                        _logger.Info($"Executing map for '{_index.Name}'. Processed {count:#'#;;0} documents and {resultsCount:#'#;;0} map results in '{collection}' collection in {collectionStats.Duration.TotalMilliseconds:#'#;;0} ms."); " is 213.
Long Statement,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,ShouldReleaseTransactionBecauseFlushIsWaiting,The length of the statement  "                    stats.RecordMapCompletedReason("Environment flush was waiting for us and global flusher was about to use all free flushing resources"); " is 135.
Long Statement,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,CanContinueBatch,The length of the statement  "                stats.RecordMapCompletedReason($"Exceeded maximum configured map duration ({_configuration.MapTimeout.AsTimeSpan}). Was {stats.Duration}"); " is 139.
Long Statement,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,CanContinueBatch,The length of the statement  "                stats.RecordMapCompletedReason($"Reached maximum etag that was seen when batch started ({maxEtag}) and map duration ({stats.Duration}) exceeded configured limit ({_configuration.MapTimeoutAfterEtagReached.AsTimeSpan})"); " is 220.
Long Statement,Raven.Server.Documents.Operations,Operations,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Operations\Operations.cs,RaiseNotifications,The length of the statement  "            var operationChanged = OperationChanged.Create(_name'change.OperationId' operation.Description' change.State' operation.Killable); " is 130.
Long Statement,Raven.Server.Documents.Patch,PatchConflict,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchConflict.cs,TryResolveConflict,The length of the statement  "                            $"Conflict resolution script for {_fstDocumentConflict.Collection} collection declined to resolve the conflict for {_fstDocumentConflict.LowerId}"); " is 148.
Long Statement,Raven.Server.Documents.Patch,PatchDocumentCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchDocumentCommand.cs,Execute,The length of the statement  "                var modifiedDocument = scriptResult.TranslateToObject(_externalContext ?? context' usageMode: BlittableJsonDocumentBuilder.UsageMode.ToDisk); " is 141.
Long Statement,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,PutDocument,The length of the statement  "                    throw new InvalidOperationException("put(id' doc' changeVector) must be called with called with 2 or 3 arguments only"); " is 120.
Long Statement,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,PutDocument,The length of the statement  "                    reader = JsBlittableBridge.Translate(_context' ScriptEngine' args[1].AsObject()' usageMode: BlittableJsonDocumentBuilder.UsageMode.ToDisk); " is 139.
Long Statement,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,AssertValidDatabaseContext,The length of the statement  "                    throw new InvalidOperationException("Unable to put documents when this instance is not attached to a database operation"); " is 122.
Long Statement,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,LoadDocumentByPath,The length of the statement  "                throw new InvalidOperationException("loadPath(doc' path) must be called with a valid document instance' but got a JS object instead"); " is 134.
Long Statement,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,LoadDocument,The length of the statement  "                            throw new InvalidOperationException("load(ids) must be called with a array of strings' but got " + kvp.Value.Value.Type + " - " + kvp.Value.Value); " is 147.
Long Statement,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,AssertAdminScriptInstance,The length of the statement  "                    throw new InvalidOperationException("Unable to run admin scripts using this instance of the script runner' the EnableClr is set to false"); " is 139.
Long Statement,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsClient.cs,CalculateAuthorizationHeaderValue,The length of the statement  "                return new AuthenticationHeaderValue("AWS4-HMAC-SHA256"' $"Credential={credentials}'SignedHeaders={signedHeaders}'Signature={signature}"); " is 138.
Long Statement,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsClient.cs,CalculateCanonicalRequestHash,The length of the statement  "                var canonicalRequest = $"{httpMethod}\n{canonicalUri}\n{canonicalQueryString}\n{canonicalHeaders}\n{signedHeaders}\n{hashedPayload}"; " is 133.
Long Statement,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsHelper.cs,CalculatePayloadHash,The length of the statement  "                var hashedPayload = ConvertToHex(stream != null ? hash.ComputeHash(stream) : hash.ComputeHash(Encoding.UTF8.GetBytes(string.Empty))); " is 133.
Long Statement,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,ContainerExists,The length of the statement  "            client.DefaultRequestHeaders.Authorization = CalculateAuthorizationHeaderValue(HttpMethods.Get' url' requestMessage.Headers); " is 125.
Long Statement,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,GetBlob,The length of the statement  "            client.DefaultRequestHeaders.Authorization = CalculateAuthorizationHeaderValue(HttpMethods.Get' url' requestMessage.Headers); " is 125.
Long Statement,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,DeleteContainer,The length of the statement  "            client.DefaultRequestHeaders.Authorization = CalculateAuthorizationHeaderValue(HttpMethods.Delete' url' requestMessage.Headers); " is 128.
Long Statement,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,GetContainerNames,The length of the statement  "            client.DefaultRequestHeaders.Authorization = CalculateAuthorizationHeaderValue(HttpMethods.Get' url' requestMessage.Headers); " is 125.
Long Statement,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,ComputeCanonicalizedHeaders,The length of the statement  "            return headers.Aggregate(stringToHash' (current' header) => current + $"{header.Key.ToLower()}:{header.Value.First()}\n"); " is 122.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,GetNextBackupDetails,The length of the statement  "            return taskStatus == TaskStatus.Disabled ? null : GetNextBackupDetails(configuration' backupStatus' skipErrorLog: true); " is 120.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,GetNextBackupDetails,The length of the statement  "            var nextBackupTimeSpan = (nextBackupDateTime - nowLocalTime).Ticks <= 0 ? TimeSpan.Zero : nextBackupDateTime - nowLocalTime; " is 124.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,RunPeriodicBackup,The length of the statement  "                        backupToLocalFolder && DirectoryContainsFullBackupOrSnapshot(previousBackupStatus.LocalBackup.BackupDirectory' configuration.BackupType) == false) " is 146.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,RunPeriodicBackup,The length of the statement  "                        backupDirectory = backupToLocalFolder ? new PathSetting(configuration.LocalSettings.FolderPath).Combine(folderName) : _tempBackupPath; " is 134.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,RunPeriodicBackup,The length of the statement  "                        backupDirectory = backupToLocalFolder ? new PathSetting(previousBackupStatus.LocalBackup.BackupDirectory) : _tempBackupPath; " is 124.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,RunPeriodicBackup,The length of the statement  "                    var fileName = GetFileName(isFullBackup' backupDirectory.FullPath' now' configuration.BackupType' out string backupFilePath); " is 125.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,UploadToFtp,The length of the statement  "                settings.Password' settings.CertificateAsBase64' settings.CertificateFileName' uploadProgress' _cancellationToken.Token)) " is 121.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,WhoseTaskIsIt,The length of the statement  "            var whoseTaskIsIt = databaseRecord.Topology.WhoseTaskIsIt(periodicBackup.Configuration' _serverStore.Engine.CurrentState); " is 122.
Long Statement,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,GetBackupStatusFromCluster,The length of the statement  "                var statusBlittable = _serverStore.Cluster.Read(context' PeriodicBackupStatus.GenerateItemName(_database.Name' taskId)); " is 120.
Long Statement,Raven.Server.Documents.PeriodicBackup,Restore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Restore.cs,FetchRestorePoints,The length of the statement  "                var isSnapshot = Constants.Documents.PeriodicBackup.SnapshotExtension.Equals(extension' StringComparison.OrdinalIgnoreCase); " is 124.
Long Statement,Raven.Server.Documents.PeriodicBackup,Restore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Restore.cs,FetchRestorePoints,The length of the statement  "                    throw new InvalidOperationException($"Cannot have a snapshot backup file ({Path.GetFileName(filePath)}) after other backup files!"); " is 132.
Long Statement,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,Execute,The length of the statement  "                        var (index' _) = await _serverStore.WriteDatabaseRecordAsync(databaseName' databaseRecord' null' restoreSettings.DatabaseValues' isRestore: true); " is 146.
Long Statement,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,Execute,The length of the statement  "                        var result = await _serverStore.DeleteDatabaseAsync(_restoreConfiguration.DatabaseName' true' new[] { _serverStore.NodeTag }); " is 126.
Long Statement,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,ValidateArguments,The length of the statement  "                    throw new InvalidOperationException($"The size of the encryption key must be 256 bits' but was {key.Length * 8} bits."); " is 120.
Long Statement,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,ImportSingleBackupFile,The length of the statement  "            using (var stream = new GZipStream(new BufferedStream(fileStream' 128 * Voron.Global.Constants.Size.Kilobyte)' CompressionMode.Decompress)) " is 139.
Long Statement,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecuteDelete,The length of the statement  "                return new BulkOperationCommand<DeleteDocumentCommand>(command' retrieveDetails' x => new BulkOperationResult.DeleteDetails " is 123.
Long Statement,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecutePatch,The length of the statement  "                return new BulkOperationCommand<PatchDocumentCommand>(command' retrieveDetails' x => new BulkOperationResult.PatchDetails " is 121.
Long Statement,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecuteOperation,The length of the statement  "            using (var rateGate = options.MaxOpsPerSecond.HasValue ? new RateGate(options.MaxOpsPerSecond.Value' TimeSpan.FromSeconds(1)) : null) " is 133.
Long Statement,Raven.Server.Documents.Queries,CollectionQueryEnumerable,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,GetEnumerator,The length of the statement  "            return new Enumerator(_database' _documents' _fieldsToFetch' _collection' _isAllDocsCollection' _query' _context' _includeDocumentsCommand' _totalResults); " is 155.
Long Statement,Raven.Server.Documents.Queries,Enumerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,GetDocuments,The length of the statement  "                        documents = _documents.GetDocumentsStartingWith(_context' _startsWith' null' null' null' _start' _query.PageSize' _collection); " is 127.
Long Statement,Raven.Server.Documents.Queries,RetrieveDocumentIdsVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,VisitBetween,The length of the statement  "                    if (fieldName is MethodExpression me && string.Equals("id"' me.Name' StringComparison.OrdinalIgnoreCase) && firstValue is ValueExpression fv && secondValue is ValueExpression sv) " is 178.
Long Statement,Raven.Server.Documents.Queries,RetrieveDocumentIdsVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,VisitBetween,The length of the statement  "                        throw new InvalidQueryException("Collection query does not support filtering by id() using Between operator. Supported operators are: =' IN"' " is 141.
Long Statement,Raven.Server.Documents.Queries,RetrieveDocumentIdsVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,VisitIn,The length of the statement  "                        throw new InvalidQueryException("Collection query does not support filtering by id() using Between operator. Supported operators are: =' IN"' " is 141.
Long Statement,Raven.Server.Documents.Queries,RetrieveDocumentIdsVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,ThrowNotSupportedCollectionQueryOperator,The length of the statement  "                        $"Collection query does not support filtering by {Constants.Documents.Indexing.Fields.DocumentIdFieldName} using {@operator} operator. Supported operators are: =' IN"' " is 167.
Long Statement,Raven.Server.Documents.Queries,FieldsToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,GetFieldToFetch,The length of the statement  "                return new FieldToFetch(selectFieldName' selectField' selectField.Alias' canExtractFromIndex: false' isDocumentId: false); " is 122.
Long Statement,Raven.Server.Documents.Queries,FieldsToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,GetFieldToFetch,The length of the statement  "                    return new FieldToFetch(selectFieldName' selectField' selectField.Alias' canExtractFromIndex: false' isDocumentId: true); " is 121.
Long Statement,Raven.Server.Documents.Queries,FieldsToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,GetFieldToFetch,The length of the statement  "                        results.Clear(); // __all_stored_fields should only return stored fields so we are ensuring that no other fields will be returned " is 129.
Long Statement,Raven.Server.Documents.Queries,FieldsToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,GetFieldToFetch,The length of the statement  "            var extract = indexDefinition.MapFields.TryGetValue(selectFieldName' out var value) && value.Storage == FieldStorage.Yes; " is 121.
Long Statement,Raven.Server.Documents.Queries,FieldsToFetch,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\FieldsToFetch.cs,GetFieldToFetch,The length of the statement  "            return new FieldToFetch(selectFieldName' selectField' selectField.Alias' extract | indexDefinition.HasDynamicFields' isDocumentId: false); " is 138.
Long Statement,Raven.Server.Documents.Queries,IndexQueryServerSide,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\IndexQueryServerSide.cs,Create,The length of the statement  "            if (httpContext.Request.Query.TryGetValue("query"' out var query) == false || query.Count == 0 || string.IsNullOrWhiteSpace(query[0])) " is 134.
Long Statement,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,CreateRange,The length of the statement  "            return new TermRangeQuery(fieldName' minTermIsNullOrStar ? null : GetTermValue(minValue' minValueType' exact)' maxTermIsNullOrStar ? null : GetTermValue(maxValue' maxValueType' exact)' inclusiveMin' inclusiveMax); " is 213.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,BuildMoreLikeThisQuery,The length of the statement  "                var moreLikeThisQuery = ToMoreLikeThisQuery(context' metadata.Query' whereExpression' metadata' parameters' analyzer' factories' out var baseDocument' out var options); " is 168.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToLuceneQuery,The length of the statement  "                    //                        return LuceneQueryHelper.Term(fieldName' LuceneQueryHelper.Asterisk' LuceneTermType.WildCard' exact: true); " is 133.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ExtractIndexFieldName,The length of the statement  "                        if (me.Arguments[0] is FieldExpression docAlias && docAlias.Compound.Count == 1 && docAlias.Compound[0].Equals(query.From.Alias)) " is 129.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ExtractIndexFieldName,The length of the statement  "                        throw new InvalidQueryException("id() can only be used on the root query alias but got: " + me.Arguments[0]' query.QueryText' parameters); " is 138.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ExtractIndexFieldName,The length of the statement  "                        if (me.Arguments[0] is FieldExpression countAlias && countAlias.Compound.Count == 1 && countAlias.Compound[0].Equals(query.From.Alias)) " is 135.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ExtractIndexFieldName,The length of the statement  "                        throw new InvalidQueryException("count() can only be used on the root query alias but got: " + me.Arguments[0]' query.QueryText' parameters); " is 141.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ExtractIndexFieldName,The length of the statement  "                        throw new InvalidQueryException("sum() must be called with a single field name' but was called: " + me' query.QueryText' parameters); " is 133.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ExtractIndexFieldName,The length of the statement  "                        throw new InvalidQueryException("Method " + me.Name.Value + " cannot be used in an expression in this manner"' query.QueryText' parameters); " is 140.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ExtractIndexFieldName,The length of the statement  "            return metadata.GetIndexFieldName(new QueryFieldName(field.Token.Value' field.Value == ValueTokenType.String)' parameters); " is 123.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleLucene,The length of the statement  "                ThrowMethodExpectsArgumentOfTheFollowingType("lucene"' ValueTokenType.String' valueType' metadata.QueryText' parameters); " is 121.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleStartsWith,The length of the statement  "                ThrowMethodExpectsArgumentOfTheFollowingType("startsWith"' ValueTokenType.String' valueType' metadata.QueryText' parameters); " is 125.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleEndsWith,The length of the statement  "                ThrowMethodExpectsArgumentOfTheFollowingType("endsWith"' ValueTokenType.String' valueType' metadata.QueryText' parameters); " is 123.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleRegex,The length of the statement  "                ThrowMethodExpectsArgumentOfTheFollowingType("regex"' ValueTokenType.String' valueType' metadata.QueryText' parameters); " is 120.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSearch,The length of the statement  "                throw new InvalidOperationException("search() method can only be called with an identifier or string' but was called with " + expression.Arguments[0]); " is 151.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSearch,The length of the statement  "                ThrowMethodExpectsArgumentOfTheFollowingType("search"' ValueTokenType.String' valueType' metadata.QueryText' parameters); " is 121.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleCircle,The length of the statement  "            return spatialField.ReadCircle(Convert.ToDouble(radius.Value)' Convert.ToDouble(latitute.Value)' Convert.ToDouble(longitude.Value)' spatialUnits); " is 146.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,GetSpatialUnits,The length of the statement  "                    $"{nameof(SpatialUnits)} value must be either '{SpatialUnits.Kilometers}' or '{SpatialUnits.Miles}' but was '{spatialUnitsValueAsString}'."); " is 141.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,GetLuceneField,The length of the statement  "                    return (fieldName + Constants.Documents.Indexing.Fields.RangeFieldSuffixDouble' LuceneFieldType.Double' LuceneTermType.Double); " is 127.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,GetLuceneField,The length of the statement  "                    return (fieldName + Constants.Documents.Indexing.Fields.RangeFieldSuffixLong' LuceneFieldType.Long' LuceneTermType.Long); " is 121.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ThrowInvalidOperatorInSearch,The length of the statement  "            throw new InvalidQueryException($"Supported operators in search() method are 'OR' or 'AND' but was '{fieldExpression.FieldValue}'"' metadata.QueryText' parameters); " is 164.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ThrowInvalidParameterType,The length of the statement  "            throw new InvalidQueryException("Expected query parameter to be " + expectedValueType + " but was " + item.Type + ": " + item.Value' queryText' parameters); " is 156.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ThrowMethodExpectsArgumentOfTheFollowingType,The length of the statement  "            throw new InvalidQueryException($"Method {methodName}() expects to get an argument of type {expectedType} while it got {gotType}"' queryText' parameters); " is 154.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ThrowParametersWereNotProvided,The length of the statement  "            throw new InvalidQueryException("The query is parametrized but the actual values of parameters were not provided"' queryText' (BlittableJsonReaderObject)null); " is 159.
Long Statement,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ThrowUnexpectedParameterValue,The length of the statement  "            throw new InvalidQueryException($"Parameter value '{parameter}' of type {parameter.GetType().FullName} is not supported"' queryText' parameters); " is 145.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,AddWhereField,The length of the statement  "            if (search || exact || spatial != null || operatorType != OperatorType.Equal || (operatorType == OperatorType.Equal && isNegated)) " is 130.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowInvalidMethod,The length of the statement  "            throw new InvalidQueryException("Where clause cannot conatin just an '" + me.Name + "' method"' Query.QueryText' parameters); " is 125.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleQueryInclude,The length of the statement  "                    throw new InvalidQueryException("Unable to figure out how to deal with include of type " + include.Type' QueryText' parameters); " is 128.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowInvalidFunctionSelectWithMoreFields,The length of the statement  "            throw new InvalidQueryException("A query can contain a single select function body without extra fields"' QueryText' parameters); " is 129.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                    throw new InvalidQueryException("Invalid ORDER BY 'random()' call' expected zero to one arguments' got " + me.Arguments.Count' " is 126.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                    throw new InvalidQueryException("Invalid ORDER BY 'random()' call' expected value token ' got " + me.Arguments[0]' QueryText' " is 125.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                throw new InvalidQueryException("Invalid ORDER BY 'score()' call' expected zero arguments' got " + me.Arguments.Count' QueryText' " is 129.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                    throw new InvalidQueryException("Invalid ORDER BY 'spatial.distance()' call' expected two arguments' got " + me.Arguments.Count' QueryText' " is 139.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                    throw new InvalidQueryException("Invalid ORDER BY 'spatial.distance()' call' expected expression' got " + lastArgument' QueryText' " is 130.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                    throw new InvalidQueryException("Invalid ORDER BY 'count()' call' expected zero arguments' got " + me.Arguments.Count' QueryText' " is 129.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                        throw new InvalidQueryException("Invalid ORDER BY 'sum()' call' expected one argument but didn't get any"' QueryText' parameters); " is 130.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                        throw new InvalidQueryException("Invalid ORDER BY 'sum()' call' expected one argument' got " + me.Arguments.Count' QueryText' " is 125.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The length of the statement  "                        throw new InvalidQueryException("Invalid ORDER BY sum call' expected field value' go " + me.Arguments[0]' QueryText' parameters); " is 129.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,GetIndexFieldName,The length of the statement  "                    throw new InvalidQueryException("Field alias " + fe.Compound[0] + " cannot be used in a compound field' but got: " + fe' QueryText' parameters); " is 144.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowIncompatibleTypesOfVariables,The length of the statement  "            throw new InvalidQueryException($"Incompatible types of variables in WHERE clause on '{fieldName}' field. It got values of the following types: " + " is 147.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowIncompatibleTypesOfParameters,The length of the statement  "            throw new InvalidQueryException($"Incompatible types of parameters in WHERE clause on '{fieldName}' field. It got parameters of the following types:   " + " is 154.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowUnknownAggregationMethodInSelectOfGroupByQuery,The length of the statement  "            throw new InvalidQueryException($"Unknown aggregation method in SELECT clause of the group by query: '{methodName}'"' queryText' parameters); " is 141.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowMissingFieldNameArgumentOfSumMethod,The length of the statement  "            throw new InvalidQueryException("Missing argument of sum() method. You need to specify the name of a field e.g. sum(Age)"' queryText' parameters); " is 146.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowUnhandledExpressionTypeInSelect,The length of the statement  "            throw new InvalidQueryException($"Unhandled expression of type {expressionType} in SELECT clause"' queryText' parameters); " is 122.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowInvalidOperatorTypeInOrderBy,The length of the statement  "            throw new InvalidQueryException($"Invalid type of operator in ORDER BY clause. Operator: {type}"' queryText' parameters); " is 121.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowUnknownAlias,The length of the statement  "            throw new InvalidQueryException($"Unknown alias {alias}' but there are aliases specified in the query ({string.Join("' "' RootAliasPaths.Keys)})"' " is 146.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowInvalidArgumentToId,The length of the statement  "            throw new InvalidQueryException("id() in simple select clause must only be used without arguments"' QueryText' parameters); " is 123.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowInvalidNumberOfArgumentsOfFacetAggregation,The length of the statement  "            throw new InvalidQueryException($"Invalid number of arguments of {method} method in a facet query. Expected {expected}' got {got}"' QueryText' parameters); " is 155.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowInvalidArgumentToIdInFacet,The length of the statement  "            throw new InvalidQueryException("id() in facet query must have one argument which is identifier of a facet setup document"' QueryText' parameters); " is 147.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowInvalidFacetUsingSetupDocument,The length of the statement  "            throw new InvalidQueryException("facet() specyfying a facet setup document using id() call must not have any additional arguments"' QueryText' parameters); " is 155.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowInvalidArgumentExpressionInFacetQuery,The length of the statement  "            throw new InvalidQueryException($"Unsupported expression of type {expression.GetType().Name} specified as an argument of facet(). Text: {expression.GetText()}."' QueryText' parameters); " is 185.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowFacetQueryMustContainsOnlyFacetInSelect,The length of the statement  "            throw new InvalidQueryException($"Unsupported expression of type {expression.GetType().Name} specified as an argument of facet(). Text: {expression.GetText()}."' QueryText' parameters); " is 185.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowSuggestMethodArgumentMustBeValue,The length of the statement  "            throw new InvalidQueryException($"Argument at index '{index}' in suggest() must be a value but was '{argument.GetType()}'"' QueryText' parameters); " is 147.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ThrowSuggestMethodMustHaveTwoOrThreeArguments,The length of the statement  "            throw new InvalidQueryException($"Method suggest() must contain two or three arguments but '{count}' were specified"' QueryText' parameters); " is 141.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractFieldNameFromFirstArgument,The length of the statement  "                throw new InvalidQueryException($"Method {methodName}() expects a field name as its first argument but no arguments were passed"' QueryText' parameters); " is 153.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractFieldNameFromArgument,The length of the statement  "            if (argument is MethodExpression method && string.Equals(method.Name' Constants.Documents.Indexing.Fields.DocumentIdMethodName' StringComparison.OrdinalIgnoreCase)) //id property might be written as id() or id(<alias>) " is 218.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,GetUpdateBody,The length of the statement  "                        throw new InvalidQueryException("Load clause can only load paths with fields' but got " + load.Expression' QueryText' parameters); " is 130.
Long Statement,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,GetUpdateBody,The length of the statement  "                        throw new InvalidQueryException("Load clause can only load paths starting from the from alias: " + fromAlias' QueryText' parameters); " is 133.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitBooleanMethod,The length of the statement  "                    _metadata.AddWhereField(new QueryFieldName(fe.FieldValue' fe.IsQuoted)' parameters' exact: _insideExact > 0' operatorType: operatorType); " is 137.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitBooleanMethod,The length of the statement  "                                    _metadata.AddWhereField(new QueryFieldName(rfe.FieldValue' rfe.IsQuoted)' parameters' exact: _insideExact > 0' operatorType: operatorType); " is 139.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitIn,The length of the statement  "                    _metadata.AddWhereField(new QueryFieldName(fieldExpression.FieldValue' fieldExpression.IsQuoted)' parameters' exact: _insideExact > 0' operatorType: OperatorType.Equal); " is 169.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                            throw new InvalidQueryException($"Method {methodName}() was called' but as the query is using an alias ({_fromAlias})' must also be provided to this method."' QueryText' parameters); " is 182.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                            throw new InvalidQueryException($"Method {methodName}() expects not more than two arguments to be provided"' QueryText' parameters); " is 132.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                            throw new InvalidQueryException($"Method {methodName}() expects expression ' got {arguments[arguments.Count - 1]}"' QueryText' parameters); " is 139.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                                throw new InvalidQueryException("Alias was passed to method 'id()' but query does not specify document alias."' QueryText' parameters); " is 135.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                                throw new InvalidQueryException($"Method 'id()' expects field token as a first argument' got {arguments[0]} type"' QueryText' parameters); " is 138.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                                    $"Alias passed to method 'id({idAliasToken.Compound[0]})' does not match specified document alias ('{_fromAlias}')."' QueryText' " is 128.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                            throw new InvalidQueryException($"Method {methodName}() expects second argument to be provided"' QueryText' parameters); " is 120.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                            throw new InvalidQueryException($"Method {methodName}() expects value token as second argument' got {arguments[1]} type"' QueryText' " is 132.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                            throw new InvalidQueryException($"Method {methodName}() expects expression ' got {arguments[0]}"' QueryText' parameters); " is 121.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The length of the statement  "                            throw new InvalidQueryException($"Method {methodName}() expects one argument' got " + arguments.Count' QueryText' parameters); " is 126.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleMoreLikeThis,The length of the statement  "                if (firstArgument is BinaryExpression == false && firstArgument is FieldExpression == false && firstArgument is ValueExpression == false) " is 137.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleMoreLikeThis,The length of the statement  "                    throw new InvalidQueryException($"Method {methodName}() expects that first argument will be a binary expression or value"' QueryText' parameters); " is 146.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleMoreLikeThis,The length of the statement  "                throw new InvalidQueryException($"Method {methodName}() expects that second argument will be a paramter name or value"' QueryText' parameters); " is 143.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The length of the statement  "                        throw new InvalidQueryException($"Method {methodName}() expects first argument to be a method expression"' QueryText' parameters); " is 130.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The length of the statement  "                                throw new InvalidQueryException($"Method {methodName}() expects first argument to be a wkt() method with 1 argument"' QueryText' parameters); " is 141.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The length of the statement  "                                throw new InvalidQueryException($"Method {methodName}() expects first argument to be a point() method with 2 arguments"' QueryText' parameters); " is 144.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The length of the statement  "                            throw new InvalidQueryException($"Method {methodName}() expects first argument to be a point() or wkt() method"' QueryText' parameters); " is 136.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The length of the statement  "                    throw new InvalidQueryException($"Method {methodName}() expects expression as second argument' got {arguments[1]} type"' QueryText' parameters); " is 144.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The length of the statement  "                        throw new InvalidQueryException($"Method {methodName}() expects value token as third argument' got {arguments[1]} type"' QueryText' parameters); " is 144.
Long Statement,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSum,The length of the statement  "                    throw new InvalidQueryException($"Method sum() expects first argument to be field token' got {arguments[0]}"' QueryText' parameters); " is 133.
Long Statement,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteFacetedQuery,The length of the statement  "                throw new InvalidQueryException("Facet query must be executed against static index."' query.Metadata.QueryText' query.QueryParameters); " is 135.
Long Statement,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteSuggestionQuery,The length of the statement  "                throw new InvalidQueryException("Suggestion query must be executed against static index."' query.Metadata.QueryText' query.QueryParameters); " is 140.
Long Statement,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteSuggestionQuery,The length of the statement  "                throw new InvalidQueryException("Suggestion query must have one suggest token in SELECT."' query.Metadata.QueryText' query.QueryParameters); " is 140.
Long Statement,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteSuggestionQuery,The length of the statement  "                throw new InvalidOperationException($"Index '{query.Metadata.IndexName}' does not have suggestions configured for field '{selectField.Name}'."); " is 144.
Long Statement,Raven.Server.Documents.Queries,QueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryRunner.cs,ExecuteSuggestionQuery,The length of the statement  "                throw new InvalidOperationException($"Index '{query.Metadata.IndexName}' have suggestions explicitly disabled for field '{selectField.Name}'."); " is 144.
Long Statement,Raven.Server.Documents.Queries,QueryValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryValidator.cs,ValidateCircle,The length of the statement  "                throw new InvalidQueryException("Method 'circle()' expects three or four arguments to be provided"' queryText' parameters); " is 123.
Long Statement,Raven.Server.Documents.Queries,QueryValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryValidator.cs,ValidateCircle,The length of the statement  "                    throw new InvalidQueryException($"Method 'circle()' expects value token as an argument at index {i}' got {arguments[i]} type"' queryText' parameters); " is 150.
Long Statement,Raven.Server.Documents.Queries,QueryValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryValidator.cs,ValidateWkt,The length of the statement  "                throw new InvalidQueryException($"Method 'wkt()' expects value token as an argument' got {arguments[0]} type"' queryText' parameters); " is 134.
Long Statement,Raven.Server.Documents.Queries,QueryValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryValidator.cs,ValidatePoint,The length of the statement  "                    throw new InvalidQueryException($"Method 'point()' expects value token as an argument at index {i}' got {arguments[i]} type"' queryText' parameters); " is 149.
Long Statement,Raven.Server.Documents.Queries,StaticIndexQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\StaticIndexQueryRunner.cs,ExecuteFacetedQuery,The length of the statement  "                throw new InvalidQueryException("Facet query must be executed against static index."' query.Metadata.QueryText' query.QueryParameters); " is 135.
Long Statement,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,VisitMethod,The length of the statement  "                    throw new InvalidOperationException("intersect(logical statement' logical statement' ..) must be called with two or more logical statements parameters"); " is 153.
Long Statement,Raven.Server.Documents.Queries.AST,Query,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\Query.cs,TryAddFunction,The length of the statement  "                DeclaredFunctions = new Dictionary<StringSegment' (string FunctionText' Esprima.Ast.Program Program)>(CaseInsensitiveStringSegmentEqualityComparer.Instance); " is 157.
Long Statement,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,ExecuteIndexEntriesQuery,The length of the statement  "            throw new NotSupportedException("Collection query is handled directly by documents storage so index entries aren't created underneath"); " is 136.
Long Statement,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,ExecuteCollectionQuery,The length of the statement  "            // we optimize for empty queries without sorting options' appending CollectionIndexPrefix to be able to distinguish index for collection vs. physical index " is 155.
Long Statement,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,ExecuteCollectionQuery,The length of the statement  "            var documents = new CollectionQueryEnumerable(Database' Database.DocumentsStorage' fieldsToFetch' collection' query' context' includeDocumentsCommand' totalResults); " is 165.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMapping,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMapping.cs,ExtendMappingBasedOn,The length of the statement  "            Debug.Assert(definitionOfExistingIndex is AutoMapIndexDefinition || definitionOfExistingIndex is AutoMapReduceIndexDefinition' "Dynamic queries are handled only by auto indexes"); " is 179.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMapping,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMapping.cs,ExtendMappingBasedOn,The length of the statement  "            void Update<T>(Dictionary<string' DynamicQueryMappingItem> mappingFields' Dictionary<string' T> indexFields) where T : IndexFieldBase " is 133.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMapping,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMapping.cs,ExtendMappingBasedOn,The length of the statement  "                        mappingFields.Add(indexField.Name' DynamicQueryMappingItem.Create(new QueryFieldName(indexField.Name' indexField.HasQuotedName)' indexField.Aggregation' " is 152.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMapping,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMapping.cs,Create,The length of the statement  "                        throw new InvalidQueryException($"Field '{field.Key}' isn't neither an aggregation operation nor part of the group by key"' query.Metadata.QueryText' " is 149.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMapping,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMapping.cs,CreateGroupByFields,The length of the statement  "                result[groupByField.Name] = DynamicQueryMappingItem.CreateGroupBy(groupByField.Name' groupByField.GroupByArrayBehavior' query.Metadata.WhereFields); " is 148.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMappingItem,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMappingItem.cs,Create,The length of the statement  "            return new DynamicQueryMappingItem(name' aggregation' GroupByArrayBehavior.NotApplicable' false' isFullTextSearch' isExactSearch' spatial); " is 139.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMappingItem,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMappingItem.cs,Create,The length of the statement  "                return new DynamicQueryMappingItem(name' aggregation' GroupByArrayBehavior.NotApplicable' true' whereField.IsFullTextSearch' whereField.IsExactSearch' whereField.Spatial); " is 171.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMappingItem,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMappingItem.cs,CreateGroupBy,The length of the statement  "                return new DynamicQueryMappingItem(name' AggregationOperation.None' groupByArrayBehavior' true' whereField.IsFullTextSearch' whereField.IsExactSearch' whereField.Spatial); " is 171.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,Match,The length of the statement  "            if (results.TryGetValue(DynamicQueryMatchType.Complete' out DynamicQueryMatchResult[] matchResults) && matchResults.Length > 0) " is 127.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,SelectIndexMatchingCompletely,The length of the statement  "                    explanations.Add(new Explanation(prioritizedResults[i].IndexName' "Wasn't the widest / most unstable index matching this query")); " is 130.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,The length of the statement  "                    explanations?.Add(new Explanation(indexName' "Query is specific for collection' but the index searches across all of them' may result in a different type being returned.")); " is 173.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,The length of the statement  "                explanations?.Add(new Explanation(indexName' "Index contains more than a single entity name' may result in a different type being returned.")); " is 143.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,The length of the statement  "                explanations?.Add(new Explanation(indexName' $"Cannot do dynamic queries on disabled index or index with errors (index name = {indexName})")); " is 142.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,The length of the statement  "                        explanations?.Add(new Explanation(indexName' $"The following field is not searchable {indexField.Name}' while the query needs to search() on it")); " is 147.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,The length of the statement  "                        explanations?.Add(new Explanation(indexName' $"The following field is not exactable {indexField.Name}' while the query needs to perform exact() on it")); " is 153.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,The length of the statement  "                            explanations?.Add(new Explanation(indexName' $"The following field is not a spatial field {indexField.Name}' while the query needs to perform spatial() on it")); " is 161.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,The length of the statement  "                explanations?.Add(new Explanation(indexName' $"The index (name = {indexName}) is idle. The preference is for active indexes - making a complete match but marking the index is idle")); " is 183.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,ConsiderUsageOfIndex,The length of the statement  "                var bestMapReduceMatch = AssertMapReduceFields(query' (AutoMapReduceIndexDefinition)definition' currentBestState' explanations); " is 128.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,AssertMapReduceFields,The length of the statement  "                        $"The following field {field.Name} has {field.Aggregation} operation defined' while query required {mapField.AggregationOperation}")); " is 134.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,AssertMapReduceFields,The length of the statement  "                        explanations.Add(new Explanation(indexName' $"The following group by fields are missing: {string.Join("' "' missingFields)}")); " is 127.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,AssertMapReduceFields,The length of the statement  "                    var extraFields = definition.GroupByFields.Where(x => query.GroupByFields.Select(y => y.Value.Name.Value).Contains(x.Key) == false); " is 132.
Long Statement,Raven.Server.Documents.Queries.Dynamic,DynamicQueryToIndexMatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryToIndexMatcher.cs,AssertMapReduceFields,The length of the statement  "                    explanations.Add(new Explanation(indexName' $"Index {indexName} has additional group by fields: {string.Join("' "' extraFields)}")); " is 132.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetedQueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetedQueryParser.cs,ProcessFacetSetup,The length of the statement  "                            throw new InvalidOperationException($"Could not parse the following range expression '{range}' from facet setup document: {setup.Id}"); " is 135.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetedQueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetedQueryParser.cs,ThrowRangeDefinedOnDifferentFields,The length of the statement  "            throw new InvalidQueryException($"Facet ranges must be defined on the same field while we got '{fieldName}' and '{differentField}' used in the same faced"' " is 155.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetedQueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetedQueryParser.cs,ThrowUnsupportedRangeOperator,The length of the statement  "            throw new InvalidQueryException($"Unsupported operator in a range of a facet query: {op}"' query.Query.Metadata.QueryText' query.Query.QueryParameters); " is 152.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetedQueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetedQueryParser.cs,ThrowUnsupportedRangeExpression,The length of the statement  "            throw new InvalidQueryException($"Unsupported range expression of a facet query: {expression.GetType().Name}. Text: {expression.GetText()}."' query.Query.Metadata.QueryText' query.Query.QueryParameters); " is 203.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetField.cs,GetOptions,The length of the statement  "                    throw new InvalidOperationException($"Parameter '{_optionsAsStringOrParameterName}' containing '{nameof(FacetOptions)}' was not present in the list of parameters."); " is 165.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetField.cs,GetOptions,The length of the statement  "            var options = (FacetOptions)EntityToBlittable.ConvertToEntity(typeof(FacetOptions)' "facet/options"' optionsJson' DocumentConventions.Default); " is 143.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetField.cs,AddAggregation,The length of the statement  "                throw new InvalidOperationException($"Detected duplicate facet aggregation operation '{aggregation}'. Each facet can only contain one of each available operations."); " is 166.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetField.cs,AddOptions,The length of the statement  "                throw new InvalidOperationException($"{nameof(FacetOptions)} can only be passed as JSON string or as a parameter pointing to JSON object' but was '{type}'."); " is 158.
Long Statement,Raven.Server.Documents.Queries.Facets,FacetQuery,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetQuery.cs,Create,The length of the statement  "                    var document = (FacetSetup)EntityToBlittable.ConvertToEntity(typeof(FacetSetup)' facetField.FacetSetupDocumentId' documentJson.Data' DocumentConventions.Default); " is 162.
Long Statement,Raven.Server.Documents.Queries.MoreLikeThis,MoreLikeThis,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\MoreLikeThis.cs,RetrieveInterestingTerms,The length of the statement  "            var lim = _maxQueryTerms; // have to be careful' retrieveTerms returns all words but that's probably not useful to our caller... " is 128.
Long Statement,Raven.Server.Documents.Queries.MoreLikeThis,MoreLikeThis,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\MoreLikeThis.cs,RetrieveInterestingTerms,The length of the statement  "            var lim = _maxQueryTerms; // have to be careful' retrieveTerms returns all words but that's probably not useful to our caller... " is 128.
Long Statement,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,Identifier,The length of the statement  "            if ((beginning ? char.IsLetter(_q[_pos]) == false : char.IsLetterOrDigit(_q[_pos]) == false) && _q[_pos] != '_' && _q[_pos] != '@') " is 131.
Long Statement,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,Identifier,The length of the statement  "            if(TokenLength == 1 && (_q[TokenStart] == '@' || TokenStart+1<_q.Length && _q[TokenStart] == '_' && _q[TokenStart+1] == '@')) " is 125.
Long Statement,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,Identifier,The length of the statement  "                throw new QueryParser.ParseException(Column + ":" + Line + " Illegal identifier detected starting with "+ _q[TokenStart] + "@ in query: '" + Input + "'"); " is 154.
Long Statement,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,GetEscapedString,The length of the statement  "            throw new QueryParser.ParseException(Column + ":" + Line + " unrecognized escape character found in string in query: '" + Input + "'"); " is 135.
Long Statement,Raven.Server.Documents.Queries.Results,MapQueryResultRetriever,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\MapQueryResultRetriever.cs,Get,The length of the statement  "                throw new InvalidOperationException($"Could not extract '{Constants.Documents.Indexing.Fields.DocumentIdFieldName}' from index."); " is 130.
Long Statement,Raven.Server.Documents.Queries.Results,MapReduceQueryResultRetriever,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\MapReduceQueryResultRetriever.cs,DirectGet,The length of the statement  "            var result = new BlittableJsonReaderObject((byte*)_context.PinObjectAndGetAddress(reduceValue)' reduceValue.Length' _context); " is 126.
Long Statement,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,ThrowInvalidQueryBodyResponse,The length of the statement  "            throw new InvalidOperationException("Query returning a single function call result must return an object' but got: " + (fieldVal ?? "null")); " is 141.
Long Statement,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,TryGetValue,The length of the statement  "                        throw new InvalidQueryException("The query is parametrized but the actual values of parameters were not provided"' _query.Query' (BlittableJsonReaderObject)null); " is 162.
Long Statement,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,TryGetValue,The length of the statement  "                        throw new InvalidQueryException($"Value of parameter '{fieldToFetch.QueryField.SourceAlias}' was not provided"' _query.Query' _query.QueryParameters); " is 150.
Long Statement,Raven.Server.Documents.Queries.Results,QueryResultRetrieverBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,ThrowOnlyArrayFieldCanHaveMultipleValues,The length of the statement  "                $"Attempted to read multiple values in field {fieldToFetch.ProjectedName ?? fieldToFetch.Name.Value}' but it isn't an array and should have only a single value' did you forget '[]' ?"); " is 185.
Long Statement,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,GetTerms,The length of the statement  "                    throw new InvalidOperationException($"Parameter '{_termAsStringOrParameterName}' containing terms was not present in the list of parameters."); " is 143.
Long Statement,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,GetOptions,The length of the statement  "                    throw new InvalidOperationException($"Parameter '{_optionsAsStringOrParameterName}' containing '{nameof(SuggestionOptions)}' was not present in the list of parameters."); " is 170.
Long Statement,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,GetOptions,The length of the statement  "            var options = (SuggestionOptions)EntityToBlittable.ConvertToEntity(typeof(SuggestionOptions)' "suggestion/options"' optionsJson' DocumentConventions.Default); " is 158.
Long Statement,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,AddTerm,The length of the statement  "                throw new InvalidOperationException($"Term can only be passed as string or as a parameter pointing to string' but was '{type}'."); " is 130.
Long Statement,Raven.Server.Documents.Queries.Suggestions,SuggestionField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Suggestions\SuggestionField.cs,AddOptions,The length of the statement  "                throw new InvalidOperationException($"{nameof(FacetOptions)} can only be passed as JSON string or as a parameter pointing to JSON object' but was '{type}'."); " is 158.
Long Statement,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,HandleConflictForDocument,The length of the statement  "                        "Detected conflict on replication' but could not figure out conflicted vector. This is not supposed to happen and is likely a bug."); " is 133.
Long Statement,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,HandleConflictForDocument,The length of the statement  "                var local = DocumentConflict.From(documentsContext' localDocumentTuple.Document) ?? DocumentConflict.From(localDocumentTuple.Tombstone); " is 136.
Long Statement,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,HandleConflictForDocument,The length of the statement  "            _database.DocumentsStorage.ConflictsStorage.AddConflict(documentsContext' id' lastModifiedTicks' doc' changeVector' collection' flags); " is 135.
Long Statement,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,TryResolveConflictByScript,The length of the statement  "            var hasScript = _conflictResolver.ScriptConflictResolversCache.TryGetValue(collection' out ScriptResolver scriptResolver); " is 122.
Long Statement,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,TryResolveConflictByScript,The length of the statement  "            var conflictedDocs = new List<DocumentConflict>(documentsContext.DocumentDatabase.DocumentsStorage.ConflictsStorage.GetConflictsFor(documentsContext' conflict.Id)); " is 164.
Long Statement,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,TryResolveIdenticalDocument,The length of the statement  "                var nonPersistentFlags = (compareResult & DocumentCompareResult.ShouldRecreateDocument) == DocumentCompareResult.ShouldRecreateDocument  " is 135.
Long Statement,Raven.Server.Documents.Replication,ConflictManager,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ConflictManager.cs,TryResolveIdenticalDocument,The length of the statement  "                _database.DocumentsStorage.Put(context' id' null' incomingDoc' lastModifiedTicks' mergedChangeVector' nonPersistentFlags: nonPersistentFlags); " is 142.
Long Statement,Raven.Server.Documents.Replication,IncomingConnectionInfo,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingConnectionInfo.cs,Equals,The length of the statement  "            return string.Equals(SourceDatabaseName' other.SourceDatabaseName' StringComparison.OrdinalIgnoreCase) && string.Equals(SourceUrl' other.SourceUrl' StringComparison.OrdinalIgnoreCase) && string.Equals(SourceMachineName' other.SourceMachineName' StringComparison.CurrentCultureIgnoreCase); " is 288.
Long Statement,Raven.Server.Documents.Replication,IncomingConnectionInfo,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingConnectionInfo.cs,GetHashCode,The length of the statement  "                int hashCode = (SourceDatabaseName != null ? StringComparer.CurrentCultureIgnoreCase.GetHashCode(SourceDatabaseName) : 0); " is 122.
Long Statement,Raven.Server.Documents.Replication,IncomingConnectionInfo,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingConnectionInfo.cs,GetHashCode,The length of the statement  "                hashCode = (hashCode * 397) ^ (SourceMachineName != null ? StringComparer.CurrentCultureIgnoreCase.GetHashCode(SourceMachineName) : 0); " is 135.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveReplicationBatches,The length of the statement  "                        _log.Info($"Connection error {FromToString}: an exception was thrown during receiving incoming document replication batch."' e); " is 128.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,HandleSingleReplicationBatch,The length of the statement  "                                        $"The previous task of updating the database change vector was not completed and has the status of {_prevChangeVectorUpdate.Status}' " + " is 136.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The length of the statement  "                _log.Info($"Receiving replication batch with {replicatedItemsCount} documents starting with {lastEtag} from {ConnectionInfo}"); " is 127.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The length of the statement  "                        $"Replication connection {FromToString}: received {replicatedItemsCount:#'#;;0} documents with size {totalSize / 1024:#'#;;0} kb to database in {sw.ElapsedMilliseconds:#'#;;0} ms."); " is 182.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The length of the statement  "                        while (task.Wait(Math.Min(3000' (int)(_database.Configuration.Replication.ActiveConnectionTimeout.AsTimeSpan.TotalMilliseconds * 2 / 3))) == false) " is 147.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The length of the statement  "                            // send heartbeats while batch is processed in TxMerger. We wait until merger finishes with this command without timeouts " is 121.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReadItemsFromSource,The length of the statement  "                        item.Base64HashDispose = Slice.From(context.Allocator' ReadExactly(base64HashSize)' base64HashSize' out item.Base64Hash); " is 121.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReadAttachmentStreamsFromSource,The length of the statement  "            Debug.Assert(_replicatedAttachmentStreams.Count == 0' "We should handle all attachment streams during WriteAttachment."); " is 121.
Long Statement,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReadAttachmentStreamsFromSource,The length of the statement  "                attachment.Base64HashDispose = Slice.From(context.Allocator' ReadExactly(base64HashSize)' base64HashSize' out attachment.Base64Hash); " is 133.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                                if (_incoming._replicatedAttachmentStreams.TryGetValue(item.Base64Hash' out ReplicationAttachmentStream attachmentStream)) " is 122.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                                            _incoming._log.Info($"AttachmentStreamPUT '{attachmentStream.Base64Hash}' - '{item.Name}' - '{item.Key}'' with change vector = {item.ChangeVector}"); " is 149.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                                        database.DocumentsStorage.AttachmentsStorage.PutAttachmentStream(context' item.Key' attachmentStream.Base64Hash' attachmentStream.Stream); " is 138.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                                database.DocumentsStorage.AttachmentsStorage.DeleteAttachmentDirect(context' item.Key' false' "$fromReplication"' null' rcvdChangeVector); " is 138.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                                                _incoming._log.Info($"Conflict check resolved to Conflict operation' resolving conflict for doc = {item.Id}' with change vector = {item.ChangeVector}"); " is 152.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                                            _incoming._conflictManager.HandleConflictForDocument(context' item.Id' item.Collection' item.LastModifiedTicks' document' rcvdChangeVector' conflictingVector' item.Flags); " is 171.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                                                    $"Conflict check resolved to AlreadyMerged operation' nothing to do for doc = {item.Id}' with change vector = {item.ChangeVector}"); " is 132.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                    Debug.Assert(_incoming._replicatedAttachmentStreams.Count == 0' "We should handle all attachment streams during WriteAttachment."); " is 131.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                    // instead of : SetDatabaseChangeVector -> maxReceivedChangeVectorByDatabase ' we will store in context and write once right before commit (one time instead of repeating on all docs in the same Tx) " is 197.
Long Statement,Raven.Server.Documents.Replication,MergedDocumentReplicationCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The length of the statement  "                    // instead of : SetLastReplicateEtagFrom -> _incoming.ConnectionInfo.SourceDatabaseId' _lastEtag ' we will store in context and write once right before commit (one time instead of repeating on all docs in the same Tx) " is 217.
Long Statement,Raven.Server.Documents.Replication,InterruptibleRead,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\InterruptibleRead.cs,ReadNextObject,The length of the statement  "                var jsonReaderObject = await context.ParseToMemoryAsync(_stream' debugTag' BlittableJsonDocumentBuilder.UsageMode.None' buffer' token); " is 135.
Long Statement,Raven.Server.Documents.Replication,LiveReplicationPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\LiveReplicationPerformanceCollector.cs,PreparePerformanceStats,The length of the statement  "                    yield return new IncomingPerformanceStats(handler.ConnectionInfo.SourceDatabaseId' handler.SourceFormatted' itemsToSend.Select(item => item.ToReplicationPerformanceLiveStatsWithDetails()).ToArray()); " is 199.
Long Statement,Raven.Server.Documents.Replication,LiveReplicationPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\LiveReplicationPerformanceCollector.cs,PreparePerformanceStats,The length of the statement  "                    yield return new OutgoingPerformanceStats(handler.DestinationDbId' handler.DestinationFormatted' itemsToSend.Select(item => item.ToReplicationPerformanceLiveStatsWithDetails()).ToArray()); " is 188.
Long Statement,Raven.Server.Documents.Replication,LiveReplicationPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\LiveReplicationPerformanceCollector.cs,OutgoingHandlerAdded,The length of the statement  "                return new ReplicationHandlerAndPerformanceStatsList<OutgoingReplicationHandler' OutgoingReplicationStatsAggregator>(handler); " is 126.
Long Statement,Raven.Server.Documents.Replication,LiveReplicationPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\LiveReplicationPerformanceCollector.cs,IncomingHandlerAdded,The length of the statement  "                return new ReplicationHandlerAndPerformanceStatsList<IncomingReplicationHandler' IncomingReplicationStatsAggregator>(handler); " is 126.
Long Statement,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReplicateToDestination,The length of the statement  "                            $"{record.DatabaseName} is encrypted' and require HTTPS for replication' but had endpoint with url {Destination.Url} to database {Destination.Database}"); " is 154.
Long Statement,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReplicateToDestination,The length of the statement  "                    var wrapSsl = TcpUtils.WrapStreamWithSslAsync(_tcpClient' _connectionInfo' _parent._server.Server.Certificate.Certificate); " is 123.
Long Statement,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReplicateToDestination,The length of the statement  "                            var msg = $"Failed to parse initial server replication response' because there is no database named {_database.Name} " + " is 120.
Long Statement,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReplicateToDestination,The length of the statement  "                                msg += "This can happen if the other node wasn't yet notified about being assigned this database and should be resolved shortly."; " is 130.
Long Statement,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,AddAlertOnFailureToReachOtherSide,The length of the statement  "            using (_database.ConfigurationStorage.ContextPool.AllocateOperationContext(out TransactionOperationContext configurationContext)) " is 129.
Long Statement,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,AddAlertOnFailureToReachOtherSide,The length of the statement  "                        AlertTitle' msg' AlertType.Replication' NotificationSeverity.Warning' key: FromToString' details: new ExceptionDetails(e))' " is 123.
Long Statement,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,HandleServerResponse,The length of the statement  "                            $"Received reply for replication batch from {Destination.FromString()}. New destination change vector is {LastAcceptedChangeVector}"); " is 134.
Long Statement,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,HandleServerResponse,The length of the statement  "                            $"Received reply for replication batch from {Destination.FromString()}. There has been a failure' error string received : {replicationBatchReply.Exception}"); " is 158.
Long Statement,Raven.Server.Documents.Replication,UpdateSiblingCurrentEtag,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,Execute,The length of the statement  "                var result = ChangeVectorUtils.TryUpdateChangeVector(_replicationBatchReply.NodeTag' _dbId' _replicationBatchReply.CurrentEtag' context.LastDatabaseChangeVector);                 " is 162.
Long Statement,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,GetDocsConflictsTombstonesRevisionsAndAttachmentsAfter,The length of the statement  "            var conflicts = _parent._database.DocumentsStorage.ConflictsStorage.GetConflictsFrom(ctx' etag + 1).Select(ReplicationBatchItem.From); " is 134.
Long Statement,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,GetDocsConflictsTombstonesRevisionsAndAttachmentsAfter,The length of the statement  "            using (var mergedInEnumerator = new MergedReplicationBatchEnumerator(stats.DocumentRead' stats.AttachmentRead' stats.TombstoneRead)) " is 132.
Long Statement,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,ExecuteReplicationOnce,The length of the statement  "            using (_parent._database.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext documentsContext)) " is 127.
Long Statement,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,ExecuteReplicationOnce,The length of the statement  "                        _log.Info($"Found {_orderedReplicaItems.Count:#'#;;0} documents and {_replicaAttachmentStreams.Count} attachment's streams to replicate to {_parent.Node.FromString()}."); " is 170.
Long Statement,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,AddReplicationItemToBatch,The length of the statement  "            if (ChangeVectorUtils.GetConflictStatus(item.ChangeVector' _parent.LastAcceptedChangeVector) == ConflictStatus.AlreadyMerged) " is 125.
Long Statement,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,AddReplicationItemToBatch,The length of the statement  "                    _log.Info($"Skipping replication of {item.Type} '{item.Id}' because destination has a higher change vector. Current: {item.ChangeVector} < Destination: {_parent.LastAcceptedChangeVector} "); " is 190.
Long Statement,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,SendDocumentsBatch,The length of the statement  "                _log.Info($"Starting sending replication batch ({_parent._database.Name}) with {_orderedReplicaItems.Count:#'#;;0} docs' and last etag {_lastEtag}"); " is 149.
Long Statement,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,SendDocumentsBatch,The length of the statement  "                _log.Info($"Finished sending replication batch. Sent {_orderedReplicaItems.Count:#'#;;0} documents and {_replicaAttachmentStreams.Count:#'#;;0} attachment streams in {sw.ElapsedMilliseconds:#'#;;0} ms. Last sent etag = {_lastEtag}"); " is 233.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AcceptIncomingConnection,The length of the statement  "                        $"GetLastEtag: {getLatestEtagMessage.SourceTag}({getLatestEtagMessage.SourceMachineName}) / {getLatestEtagMessage.SourceDatabaseName} ({getLatestEtagMessage.SourceDatabaseId}) - {getLatestEtagMessage.SourceUrl}"); " is 213.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AcceptIncomingConnection,The length of the statement  "                using (Database.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext documentsOperationContext)) " is 127.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AcceptIncomingConnection,The length of the statement  "                using (Database.ConfigurationStorage.ContextPool.AllocateOperationContext(out TransactionOperationContext configurationContext)) " is 128.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AcceptIncomingConnection,The length of the statement  "                    $"Initialized document replication connection from {connectionInfo.SourceDatabaseName} located at {connectionInfo.SourceUrl}"); " is 127.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AssertValidConnection,The length of the statement  "                    $"Failed to parse source database Id. What I got is {(string.IsNullOrWhiteSpace(connectionInfo.SourceDatabaseId) ? "<empty string>" : Database.DbId.ToString())}. This is not supposed to happen and is likely a bug."); " is 216.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AssertValidConnection,The length of the statement  "                    $"Cannot have replication with source and destination being the same database. They share the same db id ({connectionInfo} - {Database.DbId})"); " is 144.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AssertValidConnection,The length of the statement  "                    $"Cannot accept the incoming replication connection from {connectionInfo.SourceUrl}' because this node is in passive state."); " is 126.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AssertValidConnection,The length of the statement  "                        $"Disconnecting existing connection from {value.FromToString} because we got a new connection from the same source db"); " is 120.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,HandleExternalReplication,The length of the statement  "            var newDestinations = changes.AddedDestinations.Where(o => newRecord.Topology.WhoseTaskIsIt(o' _server.Engine.CurrentState) == _server.NodeTag).ToList(); " is 153.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,ValidateConnectionString,The length of the statement  "            if (newRecord.RavenConnectionStrings.TryGetValue(externalReplication.ConnectionStringName' out connectionString) == false) " is 122.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,HandleInternalReplication,The length of the statement  "                newRecord.Topology?.GetDestinations(_server.NodeTag' Database.Name' newRecord.DeletionInProgress' _clusterTopology' _server.Engine.CurrentState); " is 145.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,DropOutgoingConnections,The length of the statement  "                _log.Info($"Dropping {outgoingChanged.Count:#'#} outgoing replications connections from {Database} on {_server.NodeTag}."); " is 123.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,GetConnectionInfo,The length of the statement  "                    using (var requestExecutor = RequestExecutor.Create(exNode.ConnectionString.TopologyDiscoveryUrls' exNode.ConnectionString.Database' " is 132.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,GetConnectionInfo,The length of the statement  "                    return ReplicationUtils.GetTcpInfo(internalNode.Url' internalNode.NodeTag' "Replication"' _server.Server.Certificate.Certificate); " is 130.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,GetConnectionInfo,The length of the statement  "                    $"Unexpected replication node type' Expected to be '{typeof(ExternalReplication)}' or '{typeof(InternalReplication)}'' but got '{node.GetType()}'"); " is 148.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,GetConnectionInfo,The length of the statement  "                    _log.Info($"Failed to fetch tcp connection information for the destination '{node.FromString()}' ' the connection will be retried later."' e); " is 142.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,GetLastProcessedDocumentTombstonesPerCollection,The length of the statement  "                        $"The disabled replication destination {disabledReplicationNode.FromString()} prevents from cleaning large number of tombstones."' " is 130.
Long Statement,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,WaitForReplicationAsync,The length of the statement  "                        _log.Info($"Get exception while trying to get write assurance on a database with {numberOfReplicasToWaitFor} servers. " + " is 121.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,ValidatedResolveByScriptInput,The length of the statement  "                    var msg = $"All conflicted documents must have same collection name' but we found conflicted document in {collection} and an other one in {documentConflict.Collection}"; " is 169.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,PutResolvedDocument,The length of the statement  "                    _database.DocumentsStorage.RevisionsStorage.Put(context' incoming.Id' incoming.Doc' incoming.Flags | DocumentFlags.Conflicted | DocumentFlags.HasRevisions' " is 155.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,PutResolvedDocument,The length of the statement  "                        _database.DocumentsStorage.RevisionsStorage.Delete(context' incoming.Id' key' new CollectionName(incoming.Collection)' newChangeVector' " is 135.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,PutResolvedDocument,The length of the statement  "                            incoming.LastModified.Ticks' NonPersistentDocumentFlags.None' incoming.Flags | DocumentFlags.Conflicted | DocumentFlags.HasRevisions); " is 134.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,PutResolvedDocument,The length of the statement  "                        _database.DocumentsStorage.RevisionsStorage.Delete(context' existing.Tombstone.LowerId' key' new CollectionName(existing.Tombstone.Collection)' existing.Tombstone.ChangeVector' " is 176.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,PutResolvedDocument,The length of the statement  "                            existing.Tombstone.LastModified.Ticks' NonPersistentDocumentFlags.None' existing.Tombstone.Flags | DocumentFlags.Conflicted | DocumentFlags.HasRevisions); " is 154.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,PutResolvedDocument,The length of the statement  "                        _database.Time.GetUtcNow().Ticks' resolved.ChangeVector' new CollectionName(resolved.Collection)' documentFlags: DocumentFlags.Resolved | DocumentFlags.HasRevisions); " is 166.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,PutResolvedDocument,The length of the statement  "            // the resolved document could be an update of the existing document' so it's a good idea to clone it also before updating. " is 123.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,PutResolvedDocument,The length of the statement  "                _database.DocumentsStorage.Put(context' resolved.LowerId' null' clone' null' resolved.ChangeVector' DocumentFlags.Resolved); " is 124.
Long Statement,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,DeleteDocumentFromDifferentCollectionIfNeeded,The length of the statement  "            _database.DocumentsStorage.DeleteWithoutCreatingTombstone(ctx' oldVersionCollectionName' oldVersion.StorageId' isTombstone: false); " is 131.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,ShouldVersionDocument,The length of the statement  "                    return (nonPersistentFlags & NonPersistentDocumentFlags.LegacyHasRevisions) != NonPersistentDocumentFlags.LegacyHasRevisions; " is 125.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Put,The length of the statement  "                var fromSmuggler = (nonPersistentFlags & NonPersistentDocumentFlags.FromSmuggler) == NonPersistentDocumentFlags.FromSmuggler; " is 125.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Put,The length of the statement  "                var fromReplication = (nonPersistentFlags & NonPersistentDocumentFlags.FromReplication) == NonPersistentDocumentFlags.FromReplication; " is 134.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,DeleteOldRevisions,The length of the statement  "                // which is old. But because we put it first' we make sure to clean this document' because of the order to the revisions. " is 121.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,DeleteOldRevisions,The length of the statement  "                DeleteOldRevisions(context' table' prefixSlice' collectionName' configuration' revisionsCount' nonPersistentFlags' changeVector); " is 129.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,DeleteOldRevisions,The length of the statement  "            var deletedRevisionsCount = DeleteRevisions(context' table' prefixSlice' collectionName' numberOfRevisionsToDelete' configuration.MinimumRevisionAgeToKeep' changeVector); " is 170.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Delete,The length of the statement  "                Delete(context' lowerId' idPtr' id' collectionName' deleteRevisionDocument' changeVector' lastModifiedTicks' nonPersistentFlags' flags); " is 136.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Delete,The length of the statement  "                Delete(context' lowerId' idPtr' id' collectionName' deleteRevisionDocument' changeVector' lastModifiedTicks' nonPersistentFlags' flags); " is 136.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,Delete,The length of the statement  "            var fromReplication = (nonPersistentFlags & NonPersistentDocumentFlags.FromReplication) == NonPersistentDocumentFlags.FromReplication; " is 134.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,ParseRawDataSectionRevisionWithValidation,The length of the statement  "                throw new ArgumentException("Data size is invalid' possible corruption when parsing BlittableJsonReaderObject"' nameof(size)); " is 126.
Long Statement,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,ParseRawDataSectionRevisionWithValidation,The length of the statement  "                throw new ArgumentException("TransactionMarker size is invalid' possible corruption when parsing BlittableJsonReaderObject"' nameof(size)); " is 139.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionConnectionState,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionConnectionState.cs,RegisterSubscriptionConnection,The length of the statement  "                                    $"Subscription {incomingConnection.SubscriptionId} is already occupied by a TakeOver connection' connection cannot be opened"); " is 127.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,AssertSubscriptionConnectionDetails,The length of the statement  "                    throw new SubscriptionDoesNotBelongToNodeException($"Subscripition with id {id} can't be proccessed on current node ({_serverStore.NodeTag})' because it belongs to {whoseTaskIsIt}") " is 181.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,DropSubscriptionConnection,The length of the statement  "            if (_subscriptionConnectionStates.TryGetValue(subscriptionId' out SubscriptionConnectionState subscriptionConnectionState) == false) " is 132.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,GetSubscription,The length of the statement  "                throw new ArgumentNullException("Must receive either subscription id or subscription name in order to provide subscription data"); " is 130.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,GetSubscriptionFromServerStore,The length of the statement  "            var subscriptionBlittable = _serverStore.Cluster.Read(context' SubscriptionState.GenerateSubscriptionItemKeyName(_db.Name' name)); " is 130.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,GetRunningSubscription,The length of the statement  "                throw new ArgumentNullException("Must receive either subscription id or subscription name in order to provide subscription data"); " is 130.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,GetRunningSubscription,The length of the statement  "            if (_subscriptionConnectionStates.TryGetValue(subscription.SubscriptionId' out SubscriptionConnectionState subscriptionConnectionState) == false) " is 145.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,GetSubscriptionConnection,The length of the statement  "            var subscriptionBlittable = _serverStore.Cluster.Read(context' SubscriptionState.GenerateSubscriptionItemKeyName(_db.Name' subscriptionName)); " is 142.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,GetSubscriptionConnection,The length of the statement  "            if (_subscriptionConnectionStates.TryGetValue(subscriptionState.SubscriptionId' out SubscriptionConnectionState subscriptionConnection) == false) " is 145.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,GetRunningSubscriptionConnectionHistory,The length of the statement  "            if (!_subscriptionConnectionStates.TryGetValue(subscriptionId' out SubscriptionConnectionState subscriptionConnectionState)) " is 124.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,GetSubscriptionInternal,The length of the statement  "            if (_subscriptionConnectionStates.TryGetValue(subscriptionData.SubscriptionId' out SubscriptionConnectionState subscriptionConnectionState)) " is 140.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,HandleDatabaseValueChange,The length of the statement  "                    var subscriptionBlittable = _serverStore.Cluster.Read(context' SubscriptionState.GenerateSubscriptionItemKeyName(databaseRecord.DatabaseName' subscriptionName)); " is 161.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,HandleDatabaseValueChange,The length of the statement  "                        DropSubscriptionConnection(subscriptionStateKvp.Key' new SubscriptionDoesNotExistException($"The subscription {subscriptionName} had been deleted")); " is 149.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,HandleDatabaseValueChange,The length of the statement  "                        DropSubscriptionConnection(subscriptionStateKvp.Key' new SubscriptionClosedException($"The subscription {subscriptionName} is disabled and cannot be used until enabled")); " is 171.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,HandleDatabaseValueChange,The length of the statement  "                        DropSubscriptionConnection(subscriptionStateKvp.Key' new SubscriptionClosedException($"The subscription {subscriptionName} query has been modified' connection must be restarted")); " is 180.
Long Statement,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,HandleDatabaseValueChange,The length of the statement  "                            new SubscriptionDoesNotBelongToNodeException("Subscription operation was stopped' because it's now under different server's responsibility")); " is 142.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ParseSubscriptionOptionsAsync,The length of the statement  "            using (TcpConnection.DocumentDatabase.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context)) " is 128.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ParseSubscriptionOptionsAsync,The length of the statement  "                var subscriptionItemKey = SubscriptionState.GenerateSubscriptionItemKeyName(TcpConnection.DocumentDatabase.Name' _options.SubscriptionName); " is 140.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ParseSubscriptionOptionsAsync,The length of the statement  "                    throw new SubscriptionClosedException("Could not figure out the subscription id for subscription named " + _options.SubscriptionName); " is 134.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The length of the statement  "                    $"Subscription connection for subscription ID: {SubscriptionId} received from {TcpConnection.TcpClient.Client.RemoteEndPoint}"); " is 128.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The length of the statement  "            SubscriptionState = await TcpConnection.DocumentDatabase.SubscriptionStorage.AssertSubscriptionConnectionDetails(SubscriptionId'_options.SubscriptionName); " is 155.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The length of the statement  "            using (this.TcpConnection.DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext context)) " is 136.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The length of the statement  "                    throw new SubscriptionInvalidStateException($"Collection {Collection} could not be found. Subscription can't be opened on non existant collection"); " is 148.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The length of the statement  "                            $"Subscription Id {SubscriptionId} from IP {TcpConnection.TcpClient.Client.RemoteEndPoint} starts to wait until previous connection from {_connectionState.Connection?.TcpConnection.TcpClient.Client.RemoteEndPoint} is released"); " is 228.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The length of the statement  "                    timeout = TimeSpan.FromMilliseconds(Math.Max(250' (long)_options.TimeToWaitBeforeConnectionRetry.TotalMilliseconds / 2)); " is 121.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The length of the statement  "                    [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.ConnectionStatus)' " is 126.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The length of the statement  "                    [nameof(SubscriptionConnectionServerMessage.Status)] = nameof(SubscriptionConnectionServerMessage.ConnectionStatus.Accepted) " is 124.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,SendSubscriptionDocuments,The length of the statement  "                                $"Cannot open new subscription connection' max amount of concurrent connections reached ({tcpConnectionOptions.DocumentDatabase.Configuration.Subscriptions.MaxNumberOfConcurrentConnections})"); " is 193.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.ConnectionStatus)' " is 126.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Status)] = nameof(SubscriptionConnectionServerMessage.ConnectionStatus.NotFound)' " is 125.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.ConnectionStatus)' " is 126.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Status)] = nameof(SubscriptionConnectionServerMessage.ConnectionStatus.Closed)' " is 123.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.ConnectionStatus)' " is 126.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Status)] = nameof(SubscriptionConnectionServerMessage.ConnectionStatus.Invalid)' " is 124.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.ConnectionStatus)' " is 126.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Status)] = nameof(SubscriptionConnectionServerMessage.ConnectionStatus.InUse)' " is 122.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.ConnectionStatus)' " is 126.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Status)] = nameof(SubscriptionConnectionServerMessage.ConnectionStatus.Redirect)' " is 125.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                            [nameof(SubscriptionConnectionServerMessage.SubscriptionRedirectData.RedirectedTag)] = subscriptionDoesNotBelongException.AppropriateNode " is 137.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.ConnectionStatus)' " is 126.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Status)] = nameof(SubscriptionConnectionServerMessage.ConnectionStatus.ConcurrencyReconnect)' " is 137.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                else if (ex is CommandExecutionException commandExecution && commandExecution.InnerException != null && commandExecution.InnerException is SubscriptionException) " is 161.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The length of the statement  "                        [nameof(SubscriptionConnectionServerMessage.Status)] = nameof(SubscriptionConnectionServerMessage.ConnectionStatus.None)' " is 121.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ProcessSubscriptionAsync,The length of the statement  "                    $"Starting processing documents for subscription {SubscriptionId} received from {TcpConnection.TcpClient.Client.RemoteEndPoint}"); " is 130.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ProcessSubscriptionAsync,The length of the statement  "                _documentsFetcher = new SubscriptionDocumentsFetcher(TcpConnection.DocumentDatabase' _options.MaxDocsPerBatch' SubscriptionId' TcpConnection.TcpClient.Client.RemoteEndPoint' Collection' Revisions' SubscriptionState' _filterAndProjectionScript); " is 244.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ProcessSubscriptionAsync,The length of the statement  "                    using (TcpConnection.DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext docsContext)) " is 135.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ProcessSubscriptionAsync,The length of the statement  "                            subscriptionChangeVectorBeforeCurrentBatch = _lastChangeVector?? SubscriptionState.ChangeVectorForNextBatchStartingPoint; " is 121.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,AssertCloseWhenNoDocsLeft,The length of the statement  "                        $"Closing subscription {Options.SubscriptionName} because did not find any documents to send and it's in '{nameof(SubscriptionWorkerOptions.CloseWhenNoDocsLeft)}' mode"); " is 170.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,AssertCloseWhenNoDocsLeft,The length of the statement  "                throw new SubscriptionClosedException($"Closing subscription {Options.SubscriptionName} because there were no documents left and client connected in '{nameof(SubscriptionWorkerOptions.CloseWhenNoDocsLeft)}' mode"); " is 214.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,TrySendingBatchToClient,The length of the statement  "                            writer.WriteValue(BlittableJsonToken.String' docsContext.GetLazyStringForFieldWithCaching(result.Exception.ToString())); " is 120.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,GetStartEtagForSubscription,The length of the statement  "            using (TcpConnection.DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext docsContext)) " is 135.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,SendHeartBeat,The length of the statement  "                throw new SubscriptionClosedException($"Cannot contact client anymore' closing subscription ({Options?.SubscriptionName})"'ex); " is 127.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,FlushDocsToClient,The length of the statement  "                    $"Flushing {flushedDocs} documents for subscription {SubscriptionId} sending to {TcpConnection.TcpClient.Client.RemoteEndPoint} {(endOfBatch ? "' ending batch" : string.Empty)}"); " is 179.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,WaitForChangedDocuments,The length of the statement  "                var resultingTask = await Task.WhenAny(hasMoreDocsTask' pendingReply' TimeoutManager.WaitFor(TimeSpan.FromMilliseconds(WaitForChangedDocumentsTimeoutInMs))).ConfigureAwait(false); " is 179.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ParseSubscriptionQuery,The length of the statement  "            return (collectionName' (script' q.DeclaredFunctions?.Values?.Select(x => x.FunctionText).ToArray() ?? Array.Empty<string>())' revisions); " is 138.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,GetDataToSend,The length of the statement  "                    throw new SubscriptionInvalidStateException($"Cannot use a revisions subscription' database {_db.Name} does not have revisions configuration."); " is 144.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,GetDocumentsToSend,The length of the statement  "                        if (ShouldSendDocument(_subscription' run' _patch' docsContext' doc' out BlittableJsonReaderObject transformResult' out var exception) == false) " is 144.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,GetRevisionsToSend,The length of the statement  "                foreach (var revisionTuple in _db.DocumentsStorage.RevisionsStorage.GetRevisionsFrom(docsContext' collectionName' startEtag + 1' int.MaxValue)) " is 143.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,GetRevisionsToSend,The length of the statement  "                    if (ShouldSendDocumentWithRevisions(_subscription' run' _patch' docsContext' item' revisionTuple' out var transformResult' out var exception) == false) " is 151.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,ShouldSendDocument,The length of the statement  "                        $"Criteria script threw exception for subscription {_subscriptionId} connected to {_remoteEndpoint} for document id {doc.Id}"' " is 126.
Long Statement,Raven.Server.Documents.TcpHandlers,SubscriptionDocumentsFetcher,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionDocumentsFetcher.cs,ShouldSendDocumentWithRevisions,The length of the statement  "                        $"Criteria script threw exception for subscription {_subscriptionId} connected to {_remoteEndpoint} for document id {item.Id}"' " is 127.
Long Statement,Raven.Server.Extensions,ClusterTopologyExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\ClusterTopologyExtensions.cs,ReplaceCurrentNodeUrlWithClientRequestedNodeUrlIfNecessary,The length of the statement  "            var currentNodeUrlAsSeenByTheClient = serverStore.GetNodeHttpServerUrl(httpContext.Request.GetClientRequestedNodeUrl()); " is 120.
Long Statement,Raven.Server.Extensions,ExpressionExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\ExpressionExtensions.cs,ToPropertyPath,The length of the statement  "            var propertyPathExpressionVisitor = new PropertyPathExpressionVisitor(propertySeparator.ToString()' collectionSeparator.ToString()); " is 132.
Long Statement,Raven.Server.Extensions,HttpExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\HttpExtensions.cs,GetFullUrl,The length of the statement  "            string path = (request.PathBase.HasValue || request.Path.HasValue) ? (request.PathBase + request.Path).ToString() : "/"; " is 120.
Long Statement,Raven.Server.Extensions,WhoIsLocking,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,The length of the statement  "                    throw new Win32Exception(Marshal.GetLastWin32Error()' "Failed to RmRegisterResources (sessionHandle=" + sessionHandle + ")"); " is 125.
Long Statement,Raven.Server.Https,AuthenticatingAdapter,C:\repos\ravendb_ravendb\src\Raven.Server\Https\AuthenticatingAdapter.cs,OnConnectionAsync,The length of the statement  "                                WrongProtocolMessage = "Attempted to access an HTTPS server using HTTP' did you forget to change 'http://' to 'https://' ?" " is 123.
Long Statement,Raven.Server.Https,AuthenticatingAdapter,C:\repos\ravendb_ravendb\src\Raven.Server\Https\AuthenticatingAdapter.cs,OnConnectionAsync,The length of the statement  "                        WrongProtocolMessage = "RavenDB requires clients to connect using TLS 1.2' but the client used: '" + c.SslProtocol +"'." " is 120.
Long Statement,Raven.Server.Https,AuthenticatingAdapter,C:\repos\ravendb_ravendb\src\Raven.Server\Https\AuthenticatingAdapter.cs,OnConnectionAsync,The length of the statement  "                Logger.Operations($"Received TLS connection request with client certificate: {certificate?.SubjectName?.Name}. Authentication status: {authenticationStatus.Status}."); " is 167.
Long Statement,Raven.Server.Https,HttpsConnectionAdapter,C:\repos\ravendb_ravendb\src\Raven.Server\Https\HttpsConnectionAdapter.cs,InnerOnConnectionAsync,The length of the statement  "            //var timeoutFeature = context.Features.Get<Microsoft.AspNetCore.Server.Kestrel.Core.Features.IConnectionTimeoutFeature>(); " is 123.
Long Statement,Raven.Server.Https,HttpsConnectionAdapter,C:\repos\ravendb_ravendb\src\Raven.Server\Https\HttpsConnectionAdapter.cs,EnsureCertificateIsAllowedForServerAuth,The length of the statement  "            /* If the Extended Key Usage extension is included' then we check that the serverAuth usage is included. (http://oid-info.com/get/1.3.6.1.5.5.7.3.1) " is 148.
Long Statement,Raven.Server.Https,HttpsConnectionAdapter,C:\repos\ravendb_ravendb\src\Raven.Server\Https\HttpsConnectionAdapter.cs,EnsureCertificateIsAllowedForServerAuth,The length of the statement  "                throw new InvalidOperationException($"Certificate {certificate.Thumbprint} cannot be used as an SSL server certificate. It has an Extended Key Usage extension but the usages do not include Server Authentication (OID 1.3.6.1.5.5.7.3.1)"); " is 237.
Long Statement,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WritePerformanceStats,The length of the statement  "                w.WriteArray(c' nameof(stat.Performance)' stat.Performance' (wp' cp' performance) => { wp.WriteIndexingPerformanceStats(context' performance); }); " is 146.
Long Statement,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteQueryResult,The length of the statement  "                writer.WriteArray(context' nameof(result.Results)' suggestions' (w' c' suggestion) => w.WriteSuggestionResult(c' suggestion)); " is 126.
Long Statement,Raven.Server.Json,BlittableJsonTextWriterExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTextWriterExtensions.cs,WriteQueryResult,The length of the statement  "                    throw new NotSupportedException("Cannot write query includes of List<BlittableJsonReaderObject>' but got non zero response"); " is 125.
Long Statement,Raven.Server.Json,BlittableNumber,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableNumber.cs,Parse,The length of the statement  "            throw new InvalidOperationException($"Could not parse numeric field for the value '{value ?? "null" }' of the given type: {value?.GetType().FullName ?? "null value"}"); " is 168.
Long Statement,Raven.Server.Json,JsonDeserializationValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Json\JsonDeserializationValidator.cs,Validate,The length of the statement  "                exceptions.Add(new InvalidOperationException($"Missing deserialization routine in '{nameof(JsonDeserializationCluster)}.{nameof(JsonDeserializationCluster.Commands)}' for '{type.Name}'.")); " is 189.
Long Statement,Raven.Server.Monitoring.Snmp.Objects.Database,DatabaseStorageDiskRemainingSpace,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\Objects\Database\5.2.X\2\DatabaseStorageDiskRemainingSpace.cs,GetData,The length of the statement  "            var result = DiskSpaceChecker.GetFreeDiskSpace(database.Configuration.Core.DataDirectory.FullPath' DriveInfo.GetDrives()); " is 122.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpDatabase.cs,AddIndexIfNecessary,The length of the statement  "                            var result = await database.ServerStore.SendToLeaderAsync(new UpdateSnmpDatabaseIndexesMappingCommand(_databaseName' new List<string> " is 133.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpDatabase.cs,AddIndexesFromDatabase,The length of the statement  "                    var result = await database.ServerStore.SendToLeaderAsync(new UpdateSnmpDatabaseIndexesMappingCommand(database.Name' missingIndexes)); " is 134.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpDatabase.cs,LoadIndex,The length of the statement  "            _objectStore.Add(new DatabaseIndexLastIndexingTime(_databaseName' indexName' _databaseLandlord' _databaseIndex' index)); " is 120.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpDatabase.cs,LoadIndex,The length of the statement  "            _objectStore.Add(new DatabaseIndexTimeSinceLastQuery(_databaseName' indexName' _databaseLandlord' _databaseIndex' index)); " is 122.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpDatabase.cs,LoadIndex,The length of the statement  "            _objectStore.Add(new DatabaseIndexTimeSinceLastIndexing(_databaseName' indexName' _databaseLandlord' _databaseIndex' index)); " is 125.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpWatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpWatcher.cs,AddDatabaseIfNecessary,The length of the statement  "                            var result = await _server.ServerStore.SendToLeaderAsync(new UpdateSnmpDatabasesMappingCommand(new List<string> { databaseName })); " is 131.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpWatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpWatcher.cs,CreateSnmpEngine,The length of the statement  "            var v2MembershipProvider = new Version2MembershipProvider(new OctetString(server.Configuration.Monitoring.Snmp.Community)' new OctetString(server.Configuration.Monitoring.Snmp.Community)); " is 188.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpWatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpWatcher.cs,CreateSnmpEngine,The length of the statement  "            var membershipProvider = new ComposedMembershipProvider(new IMembershipProvider[] { v2MembershipProvider' v3MembershipProvider }); " is 130.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpWatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpWatcher.cs,CreateSnmpEngine,The length of the statement  "            var factory = new SnmpApplicationFactory(new SnmpLogger(Logger)' objectStore' membershipProvider' messageHandlerFactory); " is 121.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpWatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpWatcher.cs,CreateSnmpEngine,The length of the statement  "            listener.Users.Add(new OctetString("ravendb")' new DefaultPrivacyProvider(new SHA1AuthenticationProvider(new OctetString(server.Configuration.Monitoring.Snmp.Community)))); " is 172.
Long Statement,Raven.Server.Monitoring.Snmp,SnmpWatcher,C:\repos\ravendb_ravendb\src\Raven.Server\Monitoring\Snmp\SnmpWatcher.cs,LoadDatabase,The length of the statement  "            _loadedDatabases[databaseName] = new SnmpDatabase(_server.ServerStore.DatabasesLandlord' _objectStore' databaseName' (int)databaseIndex); " is 137.
Long Statement,Raven.Server.NotificationCenter.BackgroundWork,DatabaseStatsSender,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\BackgroundWork\DatabaseStatsSender.cs,DoWork,The length of the statement  "                    .ToDictionary(x => x.Name' x => new DatabaseStatsChanged.ModifiedCollection(x.Name' x.Count' _database.DocumentsStorage.GetLastDocumentChangeVector(context' x.Name))); " is 167.
Long Statement,Raven.Server.NotificationCenter.BackgroundWork,DatabaseStatsSender,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\BackgroundWork\DatabaseStatsSender.cs,ExtractModifiedCollections,The length of the statement  "                if (collection.Value.Count != stats.Count || collection.Value.LastDocumentChangeVector != stats.LastDocumentChangeVector) " is 121.
Long Statement,Raven.Server.NotificationCenter.Handlers,DatabaseNotificationCenterHandler,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Handlers\DatabaseNotificationCenterHandler.cs,Get,The length of the statement  "                using (var writer = new NotificationCenterWebSocketWriter(webSocket' Database.NotificationCenter' ContextPool' Database.DatabaseShutdown)) " is 138.
Long Statement,Raven.Server.NotificationCenter.Handlers,DatabaseNotificationCenterHandler,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Handlers\DatabaseNotificationCenterHandler.cs,Get,The length of the statement  "                    using (Database.NotificationCenter.GetStored(out IEnumerable<NotificationTableValue> storedNotifications' postponed: false)) " is 124.
Long Statement,Raven.Server.NotificationCenter.Handlers,DatabaseNotificationCenterHandler,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Handlers\DatabaseNotificationCenterHandler.cs,Get,The length of the statement  "                        var action = OperationChanged.Create(Database.Name'operation.Id' operation.Description' operation.State' operation.Killable); " is 125.
Long Statement,Raven.Server.NotificationCenter.Handlers,ServerDashboardHandler,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Handlers\ServerDashboardHandler.cs,Get,The length of the statement  "                using (var writer = new NotificationCenterWebSocketWriter(webSocket' ServerStore.ServerDashboardNotifications' ServerStore.ContextPool' ServerStore.ServerShutdown)) " is 164.
Long Statement,Raven.Server.NotificationCenter.Handlers,ServerNotificationCenterHandler,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Handlers\ServerNotificationCenterHandler.cs,Get,The length of the statement  "                using (var writer = new NotificationCenterWebSocketWriter(webSocket' ServerStore.NotificationCenter' ServerStore.ContextPool' ServerStore.ServerShutdown)) " is 154.
Long Statement,Raven.Server.NotificationCenter.Handlers,ServerNotificationCenterHandler,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Handlers\ServerNotificationCenterHandler.cs,Get,The length of the statement  "                    using (ServerStore.NotificationCenter.GetStored(out IEnumerable<NotificationTableValue> storedNotifications' postponed: false)) " is 127.
Long Statement,Raven.Server.NotificationCenter,NotificationCenter,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationCenter.cs,Add,The length of the statement  "                    Logger.Info($"Failed to add notification '{notification.Id}' to the notification center. Title: {notification.Title}' message: {notification.Message}"' e); " is 155.
Long Statement,Raven.Server.NotificationCenter,NotificationsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationsStorage.cs,Store,The length of the statement  "                using (var json = context.ReadObject(notification.ToJson()' "notification"' BlittableJsonDocumentBuilder.UsageMode.ToDisk)) " is 123.
Long Statement,Raven.Server.NotificationCenter,NotificationsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationsStorage.cs,Read,The length of the statement  "            var createdAt = new DateTime(Bits.SwapBytes(*(long*)reader.Read(NotificationsSchema.NotificationsTable.CreatedAtIndex' out int size))); " is 135.
Long Statement,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,UpdatePaging,The length of the statement  "            while (_pagingQueue.TryDequeue(out (PagingOperationType Type' string Action' string Details' int NumberOfResults' int PageSize' long Duration' DateTime Occurrence) tuple)) " is 171.
Long Statement,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,UpdatePaging,The length of the statement  "                        ((PagingPerformanceDetails)documents.Details).Update(tuple.Action' tuple.Details' tuple.NumberOfResults' tuple.PageSize' tuple.Duration' tuple.Occurrence); " is 155.
Long Statement,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,UpdatePaging,The length of the statement  "                        ((PagingPerformanceDetails)queries.Details).Update(tuple.Action' tuple.Details' tuple.NumberOfResults' tuple.PageSize' tuple.Duration' tuple.Occurrence); " is 153.
Long Statement,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,UpdatePaging,The length of the statement  "                        ((PagingPerformanceDetails)revisions.Details).Update(tuple.Action' tuple.Details' tuple.NumberOfResults' tuple.PageSize' tuple.Duration' tuple.Occurrence); " is 155.
Long Statement,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,GetPagingPerformanceHint,The length of the statement  "                if (ntv == null || ntv.Json.TryGet(nameof(PerformanceHint.Details)' out BlittableJsonReaderObject detailsJson) == false || detailsJson == null) " is 143.
Long Statement,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,GetPagingPerformanceHint,The length of the statement  "                    details = (PagingPerformanceDetails)EntityToBlittable.ConvertToEntity(typeof(PagingPerformanceDetails)' id' detailsJson' DocumentConventions.Default); " is 150.
Long Statement,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,GetPagingPerformanceHint,The length of the statement  "                        return PerformanceHint.Create(_database'$"Page size too big ({type.ToString().ToLower()})"' "We have detected that some of the requests are returning excessive amount of documents. Consider using smaller page sizes or streaming operations."' PerformanceHintType.Paging' NotificationSeverity.Warning' type.ToString()' details); " is 326.
Long Statement,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,GetPagingPerformanceHint,The length of the statement  "                        return PerformanceHint.Create(_database' "Page size too big (revisions)"' "We have detected that some of the requests are returning excessive amount of revisions. Consider using smaller page sizes."' PerformanceHintType.Paging' NotificationSeverity.Warning' type.ToString()' details); " is 284.
Long Statement,Raven.Server.NotificationCenter,RequestLatency,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\RequestLatency.cs,GetOrCreatePerformanceLatencies,The length of the statement  "                if (ntv == null || ntv.Json.TryGet(nameof(PerformanceHint.Details)' out BlittableJsonReaderObject detailsJson) == false || detailsJson == null) " is 143.
Long Statement,Raven.Server.NotificationCenter,RequestTimeTracker,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\RequestTimeTracker.cs,Dispose,The length of the statement  "                        $"Failed to write request time in response headers. This is not supposed to happen and is probably a bug. The request path was: {_context.Request.Path}"' " is 153.
Long Statement,Raven.Server.NotificationCenter.Notifications,ModifiedCollection,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\DatabaseStatsChanged.cs,Equals,The length of the statement  "                return string.Equals(Name' other.Name' StringComparison.OrdinalIgnoreCase) && Count == other.Count && LastDocumentChangeVector == other.LastDocumentChangeVector; " is 161.
Long Statement,Raven.Server.NotificationCenter.Notifications.Details,PagingPerformanceDetails,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\Details\PagingPerformanceDetails.cs,Update,The length of the statement  "            actionDetails.Enqueue(new ActionDetails { Duration = duration' Occurrence = occurrence' NumberOfResults = numberOfResults' PageSize = pageSize' Details = details }); " is 165.
Long Statement,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,Main,The length of the statement  "                        e.ToString().Contains("System.ObjectDisposedException")) // TODO : Remove this check in dotnet 2.0 - https://github.com/aspnet/KestrelHttpServer/issues/1231 " is 156.
Long Statement,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The length of the statement  "            Console.WriteLine("    working set     | native mem      | managed mem     | mmap size         | reqs/sec       | docs (all dbs)"); " is 131.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,Initialize,The length of the statement  "                        options.Limits.MinResponseDataRate = new MinDataRate(Configuration.Http.MinDataRatePerSecond.Value.GetValue(SizeUnit.Bytes)' Configuration.Http.MinDataRateGracePeriod.Value.AsTimeSpan); " is 185.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,Initialize,The length of the statement  "                        options.Limits.MinRequestBodyDataRate = new MinDataRate(Configuration.Http.MinDataRatePerSecond.Value.GetValue(SizeUnit.Bytes)' Configuration.Http.MinDataRateGracePeriod.Value.AsTimeSpan); " is 188.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,DoActualCertificateRefresh,The length of the statement  "                        Logger.Operations("Tried to load certificate as part of refresh check' but got a null back' but got a valid certificate on startup!"); " is 134.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,DoActualCertificateRefresh,The length of the statement  "                    // we want to setup all the renewals for Saturday so we'll have reduce the amount of cert renwals that are counted against our renewals " is 135.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,RefreshLetsEncryptCertificate,The length of the statement  "                throw new InvalidOperationException("Failed to validate user's license as part of Let's Encrypt certificate refresh"' e); " is 121.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,RefreshLetsEncryptCertificate,The length of the statement  "            if (userDomainsResult.Domains.Any(userDomain => string.Equals(userDomain.Key' domain' StringComparison.OrdinalIgnoreCase)) == false) " is 132.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,RefreshLetsEncryptCertificate,The length of the statement  "            return SecretProtection.ValidateCertificateAndCreateCertificateHolder("Let's Encrypt Refresh"' cert' Convert.FromBase64String(setupInfo.Certificate)' setupInfo.Password); " is 170.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,LoadCertificate,The length of the statement  "                    return ServerStore.Secrets.LoadCertificateFromPath(Configuration.Security.CertificatePath' Configuration.Security.CertificatePassword); " is 135.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,LoadCertificate,The length of the statement  "                    return ServerStore.Secrets.LoadCertificateWithExecutable(Configuration.Security.CertificateExec' Configuration.Security.CertificateExecArguments); " is 146.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,LoadCertificate,The length of the statement  "                throw new InvalidOperationException("Unable to start the server due to invalid certificate configuration! Admin assistance required."' e); " is 138.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The length of the statement  "                                        $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}"); " is 128.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The length of the statement  "                                        $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint} failed because:" + " is 144.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The length of the statement  "                            RespondToTcpConnection(stream' context' error' authSuccessful ? TcpConnectionStatus.Ok : TcpConnectionStatus.AuthorizationFailed); " is 130.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The length of the statement  "                                        $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}" + " is 128.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,MatchingOperationVersion,The length of the statement  "            error = $"Message of type {header.Operation} version should be {version} but got a message with version {header.OperationVersion}"; " is 131.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,SetCertificate,The length of the statement  "            var newCertHolder = SecretProtection.ValidateCertificateAndCreateCertificateHolder("Auto Update"' certificate' rawBytes' password); " is 131.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,DispatchServerWideTcpConnection,The length of the statement  "                    var maintenanceHeader = JsonDeserializationRachis<ClusterMaintenanceSupervisor.ClusterMaintenanceConnectionHeader>.Deserialize(headerJson); " is 139.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,DispatchServerWideTcpConnection,The length of the statement  "                        _clusterMaintenanceWorker = new ClusterMaintenanceWorker(tcp' ServerStore.ServerShutdown' ServerStore' maintenanceHeader.Term); " is 127.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,TryAuthorize,The length of the statement  "                    msg = "The provided client certificate " + certificate.FriendlyName + " is not yet valid because it starts on " + certificate.NotBefore; " is 136.
Long Statement,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,TryAuthorize,The length of the statement  "                            msg = header.Operation + " is a server wide operation and the certificate " + certificate.FriendlyName + "is not ClusterAdmin/Operator"; " is 136.
Long Statement,Raven.Server,RavenServerStartup,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServerStartup.cs,Configure,The length of the statement  "                    context => context.Request.Path.StartsWithSegments("/studio") == false && context.Request.Path.StartsWithSegments("/wizard") == false' " is 134.
Long Statement,Raven.Server,RavenServerStartup,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServerStartup.cs,RequestHandler,The length of the statement  "                    _logger.Info($"{context.Request.Method} {context.Request.Path.Value}?{context.Request.QueryString.Value} - {context.Response.StatusCode} - {sp.ElapsedMilliseconds:#'#;;0} ms"); " is 176.
Long Statement,Raven.Server.Rachis,Candidate,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Candidate.cs,Run,The length of the statement  "                                _engine.Log.Info($"Candidate {_engine.Tag}: A leader node has indicated that I'm not in their topology' I was probably kicked out. Moving to passive mode"); " is 156.
Long Statement,Raven.Server.Rachis,Candidate,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Candidate.cs,CastVoteForSelf,The length of the statement  "                _engine.Log.Info($"Candidate {_engine.Tag}: casting vote for self ElectionTerm={ElectionTerm} RunRealElectionAtTerm={RunRealElectionAtTerm}"); " is 142.
Long Statement,Raven.Server.Rachis,Candidate,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Candidate.cs,StateChange,The length of the statement  "            var tcs = Interlocked.Exchange(ref _stateChange' new TaskCompletionSource<object>(TaskCreationOptions.RunContinuationsAsynchronously)); " is 135.
Long Statement,Raven.Server.Rachis,CandidateAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\CandidateAmbassador.cs,Run,The length of the statement  "                                        var message = $"Candidate ambassador {_engine.Tag}: found election term {rvr.Term} that is higher than ours {currentElectionTerm}"; " is 131.
Long Statement,Raven.Server.Rachis,CandidateAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\CandidateAmbassador.cs,Run,The length of the statement  "                                    var message = $"Candidate ambassador {_engine.Tag}: found election term {rvr.Term} that is higher than ours {currentElectionTerm}"; " is 131.
Long Statement,Raven.Server.Rachis,CandidateAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\CandidateAmbassador.cs,SendElectionResult,The length of the statement  "                    _engine.Log.Info($"CandidateAmbassador {_engine.Tag}: Send election result message to {_tag} : {_candidate.ElectionResult}"); " is 125.
Long Statement,Raven.Server.Rachis,Elector,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Elector.cs,HandleVoteRequest,The length of the statement  "                                Message = $"My last log entry is of term {lastTerm} / {lastIndex} while yours is {rv.LastLogTerm}' so I'm more up to date" " is 122.
Long Statement,Raven.Server.Rachis,Elector,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Elector.cs,HandleVoteRequest,The length of the statement  "                                    $"My last log entry is of term {lastTerm} / {lastIndex} while yours is {rv.LastLogTerm} / {rv.LastLogIndex}' so I'm more up to date" " is 132.
Long Statement,Raven.Server.Rachis,Elector,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Elector.cs,HandleVoteRequest,The length of the statement  "                            if (_engine.Timeout.ExpiredLastDeferral(_engine.ElectionTimeout.TotalMilliseconds / 2' out string currentLeader) == false) " is 122.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,FollowerSteadyState,The length of the statement  "                            _engine.Log.Info($"Follower {_engine.Tag}: Got invalid term {appendEntries.Term} while the current term is {_engine.CurrentTerm}' aborting connection..."); " is 155.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,FollowerSteadyState,The length of the statement  "                            _engine.Log.Info($"Follower {_engine.Tag}: Got non empty append entries request with {entries.Count} entries. Last: ({entries[entries.Count - 1].Index} - {entries[entries.Count - 1].Flags})" " is 190.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,CheckIfValidLeader,The length of the statement  "                    var msg = $"The incoming term {logLength.Term} is smaller than current term {_engine.CurrentTerm} and is therefor rejected"; " is 124.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateWithLeader,The length of the statement  "                _engine.Log.Info($"Follower {_engine.Tag}: Got a negotiation request for term {negotiation.Term} where our term is {_engine.CurrentTerm}"); " is 139.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateWithLeader,The length of the statement  "                    _engine.Log.Info($"Follower {_engine.Tag}: Got a negotiation request with PrevLogTerm={negotiation.PrevLogTerm} while our PrevLogTerm={prevTerm}" + " is 147.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateWithLeader,The length of the statement  "                    _engine.Log.Info($"Follower {_engine.Tag}: Got a negotiation request with identical PrevLogTerm will continue to steady state"); " is 128.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateWithLeader,The length of the statement  "                            $"Follower {_engine.Tag}: Got installed snapshot with last index={snapshot.LastIncludedIndex} while our lastCommitIndex={lastCommitIndex}' will just ignore it"); " is 161.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateWithLeader,The length of the statement  "                            $"Follower {_engine.Tag}: Installed snapshot with last index={snapshot.LastIncludedIndex} with LastIncludedTerm={snapshot.LastIncludedTerm} "); " is 143.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateWithLeader,The length of the statement  "                            $"The snapshot installation had failed because the last included index {snapshot.LastIncludedIndex} in term {snapshot.LastIncludedTerm} doesn't match the last entry {lastEntryIndex}"; " is 183.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateMatchEntryWithLeaderAndApplyEntries,The length of the statement  "                        $"Term/Index mismatch from leader' need to figure out at what point the logs match' range: {maxIndex} - {minIndex} | {midpointIndex} in term {midpointTerm}"' " is 157.
Long Statement,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateMatchEntryWithLeaderAndApplyEntries,The length of the statement  "                _engine.Log.Info($"Follower {_engine.Tag}: agreed upon last matched index = {midpointIndex} on term = {_engine.CurrentTerm}"); " is 126.
Long Statement,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,ThrowInvalidTermChanged,The length of the statement  "            throw new ConcurrencyException("The current engine term has changed (" + aer.CurrentTerm + " -> " + _engine.CurrentTerm + ")' this " + " is 134.
Long Statement,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,InitialNegotiationWithFollower,The length of the statement  "                    _engine.Log.Info($"Got 1st LogLengthNegotiationResponse from {_tag} with term {llr.CurrentTerm} ({llr.MidpointIndex} / {llr.MidpointTerm}) {llr.Status}"); " is 154.
Long Statement,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,InitialNegotiationWithFollower,The length of the statement  "                        var msg = $"Follower ambassador {_engine.Tag}: found election term {llr.CurrentTerm} that is higher than ours {engineCurrentTerm}"; " is 131.
Long Statement,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,InitialNegotiationWithFollower,The length of the statement  "                            _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: {_tag} agreed on term={llr.CurrentTerm} index={llr.LastLogIndex}"); " is 120.
Long Statement,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,InitialNegotiationWithFollower,The length of the statement  "                            _engine.Log.Info($"Sending LogLengthNegotiation to {_tag} with term {lln.Term} ({lln.PrevLogIndex} / {lln.PrevLogTerm}) - Trnuncated {lln.Truncated}"); " is 151.
Long Statement,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,InitialNegotiationWithFollower,The length of the statement  "                        _engine.Log.Info($"Got LogLengthNegotiationResponse from {_tag} with term {llr.CurrentTerm} ({llr.MidpointIndex} / {llr.MidpointTerm}) {llr.Status}"); " is 150.
Long Statement,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,Dispose,The length of the statement  "                        _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Waited 60 seconds for disposing node {_tag}' continue the thread anyway."); " is 128.
Long Statement,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,StepDown,The length of the statement  "            var nextLeader = _voters.Values.OrderByDescending(x => x.FollowerMatchIndex).ThenByDescending(x => x.LastReplyFromFollower).First(); " is 132.
Long Statement,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,StepDown,The length of the statement  "            var old = Interlocked.Exchange(ref _newEntriesArrived' new TaskCompletionSource<object>(TaskCreationOptions.RunContinuationsAsynchronously)); " is 141.
Long Statement,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,VoteOfNoConfidence,The length of the statement  "                sb.Append($"\t{timeoutsForVoter.voter.Tag} - {Math.Round(timeoutsForVoter.time.TotalMilliseconds' 3)} ms").AppendLine(); " is 120.
Long Statement,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,VoteOfNoConfidence,The length of the statement  "                    $"{followerAmbassador.Tag}: Got last reply {sinceLastReply:#'#;;0} ms ago and sent {sinceLastSend:#'#;;0} ms ({lastMsg}) - {followerAmbassador.StatusMessage} - {followerAmbassador.ThreadStatus}"); " is 196.
Long Statement,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,VoteOfNoConfidence,The length of the statement  "                "Too long has passed since we got a confirmation from the majority of the cluster that this node is still the leader." + " is 120.
Long Statement,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,AddToEntries,The length of the statement  "                    CommandState // we need to add entry inside write tx lock to omit a situation when command will be applied (and state set) before it is added to the entries list " is 161.
Long Statement,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,TryModifyTopology,The length of the statement  "                if (validateNotInTopology && (nodeTag != null && clusterTopology.Contains(nodeTag) || clusterTopology.TryGetNodeTagByUrl(nodeUrl).HasUrl)) " is 138.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,SwitchToSingleLeader,The length of the statement  "            SetNewStateInTx(context' RachisState.LeaderElect' leader' electionTerm' "I'm the only one in the cluster' so I'm the leader" ' () => _currentLeader = leader); " is 158.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AcceptNewConnection,The length of the statement  "                            $"{initialMessage.DebugSourceIdentifier} attempted to connect to us with topology id {initialMessage.TopologyId} but our topology id is already set ({clusterTopology.TopologyId}). " + " is 183.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AcceptNewConnection,The length of the statement  "                                $"{initialMessage.DebugSourceIdentifier} attempted to connect to us with tag {initialMessage.DebugDestinationIdentifier} but our tag is already set ({_tag}). " + " is 161.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AcceptNewConnection,The length of the statement  "                                "Rejecting connection from confused server' this is likely an old server trying to connect to us' or bad network configuration."); " is 130.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AppendToLog,The length of the statement  "                //While we do support the case where we get the same entries' we expect them to have the same index/term up to the commit index. " is 128.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,SetLastCommitIndex,The length of the statement  "                            $"Cannot change just the last commit index (is {oldIndex} term' was {oldTerm} but was requested to change it to {term})"); " is 122.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,SetLastCommitIndex,The length of the statement  "            context.Transaction.InnerTransaction.LowLevelTransaction.OnDispose += _ => TaskExecutor.CompleteAndReplace(ref _commitIndexChanged); " is 132.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,CastVoteInTerm,The length of the statement  "                throw new ConcurrencyException($"The current term {CurrentTerm} is larger than {term}' aborting change " + Environment.StackTrace); " is 131.
Long Statement,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AddToClusterAsync,The length of the statement  "            return ModifyTopologyAsync(nodeTag' url' asWatcher ? Leader.TopologyModification.NonVoter : Leader.TopologyModification.Promotable' validateNotInTopology); " is 155.
Long Statement,Raven.Server.Rachis,RemoteConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RemoteConnection.cs,Read,The length of the statement  "                    _log.Info($"Failed to read from connection. If this error happens during state change of a node' it is expected. (source : [{_src}] -> destination : [{_destTag}])"'e); " is 167.
Long Statement,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,TryAuthorize,The length of the statement  "                            if (route.AuthorizationStatus == AuthorizationStatus.Operator || route.AuthorizationStatus == AuthorizationStatus.ClusterAdmin) " is 127.
Long Statement,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,UnlikelyFailAuthorization,The length of the statement  "            if (feature == null || feature.Status == RavenServer.AuthenticationStatus.None || feature.Status == RavenServer.AuthenticationStatus.NoCertificateProvided) " is 155.
Long Statement,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,UnlikelyFailAuthorization,The length of the statement  "                    message = "Supplied client certificate '" + name + "' is unknown to the server. In order to register your certificate please contact your system administrator."; " is 161.
Long Statement,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,UnlikelyFailAuthorization,The length of the statement  "                    message = "Could not authorize access to " + (database ?? "the server") + " using provided client certificate '" + name + "'."; " is 127.
Long Statement,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,UnlikelyFailAuthorization,The length of the statement  "                    message = "Insufficient security clearance to access " + (database ?? "the server") + " using provided client certificate '" + name + "'."; " is 139.
Long Statement,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,UnlikelyFailAuthorization,The length of the statement  "                    message = "Supplied client certificate '" + name + "' has expired on " + feature.Certificate.NotAfter.ToString("D") + ". Please contact your system administrator in order to obtain a new one."; " is 193.
Long Statement,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,UnlikelyFailAuthorization,The length of the statement  "                    message = "Supplied client certificate '" + name + "'cannot be used before " + feature.Certificate.NotBefore.ToString("D"); " is 123.
Long Statement,Raven.Server.Routing,RouteInformation,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RouteInformation.cs,ThrowDatabaseUnloadTimeout,The length of the statement  "            throw new DatabaseLoadTimeoutException($"Timeout when unloading database {databaseName} after {timeout}' try again later"); " is 123.
Long Statement,Raven.Server.Routing,RouteInformation,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RouteInformation.cs,ThrowDatabaseLoadTimeout,The length of the statement  "            throw new DatabaseLoadTimeoutException($"Timeout when loading database {databaseName} after {timeout}' try again later"); " is 121.
Long Statement,Raven.Server.Routing,RouteInformation,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RouteInformation.cs,ThrowDatabaseLoadTimeoutWithLog,The length of the statement  "            throw new DatabaseLoadTimeoutException($"Database {databaseName} after {timeout} is still loading' try again later. Database initialization log: " + Environment.NewLine + log); " is 176.
Long Statement,Raven.Server.Routing,RouteScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RouteScanner.cs,Scan,The length of the statement  "                        throw new InvalidOperationException($"A duplicate route found: {routeKey} on {memberInfo.DeclaringType}.{memberInfo.Name}"); " is 124.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Apply,The length of the statement  "                        if (cmd.TryGet(nameof(AddOrUpdateCompareExchangeBatchCommand.Commands)' out BlittableJsonReaderArray commands) == false) " is 120.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Apply,The length of the statement  "                            throw new InvalidDataException($"'{nameof(AddOrUpdateCompareExchangeBatchCommand.Commands)}' is missing in '{nameof(AddOrUpdateCompareExchangeBatchCommand)}'."); " is 161.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Apply,The length of the statement  "                        if (ValidatePropertyExistence(cmd' nameof(IncrementClusterIdentityCommand)' nameof(IncrementClusterIdentityCommand.Prefix)' out errorMessage) == false) " is 151.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Apply,The length of the statement  "                        if (ValidatePropertyExistence(cmd' nameof(IncrementClusterIdentitiesBatchCommand)' nameof(IncrementClusterIdentitiesBatchCommand.DatabaseName)' out errorMessage) == false) " is 171.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Apply,The length of the statement  "                        if (ValidatePropertyExistence(cmd' nameof(UpdateClusterIdentityCommand)' nameof(UpdateClusterIdentityCommand.Identities)' out errorMessage) == false) " is 149.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,InstallUpdatedServerCertificate,The length of the statement  "            if (cmd.TryGet(nameof(InstallUpdatedServerCertificateCommand.Certificate)' out string cert) == false || string.IsNullOrEmpty(cert)) " is 131.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,InstallUpdatedServerCertificate,The length of the statement  "            // we assume that this is valid' and we don't check dates' since that would introduce external factor to the state machine' which is not alllowed " is 145.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,ValidatePropertyExistence,The length of the statement  "                errorMessage = $"Expected to find {propertyTypeName}.{propertyName} property in the Raft command but didn't find it..."; " is 120.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,SetValueForTypedDatabaseCommand,The length of the statement  "                        new CommandExecutionException($"Cannot set typed value of type {type} for database {updateCommand.DatabaseName}' because it does not exist")); " is 142.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,AddDatabase,The length of the statement  "                using (var databaseRecordAsJson = EntityToBlittable.ConvertEntityToBlittable(addDatabaseCommand.Record' DocumentConventions.Default' context)) " is 142.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,AddDatabase,The length of the statement  "                        if (items.ReadByKey(valueNameLowered' out TableValueReader reader) == false && addDatabaseCommand.RaftCommandIndex != 0) " is 120.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,AddDatabase,The length of the statement  "                                new ConcurrencyException("Concurrency violation' the database " + addDatabaseCommand.Name + " does not exists' but had a non zero etag")); " is 138.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,DeleteValue,The length of the statement  "                        new InvalidOperationException("Cannot delete " + delCmd.Name + " using DeleteValueCommand' only via dedicated database calls")); " is 128.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,DeleteMultipleValues,The length of the statement  "                        new InvalidOperationException("Cannot delete " + delCmd.Names + " using DeleteMultipleValuesCommand' only via dedicated database calls")); " is 138.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,UpdateValue,The length of the statement  "                        new InvalidOperationException("Cannot set " + command.Name + " using PutValueCommand' only via dedicated database calls")); " is 123.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,PutValue,The length of the statement  "                        new InvalidOperationException("Cannot set " + command.Name + " using PutValueCommand' only via dedicated database calls")); " is 123.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,EnsureNodeRemovalOnDeletion,The length of the statement  "            var index = _parent.InsertToLeaderLog(context' context.ReadObject(djv' "remove")' RachisEntryFlags.StateMachineCommand); " is 120.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,UpdateDatabase,The length of the statement  "                                    $"Concurrency violation at executing {type} command' the database {databaseRecord.DatabaseName} has etag {etag} but was expecting {updateCommand.RaftCommandIndex}")); " is 166.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,UpdateDatabase,The length of the statement  "                        NotifyLeaderAboutError(index' leader' new CommandExecutionException($"Cannot execute command of type {type} for database {databaseName}"' e)); " is 142.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,UpdateDatabase,The length of the statement  "                    var updatedDatabaseBlittable = EntityToBlittable.ConvertEntityToBlittable(databaseRecord' DocumentConventions.Default' context); " is 128.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,ConnectToPeer,The length of the statement  "                throw new InvalidOperationException($"Failed to connect to node {url}. Connections from encrypted store must use HTTPS."); " is 122.
Long Statement,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,OnSnapshotInstalled,The length of the statement  "                var clusterCertificateKeys = serverStore.Cluster.ItemKeysStartingWith(context' Constants.Certificates.Prefix' 0' int.MaxValue); " is 127.
Long Statement,Raven.Server.ServerWide,LocalEndpointClient,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\LocalEndpointClient.cs,ThrowInvalidDatabasesParameter,The length of the statement  "            throw new ArgumentException($"Invalid \'{paramName}\' parameter' expected it to have exactly one value' but got {databaseName.Count}. Something is really wrong here."); " is 168.
Long Statement,Raven.Server.ServerWide,LocalEndpointClient,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\LocalEndpointClient.cs,ThrowHttpRequestException,The length of the statement  "            throw new HttpRequestException($"A call to endpoint <<{route.Method} {route.Path}>> has failed with status code {statusCode}"); " is 127.
Long Statement,Raven.Server.ServerWide,LocalEndpointClient,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\LocalEndpointClient.cs,InvokeAndReadObjectAsync,The length of the statement  "                throw new InvalidOperationException("Expected to find a blittable object as a result of debug endpoint' but found something else (see inner exception for details). This should be investigated as all RavenDB endpoints are supposed to return an object."' e); " is 256.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKey,The length of the statement  "                                throw new FileLoadException($"Failed to read the full key size from {filepath}' expected to read {KeySize} but go only {amountRead}"); " is 134.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKey,The length of the statement  "                    $"Unable to open the master secret key ({debug})' won't proceed because losing this key will lose access to all user encrypted information. Admin assistance required."' " is 168.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,Protect,The length of the statement  "                throw new InvalidOperationException($"The provided entropy is too small. Should be at least 8 bytes but was {entropy.Length} bytes"); " is 133.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,Unprotect,The length of the statement  "                throw new InvalidOperationException($"The provided entropy is too small. Should be at least 8 bytes but was {entropy.Length} bytes"); " is 133.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadCertificateWithExecutable,The length of the statement  "                throw new InvalidOperationException($"Unable to get certificate by executing {executable} {args}. Failed to start process."' e); " is 128.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadCertificateWithExecutable,The length of the statement  "                throw new InvalidOperationException($"Unable to get certificate by executing {executable} {args}' waited for {_config.CertificateExecTimeout} ms but the process didn't exit. Stderr: {GetStdError()}"); " is 200.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadCertificateWithExecutable,The length of the statement  "                    $"Unable to get certificate by executing {executable} {args}' waited for {_config.CertificateExecTimeout} ms but the process didn't exit. Stderr: {GetStdError()}"' " is 163.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadCertificateWithExecutable,The length of the statement  "                    Logger.Operations(string.Format($"Executing {executable} {args} finished with exit code: {process.ExitCode}. Errors: {errors}")); " is 129.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadCertificateWithExecutable,The length of the statement  "                    $"Unable to get certificate by executing {executable} {args}' the exit code was {process.ExitCode}. Stderr: {GetStdError()}"); " is 126.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The length of the statement  "                throw new InvalidOperationException($"Unable to get master key by executing {_config.MasterKeyExec} {_config.MasterKeyExecArguments}. Failed to start process."' e); " is 164.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The length of the statement  "                throw new InvalidOperationException($"Unable to get master key by executing {_config.MasterKeyExec} {_config.MasterKeyExecArguments}' waited for {_config.MasterKeyExecTimeout} ms but the process didn't exit. Stderr: {GetStdError()}"); " is 234.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The length of the statement  "                throw new InvalidOperationException($"Unable to get master key by executing {_config.MasterKeyExec} {_config.MasterKeyExecArguments}' waited for {_config.MasterKeyExecTimeout} ms but the process didn't exit. Stderr: {GetStdError()}"' e); " is 237.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The length of the statement  "                Logger.Operations(string.Format($"Executing {_config.MasterKeyExec} {_config.MasterKeyExecArguments} took {sw.ElapsedMilliseconds:#'#;;0} ms. Stderr: {errors}")); " is 162.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The length of the statement  "                    $"Unable to get master key by executing {_config.MasterKeyExec} {_config.MasterKeyExecArguments}' the exit code was {process.ExitCode}. Stderr: {GetStdError()}"); " is 162.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The length of the statement  "                    $"Got wrong master key after executing {_config.MasterKeyExec} {_config.MasterKeyExecArguments}' the size of the key must be {keySize} bits' but was {rawData.Length * 8} bits."); " is 178.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyFromPath,The length of the statement  "                    $"Unable to open the master secret key at {_config.MasterKeyPath}' won't proceed because losing this key will lose access to all user encrypted information. Admin assistance required."' " is 185.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,ValidateExpiration,The length of the statement  "                throw new EncryptionException($"The provided certificate {loadedCertificate.FriendlyName} from {source} is expired! " + loadedCertificate); " is 139.
Long Statement,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,ValidateKeyUsages,The length of the statement  "                                              " must be defined with the following 'Enhanced Key Usages': Client Authentication (Oid 1.3.6.1.5.5.7.3.2) & Server Authentication (Oid 1.3.6.1.5.5.7.3.1)"); " is 156.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,AddNodeToClusterAsync,The length of the statement  "            await _engine.AddToClusterAsync(nodeUrl' nodeTag' validateNotInTopology' asWatcher).WithCancellation(_shutdownNotification.Token); " is 130.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The length of the statement  "                Logger.Info("Starting to open server store for " + (Configuration.Core.RunInMemory ? "<memory>" : Configuration.Core.DataDirectory.FullPath)); " is 142.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The length of the statement  "                        throw new FileLoadException($"The server store secret key is provided in {secretKey} but the server failed to read the file. Admin assistance required."' e); " is 157.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The length of the statement  "                // the above should not throw' but we mask it in case it does (as it reads IO parameters) - this alert is just a nice-to-have warning " is 133.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The length of the statement  "                    throw new ServerLoadFailureException("Failed to load system storage " + Environment.NewLine + $"At {options.BasePath}"' e); " is 123.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The length of the statement  "                        "Could not open server store for " + (Configuration.Core.RunInMemory ? "<memory>" : Configuration.Core.DataDirectory.FullPath)' e); " is 131.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The length of the statement  "            var myUrl = Configuration.Core.PublicServerUrl.HasValue ? Configuration.Core.PublicServerUrl.Value.UriValue : Configuration.Core.ServerUrls[0]; " is 143.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,OnValueChanged,The length of the statement  "                            throw new InvalidOperationException("Invalid server cert value' expected to get Certificate and Thumbprint properties"); " is 120.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,OnValueChanged,The length of the statement  "                            Logger.Operations($"Replacing the certificate used by the server to: {newClusterCertificate.FriendlyName} - {newClusterCertificate.Thumbprint}"); " is 145.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The length of the statement  "                throw new InvalidOperationException($"Attempt to overwrite secret key {name}' which isn\'t permitted (you\'ll lose access to the encrypted db)."); " is 146.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The length of the statement  "                throw new InvalidOperationException($"Cannot modify key {name} where there is an existing database that is not encrypted"); " is 123.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,GetSecretKey,The length of the statement  "                    if (Sodium.crypto_generichash(pHash' (UIntPtr)hashLen' pData + hashLen' (ulong)(data.Length - hashLen)' null' UIntPtr.Zero) != 0) " is 129.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,UpdateExternalReplication,The length of the statement  "            if (blittableJson.TryGet(nameof(UpdateExternalReplicationCommand.Watcher)' out BlittableJsonReaderObject watcherBlittable) == false) " is 132.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,ModifyDatabaseExpiration,The length of the statement  "            var editExpiration = new EditExpirationCommand(JsonDeserializationCluster.ExpirationConfiguration(configurationJson)' name); " is 124.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,ModifyPeriodicBackup,The length of the statement  "            var modifyPeriodicBackup = new UpdatePeriodicBackupCommand(JsonDeserializationCluster.PeriodicBackupConfiguration(configurationJson)' name); " is 140.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,UpdateEtl,The length of the statement  "                    command = new UpdateRavenEtlCommand(id' JsonDeserializationCluster.RavenEtlConfiguration(etlConfiguration)' databaseName); " is 122.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,ModifyDatabaseRevisions,The length of the statement  "            var editRevisions = new EditRevisionsConfigurationCommand(JsonDeserializationCluster.RevisionsConfiguration(configurationJson)' name); " is 134.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutConnectionString,The length of the statement  "                    command = new PutRavenConnectionString(JsonDeserializationCluster.RavenConnectionString(connectionString)' databaseName); " is 121.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,RemoveConnectionString,The length of the statement  "                            throw new InvalidOperationException($"Can't delete connection string: {connectionStringName}. It is used by task: {ravenETlTask.Name}"); " is 136.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,RemoveConnectionString,The length of the statement  "                            throw new InvalidOperationException($"Can't delete connection string: {connectionStringName}. It is used by task: {replicationTask.Name}"); " is 139.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,RemoveConnectionString,The length of the statement  "                            throw new InvalidOperationException($"Can't delete connection string: {connectionStringName}. It is used by task: {sqlETlTask.Name}"); " is 134.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,RegisterServerCertificateInCluster,The length of the statement  "            return PutValueInClusterAsync(new PutCertificateCommand(Constants.Certificates.Prefix + myCertificate.Thumbprint' myCertificate)); " is 130.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,GenerateClusterIdentityAsync,The length of the statement  "                    $"Expected to get result from raft command that should generate a cluster-wide identity' but didn't. Leader is {LeaderTag}' Current node tag is {NodeTag}."); " is 157.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,UpdateClusterIdentityAsync,The length of the statement  "                    $"Expected to get result from raft command that should update a cluster-wide identity' but didn't. Leader is {LeaderTag}' Current node tag is {NodeTag}."); " is 155.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,UpdateClusterIdentityAsync,The length of the statement  "                                 $"Expected to get result from raft command that should update a cluster-wide identity' but got invalid result structure for {id}. Leader is {LeaderTag}' Current node tag is {NodeTag}."); " is 186.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,UpdateClusterIdentityAsync,The length of the statement  "            if (newIdentitiesResult.TryGetValue(UpdateValueForDatabaseCommand.GetStorageKey(databaseName' id)' out long newIdentityValue) == false) " is 135.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,UpdateClusterIdentityAsync,The length of the statement  "                    $"Expected to get result from raft command that should update a cluster-wide identity' but {id} was not in the result list. Leader is {LeaderTag}' Current node tag is {NodeTag}."); " is 180.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,UpdateClusterIdentityAsync,The length of the statement  "                    $"Expected to get result from raft command that should update a cluster-wide identity' but {id} was set but not able to be read. shouldn't reach here. Leader is {LeaderTag}' Current node tag is {NodeTag}."); " is 207.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,GenerateClusterIdentitiesBatchAsync,The length of the statement  "                    $"Expected to get result from raft command that should generate a cluster-wide batch identity' but didn't. Leader is {LeaderTag}' Current node tag is {NodeTag}."); " is 163.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,ThrowInvalidEngineState,The length of the statement  "            throw new NotSupportedException("Cannot send command " + cmd.GetType().FullName + " to the cluster because this node is passive." + Environment.NewLine + " is 153.
Long Statement,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,ThrowTimeoutException,The length of the statement  "            throw new TimeoutException($"Could not send command {cmd.GetType().FullName} from {NodeTag} to leader because there is no leader' " + " is 133.
Long Statement,Raven.Server.ServerWide,TempCryptoStream,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\TempCryptoStream.cs,Write,The length of the statement  "                // Write to the internal buffer. Only when it is full' encrypt the entire buffer (or "block") and write it to the inner stream " is 126.
Long Statement,Raven.Server.ServerWide,TempCryptoStream,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\TempCryptoStream.cs,EncryptToStream,The length of the statement  "                var rc = Sodium.crypto_stream_xchacha20_xor_ic(pInternalBuffer' pInternalBuffer' (ulong)_bufferValidIndex' n' (ulong)_blockNumber' k); " is 134.
Long Statement,Raven.Server.ServerWide,TempCryptoStream,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\TempCryptoStream.cs,EncryptToStream,The length of the statement  "                    throw new InvalidOperationException($"crypto_stream_xchacha20_xor failed in EncryptToStream(). rc={rc}' _bufferIndex={_bufferIndex}' _blockNumber={_blockNumber}"); " is 163.
Long Statement,Raven.Server.ServerWide,TempCryptoStream,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\TempCryptoStream.cs,Read,The length of the statement  "                    var rc = Sodium.crypto_stream_xchacha20_xor_ic(pInternalBuffer' pInternalBuffer' (ulong)_bufferValidIndex' n' (ulong)_blockNumber' k); " is 134.
Long Statement,Raven.Server.ServerWide,TempCryptoStream,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\TempCryptoStream.cs,Read,The length of the statement  "                        throw new InvalidOperationException($"crypto_stream_xchacha20_xor failed during Read(). rc={rc}' _bufferValidIndex={_bufferValidIndex}' _blockNumber={_blockNumber}"); " is 166.
Long Statement,Raven.Server.ServerWide,TempCryptoStream,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\TempCryptoStream.cs,Seek,The length of the statement  "                var rc = Sodium.crypto_stream_xchacha20_xor_ic(pInternalBuffer' pInternalBuffer' (ulong)_bufferValidIndex' n' (ulong)blockNumber' k); " is 133.
Long Statement,Raven.Server.ServerWide,TempCryptoStream,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\TempCryptoStream.cs,Seek,The length of the statement  "                    throw new InvalidOperationException($"crypto_stream_xchacha20_xor failed during Seek(). rc={rc}' _bufferValidIndex={_bufferValidIndex}' blockNumber={blockNumber}"); " is 164.
Long Statement,Raven.Server.ServerWide.Commands,AddDatabaseCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\AddDatabaseCommand.cs,ToJson,The length of the statement  "                [nameof(DatabaseValues)] = EntityToBlittable.ConvertEntityToBlittable(DatabaseValues' DocumentConventions.Default' context)' " is 124.
Long Statement,Raven.Server.ServerWide.Commands,CommandBase,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\CommandBase.cs,CreateFrom,The length of the statement  "            if (JsonDeserializationCluster.Commands.TryGetValue(type' out Func<BlittableJsonReaderObject' CommandBase> deserializer) == false) " is 130.
Long Statement,Raven.Server.ServerWide.Commands,CommandBase,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\CommandBase.cs,AssertClusterAdmin,The length of the statement  "            throw new UnauthorizedAccessException("Attempted to " + GetType().Name + " but this is only available for cluster administrators"); " is 131.
Long Statement,Raven.Server.ServerWide.Commands,AddOrUpdateCompareExchangeCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\CompareExchangeCommands.cs,Execute,The length of the statement  "                        return (itemIndex' new BlittableJsonReaderObject(reader.Read((int)ClusterStateMachine.UniqueItems.Value' out var size)' size' context)); " is 136.
Long Statement,Raven.Server.ServerWide.Commands,DeleteCertificateCollectionFromClusterCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\DeleteCertificateCollectionFromClusterCommand.cs,VerifyCanExecuteCommand,The length of the statement  "                    if (definition.SecurityClearance != SecurityClearance.ClusterAdmin || definition.SecurityClearance != SecurityClearance.ClusterNode) " is 132.
Long Statement,Raven.Server.ServerWide.Commands,DeleteCertificateFromClusterCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\DeleteCertificateFromClusterCommand.cs,VerifyCanExecuteCommand,The length of the statement  "                if (definition.SecurityClearance != SecurityClearance.ClusterAdmin || definition.SecurityClearance != SecurityClearance.ClusterNode) " is 132.
Long Statement,Raven.Server.ServerWide.Commands,DeleteDatabaseCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\DeleteDatabaseCommand.cs,UpdateDatabaseRecord,The length of the statement  "                        DatabaseDoesNotExistException.ThrowWithMessage(record.DatabaseName' $"Request to delete database from node '{node}' failed."); " is 126.
Long Statement,Raven.Server.ServerWide.Commands,DeleteMultipleValuesCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\DeleteMultipleValuesCommand.cs,VerifyCanExecuteCommand,The length of the statement  "                throw new InvalidOperationException("Attempted to use DeleteMultipleValuesCommand to delete certificates or licenses' use dedicated commands for this."); " is 153.
Long Statement,Raven.Server.ServerWide.Commands,DeleteValueCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\DeleteValueCommand.cs,VerifyCanExecuteCommand,The length of the statement  "                throw new InvalidOperationException("Attempted to use DeleteValueCommand to delete a certificate or license' use dedicated commands for this."); " is 144.
Long Statement,Raven.Server.ServerWide.Commands,IncrementClusterIdentitiesBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\IncrementClusterIdentitiesBatchCommand.cs,Execute,The length of the statement  "                    // The 'client' of this task sent amount of each id' and therefor the created identities are first identity to first + amount " is 125.
Long Statement,Raven.Server.ServerWide.Commands,IncrementClusterIdentitiesBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\IncrementClusterIdentitiesBatchCommand.cs,FromRemote,The length of the statement  "                // this is an error as we expect BlittableJsonReaderArray' but we will pass the object value to get later appropriate exception " is 127.
Long Statement,Raven.Server.ServerWide.Commands,PutCertificateCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\PutCertificateCommand.cs,VerifyCanExecuteCommand,The length of the statement  "            if (Value.SecurityClearance == SecurityClearance.ClusterAdmin || Value.SecurityClearance != SecurityClearance.ClusterNode) " is 122.
Long Statement,Raven.Server.ServerWide.Commands,PutValueCommand<T>,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\PutValueCommand.cs,VerifyCanExecuteCommand,The length of the statement  "                throw new InvalidOperationException("Attempted to use PutValueCommand to delete a certificate or license' use dedicated commands for this."); " is 141.
Long Statement,Raven.Server.ServerWide.Commands.Indexes,PutAutoIndexCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Indexes\PutAutoIndexCommand.cs,GetAutoIndexDefinition,The length of the statement  "                GroupByFields = indexType == IndexType.AutoMap ? null : CreateFields(((AutoMapReduceIndexDefinition)definition).GroupByFields)' " is 127.
Long Statement,Raven.Server.ServerWide.Commands.Subscriptions,AcknowledgeSubscriptionBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\AcknowledgeSubscriptionBatchCommand.cs,GetUpdatedValue,The length of the statement  "                throw new SubscriptionDoesNotBelongToNodeException($"Can't update subscription with name {subscriptionName} by node {NodeTag}' because it's not it's task to update this subscription"); " is 184.
Long Statement,Raven.Server.ServerWide.Commands.Subscriptions,AcknowledgeSubscriptionBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\AcknowledgeSubscriptionBatchCommand.cs,GetUpdatedValue,The length of the statement  "                throw new SubscriptionChangeVectorUpdateConcurrencyException($"Can't acknowledge subscription with name {subscriptionName} due to inconsistency in change vector progress. Probably there was an admin intervention that changed the change vector value"); " is 251.
Long Statement,Raven.Server.ServerWide.Commands.Subscriptions,PutSubscriptionCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\PutSubscriptionCommand.cs,Execute,The length of the statement  "                    if (string.IsNullOrEmpty(InitialChangeVector) == false && InitialChangeVector == nameof(Constants.Documents.SubscriptionChangeVectorSpecialStates.DoNotChange)) " is 159.
Long Statement,Raven.Server.ServerWide.Commands.Subscriptions,UpdateSubscriptionClientConnectionTime,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\UpdateSubscriptionClientConnectionTime.cs,GetUpdatedValue,The length of the statement  "                throw new InvalidOperationException($"Can't update subscription with name {itemId} by node {NodeTag}' because it's not it's task to update this subscription"); " is 159.
Long Statement,Raven.Server.ServerWide.Context,DocumentsOperationContext,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsOperationContext.cs,CreateReadTransaction,The length of the statement  "            return new DocumentsTransaction(this' _documentDatabase.DocumentsStorage.Environment.ReadTransaction(PersistentContext' Allocator)' _documentDatabase.Changes); " is 159.
Long Statement,Raven.Server.ServerWide.Context,DocumentsOperationContext,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsOperationContext.cs,CreateWriteTransaction,The length of the statement  "            var tx = new DocumentsTransaction(this' _documentDatabase.DocumentsStorage.Environment.WriteTransaction(PersistentContext' Allocator)' _documentDatabase.Changes); " is 162.
Long Statement,Raven.Server.ServerWide.Context,TransactionOperationContext<TTransaction>,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionOperationContext.cs,GetTransactionMarker,The length of the statement  "            if (Transaction != null && Transaction.Disposed == false && Transaction.InnerTransaction.LowLevelTransaction.Flags != TransactionFlags.ReadWrite) " is 145.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ListenToMaintenanceWorker,The length of the statement  "                        var (tcpClient' connection) = await ConnectToClientNodeAsync(tcpConnection' _parent._server.Engine.TcpConnectionTimeout); " is 121.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ListenToMaintenanceWorker,The length of the statement  "                                    var readResponseTask = context.ReadForMemoryAsync(connection' _readStatusUpdateDebugString' internalTaskCancellationToken.Token); " is 129.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ConnectToClientNodeAsync,The length of the statement  "                var connection = await TcpUtils.WrapStreamWithSslAsync(tcpClient' tcpConnectionInfo' _parent._server.Server.Certificate.Certificate); " is 133.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ConnectToClientNodeAsync,The length of the statement  "                    using (var responseJson = await ctx.ReadForMemoryAsync(connection' _readStatusUpdateDebugString + "/Read-Handshake-Response"' _token)) " is 134.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ConnectToClientNodeAsync,The length of the statement  "                                    $"Node with ClusterTag = {ClusterTag} replied to initial handshake with authorization failure {headerResponse.Message}"); " is 121.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ConnectToClientNodeAsync,The length of the statement  "                                throw new InvalidOperationException($"Node with ClusterTag = {ClusterTag} replied to initial handshake with mismatching tcp version {headerResponse.Message}"); " is 159.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,AnalyzeLatestStats,The length of the statement  "                        var graceIfLeaderChanged = _engine.CurrentTerm > topologyStamp.Term && currentLeader.LeaderShipDuration < _stabilizationTime; " is 125.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,AnalyzeLatestStats,The length of the statement  "                        var updateReason = UpdateDatabaseTopology(database' databaseRecord' clusterTopology' newStats' prevStats' ref deletions); " is 121.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,AnalyzeLatestStats,The length of the statement  "                            $"We reached the replication factor on '{command.DatabaseName}'' so we try to remove promotables/rehabs from: {string.Join("' "' command.FromNodes)}"); " is 151.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,UpdateDatabaseTopology,The length of the statement  "                    RaiseNoLivingNodesAlert($"None of '{dbName}' database nodes are responding to the supervisor' promoting {node} from rehab to avoid making the database completely unreachable."' dbName); " is 185.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,UpdateDatabaseTopology,The length of the statement  "                RaiseNoLivingNodesAlert($"None of '{dbName}' database nodes are responding to the supervisor' the database is unreachable."' dbName); " is 133.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,UpdateDatabaseTopology,The length of the statement  "                        if (topology.PromotablesStatus.TryGetValue(rehab' out var status) == false || status != DatabasePromotionStatus.NotResponding) " is 126.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryPromote,The length of the statement  "                var msg = $"The database '{dbName}' on {promotable} not ready to be promoted' because the mentor hasn't sent all of the documents yet." + Environment.NewLine + " is 159.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryPromote,The length of the statement  "            var indexesCatchedUp = CheckIndexProgress(promotablePrevDbStats.LastEtag' promotablePrevDbStats.LastIndexStats' promotableDbStats.LastIndexStats); " is 146.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryPromote,The length of the statement  "                _logger.Info($"The database '{dbName}' on {promotable} is not ready to be promoted' because the indexes are not up-to-date." + Environment.NewLine); " is 148.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,FailedDatabaseInstanceOrNode,The length of the statement  "            if (clusterTopology.Contains(node) == false) // this node is no longer part of the *Cluster* topology and need to be replaced. " is 126.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryFindFitNode,The length of the statement  "                    _logger.Operations($"The database '{db}' on {badNode} has not responded for a long time' but there is no free node to reassign it."); " is 133.
Long Statement,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryFindFitNode,The length of the statement  "                _logger.Operations($"The database '{db}' on {badNode} has not responded for a long time' so we reassign it to {bestNode}."); " is 124.
Long Statement,Raven.Server.ServerWide.Memory,MemoryUsageGuard,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Memory\MemoryUsageGuard.cs,TryIncreasingMemoryUsageForThread,The length of the statement  "                            $"{memoryInfoResult.AvailableMemory}/{memoryInfoResult.TotalPhysicalMemory} free RAM. Also have ~{mappedSharedMem} in mmap " + " is 126.
Long Statement,Raven.Server.ServerWide.Memory,MemoryUsageGuard,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Memory\MemoryUsageGuard.cs,TryIncreasingMemoryUsageForThread,The length of the statement  "                            $"{memoryInfoResult.AvailableMemory}/{memoryInfoResult.TotalPhysicalMemory} free RAM. Also have ~{mappedSharedMem} in mmap " + " is 126.
Long Statement,Raven.Server.ServerWide.Memory,MemoryUsageGuard,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Memory\MemoryUsageGuard.cs,TryIncreasingMemoryUsageForThread,The length of the statement  "                        $"Increasing memory budget for {threadStats.Name} which is using  {currentlyAllocated}/{oldBudget} and the system has" + " is 120.
Long Statement,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ProcessFieldsIfNeeded,The length of the statement  "                if (_csvReader.Context.HeaderRecord[i].Equals(Constants.Documents.Metadata.Collection) || _csvReader.Context.HeaderRecord[i].Equals(CollectionFullPath)) " is 152.
Long Statement,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ConvertRecordToDocumentItem,The length of the statement  "                var idStr = _hasId ? csvReaderCurrentRecord[_idIndex] : _hasCollection ? $"{csvReaderCurrentRecord[_collectionIndex]}/" : $"{collection}/"; " is 139.
Long Statement,Raven.Server.Smuggler.Documents,DatabaseKeyValueActions,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,SendIdentities,The length of the statement  "                AsyncHelpers.RunSync(() => _database.ServerStore.SendToLeaderAsync(new UpdateClusterIdentityCommand(_database.Name' _identities))); " is 131.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,Execute,The length of the statement  "                                    _database.DocumentsStorage.Delete(context' key' tombstone.LowerId' null' null' changeVector' new CollectionName(tombstone.Collection)); " is 135.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,Execute,The length of the statement  "                                    _database.DocumentsStorage.AttachmentsStorage.DeleteAttachmentDirect(context' key' false' "$fromReplication"' null' changeVector); " is 130.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,Execute,The length of the statement  "                        _database.DocumentsStorage.ConflictsStorage.AddConflict(context' conflict.Id' modifiedTicks' conflict.Doc' conflict.ChangeVector'  " is 129.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,Execute,The length of the statement  "                                _database.DocumentsStorage.AttachmentsStorage.PutAttachmentStream(context' attachment.Tag' attachment.Base64Hash' attachment.Stream); " is 133.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,Execute,The length of the statement  "                        _database.DocumentsStorage.Put(context' id' null' document.Data' modifiedTicks' null' document.Flags' document.NonPersistentFlags); " is 131.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,PutAttachments,The length of the statement  "                    var type = (document.Flags & DocumentFlags.Revision) == DocumentFlags.Revision ? AttachmentType.Revision : AttachmentType.Document; " is 131.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,PutAttachments,The length of the statement  "                    using (DocumentIdWorker.GetLowerIdSliceAndStorageKey(_context' contentType' out Slice lowerContentType' out Slice contentTypeSlice)) " is 132.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,PutAttachments,The length of the statement  "                    using (attachmentsStorage.GetAttachmentKey(_context' lowerDocumentId.Content.Ptr' lowerDocumentId.Size' lowerName.Content.Ptr' lowerName.Size' " is 142.
Long Statement,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,IsPreV4Revision,The length of the statement  "                if ((document.NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) != NonPersistentDocumentFlags.LegacyRevision) " is 123.
Long Statement,Raven.Server.Smuggler.Documents,DatabaseSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSource.cs,GetIdentities,The length of the statement  "                scope.EnsureDispose(_database.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context)); " is 121.
Long Statement,Raven.Server.Smuggler.Documents,DatabaseSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSource.cs,GetCmpXchg,The length of the statement  "                scope.EnsureDispose(_database.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context)); " is 121.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,Initialize,The length of the statement  "                UnmanagedJsonParserHelper.ThrowInvalidJson("Expected start object' but got " + _state.CurrentTokenType' _peepingTomStream' _parser); " is 132.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadType,The length of the statement  "                UnmanagedJsonParserHelper.ThrowInvalidJson("Expected property type to be string' but was " + _state.CurrentTokenType' _peepingTomStream' _parser); " is 146.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadBuildVersion,The length of the statement  "                UnmanagedJsonParserHelper.ThrowInvalidJson("Expected integer BuildVersion' but got " + _state.CurrentTokenType' _peepingTomStream' _parser); " is 140.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadArray,The length of the statement  "                UnmanagedJsonParserHelper.ThrowInvalidJson("Expected start array' got " + _state.CurrentTokenType' _peepingTomStream' _parser); " is 127.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadLegacyAttachments,The length of the statement  "                UnmanagedJsonParserHelper.ThrowInvalidJson("Expected start array' but got " + _state.CurrentTokenType' _peepingTomStream' _parser); " is 131.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadLegacyAttachments,The length of the statement  "                        UnmanagedJsonParserHelper.ThrowInvalidJson("Unexpected end of json while reading legacy attachments"' _peepingTomStream' _parser); " is 130.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadDocuments,The length of the statement  "                UnmanagedJsonParserHelper.ThrowInvalidJson("Expected start array' but got " + _state.CurrentTokenType' _peepingTomStream' _parser); " is 131.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadTombstones,The length of the statement  "                UnmanagedJsonParserHelper.ThrowInvalidJson("Expected start array' but got " + _state.CurrentTokenType' _peepingTomStream' _parser); " is 131.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadConflicts,The length of the statement  "                UnmanagedJsonParserHelper.ThrowInvalidJson("Expected start array' but got " + _state.CurrentTokenType' _peepingTomStream' _parser); " is 131.
Long Statement,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ProcessLegacyAttachment,The length of the statement  "            var hash = AsyncHelpers.RunSync(() => AttachmentsStorageHelper.CopyStreamToFileAndCalculateHash(context' memoryStream' stream' CancellationToken.None)); " is 152.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,PostExport,The length of the statement  "                        blittableJson = await context.ParseToMemoryAsync(stream' "DownloadOptions"' BlittableJsonDocumentBuilder.UsageMode.None' buffer); " is 129.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,PostExport,The length of the statement  "                    fileName = $"Dump of {context.DocumentDatabase.Name} {SystemTime.UtcNow.ToString("yyyy-MM-dd HH-mm"' CultureInfo.InvariantCulture)}"; " is 133.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,PostExport,The length of the statement  "                            onProgress => Task.Run(() => ExportDatabaseInternal(options' startDocumentEtag' onProgress' context' token)' token.Token)' operationId' token); " is 143.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,ExportDatabaseInternal,The length of the statement  "                var smuggler = new DatabaseSmuggler(Database' source' destination' Database.Time' options' onProgress: onProgress' token: token.Token); " is 135.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,BulkImport,The length of the statement  "                        using (var stream = new GZipStream(new BufferedStream(file' 128 * Voron.Global.Constants.Size.Kilobyte)' CompressionMode.Decompress)) " is 133.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,BulkImport,The length of the statement  "                finalResult.RevisionDocuments.LastEtag = Math.Max(finalResult.RevisionDocuments.LastEtag' importResult.RevisionDocuments.LastEtag); " is 131.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,PostImport,The length of the statement  "                using (var stream = new GZipStream(new BufferedStream(await GetImportStream()' 128 * Voron.Global.Constants.Size.Kilobyte)' CompressionMode.Decompress)) " is 152.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,Migrate,The length of the statement  "                var migrationConfigurationJson = JsonDeserializationServer.SingleDatabaseMigrationConfiguration(migrationConfiguration); " is 120.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,PostImportAsync,The length of the statement  "                                    if (ContentDispositionHeaderValue.TryParse(section.ContentDisposition' out ContentDispositionHeaderValue contentDisposition) == false) " is 134.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,ImportFromCsv,The length of the statement  "                await Database.Operations.AddOperation(Database' operationDescription' Raven.Server.Documents.Operations.Operations.OperationType.CollectionImportFromCsv' " is 154.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,ImportFromCsv,The length of the statement  "                                var reader = new MultipartReader(MultipartRequestHelper.GetBoundary(MediaTypeHeaderValue.Parse(HttpContext.Request.ContentType)' " is 128.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,ImportFromCsv,The length of the statement  "                                    if (ContentDispositionHeaderValue.TryParse(section.ContentDisposition' out ContentDispositionHeaderValue contentDisposition) == false) " is 134.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,ImportDocumentsFromCsvStream,The length of the statement  "                var smuggler = new DatabaseSmuggler(Database' source' destination' Database.Time' options' result' onProgress' token.Token); " is 124.
Long Statement,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,DoImportInternal,The length of the statement  "                var smuggler = new DatabaseSmuggler(Database' source' destination' Database.Time' options' result' onProgress' token.Token); " is 124.
Long Statement,Raven.Server.Smuggler.Migration,Importer,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Importer.cs,MigrateDatabase,The length of the statement  "            var url = $"{ServerUrl}/databases/{DatabaseName}/smuggler/export?operationId={operationId}&startEtag={startDocumentEtag}"; " is 122.
Long Statement,Raven.Server.Smuggler.Migration,Importer,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Importer.cs,MigrateDatabase,The length of the statement  "                var smuggler = new Documents.DatabaseSmuggler(Database' source' destination' Database.Time' options' Result' OnProgress' CancelToken.Token); " is 140.
Long Statement,Raven.Server.Smuggler.Migration,Migrator_V2,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V2.cs,MigrateDocuments,The length of the statement  "                var smuggler = new DatabaseSmuggler(Database' source' destination' Database.Time' options' Result' OnProgress' CancelToken.Token); " is 130.
Long Statement,Raven.Server.Smuggler.Migration,Migrator_V2,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V2.cs,MigrateDocuments,The length of the statement  "                smuggler.Execute(ensureStepsProcessed: false); // since we will be migrating indexes as separate task don't ensureStepsProcessed at this point " is 142.
Long Statement,Raven.Server.Smuggler.Migration,Migrator_V2,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V2.cs,MigrateIndexes,The length of the statement  "                var smuggler = new DatabaseSmuggler(Database' source' destination' Database.Time' options' Result' OnProgress' CancelToken.Token); " is 130.
Long Statement,Raven.Server.Smuggler.Migration,Migrator_V3,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V3.cs,MigrateDatabase,The length of the statement  "                var smuggler = new DatabaseSmuggler(Database' source' destination' Database.Time' options' Result' OnProgress' CancelToken.Token); " is 130.
Long Statement,Raven.Server.Smuggler.Migration,OfflineMigrationConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\OfflineMigrationConfiguration.cs,GenerateExporterCommandLine,The length of the statement  "            if (string.IsNullOrEmpty(EncryptionKey) == false && string.IsNullOrEmpty(EncryptionAlgorithm) == false && EncryptionKeyBitsSize.HasValue) " is 137.
Long Statement,Raven.Server.SqlMigration,Validator,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.Validator.cs,ValidateConvertableToBlittable,The length of the statement  "                    AddError(SqlMigrationImportResult.Error.ErrorType.ParseError' $"Cannot convert document to bllittable. Error: {e}"' table.Name); " is 128.
Long Statement,Raven.Server.SqlMigration,Validator,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.Validator.cs,ValidateExistanceOfTables,The length of the statement  "                        AddError(SqlMigrationImportResult.Error.ErrorType.TableNotExist' $"Couldn't find table '{table.Name}' in the SQL database (Table name must include schema name)"' table.Name); " is 174.
Long Statement,Raven.Server.SqlMigration,Validator,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.Validator.cs,ValidateEmbeddedTables,The length of the statement  "                        AddError(SqlMigrationImportResult.Error.ErrorType.InvalidEmbed' $"Table '{embeddedTable.Name}' cannot embed into '{t.ParentTableName}'"' embeddedTable.Name); " is 157.
Long Statement,Raven.Server.SqlMigration,Validator,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.Validator.cs,ValidatePatch,The length of the statement  "                    AddError(SqlMigrationImportResult.Error.ErrorType.InvalidPatch' $"Cannot patch table '{table.Name}' using the given script. Error: {e}"' table.Name); " is 149.
Long Statement,Raven.Server.SqlMigration,Validator,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.Validator.cs,ValidateHasPrimaryKeys,The length of the statement  "                    AddError(SqlMigrationImportResult.Error.ErrorType.TableMissingPrimaryKeys' $"Table '{table.Name}' must have at list 1 primary key"' table.Name); " is 144.
Long Statement,Raven.Server.SqlMigration,Validator,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.Validator.cs,ValidateQuery,The length of the statement  "                    AddError(SqlMigrationImportResult.Error.ErrorType.InvalidOrderBy' $"Query cannot contain an 'ORDER BY' clause ({table.Name})"' table.Name); " is 139.
Long Statement,Raven.Server.SqlMigration,Validator,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.Validator.cs,ValidateQuery,The length of the statement  "                    AddError(SqlMigrationImportResult.Error.ErrorType.InvalidQuery' $"Failed to read table '{table.Name}' using the given query. Error: {e}"); " is 138.
Long Statement,Raven.Server.SqlMigration,Validator,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlDatabase.Validator.cs,ValidateQueryContainsAllKeys,The length of the statement  "                    AddError(SqlMigrationImportResult.Error.ErrorType.InvalidQuery' $"Query for table '{table.Name}' must select all primary keys"' table.Name); " is 140.
Long Statement,Raven.Server.SqlMigration,SqlEmbeddedTable,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlEmbeddedTable.cs,GetReaderWhere,The length of the statement  "            var query = SqlQueries.SelectFromQueryWhere(InitialQuery' GetColumnsReferencingParentTable()' values) + SqlQueries.OrderByColumns(GetColumnsReferencingParentTable()); " is 166.
Long Statement,Raven.Server.SqlMigration,SqlMigrationDocument,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationDocument.cs,ToBllitable,The length of the statement  "                throw new InvalidOperationException($"Cannot build raven document from table '{TableName}'. Raven document id is: {Id}"' e); " is 124.
Long Statement,Raven.Server.SqlMigration,SqlMigrationDocumentFactory,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationDocumentFactory.cs,FromReaderInternal,The length of the statement  "                        var message = $"Cannot read column '{columnName}' in table '{table.Name}'. (Unsupported type: {reader.GetDataTypeName(i)}) Error: {e}"; " is 135.
Long Statement,Raven.Server.SqlMigration,SqlMigrationDocumentFactory,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationDocumentFactory.cs,FromReaderInternal,The length of the statement  "                        var message = $"Cannot skip unsupported KEY column '{columnName}' in table '{table.Name}'. (Unsupported type: {reader.GetDataTypeName(i)})"; " is 140.
Long Statement,Raven.Server.SqlMigration,SqlMigrationDocumentFactory,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationDocumentFactory.cs,SetEmbeddedDocuments,The length of the statement  "                            continueLoop = true; // If parent value is greater than child value => childReader move to next. Otherwise => parentReader move to next " is 135.
Long Statement,Raven.Server.SqlMigration,SqlMigrationWriter,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationWriter.cs,InsertDocument,The length of the statement  "                    Hash = await AttachmentsStorageHelper.CopyStreamToFileAndCalculateHash(_context' memoryStream' stream' _context.DocumentDatabase.DatabaseShutdown) " is 146.
Long Statement,Raven.Server.SqlMigration,SqlMigrationWriter,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationWriter.cs,FlushCommands,The length of the statement  "                throw new InvalidOperationException($"Failed to enqueue batch of {_commands.Count} documents and attachments. ids: {ids}"' e); " is 126.
Long Statement,Raven.Server.SqlMigration,SqlMigrationWriter,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationWriter.cs,FlushCommands,The length of the statement  "            OnDocumentsInserted?.Invoke((double) _time.ElapsedMilliseconds / 1000' SqlReader.RowsRead - _rowsRead' _command.ParsedCommands.Count - attachmentsCount' attachmentsCount); " is 171.
Long Statement,Raven.Server.Storage.Schema,InternalUpgrader,C:\repos\ravendb_ravendb\src\Raven.Server\Storage\Schema\SchemaUpgrader.cs,Upgrade,The length of the statement  "                            throw new NotSupportedException($"Documents schema upgrade from version {currentVersion} is not supported' use the recovery tool to dump the data and then import it into a new database"); " is 187.
Long Statement,Raven.Server.Storage.Schema.Updates.Documents,From11,C:\repos\ravendb_ravendb\src\Raven.Server\Storage\Schema\Updates\Documents\From11.cs,Update,The length of the statement  "            // When the revision are enabled and we delete a document we stored it with a 'RevisionDelete' flag. This flag was used to find the deleted revisions. " is 150.
Long Statement,Raven.Server.Storage.Schema.Updates.Documents,From11,C:\repos\ravendb_ravendb\src\Raven.Server\Storage\Schema\Updates\Documents\From11.cs,Update,The length of the statement  "            // Now we store the resolved conflicts as revisions' so it could be' that a deleted revision will contain flags such as 'Conflicted' or 'Resolved'. " is 147.
Long Statement,Raven.Server.TrafficWatch,TrafficWatchConnection,C:\repos\ravendb_ravendb\src\Raven.Server\TrafficWatch\TrafficWatchConnection.cs,StartSendingNotifications,The length of the statement  "                    await _websocket.CloseAsync(WebSocketCloseStatus.NormalClosure' "NORNAL_CLOSE"' _cancellationTokenSource?.Token ?? CancellationToken.None); " is 139.
Long Statement,Raven.Server.TrafficWatch,TrafficWatchManager,C:\repos\ravendb_ravendb\src\Raven.Server\TrafficWatch\TrafficWatchManager.cs,DispatchMessage,The length of the statement  "                    if (string.Equals(connection.TenantSpecific' trafficWatchData.DatabaseName' StringComparison.OrdinalIgnoreCase) == false) " is 121.
Long Statement,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedCertificate,The length of the statement  "            var selfSignedCertificateBasedOnPrivateKey = CreateSelfSignedCertificateBasedOnPrivateKey(commonNameValue' caSubjectName' ca' false' false' 1' out _); " is 150.
Long Statement,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedClientCertificate,The length of the statement  "            var readCertificate = new X509CertificateParser().ReadCertificate(certificateHolder.Certificate.Export(X509ContentType.Cert)); " is 126.
Long Statement,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedExpiredClientCertificate,The length of the statement  "            var readCertificate = new X509CertificateParser().ReadCertificate(certificateHolder.Certificate.Export(X509ContentType.Cert)); " is 126.
Long Statement,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedCertificateBasedOnPrivateKey,The length of the statement  "                certificateGenerator.AddExtension(X509Extensions.ExtendedKeyUsage.Id' true' new ExtendedKeyUsage(KeyPurposeID.IdKPClientAuth)); " is 127.
Long Statement,Raven.Server.Utils,IncludeUtil,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IncludeUtil.cs,GetDocIdFromInclude,The length of the statement  "            if (BlittableJsonTraverser.Default.TryRead(docReader' pathSegment' out object value' out StringSegment leftPath) == false) " is 122.
Long Statement,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,DeleteOldPipeFiles,The length of the statement  "                        throw new IOException($"Unable to create directory {pipeDir} with permission {mode}. LastErr={Marshal.GetLastWin32Error()}"); " is 125.
Long Statement,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,WorkaroundPipePathForPosix,The length of the statement  "            // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs) " is 124.
Long Statement,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,WorkaroundPipePathForPosix,The length of the statement  "                throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available"); " is 125.
Long Statement,Raven.Server.Utils,ReplicationUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ReplicationUtils.cs,GetTcpInfo,The length of the statement  "                    throw new InvalidOperationException("Getting TCP info over HTTPS but the server didn't return the expected certificate to use over TCP' invalid response' aborting"); " is 165.
Long Statement,Raven.Server.Utils,ReplicationUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ReplicationUtils.cs,GetTcpInfoAsync,The length of the statement  "                    throw new InvalidOperationException("Getting TCP info over HTTPS but the server didn't return the expected certificate to use over TCP' invalid response' aborting"); " is 165.
Long Statement,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The length of the statement  "            return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16) " is 149.
Long Statement,Raven.Server.Utils,TypeConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\TypeConverter.cs,ConvertForIndexing,The length of the statement  "                var result = LazyStringParser.TryParseDateTime(lazyString.Buffer' lazyString.Size' out DateTime dt' out DateTimeOffset dto); " is 124.
Long Statement,Raven.Server.Utils,TypeConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\TypeConverter.cs,Convert,The length of the statement  "                throw new InvalidOperationException(string.Format("Unable to find suitable conversion for {0} since it is not predefined "' value)' e); " is 135.
Long Statement,Raven.Server.Utils.Cli,PostSetupCliArgumentsUpdater,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\PostSetupCliArgumentsUpdater.cs,Process,The length of the statement  "            result = UpdateServerUrlCommandLineArgAfterSetupIfNecessary(result' configBeforeRestart.Core.ServerUrls' currentConfiguration.GetSetting(RavenConfiguration.GetKey(x => x.Core.ServerUrls))); " is 189.
Long Statement,Raven.Server.Utils.Cli,PostSetupCliArgumentsUpdater,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\PostSetupCliArgumentsUpdater.cs,UpdateServerUrlCommandLineArgAfterSetupIfNecessary,The length of the statement  "            resultArgs[idx] = $"--{RavenConfiguration.GetKey(x => x.Core.ServerUrls)}={string.Join(";"' uriBuilders.Select(builder => UrlUtil.TrimTrailingSlash(builder.ToString())))}"; " is 172.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandStats,The length of the statement  "                WriteText("'stats' command not supported on remote pipe connection. Use `info` or `prompt %M` instead"' TextColor' cli); " is 120.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,GetInfoText,The length of the statement  "            return $" Build {ServerVersion.Build}' Version {ServerVersion.Version}' SemVer {ServerVersion.FullVersion}' Commit {ServerVersion.CommitHash}" + " is 144.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,GetInfoText,The length of the statement  "                  $" PID {Process.GetCurrentProcess().Id}' {IntPtr.Size * 8} bits' {ProcessorInfo.ProcessorCount} Cores' Arch: {RuntimeInformation.OSArchitecture}" + " is 147.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandHelp,The length of the statement  "                new[] {"script <server|database> [database]"' "Execute script on server or specified database. WARNING: Use with care!"}' " is 121.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,StartCli,The length of the statement  "                            WriteWarning($"Warning: Will not execute command `{parsedCommand.Command}` as previous command return non-successful return code"' this); " is 137.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,StartCli,The length of the statement  "                        WriteWarning($"Warning: Will execute command `{parsedCommand.Command}` after previous command return non-successful return code"' this); " is 136.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,StartCli,The length of the statement  "                            WriteText("Are you sure you want to run experimental command : " + parsedCommand.Command + " ? [y/N] "' WarningColor' this' newLine: false); " is 140.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,StartCli,The length of the statement  "                            WriteText("Server is not running as Service. Restarting from a remote connection is not allowed." + Environment.NewLine + " is 121.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,StartCli,The length of the statement  "                            WriteText("Server is not running as Service. Shutting down from a remote connection is not allowed." + Environment.NewLine + " is 124.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,ParseLine,The length of the statement  "                        parsedLine.ErrorMsg = $"Missing argument(s) after command : {parsedLine.ParsedCommands.Last().Command} (should get at least {_actions[parsedLine.ParsedCommands.Last().Command].NumOfArgs} arguments but got none)"; " is 212.
Long Statement,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,ParseLine,The length of the statement  "                        parsedLine.ErrorMsg = $"Missing argument(s) after command : {parsedLine.ParsedCommands.Last().Command} (should get at least {_actions[parsedLine.ParsedCommands.Last().Command].NumOfArgs} arguments but got {args.Count})"; " is 220.
Long Statement,Raven.Server.Utils.Cli,RuntimeSettings,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RuntimeSettings.cs,Print,The length of the statement  "            paragraph.Add(new ConsoleText { Message = " memory from the OS."' ForegroundColor = ConsoleColor.Gray' IsNewLinePostPended = true }); " is 133.
Long Statement,Raven.Server.Utils.Cli,WelcomeMessage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\WelcomeMessage.cs,Print,The length of the statement  "            ConsoleWriteLineWithColor(ConsoleColor.Yellow' " Build {0}' Version {1}' SemVer {2}' Commit {3}\r\n PID {4}' {5} bits' {6} Cores' Phys Mem {7}' Arch: {8}"' " is 155.
Long Statement,Raven.Server.Utils.Cli,WelcomeMessage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\WelcomeMessage.cs,Print,The length of the statement  "                ServerVersion.Build' ServerVersion.Version' ServerVersion.FullVersion' ServerVersion.CommitHash' Process.GetCurrentProcess().Id' " is 128.
Long Statement,Raven.Server.Utils.Cli,WelcomeMessage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\WelcomeMessage.cs,Print,The length of the statement  "                new ConsoleText { Message = "and awesome contributors!"' ForegroundColor = ConsoleColor.Gray' IsNewLinePostPended = true }); " is 124.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,GenerateCertificateInternal,The length of the statement  "                var clientCert = (HttpContext.Features.Get<IHttpAuthenticationFeature>() as RavenServer.AuthenticateConnection)?.Certificate; " is 125.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,GenerateCertificateInternal,The length of the statement  "                throw new InvalidOperationException($"Cannot generate the certificate '{certificate.Name}' with 'Cluster Admin' security clearance because the current client certificate being used has a lower clearance: {clientCertDef.SecurityClearance}"); " is 240.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,GenerateCertificateInternal,The length of the statement  "                throw new InvalidOperationException($"Cannot generate the client certificate '{certificate.Name}' because the server certificate is not loaded. " + " is 147.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,GenerateCertificateInternal,The length of the statement  "            var selfSignedCertificate = CertificateUtils.CreateSelfSignedClientCertificate(certificate.Name' Server.Certificate' out var clientCertBytes); " is 142.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,GenerateCertificateInternal,The length of the statement  "            var res = await ServerStore.PutValueInClusterAsync(new PutCertificateCommand(Constants.Certificates.Prefix + selfSignedCertificate.Thumbprint' newCertDef)); " is 156.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Put,The length of the statement  "                if ((certificate.SecurityClearance == SecurityClearance.ClusterAdmin || certificate.SecurityClearance == SecurityClearance.ClusterNode) && IsClusterAdmin() == false) " is 165.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Put,The length of the statement  "                    var clientCert = (HttpContext.Features.Get<IHttpAuthenticationFeature>() as RavenServer.AuthenticateConnection)?.Certificate; " is 125.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Put,The length of the statement  "                    throw new InvalidOperationException($"Cannot save the certificate '{certificate.Name}' with '{certificate.SecurityClearance}' security clearance because the current client certificate being used has a lower clearance: {clientCertDef.SecurityClearance}"); " is 254.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Put,The length of the statement  "                    throw new ArgumentException($"{nameof(certificate.Certificate)} is a mandatory property when saving an existing certificate"); " is 126.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Put,The length of the statement  "                    throw new ArgumentException($"Unable to parse the {nameof(certificate.Certificate)} property' expected a Base64 value"' e); " is 123.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Put,The length of the statement  "                    // The first certificate in the collection will be the primary certificate and its thumbprint will be the one shown in a GET request " is 132.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Put,The length of the statement  "                    var res = await ServerStore.PutValueInClusterAsync(new PutCertificateCommand(Constants.Certificates.Prefix + x509Certificate.Thumbprint' currentCertificate)); " is 158.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Delete,The length of the statement  "                    throw new InvalidOperationException($"Cannot delete {clientCertDef?.Name} because it's the current client certificate being used"); " is 131.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Delete,The length of the statement  "                    throw new InvalidOperationException($"Cannot delete {serverCertDef?.Name} because it's the current server certificate being used"); " is 131.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Delete,The length of the statement  "                if ((definition.SecurityClearance == SecurityClearance.ClusterAdmin || definition.SecurityClearance == SecurityClearance.ClusterNode)  " is 133.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Delete,The length of the statement  "                        $"Cannot delete the certificate '{definition.Name}' with '{definition.SecurityClearance}' security clearance because the current client certificate being used has a lower clearance: {clientCertDef.SecurityClearance}"); " is 218.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Delete,The length of the statement  "                        $"Cannot delete the certificate '{definition.Name}' with thumbprint '{definition.Thumbprint}'. You need to delete the primary certificate of the collection: {definition.CollectionPrimaryKey}"); " is 193.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Edit,The length of the statement  "                        throw new InvalidOperationException($"Cannot edit permissions for certificate with thumbprint '{newCertificate.Thumbprint}'. It doesn't exist in the cluster."); " is 160.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Edit,The length of the statement  "                    if ((existingCertificate.SecurityClearance == SecurityClearance.ClusterAdmin || existingCertificate.SecurityClearance == SecurityClearance.ClusterNode) && IsClusterAdmin() == false) " is 181.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Edit,The length of the statement  "                        throw new InvalidOperationException($"Cannot edit the certificate '{existingCertificate.Name}'. It has '{existingCertificate.SecurityClearance}' security clearance while the current client certificate being used has a lower clearance: {clientCertDef.SecurityClearance}"); " is 271.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Edit,The length of the statement  "                    if ((newCertificate.SecurityClearance == SecurityClearance.ClusterAdmin || newCertificate.SecurityClearance == SecurityClearance.ClusterNode) && IsClusterAdmin() == false) " is 171.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Edit,The length of the statement  "                        throw new InvalidOperationException($"Cannot edit security clearance to '{newCertificate.SecurityClearance}' for certificate '{existingCertificate.Name}'. Only a 'Cluster Admin' can do that and your current client certificate has a lower clearance: {clientCertDef.SecurityClearance}"); " is 285.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,Edit,The length of the statement  "                var putResult = await ServerStore.PutValueInClusterAsync(new PutCertificateCommand(Constants.Certificates.Prefix + newCertificate.Thumbprint' " is 141.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,GetClusterCertificates,The length of the statement  "                        throw new InvalidOperationException("Cannot get ClusterNode certificates' there should be at least one but it doesn't exist. This shouldn't happen!"); " is 150.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,ForceRenew,The length of the statement  "                throw new InvalidOperationException("Cannot force renew the let's encrypt server certificate. This server wasn't set up using the let's encrypt setup mode."); " is 158.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,ForceRenew,The length of the statement  "                throw new InvalidOperationException($"Failed to force renew the let's encrypt server certificate for domain: {Server.Certificate.Certificate.GetNameInfo(X509NameType.DnsName' false)}"' e); " is 188.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,ReplaceClusterCert,The length of the statement  "                        throw new InvalidOperationException($"Cannot replace the server certificate with '{certificate.Name}'. Only a ClusterAdmin can do this."); " is 138.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,ReplaceClusterCert,The length of the statement  "                        throw new ArgumentException($"Unable to parse the {nameof(certificate.Certificate)} property' expected a Base64 value"' e); " is 123.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,ValidatePermissions,The length of the statement  "                if (ResourceNameValidator.IsValidResourceName(kvp.Key' serverStore.Configuration.Core.DataDirectory.FullPath' out var errorMessage) == false) " is 141.
Long Statement,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,ValidatePermissions,The length of the statement  "                    throw new ArgumentException($"Error in permissions in the certificate definition' invalid access {kvp.Value} for database {kvp.Key}"); " is 134.
Long Statement,Raven.Server.Web,HtmlUtil,C:\repos\ravendb_ravendb\src\Raven.Server\Web\HtmlUtil.cs,RenderUnsafePage,The length of the statement  "                    var certPathOptDescription = typeof(SecurityConfiguration).GetProperty("CertificatePath").GetCustomAttribute<DescriptionAttribute>().Description; " is 145.
Long Statement,Raven.Server.Web,RequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\RequestHandler.cs,GetDateTimeQueryString,The length of the statement  "            if (DateTime.TryParseExact(dataAsString' DefaultFormat.DateTimeOffsetFormatsToWrite' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out DateTime result)) " is 166.
Long Statement,Raven.Server.Web,RequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\RequestHandler.cs,SetupCORSHeaders,The length of the statement  "            httpContext.Response.Headers.Add("Access-Control-Allow-Headers"' httpContext.Request.Headers["Access-Control-Request-Headers"]); " is 128.
Long Statement,Raven.Server.Web.Studio,SampleDataHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\SampleDataHandler.cs,GetSampleDataClasses,The length of the statement  "            using (var sampleData = typeof(SampleDataHandler).GetTypeInfo().Assembly.GetManifestResourceStream("Raven.Server.Web.Studio.EmbeddedData.NorthwindModel.cs")) " is 157.
Long Statement,Raven.Server.Web.Studio,SqlMigrationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\SqlMigrationHandler.cs,SqlSchema,The length of the statement  "                using (Server.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext transactionOperationContext)) " is 124.
Long Statement,Raven.Server.Web.Studio,SqlMigrationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\SqlMigrationHandler.cs,ImportSql,The length of the statement  "                using (Server.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext transactionOperationContext)) " is 124.
Long Statement,Raven.Server.Web.Studio,SqlMigrationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\SqlMigrationHandler.cs,ImportSql,The length of the statement  "                        throw new InvalidOperationException($"'{nameof(ConnectionStringName)}' is a required field when asking for sql-migration"); " is 123.
Long Statement,Raven.Server.Web.Studio,SqlMigrationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\SqlMigrationHandler.cs,ImportSql,The length of the statement  "                    var sqlMigrationTables = (from BlittableJsonReaderObject table in Tables.Items select JsonDeserializationServer.SqlMigrationTable(table)).ToList(); " is 147.
Long Statement,Raven.Server.Web.Studio,StudioCollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionsHandler.cs,PreviewCollection,The length of the statement  "                    propertiesPreviewToSend = bindings.Count > 0 ? new HashSet<string>(bindings) : availableColumns.Take(ColumnsSamplingLimit).Select(x => x.ToString()).ToHashSet(); " is 161.
Long Statement,Raven.Server.Web.Studio,StudioCollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionsHandler.cs,WriteDocument,The length of the statement  "                    var strategy = sendFull ? ValueWriteStrategy.Passthrough : FindWriteStrategy(prop.Token & BlittableJsonReaderBase.TypesMask' prop.Value); " is 137.
Long Statement,Raven.Server.Web.Studio,StudioCollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionsHandler.cs,FindWriteStrategy,The length of the statement  "                    return lazyCompressedString.UncompressedSize > StringLengthLimit ? ValueWriteStrategy.Trim : ValueWriteStrategy.Passthrough; " is 124.
Long Statement,Raven.Server.Web.Studio,StudioCollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionsHandler.cs,Delete,The length of the statement  "            ExecuteCollectionOperation((runner' collectionName' options' onProgress' token) => Task.Run(async () => await runner.ExecuteDelete(collectionName' options' onProgress' token))' " is 176.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,AddDatabaseNode,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(name' ServerStore.Configuration.Core.DataDirectory.FullPath' out errorMessage) == false) " is 134.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,AddDatabaseNode,The length of the statement  "                        throw new InvalidOperationException($"Can't add node {node} to {name} topology because node {node} is not part of the cluster"); " is 128.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,AddDatabaseNode,The length of the statement  "                        throw new InvalidOperationException($"Can't add node {node} to database {name} topology because database {name} is encrypted but node {node} doesn't have an SSL certificate."); " is 176.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,AddDatabaseNode,The length of the statement  "                    allNodes.RemoveAll(n => databaseRecord.Topology.AllNodes.Contains(n) || (databaseRecord.Encrypted && NotUsingHttps(clusterTopology.GetUrlFromTag(n)))); " is 151.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,AddDatabaseNode,The length of the statement  "                        throw new InvalidOperationException($"Database {name} is encrypted and requires a node which supports SSL. There is no such node available in the cluster."); " is 157.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,Put,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 141.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,Put,The length of the statement  "                var (newIndex' topology' nodeUrlsAddedTo) = await CreateDatabase(name' databaseRecord' context' replicationFactor' index); " is 122.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,RecreateIndexes,The length of the statement  "            var databaseConfiguration = ServerStore.DatabasesLandlord.CreateDatabaseConfiguration(databaseRecord.DatabaseName' true' true' true' databaseRecord); " is 149.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,RecreateIndexes,The length of the statement  "            using (var documentDatabase = new DocumentDatabase(databaseRecord.DatabaseName' databaseConfiguration' ServerStore' addToInitLog)) " is 130.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CreateDatabase,The length of the statement  "                databaseRecord.Topology = topology = AssignNodesToDatabase(context' factor' name' databaseRecord.Encrypted' out nodeUrlsAddedTo); " is 129.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,WaitForExecutionOnRelevantNodes,The length of the statement  "                        throw new TimeoutException($"Waited too long for the raft command (number {index}) to be executed on any of the relevant nodes to this command."); " is 146.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,WaitForExecutionOnRelevantNodes,The length of the statement  "                        throw new InvalidDataException($"The database '{database}' was create but is not accessible' because all of the nodes on which this database was supose to be created' had thrown an exception."' task.Exception); " is 210.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,WaitForExecutionOnSpecificNode,The length of the statement  "            using (var requester = ClusterRequestExecutor.CreateForSingleNode(clusterTopology.GetUrlFromTag(node)' ServerStore.Server.Certificate.Certificate)) " is 147.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,AssignNodesToDatabase,The length of the statement  "                    throw new InvalidOperationException($"Database {name} is encrypted and requires a node which supports SSL. There is no such node available in the cluster."); " is 157.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,ValidateClusterMembers,The length of the statement  "                    throw new InvalidOperationException($"{databaseRecord.DatabaseName} is encrypted but node {node} with url {url} doesn't use HTTPS. This is not allowed."); " is 154.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,RestoreDatabase,The length of the statement  "                if (ResourceNameValidator.IsValidResourceName(databaseName' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 149.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,Delete,The length of the statement  "                                    throw new InvalidOperationException($"Database '{databaseName}' doesn't reside on node '{node}' so it can't be deleted from it"); " is 129.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,AdminConsole,The length of the statement  "                    throw new InvalidOperationException("'database' query string parmater not found' and 'serverScript' query string is not found. Don't know what to apply this script on"); " is 169.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,UpdateConflictSolver,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 141.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,UpdateConflictSolver,The length of the statement  "                var conflictResolver = (ConflictSolver)EntityToBlittable.ConvertToEntity(typeof(ConflictSolver)' "convert-conflict-resolver"' json' DocumentConventions.Default); " is 161.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CompactDatabase,The length of the statement  "                    throw new InvalidOperationException($"{nameof(compactSettings.DatabaseName)} is a required field when compacting a database."); " is 127.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CompactDatabase,The length of the statement  "                    throw new InvalidOperationException($"{nameof(compactSettings.Documents)} is false in compact settings and no indexes were supplied. Nothing to compact."); " is 155.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CompactDatabase,The length of the statement  "                        throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName} on node {ServerStore.NodeTag}' because it doesn't reside on this node."); " is 166.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,MigrateDatabaseOffline,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(databaseName' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 149.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,MigrateDatabaseOffline,The length of the statement  "                                throw new TimeoutException($"After waiting for {configuration.Timeout.HasValue} the export tool didn't exit' aborting."); " is 121.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,MigrateDatabaseOffline,The length of the statement  "                                throw new FileNotFoundException($"Was expecting the output file to be located at {configuration.OutputFilePath}' but it is not there."); " is 136.
Long Statement,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,MigrateDatabaseOffline,The length of the statement  "                                var smuggler = new DatabaseSmuggler(database' source' destination' database.Time' result: result' onProgress: onProgress' " is 121.
Long Statement,Raven.Server.Web.System,DatabaseHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabaseHelper.cs,GetServerWideOnlyConfigurationKeys,The length of the statement  "            foreach (var configurationProperty in typeof(RavenConfiguration).GetProperties(BindingFlags.Instance | BindingFlags.Public)) " is 124.
Long Statement,Raven.Server.Web.System,DatabaseHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabaseHelper.cs,GetServerWideOnlyConfigurationKeys,The length of the statement  "                foreach (var categoryProperty in configurationProperty.PropertyType.GetProperties(BindingFlags.Instance | BindingFlags.Public)) " is 127.
Long Statement,Raven.Server.Web.System,DatabaseHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabaseHelper.cs,GetServerWideOnlyConfigurationKeys,The length of the statement  "                    if (configurationEntryAttribute == null || configurationEntryAttribute.Scope == ConfigurationEntryScope.ServerWideOrPerDatabase) " is 128.
Long Statement,Raven.Server.Web.System,DatabaseHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabaseHelper.cs,Validate,The length of the statement  "            if (record.DatabaseName != null && string.Equals(name' record.DatabaseName' StringComparison.OrdinalIgnoreCase) == false) " is 121.
Long Statement,Raven.Server.Web.System,DatabaseHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabaseHelper.cs,Validate,The length of the statement  "                    throw new InvalidOperationException($"Detected '{key}' key in {nameof(DatabaseRecord.Settings)}. This is a server-wide configuration key and can only be set at server level."); " is 176.
Long Statement,Raven.Server.Web.System,DatabaseHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabaseHelper.cs,Validate,The length of the statement  "                    throw new InvalidOperationException($"Detected '{key}' key in {nameof(DatabaseRecord.SecuredSettings)}. This is a server-wide configuration key and can only be set at server level."); " is 183.
Long Statement,Raven.Server.Web.System,DatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabasesHandler.cs,GetPeriodicBackup,The length of the statement  "                var databaseRecordBlittable = EntityToBlittable.ConvertEntityToBlittable(periodicBackup' DocumentConventions.Default' context); " is 127.
Long Statement,Raven.Server.Web.System,DatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabasesHandler.cs,WriteDatabaseInfo,The length of the statement  "            var online = ServerStore.DatabasesLandlord.DatabasesCache.TryGetValue(databaseName' out Task<DocumentDatabase> dbTask) && " is 121.
Long Statement,Raven.Server.Web.System,DatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\DatabasesHandler.cs,WriteDatabaseInfo,The length of the statement  "            if (dbRecord.Settings.TryGetValue(RavenConfiguration.GetKey(x => x.Indexing.Disabled)' out var val) && bool.TryParse(val' out var indexingDisabled) && indexingDisabled) " is 168.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,GetOngoingTasksInternal,The length of the statement  "                    CollectExternalReplicationTasks(databaseRecord.ExternalReplications' dbTopology'clusterTopology'databaseRecord.RavenConnectionStrings)' " is 135.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,CollectSubscriptionTasks,The length of the statement  "            foreach (var keyValue in ClusterStateMachine.ReadValuesStartingWith(context' SubscriptionState.SubscriptionPrefix(databaseRecord.DatabaseName))) " is 144.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,CollectBackupTasks,The length of the statement  "                yield return GetOngoingTaskBackup(backupConfiguration.TaskId' databaseRecord' backupConfiguration' dbTopology' clusterTopology); " is 128.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,RemoveConnectionString,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(Database.Name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 150.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,GetConnectionStrings,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(Database.Name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 150.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,GetConnectionStrings,The length of the statement  "                    (ravenConnectionStrings' sqlConnectionstrings) = GetConnectionString(record' connectionStringName' connectionStringType); " is 121.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,PutConnectionString,The length of the statement  "            await DatabaseConfigurations((_' databaseName' connectionString) => ServerStore.PutConnectionString(_' databaseName' connectionString)' "put-connection-string"); " is 161.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,ResetEtl,The length of the statement  "            await DatabaseConfigurations((_' databaseName' etlConfiguration) => ServerStore.RemoveEtlProcessState(_' databaseName' configurationName' transformationName)' "etl-reset"); " is 172.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,AddEtl,The length of the statement  "                await DatabaseConfigurations((_' databaseName' etlConfiguration) => ServerStore.AddEtl(_' databaseName' etlConfiguration)' "etl-add"' " is 133.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,AddEtl,The length of the statement  "                    beforeSetupConfiguration: AssertCanAddOrUpdateEtl' fillJson: (json' _' index) => json[nameof(EtlConfiguration<ConnectionString>.TaskId)] = index); " is 146.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,CollectEtlTasks,The length of the statement  "                            $"Could not find connection string named '{ravenEtl.ConnectionStringName}' in the database record for '{ravenEtl.Name}' ETL"); " is 126.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,CollectEtlTasks,The length of the statement  "                            $"Could not find connection string named '{sqlEtl.ConnectionStringName}' in the database record for '{sqlEtl.Name}' ETL"); " is 122.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,GetOngoingTaskInfo,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(Database.Name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 150.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,GetOngoingTaskInfo,The length of the statement  "                            // Todo: here we'll need to talk with the running node? TaskConnectionStatus = subscriptionState.Disabled ? OngoingTaskConnectionStatus.NotActive : OngoingTaskConnectionStatus.Active' " is 183.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,ToggleTaskState,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(Database.Name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 150.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,UpdateExternalReplication,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(Database.Name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 150.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,UpdateExternalReplication,The length of the statement  "                await DatabaseConfigurations((_' databaseName' blittableJson) => ServerStore.UpdateExternalReplication(databaseName' blittableJson' out watcher)' "update_external_replication"' " is 176.
Long Statement,Raven.Server.Web.System,OngoingTasksHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,DeleteOngoingTask,The length of the statement  "            if (ResourceNameValidator.IsValidResourceName(Database.Name' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false) " is 150.
Long Statement,Raven.Server.Web.System,ResourceNameValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\ResourceNameValidator.cs,IsValidResourceName,The length of the statement  "                int maxfileNameLength = theoreticalMaxFileNameLength > LinuxMaxFileNameLength ? LinuxMaxFileNameLength : theoreticalMaxFileNameLength; " is 134.
Long Statement,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,DnsCertBridge,The length of the statement  "            var action = GetQueryStringValueAndAssertIfSingleAndNotEmpty("action"); // Action can be: claim | user-domains | check-availability " is 131.
Long Statement,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,UserDomains,The length of the statement  "                var response = await ApiHttpClient.Instance.PostAsync("/api/v1/dns-n-cert/user-domains"' content).ConfigureAwait(false); " is 120.
Long Statement,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,GetHosts,The length of the statement  "                    throw new BadRequestException($"Failed to extract CN and SAN from certificate {certificate?.FriendlyName}. Maybe password is wrong?"' e); " is 137.
Long Statement,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,SetupUnsecured,The length of the statement  "                jsonObj[RavenConfiguration.GetKey(x => x.Security.UnsecuredAccessAllowed)] = nameof(UnsecuredAccessAddressRange.PublicNetwork); // TODO handle server side. " is 155.
Long Statement,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,SetupUnsecured,The length of the statement  "                jsonObj[RavenConfiguration.GetKey(x => x.Core.ServerUrls)] = string.Join(";"' setupInfo.Addresses.Select(ip => IpAddressToUrl(ip' setupInfo.Port))); " is 148.
Long Statement,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,GetStudioFileInternal,The length of the statement  "#pragma warning disable CS4014 // Because this call is not awaited' execution of the current method continues before the call is completed " is 138.
Long Statement,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,GetStudioFileInternal,The length of the statement  "#pragma warning restore CS4014 // Because this call is not awaited' execution of the current method continues before the call is completed " is 138.
Long Statement,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,ServeFromFileSystem,The length of the statement  "            var fileETag = GenerateETagFor(ETagFileSystemFileSource' serverRelativeFileName.GetHashCode()' staticFileInfo.LastWriteTimeUtc.Ticks); " is 134.
Long Statement,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,ServeFromZipFile,The length of the statement  "            if (ParseETag(out string eTagFileSource' out long eTagFileVersion) && eTagFileSource == ETagZipFileSource && eTagFileVersion == _zipFileLastChangeTicks) " is 152.
Long Statement,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,ServeFromZipFile,The length of the statement  "                var zipEntry = zipArchive.Entries.FirstOrDefault(a => a.FullName.Equals(serverRelativeFileName' StringComparison.OrdinalIgnoreCase)); " is 133.
Long Statement,Raven.Server.Web.System,TestConnectionHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\TestConnectionHandler.cs,TestConnection,The length of the statement  "                    throw new TimeoutException($"Waited for {ServerStore.Configuration.Cluster.OperationTimeout.AsTimeSpan} to receive tcp info from {url} and got no response"); " is 157.
Long Statement,Raven.Server.Web.System,TestConnectionHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\TestConnectionHandler.cs,TestConnection,The length of the statement  "                result = await ConnectToClientNodeAsync(connectionInfo.Result' ServerStore.Engine.TcpConnectionTimeout' LoggingSource.Instance.GetLogger("testing-connection"' "testing-connection")); " is 182.
Long Statement,Raven.Server.Web.System,TestConnectionHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\TestConnectionHandler.cs,ConnectToClientNodeAsync,The length of the statement  "                    using (var responseJson = await ctx.ReadForMemoryAsync(connection' $"TestConnectionHandler/{tcpConnectionInfo.Url}/Read-Handshake-Response")) " is 141.
Long Statement,Raven.Server.Web.System,TestConnectionHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\TestConnectionHandler.cs,ConnectToClientNodeAsync,The length of the statement  "                                result["Error"] = $"Connection to {tcpConnectionInfo.Url} failed because of authorization failure: {headerResponse.Message}"; " is 125.
Long Statement,Raven.Server.Web.System,TestConnectionHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\TestConnectionHandler.cs,ConnectToClientNodeAsync,The length of the statement  "                                result["Error"] = $"Connection to {tcpConnectionInfo.Url} failed because of mismatching tcp version {headerResponse.Message}"; " is 126.
Complex Conditional,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,UpdateNodesInfoInternal,The conditional expression  "nodeDetailsExist &&                          nodeDetails.NumberOfCores == numberOfCores &&                          nodeDetails.UsableMemoryInGb.Equals(usableMemoryInGb) &&                          nodeDetails.InstalledMemoryInGb.Equals(installedMemoryInGb)"  is complex.
Complex Conditional,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,ValidateServerCanRunWithSuppliedSettings,The conditional expression  "ips.Length == 0 && currentIps.Length == 1 &&                          (Equals(currentIps[0]' IPAddress.Any) || Equals(currentIps[0]' IPAddress.IPv6Any))"  is complex.
Complex Conditional,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,ValidateSetupInfo,The conditional expression  "string.IsNullOrWhiteSpace(node.Key) || node.Key.Length != 1 || !char.IsLetter(node.Key[0]) || !char.IsUpper(node.Key[0])"  is complex.
Complex Conditional,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachment,The conditional expression  "document != null &&                          document.TryGetMetadata(out var metadata) &&                          metadata.TryGet(Constants.Documents.Metadata.ChangeVector' out string exitingDocumentCv) &&                          exitingDocumentCv == changeVector"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e'"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y'"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d'"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e'"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n'"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "(value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y')"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n'"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "(*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557)"  is complex.
Complex Conditional,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The conditional expression  "*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109"  is complex.
Complex Conditional,Raven.Server.Documents,CollectionName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionName.cs,IsHiLoCollection,The conditional expression  "buffer[0] != (byte)'@' ||                  buffer[1] != (byte)'h' && buffer[1] != (byte)'H' ||                  buffer[2] != (byte)'i' && buffer[2] != (byte)'I' ||                  buffer[3] != (byte)'l' && buffer[3] != (byte)'L' ||                  buffer[4] != (byte)'o' && buffer[4] != (byte)'O'"  is complex.
Complex Conditional,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,AssertMetadataWasFiltered,The conditional expression  "names.Contains(Constants.Documents.Metadata.Id' StringComparer.OrdinalIgnoreCase) ||                  names.Contains(Constants.Documents.Metadata.LastModified' StringComparer.OrdinalIgnoreCase) ||                  names.Contains(Constants.Documents.Metadata.IndexScore' StringComparer.OrdinalIgnoreCase) ||                  names.Contains(Constants.Documents.Metadata.ChangeVector' StringComparer.OrdinalIgnoreCase) ||                  names.Contains(Constants.Documents.Metadata.Flags' StringComparer.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,IncrementToken,The conditional expression  "type == APOSTROPHE_TYPE && bufferLength >= 2 && buffer[bufferLength - 2] == '\'' && (buffer[bufferLength - 1] == 's' || buffer[bufferLength - 1] == 'S')"  is complex.
Complex Conditional,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetValueType,The conditional expression  "value is LazyNumberValue || value is double || value is decimal || value is float"  is complex.
Complex Conditional,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateField,The conditional expression  "(lazyValue != null || blittableValue != null) && store.IsStored() == false && index.IsIndexed() && index.IsAnalyzed()"  is complex.
Complex Conditional,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateField,The conditional expression  "(lazyValue != null || blittableValue != null) && store.IsStored() == false && index.IsIndexed() && index.IsAnalyzed()"  is complex.
Complex Conditional,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,IsSame,The conditional expression  "_index != index || _store != store || _termVector != termVector || !string.Equals(_name' name)"  is complex.
Complex Conditional,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,IsSame,The conditional expression  "_index != index || _store != store || _termVector != termVector || !string.Equals(_name' name)"  is complex.
Complex Conditional,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKeyEqualityComparer<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKeyEqualityComparer.cs,Equals,The conditional expression  "x._index != y._index || x._store != y._store || x._termVector != y._termVector || !string.Equals(x._name' y._name)"  is complex.
Complex Conditional,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,MethodDetectorRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\MethodDetectorRewriter.cs,VisitObjectCreationExpression,The conditional expression  "type == nameof(Field) || type == nameof(NumericField) || type == typeof(Field).FullName || type == typeof(NumericField).FullName"  is complex.
Complex Conditional,Raven.Server.Documents.Patch,JintPreventResolvingTasksReferenceResolver,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\JintPreventResolvingTasksReferenceResolver.cs,TryPropertyReference,The conditional expression  "value.IsObject() &&                  value.AsObject() is ObjectWrapper objectWrapper &&                  objectWrapper.Target is Task task &&                  reference.GetReferencedName() == nameof(Task<int>.Result) &&                  task.IsCompleted == false"  is complex.
Complex Conditional,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,LoadDocumentByPath,The conditional expression  "args.Length != 2 ||                      (args[0].IsNull() == false && args[0].IsUndefined() == false && args[0].IsObject() == false)                      || args[1].IsString() == false"  is complex.
Complex Conditional,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,IsFullBackup,The conditional expression  "backupStatus.LastFullBackup == null ||                  backupStatus.NodeTag != _serverStore.NodeTag ||                  backupStatus.BackupType != configuration.BackupType ||                  backupStatus.LastEtag == null"  is complex.
Complex Conditional,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,RunPeriodicBackup,The conditional expression  "isFullBackup ||                          previousBackupStatus.LastFullBackup == null || // no full backup was previously performed                          previousBackupStatus.NodeTag != _serverStore.NodeTag || // last backup was performed by a different node                          previousBackupStatus.BackupType != configuration.BackupType || // backup type has changed                          previousBackupStatus.LastEtag == null || // last document etag wasn't updated                          backupToLocalFolder && DirectoryContainsFullBackupOrSnapshot(previousBackupStatus.LocalBackup.BackupDirectory' configuration.BackupType) == false"  is complex.
Complex Conditional,Raven.Server.Documents.Queries,RetrieveDocumentIdsVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,VisitBetween,The conditional expression  "fieldName is MethodExpression me && string.Equals("id"' me.Name' StringComparison.OrdinalIgnoreCase) && firstValue is ValueExpression fv && secondValue is ValueExpression sv"  is complex.
Complex Conditional,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ExtractIndexFieldName,The conditional expression  "me.Arguments != null && me.Arguments.Count == 1 &&                              me.Arguments[0] is FieldExpression f &&                              f.Compound.Count == 1"  is complex.
Complex Conditional,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,AddWhereField,The conditional expression  "search || exact || spatial != null || operatorType != OperatorType.Equal || (operatorType == OperatorType.Equal && isNegated)"  is complex.
Complex Conditional,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,CreateFacet,The conditional expression  "name == null && i == 0 && (argument is FieldExpression || argument is ValueExpression)"  is complex.
Complex Conditional,Raven.Server.Documents.Queries,QueryMetadataCache,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadataCache.cs,TryGetMetadata,The conditional expression  "query == null || query.Query == null || query.QueryParameters == null || query.QueryParameters.Count == 0"  is complex.
Complex Conditional,Raven.Server.Documents.Queries.Facets,ParsedRange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetedQueryParser.cs,IsMatch,The conditional expression  "compareLow == 0 && LowInclusive == false ||                      compareHigh == 0 && HighInclusive == false"  is complex.
Complex Conditional,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,Identifier,The conditional expression  "TokenLength == 1 && (_q[TokenStart] == '@' || TokenStart+1<_q.Length && _q[TokenStart] == '_' && _q[TokenStart+1] == '@')"  is complex.
Complex Conditional,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,ExecuteReplicationOnce,The conditional expression  "(item.Type == ReplicationBatchItem.ReplicationItemType.Document ||                                       item.Type == ReplicationBatchItem.ReplicationItemType.DocumentTombstone) &&                                      // We want to limit batch sizes to reasonable limits.                                      ((maxSizeToSend.HasValue && size > maxSizeToSend.Value.GetValue(SizeUnit.Bytes)) ||                                       (batchSize.HasValue && numberOfItemsSent > batchSize.Value))"  is complex.
Complex Conditional,Raven.Server.Json,BlittableJsonTraverserHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverserHelper.cs,TryReadComputedProperties,The conditional expression  "leftPath == "Length" || leftPath == "length" ||                  leftPath == "Count" || leftPath == "count""  is complex.
Complex Conditional,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,TryModifyTopology,The conditional expression  "validateNotInTopology && (nodeTag != null && clusterTopology.Contains(nodeTag) || clusterTopology.TryGetNodeTagByUrl(nodeUrl).HasUrl)"  is complex.
Complex Conditional,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,OnStateChanged,The conditional expression  "state.From == RachisState.Passive || state.To == RachisState.Passive ||                       state.From == RachisState.Candidate || state.To == RachisState.Candidate"  is complex.
Complex Conditional,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,IdleOperations,The conditional expression  "DatabasesLandlord.DatabasesCache.TryGetValue(db' out Task<DocumentDatabase> resourceTask) &&                              resourceTask != null &&                              resourceTask.Status == TaskStatus.RanToCompletion &&                              resourceTask.Result.PeriodicBackupRunner != null &&                              resourceTask.Result.PeriodicBackupRunner.HasRunningBackups()"  is complex.
Complex Conditional,Raven.Server.ServerWide.Context,DocumentsOperationContext,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsOperationContext.cs,CreateWriteTransaction,The conditional expression  "(options.TransactionsMode == TransactionsMode.Lazy || options.TransactionsMode == TransactionsMode.Danger) &&                  options.NonSafeTransactionExpiration != null && options.NonSafeTransactionExpiration < DateTime.Now"  is complex.
Complex Conditional,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,UpdateDatabaseTopology,The conditional expression  "current.TryGetValue(member' out var nodeStats) &&                      nodeStats.Status == ClusterNodeStatusReport.ReportStatus.Ok &&                      nodeStats.Report.TryGetValue(dbName' out var dbStats) &&                      dbStats.Status == Loaded"  is complex.
Complex Conditional,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,TryMoveToRehab,The conditional expression  "current.TryGetValue(member' out var nodeStats) &&                  nodeStats.Status == ClusterNodeStatusReport.ReportStatus.Ok &&                  nodeStats.Report.TryGetValue(dbName' out dbStats) && dbStats.Status != Faulted"  is complex.
Complex Conditional,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ParseValue,The conditional expression  "(s.Length == 4 && s[0] == 't' || s.Length == 5 && s[0] == 'f') && bool.TryParse(s' out var b)"  is complex.
Complex Conditional,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,CanSkipDocument,The conditional expression  "document.Id.Size != 34 && document.Id.Size != 62 &&                  document.Id.Size != 27 && document.Id.Size != 19"  is complex.
Complex Conditional,Raven.Server.Smuggler.Documents,StreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\StreamSource.cs,ReadConflicts,The conditional expression  "data.TryGet(nameof(DocumentConflict.Id)' out conflict.Id) &&                           data.TryGet(nameof(DocumentConflict.Collection)' out conflict.Collection) &&                           data.TryGet(nameof(DocumentConflict.Flags)' out string flags) &&                           data.TryGet(nameof(DocumentConflict.ChangeVector)' out conflict.ChangeVector) &&                           data.TryGet(nameof(DocumentConflict.Etag)' out conflict.Etag) &&                           data.TryGet(nameof(DocumentConflict.LastModified)' out conflict.LastModified) &&                           data.TryGet(nameof(DocumentConflict.Doc)' out conflict.Doc)"  is complex.
Complex Conditional,Raven.Server.Smuggler.Documents.Processors,BuildVersion,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Processors\BuildVersion.cs,Type,The conditional expression  "buildVersion >= 40000 && buildVersion <= 49999 || buildVersion == 40 || buildVersion == 45"  is complex.
Complex Conditional,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,CalculateLinuxCpuUsage,The conditional expression  "linuxInfo.TotalUserTime >= _previousLinuxInfo.TotalUserTime &&                  linuxInfo.TotalUserLowTime >= _previousLinuxInfo.TotalUserLowTime &&                  linuxInfo.TotalSystemTime >= _previousLinuxInfo.TotalSystemTime &&                  linuxInfo.TotalIdleTime >= _previousLinuxInfo.TotalIdleTime"  is complex.
Complex Conditional,Raven.Server.Utils,TypeConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\TypeConverter.cs,ToBlittableSupportedType,The conditional expression  "value is int || value is long || value is double || value is decimal || value is float"  is complex.
Complex Conditional,Raven.Server.Web.System,ResourceNameValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\ResourceNameValidator.cs,IsValidResourceName,The conditional expression  "(RuntimeInformation.IsOSPlatform(OSPlatform.Linux) || RuntimeInformation.IsOSPlatform(OSPlatform.OSX)) &&                  ((name.Length > LinuxMaxFileNameLength) ||                  (dataDirectory.Length + name.Length > LinuxMaxPath))"  is complex.
Virtual Method Call from Constructor,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,IndexStorage,The constructor "IndexStorage" calls a virtual method "GetReferencedCollections".
Empty Catch Block,Raven.Server.Background,BackgroundWorkBase,C:\repos\ravendb_ravendb\src\Raven.Server\Background\BackgroundWorkBase.cs,Run,The method has an empty catch block.
Empty Catch Block,Raven.Server.Background,BackgroundWorkBase,C:\repos\ravendb_ravendb\src\Raven.Server\Background\BackgroundWorkBase.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,TrySaveLetEncryptCachedDetails,The method has an empty catch block.
Empty Catch Block,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupLetsEncryptAccount,The method has an empty catch block.
Empty Catch Block,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,ActuallyCreateDatabase,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,UnloadResourceOnCatastrophicFailure,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,Enqueue,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,MergeOperationThreadProc,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Handlers,ChangesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ChangesHandler.cs,GetChanges,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,TryReplaceIndexes,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,TryReplaceIndexes,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Indexes.Static,IndexCompiler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\IndexCompiler.cs,HandleSyntaxInMap,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Operations,Operations,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Operations\Operations.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,WaitForTaskCompletion,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.PeriodicBackup,PeriodicBackupRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\PeriodicBackupRunner.cs,WaitForTaskCompletion,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,CleanupSupercededAutoIndexes,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,CleanupSupercededAutoIndexes,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Start,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,HandleSingleReplicationBatch,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,MergedUpdateDatabaseChangeVectorCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,Execute,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,InterruptibleRead,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\InterruptibleRead.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,LiveReplicationPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\LiveReplicationPerformanceCollector.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,UpdateSiblingCurrentEtag,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,Execute,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AcceptIncomingConnection,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,AcceptIncomingConnection,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Subscriptions,SubscriptionConnectionState,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionConnectionState.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.Subscriptions,SubscriptionStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionStorage.cs,DropSubscriptionConnection,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,SendSubscriptionDocuments,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,RegisterForNotificationOnNewDocuments,The method has an empty catch block.
Empty Catch Block,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Extensions,WhoIsLocking,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,The method has an empty catch block.
Empty Catch Block,Raven.Server.NotificationCenter,NotificationCenter,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationCenter.cs,Add,The method has an empty catch block.
Empty Catch Block,Raven.Server.NotificationCenter,NotificationCenterWebSocketWriter,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationCenterWebsocketWriter.cs,WriteNotifications,The method has an empty catch block.
Empty Catch Block,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The method has an empty catch block.
Empty Catch Block,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,Elector,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Elector.cs,HandleVoteRequest,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,Elector,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Elector.cs,HandleVoteRequest,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,Elector,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Elector.cs,HandleVoteRequest,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,Run,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,Run,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,Run,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,SetNewStateInTx,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AcceptNewConnection,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AcceptNewConnection,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,AcceptNewConnection,The method has an empty catch block.
Empty Catch Block,Raven.Server.Rachis,TimeoutEvent,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\TimeoutEvent.cs,ExecuteTimeoutBehavior,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,ClusterMaintenanceSetupTask,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,IdleOperations,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide.Maintenance,ClusterMaintenanceSupervisor,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide.Maintenance,ClusterMaintenanceSupervisor,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ListenToMaintenanceWorker,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,AnalyzeLatestStats,The method has an empty catch block.
Empty Catch Block,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,BulkImport,The method has an empty catch block.
Empty Catch Block,Raven.Server.TrafficWatch,TrafficWatchConnection,C:\repos\ravendb_ravendb\src\Raven.Server\TrafficWatch\TrafficWatchConnection.cs,StartSendingNotifications,The method has an empty catch block.
Empty Catch Block,Raven.Server.TrafficWatch,TrafficWatchHandler,C:\repos\ravendb_ravendb\src\Raven.Server\TrafficWatch\TrafficWatchHandler.cs,TrafficWatchWebsockets,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,IOExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IOExtensions.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,IOExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IOExtensions.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,IOExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IOExtensions.cs,DeleteDirectory,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,IOExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IOExtensions.cs,DeleteDirectory,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,IOExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IOExtensions.cs,SetDirectoryAttributes,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,IOExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IOExtensions.cs,SetDirectoryAttributes,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,ListenToAdminConsolePipe,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,ListenToLogStreamPipe,The method has an empty catch block.
Empty Catch Block,Raven.Server.Utils,PosixFile,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\PosixFile.cs,DeleteOnClose,The method has an empty catch block.
Empty Catch Block,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,SetupUnsecured,The method has an empty catch block.
Empty Catch Block,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,FindRootBasePath,The method has an empty catch block.
Empty Catch Block,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,ReprocessZipFile,The method has an empty catch block.
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,Initialize,The following statement contains a magic number: try              {                  _licenseStorage.Initialize(environment' contextPool);                    var firstServerStartDate = _licenseStorage.GetFirstServerStartDate();                  if (firstServerStartDate == null)                  {                      firstServerStartDate = SystemTime.UtcNow;                      _licenseStorage.SetFirstServerStartDate(firstServerStartDate.Value);                  }                    _licenseStatus.FirstServerStartDate = firstServerStartDate.Value;                    ReloadLicense();                  ReloadLicenseLimits();              }              catch (Exception e)              {                  if (Logger.IsOperationsEnabled)                      Logger.Operations("Failed to initialize license manager"' e);              }              finally              {                  _leaseLicenseTimer = new Timer(state =>                      AsyncHelpers.RunSync(ExecuteTasks)' null'                      (int)TimeSpan.FromMinutes(1).TotalMilliseconds'                      (int)TimeSpan.FromHours(24).TotalMilliseconds);              }
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,ChangeLicenseLimits,The following statement contains a magic number: if (_licenseLimitsSemaphore.Wait(1000 * 10) == false)                  throw new TimeoutException("License limit change is already in progress. " +                                             "Please try again later.");
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,ChangeLicenseLimits,The following statement contains a magic number: if (_licenseLimitsSemaphore.Wait(1000 * 10) == false)                  throw new TimeoutException("License limit change is already in progress. " +                                             "Please try again later.");
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,CalculateLicenseLimits,The following statement contains a magic number: if (_licenseLimitsSemaphore.Wait(waitToUpdate ? 500 : 0) == false)                  return;
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,UpdateNodesInfo,The following statement contains a magic number: if (_licenseLimitsSemaphore.Wait(10 * 1000) == false)                  return;
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,UpdateNodesInfo,The following statement contains a magic number: if (_licenseLimitsSemaphore.Wait(10 * 1000) == false)                  return;
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,NumberOfSetBits,The following statement contains a magic number: i = (i & 0x3333333333333333) + ((i >> 2) & 0x3333333333333333);
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,NumberOfSetBits,The following statement contains a magic number: return (((i + (i >> 4)) & 0xF0F0F0F0F0F0F0F) * 0x101010101010101) >> 56;
Magic Number,Raven.Server.Commercial,LicenseManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseManager.cs,NumberOfSetBits,The following statement contains a magic number: return (((i + (i >> 4)) & 0xF0F0F0F0F0F0F0F) * 0x101010101010101) >> 56;
Magic Number,Raven.Server.Commercial,LicenseStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseStorage.cs,Initialize,The following statement contains a magic number: using (contextPool.AllocateOperationContext(out TransactionOperationContext context))              using (var tx = _environment.WriteTransaction(context.PersistentContext))              {                  _licenseStorageSchema.Create(tx' LicenseInfoSchema.LicenseTree' 16);                    tx.Commit();              }
Magic Number,Raven.Server.Commercial,LicenseValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseValidator.cs,FromDosDate,The following statement contains a magic number: var year = (number >> 9) + 1980;
Magic Number,Raven.Server.Commercial,LicenseValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseValidator.cs,FromDosDate,The following statement contains a magic number: var year = (number >> 9) + 1980;
Magic Number,Raven.Server.Commercial,LicenseValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseValidator.cs,FromDosDate,The following statement contains a magic number: var month = (number & 0x01e0) >> 5;
Magic Number,Raven.Server.Commercial,LicenseValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseValidator.cs,ExtractKeys,The following statement contains a magic number: var attributes = keysByteArray.Skip(128).Take(keysByteArray.Length - 128).ToArray();
Magic Number,Raven.Server.Commercial,LicenseValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseValidator.cs,ExtractKeys,The following statement contains a magic number: var attributes = keysByteArray.Skip(128).Take(keysByteArray.Length - 128).ToArray();
Magic Number,Raven.Server.Commercial,LicenseValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\LicenseValidator.cs,ExtractKeys,The following statement contains a magic number: Array.Resize(ref keysByteArray' 128);
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupSecuredTask,The following statement contains a magic number: var progress = new SetupProgressAndResult              {                  Processed = 0'                  Total = 2              };
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SetupLetsEncryptTask,The following statement contains a magic number: var progress = new SetupProgressAndResult              {                  Processed = 0'                  Total = 4              };
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,InitialLetsEncryptChallenge,The following statement contains a magic number: try              {                  var key = await SetupLetsEncryptAccount(setupInfo' cache' acmeClient' serverStore);                    // if the cache has less than 3 days' regenerate                  // intentionally using DateTime.Now' because the NotBefore / NotAfter are                   // using local time' it seems' and we want to avoid generating a new cert                  // at the same day                  if (cache?.CertificateInstance != null &&                      cache.CertificateInstance.NotBefore <= DateTime.Now &&                      cache.CertificateInstance.NotAfter > DateTime.Now.AddDays(3))                  {                      if (string.Equals(cache.Domain' setupInfo.Domain' StringComparison.OrdinalIgnoreCase))                      {                          var names = GetCertificateAlternativeNames(cache.CertificateInstance).ToArray();                          var allExists = setupInfo.NodeSetupInfos.Keys.All(sd =>                          {                              var host = BuildHostName(sd' setupInfo.Domain);                              return names.Contains(host' StringComparer.OrdinalIgnoreCase);                          });                          if (allExists)                              return (null' key);                      }                  }                      foreach (var tag in setupInfo.NodeSetupInfos)                  {                      var host = BuildHostName(tag.Key' setupInfo.Domain);                      var authz = acmeClient.NewAuthorization(new AuthorizationIdentifier                      {                          Type = AuthorizationIdentifierTypes.Dns'                          Value = host                      }).ContinueWith(t => { return t.Result.Data.Challenges.First(c => c.Type == ChallengeTypes.Dns01); }' token);                      dictionary[tag.Key] = authz;                  }                    await Task.WhenAll(dictionary.Values.ToArray());                  return (dictionary.ToDictionary(x => x.Key.ToString()' x => acmeClient.ComputeDnsValue(x.Value.Result))' key);              }              catch (Exception e)              {                  throw new InvalidOperationException("Failed to receive challenge(s) information from Let's Encrypt."' e);              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsForCertificateRefreshTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Challenge = map[node.Key]                      };                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                    var serializeObject = JsonConvert.SerializeObject(registrationInfo);                    if (Logger.IsOperationsEnabled)                      Logger.Operations("Start update process for certificate: " + serializeObject);                    HttpResponseMessage response;                  try                  {                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                        } while (registrationResult.Status == "PENDING");                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsForCertificateRefreshTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Challenge = map[node.Key]                      };                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                    var serializeObject = JsonConvert.SerializeObject(registrationInfo);                    if (Logger.IsOperationsEnabled)                      Logger.Operations("Start update process for certificate: " + serializeObject);                    HttpResponseMessage response;                  try                  {                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                        } while (registrationResult.Status == "PENDING");                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Ips = node.Value.Addresses                      };                        if (map == null)                      {                          // this means that we already have a cached certificate' so we just need to check if we need to update                          // the DNS records.                          try                          {                              var existing = Dns.GetHostAddresses(BuildHostName(node.Key' setupInfo.Domain))                                  .Select(ip => ip.ToString())                                  .ToList();                              if (node.Value.Addresses.All(existing.Contains))                                  continue; // we can skip this                          }                          catch (Exception)                          {                              // it is expected that this won't exists                          }                          regNodeInfo.Challenge = "dummy value";                      }                      else                      {                          regNodeInfo.Challenge = map[node.Key];                      }                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                  progress.AddInfo($"Creating DNS record/challenge for node(s): {string.Join("' "' setupInfo.NodeSetupInfos.Keys)}.");                    onProgress(progress);                    if (registrationInfo.SubDomains.Count == 0)                  {                      // no need to update anything' can skip doing DNS update                      progress.AddInfo("Cached DNS values matched' skipping DNS update");                      return;                  }                      var serializeObject = JsonConvert.SerializeObject(registrationInfo);                  HttpResponseMessage response;                  try                  {                      progress.AddInfo("Registering DNS record(s)/challenge(s) in api.ravendb.net.");                      progress.AddInfo("Please wait between 30 seconds and a few minutes' depending on the number of domains(nodes).");                      onProgress(progress);                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                      progress.AddInfo("Waiting for DNS records to update...");                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      if (map == null && registrationInfo.SubDomains.Exists(x => x.SubDomain.StartsWith("A."' StringComparison.OrdinalIgnoreCase)) == false)                  {                      progress.AddInfo("DNS update started successfully' since current node (A) DNS record didn't change' not waiting for full DNS propogation.");                      return;                  }                    var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      var i = 1;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                            if (i % 120 == 0)                              progress.AddInfo("This is taking too long' you might want to abort and restart if this goes on like this...");                          else if (i % 45 == 0)                              progress.AddInfo("If everything goes all right' we should be nearly there...");                          else if (i % 30 == 0)                              progress.AddInfo("The DNS update is still pending' carry on just a little bit longer...");                          else if (i % 15 == 0)                              progress.AddInfo("Please be patient' updating DNS records takes time...");                          else if (i % 5 == 0)                              progress.AddInfo("Waiting...");                            onProgress(progress);                            i++;                      } while (registrationResult.Status == "PENDING");                      progress.AddInfo("Got successful response from api.ravendb.net.");                      onProgress(progress);                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Ips = node.Value.Addresses                      };                        if (map == null)                      {                          // this means that we already have a cached certificate' so we just need to check if we need to update                          // the DNS records.                          try                          {                              var existing = Dns.GetHostAddresses(BuildHostName(node.Key' setupInfo.Domain))                                  .Select(ip => ip.ToString())                                  .ToList();                              if (node.Value.Addresses.All(existing.Contains))                                  continue; // we can skip this                          }                          catch (Exception)                          {                              // it is expected that this won't exists                          }                          regNodeInfo.Challenge = "dummy value";                      }                      else                      {                          regNodeInfo.Challenge = map[node.Key];                      }                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                  progress.AddInfo($"Creating DNS record/challenge for node(s): {string.Join("' "' setupInfo.NodeSetupInfos.Keys)}.");                    onProgress(progress);                    if (registrationInfo.SubDomains.Count == 0)                  {                      // no need to update anything' can skip doing DNS update                      progress.AddInfo("Cached DNS values matched' skipping DNS update");                      return;                  }                      var serializeObject = JsonConvert.SerializeObject(registrationInfo);                  HttpResponseMessage response;                  try                  {                      progress.AddInfo("Registering DNS record(s)/challenge(s) in api.ravendb.net.");                      progress.AddInfo("Please wait between 30 seconds and a few minutes' depending on the number of domains(nodes).");                      onProgress(progress);                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                      progress.AddInfo("Waiting for DNS records to update...");                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      if (map == null && registrationInfo.SubDomains.Exists(x => x.SubDomain.StartsWith("A."' StringComparison.OrdinalIgnoreCase)) == false)                  {                      progress.AddInfo("DNS update started successfully' since current node (A) DNS record didn't change' not waiting for full DNS propogation.");                      return;                  }                    var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      var i = 1;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                            if (i % 120 == 0)                              progress.AddInfo("This is taking too long' you might want to abort and restart if this goes on like this...");                          else if (i % 45 == 0)                              progress.AddInfo("If everything goes all right' we should be nearly there...");                          else if (i % 30 == 0)                              progress.AddInfo("The DNS update is still pending' carry on just a little bit longer...");                          else if (i % 15 == 0)                              progress.AddInfo("Please be patient' updating DNS records takes time...");                          else if (i % 5 == 0)                              progress.AddInfo("Waiting...");                            onProgress(progress);                            i++;                      } while (registrationResult.Status == "PENDING");                      progress.AddInfo("Got successful response from api.ravendb.net.");                      onProgress(progress);                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Ips = node.Value.Addresses                      };                        if (map == null)                      {                          // this means that we already have a cached certificate' so we just need to check if we need to update                          // the DNS records.                          try                          {                              var existing = Dns.GetHostAddresses(BuildHostName(node.Key' setupInfo.Domain))                                  .Select(ip => ip.ToString())                                  .ToList();                              if (node.Value.Addresses.All(existing.Contains))                                  continue; // we can skip this                          }                          catch (Exception)                          {                              // it is expected that this won't exists                          }                          regNodeInfo.Challenge = "dummy value";                      }                      else                      {                          regNodeInfo.Challenge = map[node.Key];                      }                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                  progress.AddInfo($"Creating DNS record/challenge for node(s): {string.Join("' "' setupInfo.NodeSetupInfos.Keys)}.");                    onProgress(progress);                    if (registrationInfo.SubDomains.Count == 0)                  {                      // no need to update anything' can skip doing DNS update                      progress.AddInfo("Cached DNS values matched' skipping DNS update");                      return;                  }                      var serializeObject = JsonConvert.SerializeObject(registrationInfo);                  HttpResponseMessage response;                  try                  {                      progress.AddInfo("Registering DNS record(s)/challenge(s) in api.ravendb.net.");                      progress.AddInfo("Please wait between 30 seconds and a few minutes' depending on the number of domains(nodes).");                      onProgress(progress);                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                      progress.AddInfo("Waiting for DNS records to update...");                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      if (map == null && registrationInfo.SubDomains.Exists(x => x.SubDomain.StartsWith("A."' StringComparison.OrdinalIgnoreCase)) == false)                  {                      progress.AddInfo("DNS update started successfully' since current node (A) DNS record didn't change' not waiting for full DNS propogation.");                      return;                  }                    var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      var i = 1;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                            if (i % 120 == 0)                              progress.AddInfo("This is taking too long' you might want to abort and restart if this goes on like this...");                          else if (i % 45 == 0)                              progress.AddInfo("If everything goes all right' we should be nearly there...");                          else if (i % 30 == 0)                              progress.AddInfo("The DNS update is still pending' carry on just a little bit longer...");                          else if (i % 15 == 0)                              progress.AddInfo("Please be patient' updating DNS records takes time...");                          else if (i % 5 == 0)                              progress.AddInfo("Waiting...");                            onProgress(progress);                            i++;                      } while (registrationResult.Status == "PENDING");                      progress.AddInfo("Got successful response from api.ravendb.net.");                      onProgress(progress);                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Ips = node.Value.Addresses                      };                        if (map == null)                      {                          // this means that we already have a cached certificate' so we just need to check if we need to update                          // the DNS records.                          try                          {                              var existing = Dns.GetHostAddresses(BuildHostName(node.Key' setupInfo.Domain))                                  .Select(ip => ip.ToString())                                  .ToList();                              if (node.Value.Addresses.All(existing.Contains))                                  continue; // we can skip this                          }                          catch (Exception)                          {                              // it is expected that this won't exists                          }                          regNodeInfo.Challenge = "dummy value";                      }                      else                      {                          regNodeInfo.Challenge = map[node.Key];                      }                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                  progress.AddInfo($"Creating DNS record/challenge for node(s): {string.Join("' "' setupInfo.NodeSetupInfos.Keys)}.");                    onProgress(progress);                    if (registrationInfo.SubDomains.Count == 0)                  {                      // no need to update anything' can skip doing DNS update                      progress.AddInfo("Cached DNS values matched' skipping DNS update");                      return;                  }                      var serializeObject = JsonConvert.SerializeObject(registrationInfo);                  HttpResponseMessage response;                  try                  {                      progress.AddInfo("Registering DNS record(s)/challenge(s) in api.ravendb.net.");                      progress.AddInfo("Please wait between 30 seconds and a few minutes' depending on the number of domains(nodes).");                      onProgress(progress);                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                      progress.AddInfo("Waiting for DNS records to update...");                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      if (map == null && registrationInfo.SubDomains.Exists(x => x.SubDomain.StartsWith("A."' StringComparison.OrdinalIgnoreCase)) == false)                  {                      progress.AddInfo("DNS update started successfully' since current node (A) DNS record didn't change' not waiting for full DNS propogation.");                      return;                  }                    var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      var i = 1;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                            if (i % 120 == 0)                              progress.AddInfo("This is taking too long' you might want to abort and restart if this goes on like this...");                          else if (i % 45 == 0)                              progress.AddInfo("If everything goes all right' we should be nearly there...");                          else if (i % 30 == 0)                              progress.AddInfo("The DNS update is still pending' carry on just a little bit longer...");                          else if (i % 15 == 0)                              progress.AddInfo("Please be patient' updating DNS records takes time...");                          else if (i % 5 == 0)                              progress.AddInfo("Waiting...");                            onProgress(progress);                            i++;                      } while (registrationResult.Status == "PENDING");                      progress.AddInfo("Got successful response from api.ravendb.net.");                      onProgress(progress);                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Ips = node.Value.Addresses                      };                        if (map == null)                      {                          // this means that we already have a cached certificate' so we just need to check if we need to update                          // the DNS records.                          try                          {                              var existing = Dns.GetHostAddresses(BuildHostName(node.Key' setupInfo.Domain))                                  .Select(ip => ip.ToString())                                  .ToList();                              if (node.Value.Addresses.All(existing.Contains))                                  continue; // we can skip this                          }                          catch (Exception)                          {                              // it is expected that this won't exists                          }                          regNodeInfo.Challenge = "dummy value";                      }                      else                      {                          regNodeInfo.Challenge = map[node.Key];                      }                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                  progress.AddInfo($"Creating DNS record/challenge for node(s): {string.Join("' "' setupInfo.NodeSetupInfos.Keys)}.");                    onProgress(progress);                    if (registrationInfo.SubDomains.Count == 0)                  {                      // no need to update anything' can skip doing DNS update                      progress.AddInfo("Cached DNS values matched' skipping DNS update");                      return;                  }                      var serializeObject = JsonConvert.SerializeObject(registrationInfo);                  HttpResponseMessage response;                  try                  {                      progress.AddInfo("Registering DNS record(s)/challenge(s) in api.ravendb.net.");                      progress.AddInfo("Please wait between 30 seconds and a few minutes' depending on the number of domains(nodes).");                      onProgress(progress);                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                      progress.AddInfo("Waiting for DNS records to update...");                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      if (map == null && registrationInfo.SubDomains.Exists(x => x.SubDomain.StartsWith("A."' StringComparison.OrdinalIgnoreCase)) == false)                  {                      progress.AddInfo("DNS update started successfully' since current node (A) DNS record didn't change' not waiting for full DNS propogation.");                      return;                  }                    var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      var i = 1;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                            if (i % 120 == 0)                              progress.AddInfo("This is taking too long' you might want to abort and restart if this goes on like this...");                          else if (i % 45 == 0)                              progress.AddInfo("If everything goes all right' we should be nearly there...");                          else if (i % 30 == 0)                              progress.AddInfo("The DNS update is still pending' carry on just a little bit longer...");                          else if (i % 15 == 0)                              progress.AddInfo("Please be patient' updating DNS records takes time...");                          else if (i % 5 == 0)                              progress.AddInfo("Waiting...");                            onProgress(progress);                            i++;                      } while (registrationResult.Status == "PENDING");                      progress.AddInfo("Got successful response from api.ravendb.net.");                      onProgress(progress);                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Ips = node.Value.Addresses                      };                        if (map == null)                      {                          // this means that we already have a cached certificate' so we just need to check if we need to update                          // the DNS records.                          try                          {                              var existing = Dns.GetHostAddresses(BuildHostName(node.Key' setupInfo.Domain))                                  .Select(ip => ip.ToString())                                  .ToList();                              if (node.Value.Addresses.All(existing.Contains))                                  continue; // we can skip this                          }                          catch (Exception)                          {                              // it is expected that this won't exists                          }                          regNodeInfo.Challenge = "dummy value";                      }                      else                      {                          regNodeInfo.Challenge = map[node.Key];                      }                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                  progress.AddInfo($"Creating DNS record/challenge for node(s): {string.Join("' "' setupInfo.NodeSetupInfos.Keys)}.");                    onProgress(progress);                    if (registrationInfo.SubDomains.Count == 0)                  {                      // no need to update anything' can skip doing DNS update                      progress.AddInfo("Cached DNS values matched' skipping DNS update");                      return;                  }                      var serializeObject = JsonConvert.SerializeObject(registrationInfo);                  HttpResponseMessage response;                  try                  {                      progress.AddInfo("Registering DNS record(s)/challenge(s) in api.ravendb.net.");                      progress.AddInfo("Please wait between 30 seconds and a few minutes' depending on the number of domains(nodes).");                      onProgress(progress);                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                      progress.AddInfo("Waiting for DNS records to update...");                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      if (map == null && registrationInfo.SubDomains.Exists(x => x.SubDomain.StartsWith("A."' StringComparison.OrdinalIgnoreCase)) == false)                  {                      progress.AddInfo("DNS update started successfully' since current node (A) DNS record didn't change' not waiting for full DNS propogation.");                      return;                  }                    var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      var i = 1;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                            if (i % 120 == 0)                              progress.AddInfo("This is taking too long' you might want to abort and restart if this goes on like this...");                          else if (i % 45 == 0)                              progress.AddInfo("If everything goes all right' we should be nearly there...");                          else if (i % 30 == 0)                              progress.AddInfo("The DNS update is still pending' carry on just a little bit longer...");                          else if (i % 15 == 0)                              progress.AddInfo("Please be patient' updating DNS records takes time...");                          else if (i % 5 == 0)                              progress.AddInfo("Waiting...");                            onProgress(progress);                            i++;                      } while (registrationResult.Status == "PENDING");                      progress.AddInfo("Got successful response from api.ravendb.net.");                      onProgress(progress);                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,UpdateDnsRecordsTask,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(15)).Token))              {                  var registrationInfo = new RegistrationInfo                  {                      License = setupInfo.License'                      Domain = setupInfo.Domain'                      SubDomains = new List<RegistrationNodeInfo>()                  };                    foreach (var node in setupInfo.NodeSetupInfos)                  {                      var regNodeInfo = new RegistrationNodeInfo                      {                          SubDomain = (node.Key + "." + setupInfo.Domain).ToLower()'                          Ips = node.Value.Addresses                      };                        if (map == null)                      {                          // this means that we already have a cached certificate' so we just need to check if we need to update                          // the DNS records.                          try                          {                              var existing = Dns.GetHostAddresses(BuildHostName(node.Key' setupInfo.Domain))                                  .Select(ip => ip.ToString())                                  .ToList();                              if (node.Value.Addresses.All(existing.Contains))                                  continue; // we can skip this                          }                          catch (Exception)                          {                              // it is expected that this won't exists                          }                          regNodeInfo.Challenge = "dummy value";                      }                      else                      {                          regNodeInfo.Challenge = map[node.Key];                      }                        registrationInfo.SubDomains.Add(regNodeInfo);                  }                  progress.AddInfo($"Creating DNS record/challenge for node(s): {string.Join("' "' setupInfo.NodeSetupInfos.Keys)}.");                    onProgress(progress);                    if (registrationInfo.SubDomains.Count == 0)                  {                      // no need to update anything' can skip doing DNS update                      progress.AddInfo("Cached DNS values matched' skipping DNS update");                      return;                  }                      var serializeObject = JsonConvert.SerializeObject(registrationInfo);                  HttpResponseMessage response;                  try                  {                      progress.AddInfo("Registering DNS record(s)/challenge(s) in api.ravendb.net.");                      progress.AddInfo("Please wait between 30 seconds and a few minutes' depending on the number of domains(nodes).");                      onProgress(progress);                      response = await ApiHttpClient.Instance.PostAsync("api/v1/dns-n-cert/register"'                          new StringContent(serializeObject' Encoding.UTF8' "application/json")' token).ConfigureAwait(false);                      progress.AddInfo("Waiting for DNS records to update...");                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Registration request to api.ravendb.net failed for: " + serializeObject' e);                  }                    var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                    if (response.IsSuccessStatusCode == false)                  {                      throw new InvalidOperationException(                          $"Got unsuccessful response from registration request: {response.StatusCode}.{Environment.NewLine}{responseString}");                  }                      if (map == null && registrationInfo.SubDomains.Exists(x => x.SubDomain.StartsWith("A."' StringComparison.OrdinalIgnoreCase)) == false)                  {                      progress.AddInfo("DNS update started successfully' since current node (A) DNS record didn't change' not waiting for full DNS propogation.");                      return;                  }                    var id = JsonConvert.DeserializeObject<Dictionary<string' string>>(responseString).First().Value;                    try                  {                      RegistrationResult registrationResult;                      var i = 1;                      do                      {                          try                          {                              await Task.Delay(1000' cts.Token);                              response = await ApiHttpClient.Instance.PostAsync("/v4/dns-n-cert/registration-result?id=" + id'                                      new StringContent(serializeObject' Encoding.UTF8' "application/json")' cts.Token)                                  .ConfigureAwait(false);                          }                          catch (Exception e)                          {                              throw new InvalidOperationException("Registration-result request to api.ravendb.net failed."' e); //add the object we tried to send to error                          }                            responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                            if (response.IsSuccessStatusCode == false)                          {                              throw new InvalidOperationException(                                  $"Got unsuccessful response from registration-result request: {response.StatusCode}.{Environment.NewLine}{responseString}");                          }                            registrationResult = JsonConvert.DeserializeObject<RegistrationResult>(responseString);                            if (i % 120 == 0)                              progress.AddInfo("This is taking too long' you might want to abort and restart if this goes on like this...");                          else if (i % 45 == 0)                              progress.AddInfo("If everything goes all right' we should be nearly there...");                          else if (i % 30 == 0)                              progress.AddInfo("The DNS update is still pending' carry on just a little bit longer...");                          else if (i % 15 == 0)                              progress.AddInfo("Please be patient' updating DNS records takes time...");                          else if (i % 5 == 0)                              progress.AddInfo("Waiting...");                            onProgress(progress);                            i++;                      } while (registrationResult.Status == "PENDING");                      progress.AddInfo("Got successful response from api.ravendb.net.");                      onProgress(progress);                  }                  catch (Exception e)                  {                      if (cts.IsCancellationRequested == false)                          throw;                      throw new TimeoutException("Request failed due to a timeout error"' e);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,CompleteAuthorizationFor,The following statement contains a magic number: using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' new CancellationTokenSource(TimeSpan.FromMinutes(1)).Token))              {                  while (true)                  {                      if (cts.IsCancellationRequested)                          throw new TimeoutException("Timeout expired on completion of ACME authorization");                        var authz = await client.GetAuthorization(challenge.Location);                      if (authz.Data.Status == EntityStatus.Pending)                      {                          await Task.Delay(250' cts.Token);                          continue;                      }                        if (authz.Data.Status == EntityStatus.Valid)                          return;                        throw new InvalidOperationException("Failed to authorize certificate: " + authz.Data.Status + Environment.NewLine + authz.Json);                  }              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,ValidateSetupInfo,The following statement contains a magic number: foreach (var node in setupInfo.NodeSetupInfos)              {                  if (string.IsNullOrWhiteSpace(node.Key) || node.Key.Length != 1 || !char.IsLetter(node.Key[0]) || !char.IsUpper(node.Key[0]))                      throw new ArgumentException("Node Tag [A-Z] (capital) is a mandatory property for a secured setup");                    if (node.Value.Port == 0)                      setupInfo.NodeSetupInfos[node.Key].Port = 443;              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,GetServerUrlFromCertificate,The following statement contains a magic number: if (cn[0] == '*')              {                  var parts = cn.Split("*.");                  if (parts.Length != 2)                      throw new FormatException($"{cn} is not a valid wildcard name for a certificate.");                    domain = parts[1];                    if (port == 443)                      return $"https://{nodeTag.ToLower()}.{domain}";                    return $"https://{nodeTag.ToLower()}.{domain}:{port}";              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,GetServerUrlFromCertificate,The following statement contains a magic number: if (cn[0] == '*')              {                  var parts = cn.Split("*.");                  if (parts.Length != 2)                      throw new FormatException($"{cn} is not a valid wildcard name for a certificate.");                    domain = parts[1];                    if (port == 443)                      return $"https://{nodeTag.ToLower()}.{domain}";                    return $"https://{nodeTag.ToLower()}.{domain}:{port}";              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,GetServerUrlFromCertificate,The following statement contains a magic number: if (port != 443)                  url += ":" + port;
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,IpAddressToUrl,The following statement contains a magic number: if (port != 443)                  url += ":" + port;
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SimulateRunningServer,The following statement contains a magic number: try              {                  try                  {                      var responder = new UniqueResponseResponder(guid);                        webHost = new WebHostBuilder()                          .CaptureStartupErrors(captureStartupErrors: true)                          .UseKestrel(options =>                          {                              var port = setupInfo.NodeSetupInfos[LocalNodeTag].Port;                              if (addresses.Length == 0)                              {                                  var defaultIp = new IPEndPoint(IPAddress.Parse("0.0.0.0")' port == 0 ? 443 : port);                                  options.Listen(defaultIp'                                      listenOptions => listenOptions.ConnectionAdapters.Add(new HttpsConnectionAdapter(serverCertificate)));                                  if (Logger.IsInfoEnabled)                                      Logger.Info($"List of ip addresses for node '{LocalNodeTag}' is empty. Webhost listening to {defaultIp}");                              }                                foreach (var addr in addresses)                              {                                  options.Listen(addr'                                      listenOptions => listenOptions.ConnectionAdapters.Add(new HttpsConnectionAdapter(serverCertificate)));                              }                          })                          .UseSetting(WebHostDefaults.ApplicationKey' "Setup simulation")                          .ConfigureServices(collection =>                          {                              collection.AddSingleton(typeof(IStartup)' responder);                          })                          .UseShutdownTimeout(TimeSpan.FromMilliseconds(150))                          .Build();                        await webHost.StartAsync(token);                  }                  catch (Exception e)                  {                      throw new InvalidOperationException($"Failed to start webhost on node '{LocalNodeTag}'.{Environment.NewLine}" +                                                          $"Settings file:{settingsPath}.{Environment.NewLine} " +                                                          $"IP addresses: {string.Join("' "' addresses.Select(addr => addr.ToString()))}."' e);                  }                                    using (var httpMessageHandler = new HttpClientHandler())                  {                      // on MacOS this is not supported because Apple...                      if (PlatformDetails.RunningOnMacOsx == false)                      {                          httpMessageHandler.ServerCertificateCustomValidationCallback += (message' certificate2' chain' errors) =>                          // we want to verify that we get the same thing back                          {                              if (certificate2.Thumbprint != serverCertificate.Thumbprint)                                  throw new InvalidOperationException("Expected to get " + serverCertificate.FriendlyName + " with thumbprint " +                                                                      serverCertificate.Thumbprint + " but got " +                                                                      certificate2.FriendlyName + " with thumbprint " + certificate2.Thumbprint);                              return true;                          };                      }                                            using (var client = new HttpClient(httpMessageHandler)                      {                          BaseAddress = new Uri(serverUrl)'                      })                      {                          HttpResponseMessage response = null;                          string result = null;                          try                          {                              using (var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(30)))                              using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' cancellationTokenSource.Token))                              {                                  response = await client.GetAsync("/are-you-there?"' cts.Token);                                  response.EnsureSuccessStatusCode();                                  result = await response.Content.ReadAsStringAsync();                                  if (result != guid)                                  {                                      throw new InvalidOperationException($"Expected result guid: {guid} but got {result}.");                                  }                              }                          }                          catch (Exception e)                          {                              if (setupMode == SetupMode.Secured && await CanResolveHostNameLocally(serverUrl' addresses) == false)                              {                                  throw new InvalidOperationException(                                      $"Failed to resolve '{serverUrl}'. Try to clear your local/network DNS cache and restart validation."' e);                              }                                throw new InvalidOperationException($"Client failed to contact webhost listening to '{serverUrl}'.{Environment.NewLine}" +                                                                  $"Settings file:{settingsPath}.{Environment.NewLine}" +                                                                  $"IP addresses: {string.Join("' "' addresses.Select(addr => addr.ToString()))}.{Environment.NewLine}" +                                                                  $"Response: {response?.StatusCode}.{Environment.NewLine}{result}"' e);                          }                      }                  }              }              finally              {                  if (webHost != null)                      await webHost.StopAsync(TimeSpan.Zero);              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SimulateRunningServer,The following statement contains a magic number: try              {                  try                  {                      var responder = new UniqueResponseResponder(guid);                        webHost = new WebHostBuilder()                          .CaptureStartupErrors(captureStartupErrors: true)                          .UseKestrel(options =>                          {                              var port = setupInfo.NodeSetupInfos[LocalNodeTag].Port;                              if (addresses.Length == 0)                              {                                  var defaultIp = new IPEndPoint(IPAddress.Parse("0.0.0.0")' port == 0 ? 443 : port);                                  options.Listen(defaultIp'                                      listenOptions => listenOptions.ConnectionAdapters.Add(new HttpsConnectionAdapter(serverCertificate)));                                  if (Logger.IsInfoEnabled)                                      Logger.Info($"List of ip addresses for node '{LocalNodeTag}' is empty. Webhost listening to {defaultIp}");                              }                                foreach (var addr in addresses)                              {                                  options.Listen(addr'                                      listenOptions => listenOptions.ConnectionAdapters.Add(new HttpsConnectionAdapter(serverCertificate)));                              }                          })                          .UseSetting(WebHostDefaults.ApplicationKey' "Setup simulation")                          .ConfigureServices(collection =>                          {                              collection.AddSingleton(typeof(IStartup)' responder);                          })                          .UseShutdownTimeout(TimeSpan.FromMilliseconds(150))                          .Build();                        await webHost.StartAsync(token);                  }                  catch (Exception e)                  {                      throw new InvalidOperationException($"Failed to start webhost on node '{LocalNodeTag}'.{Environment.NewLine}" +                                                          $"Settings file:{settingsPath}.{Environment.NewLine} " +                                                          $"IP addresses: {string.Join("' "' addresses.Select(addr => addr.ToString()))}."' e);                  }                                    using (var httpMessageHandler = new HttpClientHandler())                  {                      // on MacOS this is not supported because Apple...                      if (PlatformDetails.RunningOnMacOsx == false)                      {                          httpMessageHandler.ServerCertificateCustomValidationCallback += (message' certificate2' chain' errors) =>                          // we want to verify that we get the same thing back                          {                              if (certificate2.Thumbprint != serverCertificate.Thumbprint)                                  throw new InvalidOperationException("Expected to get " + serverCertificate.FriendlyName + " with thumbprint " +                                                                      serverCertificate.Thumbprint + " but got " +                                                                      certificate2.FriendlyName + " with thumbprint " + certificate2.Thumbprint);                              return true;                          };                      }                                            using (var client = new HttpClient(httpMessageHandler)                      {                          BaseAddress = new Uri(serverUrl)'                      })                      {                          HttpResponseMessage response = null;                          string result = null;                          try                          {                              using (var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(30)))                              using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' cancellationTokenSource.Token))                              {                                  response = await client.GetAsync("/are-you-there?"' cts.Token);                                  response.EnsureSuccessStatusCode();                                  result = await response.Content.ReadAsStringAsync();                                  if (result != guid)                                  {                                      throw new InvalidOperationException($"Expected result guid: {guid} but got {result}.");                                  }                              }                          }                          catch (Exception e)                          {                              if (setupMode == SetupMode.Secured && await CanResolveHostNameLocally(serverUrl' addresses) == false)                              {                                  throw new InvalidOperationException(                                      $"Failed to resolve '{serverUrl}'. Try to clear your local/network DNS cache and restart validation."' e);                              }                                throw new InvalidOperationException($"Client failed to contact webhost listening to '{serverUrl}'.{Environment.NewLine}" +                                                                  $"Settings file:{settingsPath}.{Environment.NewLine}" +                                                                  $"IP addresses: {string.Join("' "' addresses.Select(addr => addr.ToString()))}.{Environment.NewLine}" +                                                                  $"Response: {response?.StatusCode}.{Environment.NewLine}{result}"' e);                          }                      }                  }              }              finally              {                  if (webHost != null)                      await webHost.StopAsync(TimeSpan.Zero);              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,SimulateRunningServer,The following statement contains a magic number: try              {                  try                  {                      var responder = new UniqueResponseResponder(guid);                        webHost = new WebHostBuilder()                          .CaptureStartupErrors(captureStartupErrors: true)                          .UseKestrel(options =>                          {                              var port = setupInfo.NodeSetupInfos[LocalNodeTag].Port;                              if (addresses.Length == 0)                              {                                  var defaultIp = new IPEndPoint(IPAddress.Parse("0.0.0.0")' port == 0 ? 443 : port);                                  options.Listen(defaultIp'                                      listenOptions => listenOptions.ConnectionAdapters.Add(new HttpsConnectionAdapter(serverCertificate)));                                  if (Logger.IsInfoEnabled)                                      Logger.Info($"List of ip addresses for node '{LocalNodeTag}' is empty. Webhost listening to {defaultIp}");                              }                                foreach (var addr in addresses)                              {                                  options.Listen(addr'                                      listenOptions => listenOptions.ConnectionAdapters.Add(new HttpsConnectionAdapter(serverCertificate)));                              }                          })                          .UseSetting(WebHostDefaults.ApplicationKey' "Setup simulation")                          .ConfigureServices(collection =>                          {                              collection.AddSingleton(typeof(IStartup)' responder);                          })                          .UseShutdownTimeout(TimeSpan.FromMilliseconds(150))                          .Build();                        await webHost.StartAsync(token);                  }                  catch (Exception e)                  {                      throw new InvalidOperationException($"Failed to start webhost on node '{LocalNodeTag}'.{Environment.NewLine}" +                                                          $"Settings file:{settingsPath}.{Environment.NewLine} " +                                                          $"IP addresses: {string.Join("' "' addresses.Select(addr => addr.ToString()))}."' e);                  }                                    using (var httpMessageHandler = new HttpClientHandler())                  {                      // on MacOS this is not supported because Apple...                      if (PlatformDetails.RunningOnMacOsx == false)                      {                          httpMessageHandler.ServerCertificateCustomValidationCallback += (message' certificate2' chain' errors) =>                          // we want to verify that we get the same thing back                          {                              if (certificate2.Thumbprint != serverCertificate.Thumbprint)                                  throw new InvalidOperationException("Expected to get " + serverCertificate.FriendlyName + " with thumbprint " +                                                                      serverCertificate.Thumbprint + " but got " +                                                                      certificate2.FriendlyName + " with thumbprint " + certificate2.Thumbprint);                              return true;                          };                      }                                            using (var client = new HttpClient(httpMessageHandler)                      {                          BaseAddress = new Uri(serverUrl)'                      })                      {                          HttpResponseMessage response = null;                          string result = null;                          try                          {                              using (var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(30)))                              using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' cancellationTokenSource.Token))                              {                                  response = await client.GetAsync("/are-you-there?"' cts.Token);                                  response.EnsureSuccessStatusCode();                                  result = await response.Content.ReadAsStringAsync();                                  if (result != guid)                                  {                                      throw new InvalidOperationException($"Expected result guid: {guid} but got {result}.");                                  }                              }                          }                          catch (Exception e)                          {                              if (setupMode == SetupMode.Secured && await CanResolveHostNameLocally(serverUrl' addresses) == false)                              {                                  throw new InvalidOperationException(                                      $"Failed to resolve '{serverUrl}'. Try to clear your local/network DNS cache and restart validation."' e);                              }                                throw new InvalidOperationException($"Client failed to contact webhost listening to '{serverUrl}'.{Environment.NewLine}" +                                                                  $"Settings file:{settingsPath}.{Environment.NewLine}" +                                                                  $"IP addresses: {string.Join("' "' addresses.Select(addr => addr.ToString()))}.{Environment.NewLine}" +                                                                  $"Response: {response?.StatusCode}.{Environment.NewLine}{result}"' e);                          }                      }                  }              }              finally              {                  if (webHost != null)                      await webHost.StopAsync(TimeSpan.Zero);              }
Magic Number,Raven.Server.Commercial,SetupManager,C:\repos\ravendb_ravendb\src\Raven.Server\Commercial\SetupManager.cs,AssertDnsUpdatedSuccessfully,The following statement contains a magic number: using (var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(30)))              using (var cts = CancellationTokenSource.CreateLinkedTokenSource(token' cancellationTokenSource.Token))              {                  var expectedIps = expectedAddresses.Select(address => address.Address.ToString()).ToHashSet();                    var hostname = new Uri(serverUrl).Host;                    using (var client = new HttpClient { BaseAddress = new Uri(GoogleDnsApi) })                  {                      var response = await client.GetAsync($"/resolve?name={hostname}"' cts.Token);                        var responseString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);                      if (response.IsSuccessStatusCode == false)                          throw new InvalidOperationException($"Tried to resolve '{hostname}' using google's api ({GoogleDnsApi}).{Environment.NewLine}"                                                              + $"Request failed with status {response.StatusCode}.{Environment.NewLine}{responseString}");                        dynamic dnsResult = JsonConvert.DeserializeObject(responseString);                        // DNS response format: https://developers.google.com/speed/public-dns/docs/dns-over-https                        if (dnsResult.Status != 0)                          throw new InvalidOperationException($"Tried to resolve '{hostname}' using google's api ({GoogleDnsApi}).{Environment.NewLine}"                                                              + $"Got a DNS failure response:{Environment.NewLine}{responseString}" +                                                              Environment.NewLine + "Please wait a while until DNS propogation is finished and try again. If you are trying to update existing DNS records' it might take hours to update because of DNS caching. If the issue persists' contact RavenDB's support.");                        JArray answers = dnsResult.Answer;                      var googleIps = answers.Select(answer => answer["data"].ToString()).ToHashSet();                        if (googleIps.SetEquals(expectedIps) == false)                          throw new InvalidOperationException($"Tried to resolve '{hostname}' using google's api ({GoogleDnsApi}).{Environment.NewLine}"                                                              + $"Expected to get these ips: {string.Join("' "' expectedIps)} while google's actual result was: {string.Join("' "' googleIps)}"                                                              + Environment.NewLine + "Please wait a while until DNS propogation is finished and try again. If you are trying to update existing DNS records' it might take hours to update because of DNS caching. If the issue persists' contact RavenDB's support.");                  }                    // Resolving through google worked' now let's check locally                  HashSet<string> actualIps;                  try                  {                      actualIps = (await Dns.GetHostAddressesAsync(hostname)).Select(address => address.ToString()).ToHashSet();                  }                  catch (Exception e)                  {                      throw new InvalidOperationException(                          $"Cannot resolve '{hostname}' locally but succeeded resolving the address using google's api ({GoogleDnsApi})."                          + Environment.NewLine + "Try to clear your local/network DNS cache and restart validation."                          + Environment.NewLine + "Another temporary solution is to configure your local network connection to use google's DNS server (8.8.8.8)."' e);                  }                    if (expectedIps.SetEquals(actualIps) == false)                      throw new InvalidOperationException(                          $"Tried to resolve '{hostname}' locally but got an outdated result."                          + Environment.NewLine + $"Expected to get these ips: {string.Join("' "' expectedIps)} while the actual result was: {string.Join("' "' actualIps)}"                          + Environment.NewLine + $"If we try resolving through google's api ({GoogleDnsApi})' it works well."                          + Environment.NewLine + "Try to clear your local/network DNS cache or wait a few minutes and try again."                          + Environment.NewLine + "Another temporary solution is to configure your local network connection to use google's DNS server (8.8.8.8).");              }
Magic Number,Raven.Server.Config.Categories,MemoryConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\MemoryConfiguration.cs,MemoryConfiguration,The following statement contains a magic number: LowMemoryLimit = Size.Min(                  new Size(2' SizeUnit.Gigabytes)'                   memoryInfo.TotalPhysicalMemory / 10);
Magic Number,Raven.Server.Config.Categories,MemoryConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\MemoryConfiguration.cs,MemoryConfiguration,The following statement contains a magic number: LowMemoryLimit = Size.Min(                  new Size(2' SizeUnit.Gigabytes)'                   memoryInfo.TotalPhysicalMemory / 10);
Magic Number,Raven.Server.Config.Categories,SecurityConfiguration,C:\repos\ravendb_ravendb\src\Raven.Server\Config\Categories\SecurityConfiguration.cs,DetermineServerIp,The following statement contains a magic number: if (UrlUtil.IsZeros(serverUri.DnsSafeHost))              {                  addresses = new[] { IPAddress.Parse(serverUri.DnsSafeHost) };              }              else              {                  var getHostAddressesTask = Dns.GetHostAddressesAsync(serverUri.DnsSafeHost);                  if (getHostAddressesTask.Wait(TimeSpan.FromSeconds(30)) == false)                      throw new InvalidOperationException($"Could not obtain IP address from DNS {serverUri.DnsSafeHost} for 30 seconds.");                    addresses = getHostAddressesTask.Result;              }
Magic Number,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,AttachmentsStorage,The following statement contains a magic number: AttachmentsSchema.Create(tx' AttachmentsMetadataSlice' 44);
Magic Number,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,AttachmentsStorage,The following statement contains a magic number: TombstonesSchema.Create(tx' AttachmentsTombstonesSlice' 16);
Magic Number,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,AssertFixedSizeTrees,The following statement contains a magic number: TombstonesSchema.Create(tx' AttachmentsTombstonesSlice' 16);
Magic Number,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutAttachment,The following statement contains a magic number: using (DocumentIdWorker.GetSliceFromId(context' documentId' out Slice lowerDocumentId))              {                  // This will validate that we cannot put an attachment on a conflicted document                  var hasDoc = TryGetDocumentTableValueReaderForAttachment(context' documentId' name' lowerDocumentId' out TableValueReader tvr);                  if (hasDoc == false)                      throw new InvalidOperationException($"Cannot put attachment {name} on a non existent document '{documentId}'.");                    using (DocumentIdWorker.GetLowerIdSliceAndStorageKey(context' name' out Slice lowerName' out Slice namePtr))                  using (DocumentIdWorker.GetLowerIdSliceAndStorageKey(context' contentType' out Slice lowerContentType' out Slice contentTypePtr))                  using (Slice.From(context.Allocator' hash' out Slice base64Hash)) // Hash is a base64 string' so this is a special case that we do not need to escape                  using (GetAttachmentKey(context' lowerDocumentId.Content.Ptr' lowerDocumentId.Size' lowerName.Content.Ptr' lowerName.Size' base64Hash'                      lowerContentType.Content.Ptr' lowerContentType.Size' AttachmentType.Document' Slices.Empty' out Slice keySlice))                  {                      Debug.Assert(base64Hash.Size == 44' $"Hash size should be 44 but was: {keySlice.Size}");                        DeleteTombstoneIfNeeded(context' keySlice);                        var changeVector = _documentsStorage.GetNewChangeVector(context' attachmentEtag);                      Debug.Assert(changeVector != null);                      context.LastDatabaseChangeVector = changeVector;                        var table = context.Transaction.InnerTransaction.OpenTable(AttachmentsSchema' AttachmentsMetadataSlice);                      void SetTableValue(TableValueBuilder tvb' Slice cv)                      {                          tvb.Add(keySlice.Content.Ptr' keySlice.Size);                          tvb.Add(Bits.SwapBytes(attachmentEtag));                          tvb.Add(namePtr);                          tvb.Add(contentTypePtr);                          tvb.Add(base64Hash.Content.Ptr' base64Hash.Size);                          tvb.Add(context.GetTransactionMarker());                          tvb.Add(cv.Content.Ptr' cv.Size);                      }                        if (table.ReadByKey(keySlice' out TableValueReader oldValue))                      {                          // This is an update to the attachment with the same stream and content type                          // Just updating the etag and casing of the name and the content type.                            if (expectedChangeVector != null)                          {                              var oldChangeVector = TableValueToChangeVector(context' (int)AttachmentsTable.ChangeVector' ref oldValue);                              if (oldChangeVector.CompareTo(expectedChangeVector) != 0)                                  throw new ConcurrencyException($"Attachment {name} has change vector '{oldChangeVector}'' but Put was called with the change vector '{expectedChangeVector}'. Optimistic concurrency violation' transaction will be aborted.")                                  {                                      ActualChangeVector = oldChangeVector'                                      ExpectedChangeVector = expectedChangeVector                                  };                          }                          using (Slice.From(context.Allocator' changeVector' out var changeVectorSlice))                          using (table.Allocate(out TableValueBuilder tvb))                          {                              SetTableValue(tvb' changeVectorSlice);                              table.Update(oldValue.Id' tvb);                          }                      }                      else                      {                          var putStream = true;                            // We already asserted that the document is not in conflict' so we might have just one partial key' not more.                          using (GetAttachmentPartialKey(context' keySlice' base64Hash.Size' lowerContentType.Size' out Slice partialKeySlice))                          {                              if (table.SeekOnePrimaryKeyPrefix(partialKeySlice' out TableValueReader partialTvr))                              {                                  // Delete the attachment stream only if we have a different hash                                  using (TableValueToSlice(context' (int)AttachmentsTable.Hash' ref partialTvr' out Slice existingHash))                                  {                                      putStream = existingHash.Content.Match(base64Hash.Content) == false;                                      if (putStream)                                      {                                          using (TableValueToSlice(context' (int)AttachmentsTable.LowerDocumentIdAndLowerNameAndTypeAndHashAndContentType'                                              ref partialTvr' out Slice existingKey))                                          {                                              var existingEtag = TableValueToEtag((int)AttachmentsTable.Etag' ref partialTvr);                                              DeleteInternal(context' existingKey' existingEtag' existingHash' changeVector);                                          }                                      }                                  }                                    table.Delete(partialTvr.Id);                              }                          }                            if (expectedChangeVector != null && expectedChangeVector.Length != 0)                          {                              ThrowConcurrentExceptionOnMissingAttachment(documentId' name' expectedChangeVector);                          }                            using (Slice.From(context.Allocator' changeVector' out var changeVectorSlice))                          using (table.Allocate(out TableValueBuilder tvb))                          {                              SetTableValue(tvb' changeVectorSlice);                              table.Insert(tvb);                          }                            if (putStream)                          {                              PutAttachmentStream(context' keySlice' base64Hash' stream);                          }                      }                        _documentDatabase.Metrics.Attachments.PutsPerSec.MarkSingleThreaded(1);                        if (updateDocument)                          UpdateDocumentAfterAttachmentChange(context' lowerDocumentId' documentId' tvr' changeVector);                        return new AttachmentDetails                      {                          ChangeVector = changeVector'                          ContentType = contentType'                          Name = name'                          DocumentId = documentId'                          Hash = hash'                          Size = stream.Length                      };                  }              }
Magic Number,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,PutDirect,The following statement contains a magic number: Debug.Assert(base64Hash.Size == 44' $"Hash size should be 44 but was: {key.Size}");
Magic Number,Raven.Server.Documents,AttachmentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\AttachmentsStorage.cs,GetAttachmentKeyInternal,The following statement contains a magic number: var size = lowerIdSize + 3;
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,CreateLazyStringValueFromParserState,The following statement contains a magic number: var maxSizeOfEscapePos = escapePositionsCount * 5 // max size of var int                                       + JsonParserState.VariableSizeIntSize(escapePositionsCount);
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The following statement contains a magic number: while (true)              {                  if (reader.Read() == false)                      return false;                    if (state.CurrentTokenType != JsonParserToken.String)                      return true; // let the caller handle that                    if (_readingMetadataObject == false)                  {                      if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853)                          _readingMetadataObject = true;                        return true;                  }                    if (AboutToReadPropertyNameInMetadataUnlikely(reader' state' out bool aboutToReadPropertyName))                      return aboutToReadPropertyName;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The following statement contains a magic number: while (true)              {                  if (reader.Read() == false)                      return false;                    if (state.CurrentTokenType != JsonParserToken.String)                      return true; // let the caller handle that                    if (_readingMetadataObject == false)                  {                      if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853)                          _readingMetadataObject = true;                        return true;                  }                    if (AboutToReadPropertyNameInMetadataUnlikely(reader' state' out bool aboutToReadPropertyName))                      return aboutToReadPropertyName;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The following statement contains a magic number: while (true)              {                  if (reader.Read() == false)                      return false;                    if (state.CurrentTokenType != JsonParserToken.String)                      return true; // let the caller handle that                    if (_readingMetadataObject == false)                  {                      if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853)                          _readingMetadataObject = true;                        return true;                  }                    if (AboutToReadPropertyNameInMetadataUnlikely(reader' state' out bool aboutToReadPropertyName))                      return aboutToReadPropertyName;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The following statement contains a magic number: while (true)              {                  if (reader.Read() == false)                      return false;                    if (state.CurrentTokenType != JsonParserToken.String)                      return true; // let the caller handle that                    if (_readingMetadataObject == false)                  {                      if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853)                          _readingMetadataObject = true;                        return true;                  }                    if (AboutToReadPropertyNameInMetadataUnlikely(reader' state' out bool aboutToReadPropertyName))                      return aboutToReadPropertyName;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The following statement contains a magic number: while (true)              {                  if (reader.Read() == false)                      return false;                    if (state.CurrentTokenType != JsonParserToken.String)                      return true; // let the caller handle that                    if (_readingMetadataObject == false)                  {                      if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853)                          _readingMetadataObject = true;                        return true;                  }                    if (AboutToReadPropertyNameInMetadataUnlikely(reader' state' out bool aboutToReadPropertyName))                      return aboutToReadPropertyName;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInternal,The following statement contains a magic number: while (true)              {                  if (reader.Read() == false)                      return false;                    if (state.CurrentTokenType != JsonParserToken.String)                      return true; // let the caller handle that                    if (_readingMetadataObject == false)                  {                      if (state.StringSize == 9 && state.StringBuffer[0] == (byte)'@' && *(long*)(state.StringBuffer + 1) == 7022344802737087853)                          _readingMetadataObject = true;                        return true;                  }                    if (AboutToReadPropertyNameInMetadataUnlikely(reader' state' out bool aboutToReadPropertyName))                      return aboutToReadPropertyName;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following statement contains a magic number: switch (state.StringSize)              {                  default: // accept this property                      {                          return true;                      }                    case -1: // IgnoreProperty                      {                          if (reader.Read() == false)                          {                              _state = State.IgnoreProperty;                              {                                  aboutToReadPropertyName = false;                                  return true;                              }                          }                          if (state.CurrentTokenType == JsonParserToken.StartArray ||                              state.CurrentTokenType == JsonParserToken.StartObject)                              ThrowInvalidMetadataProperty(state);                          break;                      }                    case 3: // @id                      if (state.StringBuffer[0] != (byte)'@' ||                          *(short*)(state.StringBuffer + 1) != 25705)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingId;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case 5: // @etag                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734440037)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (ReadFirstEtagOfLegacyRevision &&                          (NonPersistentFlags & NonPersistentDocumentFlags.LegacyRevision) == NonPersistentDocumentFlags.LegacyRevision)                      {                          if (_firstEtagOfLegacyRevision == null)                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingFirstEtagOfLegacyRevision;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString("@etag"' state);                              _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                              ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                              break;                          }                            ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                      }                        goto case -1;                  case 6: // @flags                      if (state.StringBuffer[0] != (byte)'@' ||                          *(int*)(state.StringBuffer + 1) != 1734437990 ||                          state.StringBuffer[1 + sizeof(int)] != (byte)'s')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if (reader.Read() == false)                      {                          _state = State.ReadingFlags;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                      if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                    case 12: // @index-score                      if (state.StringBuffer[0] != (byte)'@' ||                          *(long*)(state.StringBuffer + 1) != 7166121427196997225 ||                          *(short*)(state.StringBuffer + 1 + sizeof(long)) != 29295 ||                          state.StringBuffer[1 + sizeof(long) + sizeof(short)] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 13: //Last-Modified                      if (*(long*)state.StringBuffer != 7237087983830262092 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1701406313 ||                          state.StringBuffer[12] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 14:                      if (state.StringBuffer[0] == (byte)'@')                      {                          // @change-vector                          if (*(long*)(state.StringBuffer + 1) == 8515573965335390307 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1869898597 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'r')                          {                              if (reader.Read() == false)                              {                                  _state = State.ReadingChangeVector;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                              if (state.CurrentTokenType != JsonParserToken.String)                                  ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                              ChangeVector = CreateLazyStringValueFromParserState(state);                              break;                          }                            // @last-modified                          if (*(long*)(state.StringBuffer + 1) == 7237123168202350956 &&                              *(int*)(state.StringBuffer + 1 + sizeof(long)) == 1701406313 &&                              state.StringBuffer[1 + sizeof(long) + sizeof(int)] == (byte)'d')                          {                              goto case -1;                          }                      }                        {                          aboutToReadPropertyName = true;                          return true;                      }                  case 15: //Raven-Read-Only                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1328374881 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(int)) != 27758 ||                          state.StringBuffer[14] != (byte)'y')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 17: //Raven-Entity-Name --> @collection                      if (*(long*)state.StringBuffer != 7945807069737017682 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7881666780093245812 ||                          state.StringBuffer[16] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var collection = _metadataCollections;                      state.StringBuffer = collection.AllocatedMemoryData.Address;                      state.StringSize = collection.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 19: //Raven-Last-Modified                      if (*(long*)state.StringBuffer != 7011028672080929106 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7379539893622240371 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 25961 ||                          state.StringBuffer[18] != (byte)'d')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 21: //Raven-Expiration-Date                      if (*(long*)state.StringBuffer != 8666383010116297042 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 7957695015158966640 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 17453 ||                          state.StringBuffer[20] != (byte)'e')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var expires = _metadataExpires;                      state.StringBuffer = expires.AllocatedMemoryData.Address;                      state.StringSize = expires.Size;                      {                          aboutToReadPropertyName = true;                          return true;                      }                  case 23: //Raven-Document-Revision                      if (*(long*)state.StringBuffer != 8017583188798234962 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 1936291429 ||                          *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(int)) != 28521 ||                          state.StringBuffer[22] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 24: //Raven-Replication-Source                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7305808869229538670)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                  case 25: //Raven-Replication-Version OR Raven-Replication-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var value = *(long*)(state.StringBuffer + sizeof(long) + sizeof(long));                      var lastByte = state.StringBuffer[24];                      if ((value != 8028074745928232302 || lastByte != (byte)'n') &&                          (value != 8245937481775066478 || lastByte != (byte)'y'))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isReplicationHistory = lastByte == (byte)'y';                      if (reader.Read() == false)                      {                          _verifyStartArray = isReplicationHistory;                          _state = isReplicationHistory ? State.IgnoreArray : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        // Raven-Replication-History is an array                      if (isReplicationHistory)                      {                          if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                            do                          {                              if (reader.Read() == false)                              {                                  _state = State.IgnoreArray;                                  {                                      aboutToReadPropertyName = false;                                      return true;                                  }                              }                          } while (state.CurrentTokenType != JsonParserToken.EndArray);                      }                      else if (state.CurrentTokenType == JsonParserToken.StartArray ||                               state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case 29: //Non-Authoritative-Information                      if (*(long*)state.StringBuffer != 7526769800038477646 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8532478930943832687 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7886488383206796645 ||                          *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1869182049 ||                          state.StringBuffer[28] != (byte)'n')                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;                    case 30: //Raven-Document-Parent-Revision OR Raven-Document-Revision-Status                      if (*(long*)state.StringBuffer != 8017583188798234962)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        if ((*(long*)(state.StringBuffer + sizeof(long)) != 5777401914483111267 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7300947924012593761 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1769171318 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 28271) &&                          (*(long*)(state.StringBuffer + sizeof(long)) != 5921517102558967139 ||                           *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 3273676477843469925 ||                           *(int*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 1952543827 ||                           *(short*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long) + sizeof(int)) != 29557))                      {                          aboutToReadPropertyName = true;                          return true;                      }                        var isRevisionStatusProperty = state.StringBuffer[29] == 's';                      if (reader.Read() == false)                      {                          _state = isRevisionStatusProperty ? State.IgnoreRevisionStatusProperty : State.IgnoreProperty;                          {                              aboutToReadPropertyName = false;                              return true;                          }                      }                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                        if (isRevisionStatusProperty)                      {                          switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }                      }                        break;                  case 32: //Raven-Replication-Merged-History                      if (*(long*)state.StringBuffer != 7300947898092904786 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 8028075772393122928 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long)) != 7234302117464059246 ||                          *(long*)(state.StringBuffer + sizeof(long) + sizeof(long) + sizeof(long)) != 8751179571877464109)                      {                          aboutToReadPropertyName = true;                          return true;                      }                        goto case -1;              }
Magic Number,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,StartSendingNotifications,The following statement contains a magic number: using (_documentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  using (var ms = new MemoryStream())                  {                      var sp = Stopwatch.StartNew();                      while (true)                      {                          if (_disposeToken.IsCancellationRequested)                              break;                            ms.SetLength(0);                          using (var writer = new BlittableJsonTextWriter(context' ms))                          {                              sp.Restart();                                var first = true;                              writer.WriteStartArray();                                do                              {                                  var value = await GetNextMessage(throttleConnection);                                  if (value == null || _disposeToken.IsCancellationRequested)                                      break;                                    if (first == false)                                      writer.WriteComma();                                    first = false;                                  context.Write(writer' value);                                    writer.Flush();                                    if (ms.Length > 16 * 1024)                                      break;                              } while (_sendQueue.Count > 0 && sp.Elapsed < TimeSpan.FromSeconds(5));                                writer.WriteEndArray();                          }                            if (_disposeToken.IsCancellationRequested)                              break;                            ms.TryGetBuffer(out ArraySegment<byte> bytes);                          await _webSocket.SendAsync(bytes' WebSocketMessageType.Text' true' _disposeToken);                      }                  }              }
Magic Number,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,StartSendingNotifications,The following statement contains a magic number: using (_documentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  using (var ms = new MemoryStream())                  {                      var sp = Stopwatch.StartNew();                      while (true)                      {                          if (_disposeToken.IsCancellationRequested)                              break;                            ms.SetLength(0);                          using (var writer = new BlittableJsonTextWriter(context' ms))                          {                              sp.Restart();                                var first = true;                              writer.WriteStartArray();                                do                              {                                  var value = await GetNextMessage(throttleConnection);                                  if (value == null || _disposeToken.IsCancellationRequested)                                      break;                                    if (first == false)                                      writer.WriteComma();                                    first = false;                                  context.Write(writer' value);                                    writer.Flush();                                    if (ms.Length > 16 * 1024)                                      break;                              } while (_sendQueue.Count > 0 && sp.Elapsed < TimeSpan.FromSeconds(5));                                writer.WriteEndArray();                          }                            if (_disposeToken.IsCancellationRequested)                              break;                            ms.TryGetBuffer(out ArraySegment<byte> bytes);                          await _webSocket.SendAsync(bytes' WebSocketMessageType.Text' true' _disposeToken);                      }                  }              }
Magic Number,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,StartSendingNotifications,The following statement contains a magic number: using (_documentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  using (var ms = new MemoryStream())                  {                      var sp = Stopwatch.StartNew();                      while (true)                      {                          if (_disposeToken.IsCancellationRequested)                              break;                            ms.SetLength(0);                          using (var writer = new BlittableJsonTextWriter(context' ms))                          {                              sp.Restart();                                var first = true;                              writer.WriteStartArray();                                do                              {                                  var value = await GetNextMessage(throttleConnection);                                  if (value == null || _disposeToken.IsCancellationRequested)                                      break;                                    if (first == false)                                      writer.WriteComma();                                    first = false;                                  context.Write(writer' value);                                    writer.Flush();                                    if (ms.Length > 16 * 1024)                                      break;                              } while (_sendQueue.Count > 0 && sp.Elapsed < TimeSpan.FromSeconds(5));                                writer.WriteEndArray();                          }                            if (_disposeToken.IsCancellationRequested)                              break;                            ms.TryGetBuffer(out ArraySegment<byte> bytes);                          await _webSocket.SendAsync(bytes' WebSocketMessageType.Text' true' _disposeToken);                      }                  }              }
Magic Number,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,GetNextMessage,The following statement contains a magic number: while (true)              {                  var nextMessage = await _sendQueue.TryDequeueAsync(TimeSpan.FromSeconds(5));                  if (nextMessage.Item1 == false)                  {                      var dynamicJsonValue = _skippedMessage;                      _skippedMessage = null;                      return dynamicJsonValue;                  }                  var msg = nextMessage.Item2;                  if (throttleConnection && msg.AllowSkip)                  {                      if (DateTime.UtcNow - _lastSendMessage < TimeSpan.FromSeconds(5))                      {                          _skippedMessage = msg.ValueToSend;                          continue;                      }                  }                  _skippedMessage = null;                  _lastSendMessage = DateTime.UtcNow;                  return msg.ValueToSend;              }
Magic Number,Raven.Server.Documents,ChangesClientConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ChangesClientConnection.cs,GetNextMessage,The following statement contains a magic number: while (true)              {                  var nextMessage = await _sendQueue.TryDequeueAsync(TimeSpan.FromSeconds(5));                  if (nextMessage.Item1 == false)                  {                      var dynamicJsonValue = _skippedMessage;                      _skippedMessage = null;                      return dynamicJsonValue;                  }                  var msg = nextMessage.Item2;                  if (throttleConnection && msg.AllowSkip)                  {                      if (DateTime.UtcNow - _lastSendMessage < TimeSpan.FromSeconds(5))                      {                          _skippedMessage = msg.ValueToSend;                          continue;                      }                  }                  _skippedMessage = null;                  _lastSendMessage = DateTime.UtcNow;                  return msg.ValueToSend;              }
Magic Number,Raven.Server.Documents,CollectionName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionName.cs,IsHiLoCollection,The following statement contains a magic number: if (length != 5)                  return false;
Magic Number,Raven.Server.Documents,CollectionName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionName.cs,IsHiLoCollection,The following statement contains a magic number: if (buffer[0] != (byte)'@' ||                  buffer[1] != (byte)'h' && buffer[1] != (byte)'H' ||                  buffer[2] != (byte)'i' && buffer[2] != (byte)'I' ||                  buffer[3] != (byte)'l' && buffer[3] != (byte)'L' ||                  buffer[4] != (byte)'o' && buffer[4] != (byte)'O')              {                  return false;              }
Magic Number,Raven.Server.Documents,CollectionName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionName.cs,IsHiLoCollection,The following statement contains a magic number: if (buffer[0] != (byte)'@' ||                  buffer[1] != (byte)'h' && buffer[1] != (byte)'H' ||                  buffer[2] != (byte)'i' && buffer[2] != (byte)'I' ||                  buffer[3] != (byte)'l' && buffer[3] != (byte)'L' ||                  buffer[4] != (byte)'o' && buffer[4] != (byte)'O')              {                  return false;              }
Magic Number,Raven.Server.Documents,CollectionName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionName.cs,IsHiLoCollection,The following statement contains a magic number: if (buffer[0] != (byte)'@' ||                  buffer[1] != (byte)'h' && buffer[1] != (byte)'H' ||                  buffer[2] != (byte)'i' && buffer[2] != (byte)'I' ||                  buffer[3] != (byte)'l' && buffer[3] != (byte)'L' ||                  buffer[4] != (byte)'o' && buffer[4] != (byte)'O')              {                  return false;              }
Magic Number,Raven.Server.Documents,CollectionName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionName.cs,IsHiLoCollection,The following statement contains a magic number: if (buffer[0] != (byte)'@' ||                  buffer[1] != (byte)'h' && buffer[1] != (byte)'H' ||                  buffer[2] != (byte)'i' && buffer[2] != (byte)'I' ||                  buffer[3] != (byte)'l' && buffer[3] != (byte)'L' ||                  buffer[4] != (byte)'o' && buffer[4] != (byte)'O')              {                  return false;              }
Magic Number,Raven.Server.Documents,CollectionName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionName.cs,IsHiLoCollection,The following statement contains a magic number: if (buffer[0] != (byte)'@' ||                  buffer[1] != (byte)'h' && buffer[1] != (byte)'H' ||                  buffer[2] != (byte)'i' && buffer[2] != (byte)'I' ||                  buffer[3] != (byte)'l' && buffer[3] != (byte)'L' ||                  buffer[4] != (byte)'o' && buffer[4] != (byte)'O')              {                  return false;              }
Magic Number,Raven.Server.Documents,CollectionName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionName.cs,IsHiLoCollection,The following statement contains a magic number: if (buffer[0] != (byte)'@' ||                  buffer[1] != (byte)'h' && buffer[1] != (byte)'H' ||                  buffer[2] != (byte)'i' && buffer[2] != (byte)'I' ||                  buffer[3] != (byte)'l' && buffer[3] != (byte)'L' ||                  buffer[4] != (byte)'o' && buffer[4] != (byte)'O')              {                  return false;              }
Magic Number,Raven.Server.Documents,CollectionRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\CollectionRunner.cs,ExecuteOperation,The following statement contains a magic number: const int batchSize = 1024;
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,The following statement contains a magic number: Debug.Assert((int)size == 32);
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,The following statement contains a magic number: var str = new string(' '' 49);
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForDocuments,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForRevisions,The following statement contains a magic number: Debug.Assert((int)size == 32);
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForRevisions,The following statement contains a magic number: var str = new string(' '' 49);
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForRevisions,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForRevisions,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForRevisions,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForRevisions,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForRevisions,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ComputeHttpEtags,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ComputeHttpEtags.cs,ComputeEtagForRevisions,The following statement contains a magic number: fixed (char* p = str)              {                  p[0] = 'H';                  p[1] = 'a';                  p[2] = 's';                  p[3] = 'h';                  p[4] = '-';                  var len = Base64.ConvertToBase64Array(p + 5' final' 0' 32);                  Debug.Assert(len == 44);              }
Magic Number,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,ConflictsStorage,The following statement contains a magic number: ConflictsSchema.DefineIndex(new TableSchema.SchemaIndexDef              {                  StartIndex = (int)ConflictsTable.LowerId'                  Count = 3'                  IsGlobal = false'                  Name = IdAndChangeVectorSlice              });
Magic Number,Raven.Server.Documents,ConflictsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ConflictsStorage.cs,ConflictsStorage,The following statement contains a magic number: ConflictsSchema.Create(tx' ConflictsSlice' 32);
Magic Number,Raven.Server.Documents,DatabaseInfoCache,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabaseInfoCache.cs,Initialize,The following statement contains a magic number: using (contextPool.AllocateOperationContext(out TransactionOperationContext context))              using (var tx = _environment.WriteTransaction(context.PersistentContext))              {                  _databaseInfoSchema.Create(tx' DatabaseInfoSchema.DatabaseInfoTree' 16);                    tx.Commit();              }
Magic Number,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,Dispose,The following statement contains a magic number: try              {                  var exceptionAggregator = new ExceptionAggregator(_logger' "Failure to dispose landlord");                    // shut down all databases in parallel' avoid having to wait for each one                  Parallel.ForEach(DatabasesCache.Values' new ParallelOptions                  {                      // we limit the number of resources we dispose concurrently to avoid                      // putting too much pressure on the I/O system if a disposing db need                      // to flush data to disk                      MaxDegreeOfParallelism = Math.Max(1' ProcessorInfo.ProcessorCount / 2)                  }' dbTask =>                  {                      if (dbTask.IsCompleted == false)                          dbTask.ContinueWith(task =>                          {                              if (task.Status != TaskStatus.RanToCompletion)                                  return;                                try                              {                                  task.Result.Dispose();                              }                              catch (Exception e)                              {                                  if (_logger.IsInfoEnabled)                                      _logger.Info("Failure in deferred disposal of a database"' e);                              }                          });                      else if (dbTask.Status == TaskStatus.RanToCompletion && dbTask.Result != null)                          exceptionAggregator.Execute(dbTask.Result.Dispose);                      // there is no else' the db is probably faulted                  });                  DatabasesCache.Clear();                    try                  {                      _databaseSemaphore.Dispose();                  }                  catch (Exception e)                  {                      if (_logger.IsInfoEnabled)                          _logger.Info("Failed to dispose resource semaphore"' e);                  }                    exceptionAggregator.ThrowIfNeeded();              }              finally              {                  _disposing.ExitWriteLock();              }
Magic Number,Raven.Server.Documents,DatabasesLandlord,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DatabasesLandlord.cs,UnloadResourceOnCatastrophicFailure,The following statement contains a magic number: Task.Run(async () =>              {                  var title = $"Critical error in '{databaseName}'";                  const string message = "Database is about to be unloaded due to an encountered error";                    try                  {                      _serverStore.NotificationCenter.Add(AlertRaised.Create(                          databaseName'                          title'                          message'                          AlertType.CatastrophicDatabaseFailure'                          NotificationSeverity.Error'                          key: databaseName'                          details: new ExceptionDetails(e)));                  }                  catch (Exception)                  {                      // exception in raising an alert can't prevent us from unloading a database                  }                    if (_logger.IsOperationsEnabled)                      _logger.Operations($"{title}. {message}"' e);                    await Task.Delay(2000); // let it propagate the exception to the client first                    (await UnloadAndLockDatabase(databaseName' "CatastrophicFailure"))?.Dispose();              });
Magic Number,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,Dispose,The following statement contains a magic number: lock (this)              {                  if (_databaseShutdown.IsCancellationRequested)                      return; // double dispose?                    //before we dispose of the database we take its latest info to be displayed in the studio                  try                  {                      var databaseInfo = GenerateDatabaseInfo();                      if (databaseInfo != null)                          DatabaseInfoCache?.InsertDatabaseInfo(databaseInfo' Name);                  }                  catch (Exception e)                  {                      // if we encountered a catastrophic failure we might not be able to retrieve database info                        if (_logger.IsInfoEnabled)                          _logger.Info("Failed to generate and store database info"' e);                  }                    _databaseShutdown.Cancel();                    // we'll wait for 1 minute to drain all the requests                  // from the database                    var sp = Stopwatch.StartNew();                  while (sp.ElapsedMilliseconds < 60 * 1000)                  {                      if (Interlocked.Read(ref _usages) == 0)                          break;                        if (_waitForUsagesOnDisposal.Wait(1000))                          _waitForUsagesOnDisposal.Reset();                  }                    var exceptionAggregator = new ExceptionAggregator(_logger' $"Could not dispose {nameof(DocumentDatabase)} {Name}");                    foreach (var connection in RunningTcpConnections)                  {                      exceptionAggregator.Execute(() =>                      {                          connection.Dispose();                      });                  }                    exceptionAggregator.Execute(() =>                  {                      TxMerger?.Dispose();                  });                    if (_indexStoreTask != null)                  {                      exceptionAggregator.Execute(() =>                      {                          _indexStoreTask.Wait(DatabaseShutdown);                          _indexStoreTask = null;                      });                  }                    exceptionAggregator.Execute(() =>                  {                      IndexStore?.Dispose();                      IndexStore = null;                  });                    exceptionAggregator.Execute(() =>                  {                      ExpiredDocumentsCleaner?.Dispose();                      ExpiredDocumentsCleaner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      PeriodicBackupRunner?.Dispose();                      PeriodicBackupRunner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      DocumentTombstoneCleaner?.Dispose();                      DocumentTombstoneCleaner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      ReplicationLoader?.Dispose();                      ReplicationLoader = null;                  });                    exceptionAggregator.Execute(() =>                  {                      EtlLoader?.Dispose();                      EtlLoader = null;                  });                    exceptionAggregator.Execute(() =>                  {                      Operations?.Dispose(exceptionAggregator);                      Operations = null;                  });                    exceptionAggregator.Execute(() =>                  {                      NotificationCenter?.Dispose();                      NotificationCenter = null;                  });                                    exceptionAggregator.Execute(() =>                  {                      SubscriptionStorage?.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      ConfigurationStorage?.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      DocumentsStorage?.Dispose();                      DocumentsStorage = null;                  });                    exceptionAggregator.Execute(() =>                  {                      _databaseShutdown.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      if (MasterKey == null)                          return;                      fixed (byte* pKey = MasterKey)                      {                          Sodium.ZeroMemory(pKey' MasterKey.Length);                      }                  });                    exceptionAggregator.ThrowIfNeeded();              }
Magic Number,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,Dispose,The following statement contains a magic number: lock (this)              {                  if (_databaseShutdown.IsCancellationRequested)                      return; // double dispose?                    //before we dispose of the database we take its latest info to be displayed in the studio                  try                  {                      var databaseInfo = GenerateDatabaseInfo();                      if (databaseInfo != null)                          DatabaseInfoCache?.InsertDatabaseInfo(databaseInfo' Name);                  }                  catch (Exception e)                  {                      // if we encountered a catastrophic failure we might not be able to retrieve database info                        if (_logger.IsInfoEnabled)                          _logger.Info("Failed to generate and store database info"' e);                  }                    _databaseShutdown.Cancel();                    // we'll wait for 1 minute to drain all the requests                  // from the database                    var sp = Stopwatch.StartNew();                  while (sp.ElapsedMilliseconds < 60 * 1000)                  {                      if (Interlocked.Read(ref _usages) == 0)                          break;                        if (_waitForUsagesOnDisposal.Wait(1000))                          _waitForUsagesOnDisposal.Reset();                  }                    var exceptionAggregator = new ExceptionAggregator(_logger' $"Could not dispose {nameof(DocumentDatabase)} {Name}");                    foreach (var connection in RunningTcpConnections)                  {                      exceptionAggregator.Execute(() =>                      {                          connection.Dispose();                      });                  }                    exceptionAggregator.Execute(() =>                  {                      TxMerger?.Dispose();                  });                    if (_indexStoreTask != null)                  {                      exceptionAggregator.Execute(() =>                      {                          _indexStoreTask.Wait(DatabaseShutdown);                          _indexStoreTask = null;                      });                  }                    exceptionAggregator.Execute(() =>                  {                      IndexStore?.Dispose();                      IndexStore = null;                  });                    exceptionAggregator.Execute(() =>                  {                      ExpiredDocumentsCleaner?.Dispose();                      ExpiredDocumentsCleaner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      PeriodicBackupRunner?.Dispose();                      PeriodicBackupRunner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      DocumentTombstoneCleaner?.Dispose();                      DocumentTombstoneCleaner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      ReplicationLoader?.Dispose();                      ReplicationLoader = null;                  });                    exceptionAggregator.Execute(() =>                  {                      EtlLoader?.Dispose();                      EtlLoader = null;                  });                    exceptionAggregator.Execute(() =>                  {                      Operations?.Dispose(exceptionAggregator);                      Operations = null;                  });                    exceptionAggregator.Execute(() =>                  {                      NotificationCenter?.Dispose();                      NotificationCenter = null;                  });                                    exceptionAggregator.Execute(() =>                  {                      SubscriptionStorage?.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      ConfigurationStorage?.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      DocumentsStorage?.Dispose();                      DocumentsStorage = null;                  });                    exceptionAggregator.Execute(() =>                  {                      _databaseShutdown.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      if (MasterKey == null)                          return;                      fixed (byte* pKey = MasterKey)                      {                          Sodium.ZeroMemory(pKey' MasterKey.Length);                      }                  });                    exceptionAggregator.ThrowIfNeeded();              }
Magic Number,Raven.Server.Documents,DocumentDatabase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentDatabase.cs,Dispose,The following statement contains a magic number: lock (this)              {                  if (_databaseShutdown.IsCancellationRequested)                      return; // double dispose?                    //before we dispose of the database we take its latest info to be displayed in the studio                  try                  {                      var databaseInfo = GenerateDatabaseInfo();                      if (databaseInfo != null)                          DatabaseInfoCache?.InsertDatabaseInfo(databaseInfo' Name);                  }                  catch (Exception e)                  {                      // if we encountered a catastrophic failure we might not be able to retrieve database info                        if (_logger.IsInfoEnabled)                          _logger.Info("Failed to generate and store database info"' e);                  }                    _databaseShutdown.Cancel();                    // we'll wait for 1 minute to drain all the requests                  // from the database                    var sp = Stopwatch.StartNew();                  while (sp.ElapsedMilliseconds < 60 * 1000)                  {                      if (Interlocked.Read(ref _usages) == 0)                          break;                        if (_waitForUsagesOnDisposal.Wait(1000))                          _waitForUsagesOnDisposal.Reset();                  }                    var exceptionAggregator = new ExceptionAggregator(_logger' $"Could not dispose {nameof(DocumentDatabase)} {Name}");                    foreach (var connection in RunningTcpConnections)                  {                      exceptionAggregator.Execute(() =>                      {                          connection.Dispose();                      });                  }                    exceptionAggregator.Execute(() =>                  {                      TxMerger?.Dispose();                  });                    if (_indexStoreTask != null)                  {                      exceptionAggregator.Execute(() =>                      {                          _indexStoreTask.Wait(DatabaseShutdown);                          _indexStoreTask = null;                      });                  }                    exceptionAggregator.Execute(() =>                  {                      IndexStore?.Dispose();                      IndexStore = null;                  });                    exceptionAggregator.Execute(() =>                  {                      ExpiredDocumentsCleaner?.Dispose();                      ExpiredDocumentsCleaner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      PeriodicBackupRunner?.Dispose();                      PeriodicBackupRunner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      DocumentTombstoneCleaner?.Dispose();                      DocumentTombstoneCleaner = null;                  });                    exceptionAggregator.Execute(() =>                  {                      ReplicationLoader?.Dispose();                      ReplicationLoader = null;                  });                    exceptionAggregator.Execute(() =>                  {                      EtlLoader?.Dispose();                      EtlLoader = null;                  });                    exceptionAggregator.Execute(() =>                  {                      Operations?.Dispose(exceptionAggregator);                      Operations = null;                  });                    exceptionAggregator.Execute(() =>                  {                      NotificationCenter?.Dispose();                      NotificationCenter = null;                  });                                    exceptionAggregator.Execute(() =>                  {                      SubscriptionStorage?.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      ConfigurationStorage?.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      DocumentsStorage?.Dispose();                      DocumentsStorage = null;                  });                    exceptionAggregator.Execute(() =>                  {                      _databaseShutdown.Dispose();                  });                    exceptionAggregator.Execute(() =>                  {                      if (MasterKey == null)                          return;                      fixed (byte* pKey = MasterKey)                      {                          Sodium.ZeroMemory(pKey' MasterKey.Length);                      }                  });                    exceptionAggregator.ThrowIfNeeded();              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetSliceFromId,The following statement contains a magic number: if (id.Length > 512)                  ThrowDocumentIdTooBig(id);
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetSliceFromId,The following statement contains a magic number: for (var i = 0; i < id.Length; i++)              {                  var ch = id[i];                  if (ch > 127) // not ASCII' use slower mode                      goto UnlikelyUnicode;                  if ((ch >= 65) && (ch <= 90))                      buffer.Address[i] = (byte)(ch | 0x20);                  else                      buffer.Address[i] = (byte)ch;              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetSliceFromId,The following statement contains a magic number: for (var i = 0; i < id.Length; i++)              {                  var ch = id[i];                  if (ch > 127) // not ASCII' use slower mode                      goto UnlikelyUnicode;                  if ((ch >= 65) && (ch <= 90))                      buffer.Address[i] = (byte)(ch | 0x20);                  else                      buffer.Address[i] = (byte)ch;              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetSliceFromId,The following statement contains a magic number: for (var i = 0; i < id.Length; i++)              {                  var ch = id[i];                  if (ch > 127) // not ASCII' use slower mode                      goto UnlikelyUnicode;                  if ((ch >= 65) && (ch <= 90))                      buffer.Address[i] = (byte)(ch | 0x20);                  else                      buffer.Address[i] = (byte)ch;              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetSliceFromUnicodeKey,The following statement contains a magic number: fixed (char* pChars = key)              {                  var destChars = (char*)buffer;                  for (var i = 0; i < key.Length; i++)                      destChars[i] = char.ToLowerInvariant(pChars[i]);                    var keyBytes = buffer + key.Length * sizeof(char);                    var size = Encoding.GetBytes(destChars' key.Length' keyBytes' byteCount);                    if (size > 512)                      ThrowDocumentIdTooBig(key);                    return Slice.External(context.Allocator' keyBytes' (ushort)size' out keySlice);              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLower,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  byte ch = str[i];                    // PERF: Trick to avoid multiple compare instructions on hot loops.                   //       This is the same as (ch >= 65 && ch <= 90)                  if (ch - 65 <= 90 - 65)                   {                      ch = (byte)(ch | 0x20);                  }                  else                  {                      if (ch > 127) // not ASCII' use slower mode                          goto UnlikelyUnicode;                  }                    pointer[i] = ch;              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLower,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  byte ch = str[i];                    // PERF: Trick to avoid multiple compare instructions on hot loops.                   //       This is the same as (ch >= 65 && ch <= 90)                  if (ch - 65 <= 90 - 65)                   {                      ch = (byte)(ch | 0x20);                  }                  else                  {                      if (ch > 127) // not ASCII' use slower mode                          goto UnlikelyUnicode;                  }                    pointer[i] = ch;              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLower,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  byte ch = str[i];                    // PERF: Trick to avoid multiple compare instructions on hot loops.                   //       This is the same as (ch >= 65 && ch <= 90)                  if (ch - 65 <= 90 - 65)                   {                      ch = (byte)(ch | 0x20);                  }                  else                  {                      if (ch > 127) // not ASCII' use slower mode                          goto UnlikelyUnicode;                  }                    pointer[i] = ch;              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLower,The following statement contains a magic number: for (int i = 0; i < size; i++)              {                  byte ch = str[i];                    // PERF: Trick to avoid multiple compare instructions on hot loops.                   //       This is the same as (ch >= 65 && ch <= 90)                  if (ch - 65 <= 90 - 65)                   {                      ch = (byte)(ch | 0x20);                  }                  else                  {                      if (ch > 127) // not ASCII' use slower mode                          goto UnlikelyUnicode;                  }                    pointer[i] = ch;              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLowerIdSliceAndStorageKey,The following statement contains a magic number: fixed (char* pChars = str)              {                                  for (var i = 0; i < strLength; i++)                  {                      uint ch = pChars[i];                        // PERF: Trick to avoid multiple compare instructions on hot loops.                       //       This is the same as (ch >= 65 && ch <= 90)                      if (ch - 65 <= 90 - 65)                      {                          ptr[i] = (byte)(ch | 0x20);                      }                      else                      {                          if (ch > 127) // not ASCII' use slower mode                              goto UnlikelyUnicode;                            ptr[i] = (byte)ch;                      }                        ptr[i + idSize + maxStrSize] = (byte)ch;                  }                    // TODO: We may remove this before RTM' but given the criticality of this code I would prefer this assertion to be here until then.                   Debug.Assert(Encoding.GetByteCount(pChars' strLength) == strLength);                  _jsonParserState.FindEscapePositionsIn(ptr' strLength' escapePositionsSize);              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLowerIdSliceAndStorageKey,The following statement contains a magic number: fixed (char* pChars = str)              {                                  for (var i = 0; i < strLength; i++)                  {                      uint ch = pChars[i];                        // PERF: Trick to avoid multiple compare instructions on hot loops.                       //       This is the same as (ch >= 65 && ch <= 90)                      if (ch - 65 <= 90 - 65)                      {                          ptr[i] = (byte)(ch | 0x20);                      }                      else                      {                          if (ch > 127) // not ASCII' use slower mode                              goto UnlikelyUnicode;                            ptr[i] = (byte)ch;                      }                        ptr[i + idSize + maxStrSize] = (byte)ch;                  }                    // TODO: We may remove this before RTM' but given the criticality of this code I would prefer this assertion to be here until then.                   Debug.Assert(Encoding.GetByteCount(pChars' strLength) == strLength);                  _jsonParserState.FindEscapePositionsIn(ptr' strLength' escapePositionsSize);              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLowerIdSliceAndStorageKey,The following statement contains a magic number: fixed (char* pChars = str)              {                                  for (var i = 0; i < strLength; i++)                  {                      uint ch = pChars[i];                        // PERF: Trick to avoid multiple compare instructions on hot loops.                       //       This is the same as (ch >= 65 && ch <= 90)                      if (ch - 65 <= 90 - 65)                      {                          ptr[i] = (byte)(ch | 0x20);                      }                      else                      {                          if (ch > 127) // not ASCII' use slower mode                              goto UnlikelyUnicode;                            ptr[i] = (byte)ch;                      }                        ptr[i + idSize + maxStrSize] = (byte)ch;                  }                    // TODO: We may remove this before RTM' but given the criticality of this code I would prefer this assertion to be here until then.                   Debug.Assert(Encoding.GetByteCount(pChars' strLength) == strLength);                  _jsonParserState.FindEscapePositionsIn(ptr' strLength' escapePositionsSize);              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,GetLowerIdSliceAndStorageKey,The following statement contains a magic number: fixed (char* pChars = str)              {                                  for (var i = 0; i < strLength; i++)                  {                      uint ch = pChars[i];                        // PERF: Trick to avoid multiple compare instructions on hot loops.                       //       This is the same as (ch >= 65 && ch <= 90)                      if (ch - 65 <= 90 - 65)                      {                          ptr[i] = (byte)(ch | 0x20);                      }                      else                      {                          if (ch > 127) // not ASCII' use slower mode                              goto UnlikelyUnicode;                            ptr[i] = (byte)ch;                      }                        ptr[i + idSize + maxStrSize] = (byte)ch;                  }                    // TODO: We may remove this before RTM' but given the criticality of this code I would prefer this assertion to be here until then.                   Debug.Assert(Encoding.GetByteCount(pChars' strLength) == strLength);                  _jsonParserState.FindEscapePositionsIn(ptr' strLength' escapePositionsSize);              }
Magic Number,Raven.Server.Documents,DocumentIdWorker,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentIdWorker.cs,UnicodeGetLowerIdAndStorageKey,The following statement contains a magic number: fixed (char* pChars = str)              {                  var size = Encoding.GetBytes(pChars' strLength' buffer.Ptr' maxStrSize);                  _jsonParserState.FindEscapePositionsIn(buffer.Ptr' size' escapePositionsSize);                    var destChars = (char*)buffer.Ptr;                  for (var i = 0; i < strLength; i++)                      destChars[i] = char.ToLowerInvariant(pChars[i]);                    byte* lowerId = buffer.Ptr + strLength * sizeof(char);                    int lowerSize = Encoding.GetBytes(destChars' strLength' lowerId' maxStrSize);                    if (lowerSize > 512)                      ThrowDocumentIdTooBig(str);                    byte* id = buffer.Ptr + strLength * sizeof(char) + maxStrSize;                  byte* writePos = id;                  int idSize = Encoding.GetBytes(pChars' strLength' writePos + maxIdLenSize' maxStrSize);                    var actualIdLenSize = JsonParserState.VariableSizeIntSize(idSize);                  if (actualIdLenSize < maxIdLenSize)                  {                      var movePtr = maxIdLenSize - actualIdLenSize;                      id += movePtr;                      writePos += movePtr;                  }                    JsonParserState.WriteVariableSizeInt(ref writePos' idSize);                  escapePositionsSize = _jsonParserState.WriteEscapePositionsTo(writePos + idSize);                  idSize += escapePositionsSize + maxIdLenSize;                    Slice.External(context.Allocator' id' idSize' out idSlice);                  Slice.External(context.Allocator' lowerId' lowerSize' out lowerIdSlice);                  return scope;              }
Magic Number,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,BuildDocumentId,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(id))              {                  knownNewId = true;                  id = Guid.NewGuid().ToString();              }              else              {                  // We use if instead of switch so the JIT will better inline this method                  var lastChar = id[id.Length - 1];                  if (lastChar == '|')                  {                      ThrowInvalidDocumentId(id);                  }                    if (lastChar == '/')                  {                                          string nodeTag = _documentDatabase.ServerStore.NodeTag;                        // PERF: we are creating an string and mutating it for performance reasons.                      //       while nasty this shouldnt have any side effects because value didn't                      //       escape yet the function' so while not pretty it works (and it's safe).                            string value = new string('0'' id.Length + 1 + 19 + nodeTag.Length);                      fixed (char* valuePtr = value)                      {                          char* valueTagPtr = valuePtr + value.Length - nodeTag.Length;                          for (int j = 0; j < nodeTag.Length; j++)                              valueTagPtr[j] = nodeTag[j];                            int i;                          for (i = 0; i < id.Length; i++)                              valuePtr[i] = id[i];                            i += 19;                          valuePtr[i] = '-';                            Format.Backwards.WriteNumber(valuePtr + i - 1' (ulong)newEtag);                      }                        id = value;                        knownNewId = true;                  }                  else                  {                      knownNewId = false;                  }              }
Magic Number,Raven.Server.Documents,DocumentPutAction,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentPutAction.cs,BuildDocumentId,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(id))              {                  knownNewId = true;                  id = Guid.NewGuid().ToString();              }              else              {                  // We use if instead of switch so the JIT will better inline this method                  var lastChar = id[id.Length - 1];                  if (lastChar == '|')                  {                      ThrowInvalidDocumentId(id);                  }                    if (lastChar == '/')                  {                                          string nodeTag = _documentDatabase.ServerStore.NodeTag;                        // PERF: we are creating an string and mutating it for performance reasons.                      //       while nasty this shouldnt have any side effects because value didn't                      //       escape yet the function' so while not pretty it works (and it's safe).                            string value = new string('0'' id.Length + 1 + 19 + nodeTag.Length);                      fixed (char* valuePtr = value)                      {                          char* valueTagPtr = valuePtr + value.Length - nodeTag.Length;                          for (int j = 0; j < nodeTag.Length; j++)                              valueTagPtr[j] = nodeTag[j];                            int i;                          for (i = 0; i < id.Length; i++)                              valuePtr[i] = id[i];                            i += 19;                          valuePtr[i] = '-';                            Format.Backwards.WriteNumber(valuePtr + i - 1' (ulong)newEtag);                      }                        id = value;                        knownNewId = true;                  }                  else                  {                      knownNewId = false;                  }              }
Magic Number,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,Initialize,The following statement contains a magic number: try              {                  ContextPool = new DocumentsContextPool(DocumentDatabase);                  Environment = new StorageEnvironment(options);                    using (var tx = Environment.WriteTransaction())                  {                      NewPageAllocator.MaybePrefetchSections(                          tx.LowLevelTransaction.RootObjects'                          tx.LowLevelTransaction);                        tx.CreateTree(DocsSlice);                      tx.CreateTree(LastReplicatedEtagsSlice);                      tx.CreateTree(GlobalTreeSlice);                                            CollectionsSchema.Create(tx' CollectionsSlice' 32);                        RevisionsStorage = new RevisionsStorage(DocumentDatabase' tx);                      ExpirationStorage = new ExpirationStorage(DocumentDatabase' tx);                      ConflictsStorage = new ConflictsStorage(DocumentDatabase' tx);                      AttachmentsStorage = new AttachmentsStorage(DocumentDatabase' tx);                        DocumentPut = new DocumentPutAction(this' DocumentDatabase);                        _lastEtag = ReadLastEtag(tx);                      _collectionsCache = ReadCollections(tx);                        tx.Commit();                  }              }              catch (Exception e)              {                  if (_logger.IsOperationsEnabled)                      _logger.Operations("Could not open server store for " + _name' e);                    Dispose();                  options.Dispose();                  throw;              }
Magic Number,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,ExtractCollectionName,The following statement contains a magic number: using (DocumentIdWorker.GetStringPreserveCase(context' collectionName' out Slice collectionSlice))              {                  using (collections.Allocate(out TableValueBuilder tvr))                  {                      tvr.Add(collectionSlice);                      collections.Set(tvr);                  }                    DocsSchema.Create(context.Transaction.InnerTransaction' name.GetTableName(CollectionTableType.Documents)' 16);                  TombstonesSchema.Create(context.Transaction.InnerTransaction' name.GetTableName(CollectionTableType.Tombstones)' 16);                    // Add to cache ONLY if the transaction was committed.                   // this would prevent NREs next time a PUT is run'since if a transaction                  // is not commited' DocsSchema and TombstonesSchema will not be actually created..                  // has to happen after the commit' but while we are holding the write tx lock                  context.Transaction.InnerTransaction.LowLevelTransaction.BeforeCommitFinalization += _ =>                  {                      var collectionNames = new Dictionary<string' CollectionName>(_collectionsCache' OrdinalIgnoreCaseStringStructComparer.Instance)                      {                          [name.Name] = name                      };                      _collectionsCache = collectionNames;                  };              }
Magic Number,Raven.Server.Documents,DocumentsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\DocumentsStorage.cs,ExtractCollectionName,The following statement contains a magic number: using (DocumentIdWorker.GetStringPreserveCase(context' collectionName' out Slice collectionSlice))              {                  using (collections.Allocate(out TableValueBuilder tvr))                  {                      tvr.Add(collectionSlice);                      collections.Set(tvr);                  }                    DocsSchema.Create(context.Transaction.InnerTransaction' name.GetTableName(CollectionTableType.Documents)' 16);                  TombstonesSchema.Create(context.Transaction.InnerTransaction' name.GetTableName(CollectionTableType.Tombstones)' 16);                    // Add to cache ONLY if the transaction was committed.                   // this would prevent NREs next time a PUT is run'since if a transaction                  // is not commited' DocsSchema and TombstonesSchema will not be actually created..                  // has to happen after the commit' but while we are holding the write tx lock                  context.Transaction.InnerTransaction.LowLevelTransaction.BeforeCommitFinalization += _ =>                  {                      var collectionNames = new Dictionary<string' CollectionName>(_collectionsCache' OrdinalIgnoreCaseStringStructComparer.Instance)                      {                          [name.Name] = name                      };                      _collectionsCache = collectionNames;                  };              }
Magic Number,Raven.Server.Documents,JsonClassGenerator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,Execute,The following statement contains a magic number: if (metadata != null)              {                  // retrieve the class and metadata if available.                  // "Raven-Clr-Type": "Namespace.ClassName' AssemblyName"                    if (metadata.TryGet(Constants.Documents.Metadata.RavenClrType' out LazyStringValue lazyStringValue))                  {                      var values = lazyStringValue.ToString().Split(''');                      if (values.Length == 2)                      {                          var data = values[0];                          var index = data.LastIndexOf('.');                          if (index > 0)                          {                              var potentialClass = data.Substring(index + 1);                              if (potentialClass.Length > 0)                                  @class = potentialClass;                                var potentialNamespace = data.Substring(0' index);                              if (potentialNamespace.Length > 0)                                  @namespace = potentialNamespace;                          }                      }                  }              }
Magic Number,Raven.Server.Documents,FieldType,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GetHashCode,The following statement contains a magic number: unchecked // overflow is fine' just wrap                  {                      var hash = 17;                      // suitable nullity checks etc' of course :)                      hash = hash * 23 + Name.GetHashCode();                      hash = hash * 23 + IsPrimitive.GetHashCode();                      hash = hash * 23 + IsArray.GetHashCode();                      return hash;                  }
Magic Number,Raven.Server.Documents,FieldType,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GetHashCode,The following statement contains a magic number: unchecked // overflow is fine' just wrap                  {                      var hash = 17;                      // suitable nullity checks etc' of course :)                      hash = hash * 23 + Name.GetHashCode();                      hash = hash * 23 + IsPrimitive.GetHashCode();                      hash = hash * 23 + IsArray.GetHashCode();                      return hash;                  }
Magic Number,Raven.Server.Documents,FieldType,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GetHashCode,The following statement contains a magic number: unchecked // overflow is fine' just wrap                  {                      var hash = 17;                      // suitable nullity checks etc' of course :)                      hash = hash * 23 + Name.GetHashCode();                      hash = hash * 23 + IsPrimitive.GetHashCode();                      hash = hash * 23 + IsArray.GetHashCode();                      return hash;                  }
Magic Number,Raven.Server.Documents,FieldType,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GetHashCode,The following statement contains a magic number: unchecked // overflow is fine' just wrap                  {                      var hash = 17;                      // suitable nullity checks etc' of course :)                      hash = hash * 23 + Name.GetHashCode();                      hash = hash * 23 + IsPrimitive.GetHashCode();                      hash = hash * 23 + IsArray.GetHashCode();                      return hash;                  }
Magic Number,Raven.Server.Documents,ClassType,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GetHashCode,The following statement contains a magic number: unchecked // overflow is fine' just wrap                  {                      var hash = 17;                        // suitable nullity checks etc' of course :)                      hash = hash * 23 + IsPrimitive.GetHashCode();                      hash = hash * 23 + IsArray.GetHashCode();                      hash = hash * 23 + Properties.GetHashCode();                        return hash;                  }
Magic Number,Raven.Server.Documents,ClassType,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GetHashCode,The following statement contains a magic number: unchecked // overflow is fine' just wrap                  {                      var hash = 17;                        // suitable nullity checks etc' of course :)                      hash = hash * 23 + IsPrimitive.GetHashCode();                      hash = hash * 23 + IsArray.GetHashCode();                      hash = hash * 23 + Properties.GetHashCode();                        return hash;                  }
Magic Number,Raven.Server.Documents,ClassType,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GetHashCode,The following statement contains a magic number: unchecked // overflow is fine' just wrap                  {                      var hash = 17;                        // suitable nullity checks etc' of course :)                      hash = hash * 23 + IsPrimitive.GetHashCode();                      hash = hash * 23 + IsArray.GetHashCode();                      hash = hash * 23 + Properties.GetHashCode();                        return hash;                  }
Magic Number,Raven.Server.Documents,ClassType,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\JsonClassGenerator.cs,GetHashCode,The following statement contains a magic number: unchecked // overflow is fine' just wrap                  {                      var hash = 17;                        // suitable nullity checks etc' of course :)                      hash = hash * 23 + IsPrimitive.GetHashCode();                      hash = hash * 23 + IsArray.GetHashCode();                      hash = hash * 23 + Properties.GetHashCode();                        return hash;                  }
Magic Number,Raven.Server.Documents,LiveIOStatsCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\LiveIOStatsCollector.cs,StartCollectingMetrics,The following statement contains a magic number: using (var linkedToken = CancellationTokenSource.CreateLinkedTokenSource(_resourceShutdown' _cts.Token))              {                  var token = linkedToken.Token;                    // 2. Prepare & put data from the Dictionary into the Queue every 3 seconds                  while (token.IsCancellationRequested == false)                  {                      await TimeoutManager.WaitFor(TimeSpan.FromMilliseconds(3000)' token).ConfigureAwait(false);                        if (token.IsCancellationRequested)                          break;                        var ioMetricsResponse = PrepareIOMetrics();                      if (ioMetricsResponse != null)                      {                          MetricsQueue.Enqueue(ioMetricsResponse);                      }                  }              }
Magic Number,Raven.Server.Documents,LiveIOStatsCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\LiveIOStatsCollector.cs,PrepareIOMetrics,The following statement contains a magic number: foreach (var envFile in _perEnvironmentsFilesMetrics)              {                  // 2. Retrieve/Take meter items per environment file from the collection in dictionary                  var listOfMeterItems = new List<IoMeterBuffer.MeterItem>();                  while (envFile.Value.TryTake(out IoMeterBuffer.MeterItem newItem))                  {                      listOfMeterItems.Add(newItem);                  }                    if (listOfMeterItems.Count == 0)                      continue;                    // 3. Get env path & file name from dictionary item                  var fileName = Path.GetFileName(envFile.Key);                  var envPath = Path.GetDirectoryName(envFile.Key);                    // 4. Find relevant environment                  var currentEnvironment = preparedMetricsResponse.Environments.FirstOrDefault(x => x.Path == envPath);                  if (currentEnvironment == null)                  {                      // If new index for example was added...                      currentEnvironment = new IOMetricsEnvironment { Path = envPath' Files = new List<IOMetricsFileStats>() };                      preparedMetricsResponse.Environments.Add(currentEnvironment);                  }                    if (currentEnvironment.Path == _basePath)                  {                      currentEnvironment.Path += "\\Documents";                  }                    // 5. Prepare response' add recent items.  Note: History items are not added since studio does not display them anyway                  var preparedFilesInfo = currentEnvironment.Files.FirstOrDefault(x => x.File == fileName) ?? new IOMetricsFileStats                  {                      File = fileName                  };                    currentEnvironment.Files.Add(preparedFilesInfo);                    foreach (var item in listOfMeterItems)                  {                      var preparedRecentStats = new IOMetricsRecentStats                      {                          Start = item.Start.GetDefaultRavenFormat()'                          Size = item.Size'                          HumaneSize = Sizes.Humane(item.Size)'                          FileSize = item.FileSize'                          HumaneFileSize = Sizes.Humane(item.FileSize)'                          Duration = Math.Round(item.Duration.TotalMilliseconds' 2)'                          Type = item.Type                      };                        responseHasContent = true;                      preparedFilesInfo.Recent.Add(preparedRecentStats);                  }              }
Magic Number,Raven.Server.Documents,StreamsTempFile,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\StreamsTempFile.cs,StreamsTempFile,The following statement contains a magic number: _file = new FileStream(_tempFile' FileMode.CreateNew' FileAccess.ReadWrite' FileShare.ReadWrite' 4096' FileOptions.DeleteOnClose | FileOptions.SequentialScan);
Magic Number,Raven.Server.Documents,StreamsTempFile,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\StreamsTempFile.cs,Reset,The following statement contains a magic number: const int _128mb = 128 * 1024 * 1024;
Magic Number,Raven.Server.Documents,StreamsTempFile,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\StreamsTempFile.cs,Reset,The following statement contains a magic number: const int _128mb = 128 * 1024 * 1024;
Magic Number,Raven.Server.Documents,StreamsTempFile,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\StreamsTempFile.cs,Reset,The following statement contains a magic number: const int _128mb = 128 * 1024 * 1024;
Magic Number,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,MergeOperationThreadProc,The following statement contains a magic number: try              {                  while (_runTransactions)                  {                      if (_operations.IsEmpty)                      {                          using (var generalMeter = GeneralWaitPerformanceMetrics.MeterPerformanceRate())                          {                              generalMeter.IncrementCounter(1);                              _waitHandle.Wait(_shutdown);                          }                          _waitHandle.Reset();                      }                        MergeTransactionsOnce();                  }              }              catch (OperationCanceledException)              {                  // clean shutdown' nothing to do              }              catch (Exception e)              {                  if (_log.IsOperationsEnabled)                  {                      _log.Operations(                          "Serious failure in transaction merging thread' the database must be restarted!"'                          e);                  }                  Interlocked.Exchange(ref _edi' ExceptionDispatchInfo.Capture(e));                  // cautionary' we make sure that stuff that is waiting on the                   // queue is notified about this catasropic error and we wait                  // just a bit more to verify that nothing racy can still get                   // there                  for (int i = 0; i < 3; i++)                  {                      while (_operations.TryDequeue(out MergedTransactionCommand result))                      {                          result.Exception = e;                          NotifyOnThreadPool(result);                      }                      try                      {                          _waitHandle.Wait(50' _shutdown);                          _waitHandle.Reset();                      }                      catch (OperationCanceledException)                      {                          break;                      }                  }              }
Magic Number,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,MergeOperationThreadProc,The following statement contains a magic number: try              {                  while (_runTransactions)                  {                      if (_operations.IsEmpty)                      {                          using (var generalMeter = GeneralWaitPerformanceMetrics.MeterPerformanceRate())                          {                              generalMeter.IncrementCounter(1);                              _waitHandle.Wait(_shutdown);                          }                          _waitHandle.Reset();                      }                        MergeTransactionsOnce();                  }              }              catch (OperationCanceledException)              {                  // clean shutdown' nothing to do              }              catch (Exception e)              {                  if (_log.IsOperationsEnabled)                  {                      _log.Operations(                          "Serious failure in transaction merging thread' the database must be restarted!"'                          e);                  }                  Interlocked.Exchange(ref _edi' ExceptionDispatchInfo.Capture(e));                  // cautionary' we make sure that stuff that is waiting on the                   // queue is notified about this catasropic error and we wait                  // just a bit more to verify that nothing racy can still get                   // there                  for (int i = 0; i < 3; i++)                  {                      while (_operations.TryDequeue(out MergedTransactionCommand result))                      {                          result.Exception = e;                          NotifyOnThreadPool(result);                      }                      try                      {                          _waitHandle.Wait(50' _shutdown);                          _waitHandle.Reset();                      }                      catch (OperationCanceledException)                      {                          break;                      }                  }              }
Magic Number,Raven.Server.Documents,TransactionOperationsMerger,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TransactionOperationsMerger.cs,ExecutePendingOperationsInTransaction,The following statement contains a magic number: do              {                  // RavenDB-7732 - Even if we merged multiple seprate operations into                   // a single transaction in Voron' we're still going to have a separate                  // tx marker for them for the purpose of replication' to avoid creating                  // overly large replication batches.                  context.TransactionMarkerOffset++;                    if (TryGetNextOperation(previousOperation' out MergedTransactionCommand op' ref meter) == false)                      break;                    pendingOps.Add(op);                  meter.IncrementCounter(1);                  meter.IncreamentCommands(op.Execute(context));                      if (previousOperation != null && previousOperation.IsCompleted)                  {                      if (_log.IsInfoEnabled)                      {                          _log.Info(                              $"Stopping merged operations because previous transaction async commit completed. Took {sp.Elapsed} with {pendingOps.Count} operations and {_operations.Count} remaining operations");                      }                      return GetPendingOperationsStatus(context);                  }                  if (sp.ElapsedMilliseconds > MaxTimeToWait)                  {                      if (previousOperation != null)                      {                          continue;                      }                      if (_log.IsInfoEnabled)                      {                          _log.Info($"Stopping merged operations because {sp.Elapsed} passed {pendingOps.Count} operations and {_operations.Count} remaining operations");                      }                      return GetPendingOperationsStatus(context);                  }                    if (IntPtr.Size == sizeof(int) || _parent.Configuration.Storage.ForceUsing32BitsPager)                  {                      // we need to be sure that we don't use up too much virtual space                      var llt = context.Transaction.InnerTransaction.LowLevelTransaction;                      var modifiedSize = llt.NumberOfModifiedPages * Constants.Storage.PageSize;                      if (modifiedSize > 4 * Constants.Size.Megabyte)                      {                          return GetPendingOperationsStatus(context);                      }                  }                } while (true);
Magic Number,Raven.Server.Documents.ETL,EtlProcess<TExtracted;TTransformed;TConfiguration;TConnectionString>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcess.cs,AddPerformanceStats,The following statement contains a magic number: while (_lastEtlStats.Count > 25)                  _lastEtlStats.TryDequeue(out stats);
Magic Number,Raven.Server.Documents.ETL,EtlProcessStatistics,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcessStatistics.cs,RecordTransformationError,The following statement contains a magic number: if (TransformationErrors < 100)                  return;
Magic Number,Raven.Server.Documents.ETL,EtlProcessStatistics,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlProcessStatistics.cs,RecordLoadError,The following statement contains a magic number: if (LoadErrors < 100)              {                  _notificationCenter.Add(LastAlert);                  return;              }
Magic Number,Raven.Server.Documents.ETL,EtlTransformer<TExtracted;TTransformed>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\EtlTransformer.cs,LoadToFunctionTranslator,The following statement contains a magic number: if(args.Length != 2)                  throw new InvalidOperationException("loadTo(name' obj) must be called with exactly 2 parameters");
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlEtlPerformanceStats,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\EtlPerformanceStats.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = BatchSize;                  hashCode = (hashCode * 397) ^ Duration.GetHashCode();                  hashCode = (hashCode * 397) ^ Started.GetHashCode();                  return hashCode;              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlEtlPerformanceStats,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\EtlPerformanceStats.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = BatchSize;                  hashCode = (hashCode * 397) ^ Duration.GetHashCode();                  hashCode = (hashCode * 397) ^ Started.GetHashCode();                  return hashCode;              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlDocumentTransformer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlDocumentTransformer.cs,IsLoadAttachment,The following statement contains a magic number: if (*(long*)buffer != 7883660417928814884 || // $attachm                  *(int*)(buffer + 8) != 796159589) // ent/              {                  attachmentName = null;                  return false;              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlDocumentTransformer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlDocumentTransformer.cs,IsLoadAttachment,The following statement contains a magic number: if (*(long*)buffer != 7883660417928814884 || // $attachm                  *(int*)(buffer + 8) != 796159589) // ent/              {                  attachmentName = null;                  return false;              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlDocumentTransformer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlDocumentTransformer.cs,IsLoadAttachment,The following statement contains a magic number: if (*(long*)buffer != 7883660417928814884 || // $attachm                  *(int*)(buffer + 8) != 796159589) // ent/              {                  attachmentName = null;                  return false;              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,HandleFallback,The following statement contains a magic number: if (Statistics.LastErrorTime == null)                  FallbackTime = TimeSpan.FromSeconds(5);              else              {                  // double the fallback time (but don't cross 15 minutes)                  var secondsSinceLastError = (Database.Time.GetUtcNow() - Statistics.LastErrorTime.Value).TotalSeconds;                    FallbackTime = TimeSpan.FromSeconds(Math.Min(60 * 15' Math.Max(5' secondsSinceLastError * 2)));              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,HandleFallback,The following statement contains a magic number: if (Statistics.LastErrorTime == null)                  FallbackTime = TimeSpan.FromSeconds(5);              else              {                  // double the fallback time (but don't cross 15 minutes)                  var secondsSinceLastError = (Database.Time.GetUtcNow() - Statistics.LastErrorTime.Value).TotalSeconds;                    FallbackTime = TimeSpan.FromSeconds(Math.Min(60 * 15' Math.Max(5' secondsSinceLastError * 2)));              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,HandleFallback,The following statement contains a magic number: if (Statistics.LastErrorTime == null)                  FallbackTime = TimeSpan.FromSeconds(5);              else              {                  // double the fallback time (but don't cross 15 minutes)                  var secondsSinceLastError = (Database.Time.GetUtcNow() - Statistics.LastErrorTime.Value).TotalSeconds;                    FallbackTime = TimeSpan.FromSeconds(Math.Min(60 * 15' Math.Max(5' secondsSinceLastError * 2)));              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,HandleFallback,The following statement contains a magic number: if (Statistics.LastErrorTime == null)                  FallbackTime = TimeSpan.FromSeconds(5);              else              {                  // double the fallback time (but don't cross 15 minutes)                  var secondsSinceLastError = (Database.Time.GetUtcNow() - Statistics.LastErrorTime.Value).TotalSeconds;                    FallbackTime = TimeSpan.FromSeconds(Math.Min(60 * 15' Math.Max(5' secondsSinceLastError * 2)));              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL,SqlEtl,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\SqlEtl.cs,HandleFallback,The following statement contains a magic number: if (Statistics.LastErrorTime == null)                  FallbackTime = TimeSpan.FromSeconds(5);              else              {                  // double the fallback time (but don't cross 15 minutes)                  var secondsSinceLastError = (Database.Time.GetUtcNow() - Statistics.LastErrorTime.Value).TotalSeconds;                    FallbackTime = TimeSpan.FromSeconds(Math.Min(60 * 15' Math.Max(5' secondsSinceLastError * 2)));              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,InsertItems,The following statement contains a magic number: foreach (var itemToReplicate in toInsert)              {                  sp.Restart();                    using (var cmd = CreateCommand())                  {                      token.ThrowIfCancellationRequested();                        var sb = new StringBuilder("INSERT INTO ")                          .Append(GetTableNameString(tableName))                          .Append(" (")                          .Append(_commandBuilder.QuoteIdentifier(pkName))                          .Append("' ");                      foreach (var column in itemToReplicate.Columns)                      {                          if (column.Id == pkName)                              continue;                          sb.Append(_commandBuilder.QuoteIdentifier(column.Id)).Append("' ");                      }                      sb.Length = sb.Length - 2;                        var pkParam = cmd.CreateParameter();                        pkParam.ParameterName = GetParameterName(pkName);                      pkParam.Value = itemToReplicate.DocumentId.ToString();                      cmd.Parameters.Add(pkParam);                        sb.Append(") \r\nVALUES (")                          .Append(GetParameterName(pkName))                          .Append("' ");                        foreach (var column in itemToReplicate.Columns)                      {                          if (column.Id == pkName)                              continue;                          var colParam = cmd.CreateParameter();                          colParam.ParameterName = column.Id;                          SetParamValue(colParam' column' _stringParserList);                          cmd.Parameters.Add(colParam);                          sb.Append(GetParameterName(column.Id)).Append("' ");                      }                      sb.Length = sb.Length - 2;                      sb.Append(")");                        if (IsSqlServerFactoryType && _etl.Configuration.ForceQueryRecompile)                      {                          sb.Append(" OPTION(RECOMPILE)");                      }                        var stmt = sb.ToString();                      cmd.CommandText = stmt;                        commandCallback?.Invoke(cmd);                        try                      {                          cmd.ExecuteNonQuery();                          inserted++;                      }                      catch (Exception e)                      {                          if (_logger.IsInfoEnabled)                          {                              _logger.Info(                                  $"Failed to replicate changes to relational database for: {_etl.Name} " +                                  $"(doc: {itemToReplicate.DocumentId})' will continue trying. {Environment.NewLine}{cmd.CommandText}"' e);                          }                            _etl.Statistics.RecordLoadError(e);                      }                      finally                      {                          sp.Stop();                            var elapsedMilliseconds = sp.ElapsedMilliseconds;                            if (_logger.IsInfoEnabled)                              _logger.Info($"Insert took: {elapsedMilliseconds}ms' statement: {stmt}");                            var tableMetrics = _etl.SqlMetrics.GetTableMetrics(tableName);                          tableMetrics.InsertActionsMeter.Mark(1);                            if (elapsedMilliseconds > LongStatementWarnThresholdInMs)                          {                              HandleSlowSql(elapsedMilliseconds' stmt);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,InsertItems,The following statement contains a magic number: foreach (var itemToReplicate in toInsert)              {                  sp.Restart();                    using (var cmd = CreateCommand())                  {                      token.ThrowIfCancellationRequested();                        var sb = new StringBuilder("INSERT INTO ")                          .Append(GetTableNameString(tableName))                          .Append(" (")                          .Append(_commandBuilder.QuoteIdentifier(pkName))                          .Append("' ");                      foreach (var column in itemToReplicate.Columns)                      {                          if (column.Id == pkName)                              continue;                          sb.Append(_commandBuilder.QuoteIdentifier(column.Id)).Append("' ");                      }                      sb.Length = sb.Length - 2;                        var pkParam = cmd.CreateParameter();                        pkParam.ParameterName = GetParameterName(pkName);                      pkParam.Value = itemToReplicate.DocumentId.ToString();                      cmd.Parameters.Add(pkParam);                        sb.Append(") \r\nVALUES (")                          .Append(GetParameterName(pkName))                          .Append("' ");                        foreach (var column in itemToReplicate.Columns)                      {                          if (column.Id == pkName)                              continue;                          var colParam = cmd.CreateParameter();                          colParam.ParameterName = column.Id;                          SetParamValue(colParam' column' _stringParserList);                          cmd.Parameters.Add(colParam);                          sb.Append(GetParameterName(column.Id)).Append("' ");                      }                      sb.Length = sb.Length - 2;                      sb.Append(")");                        if (IsSqlServerFactoryType && _etl.Configuration.ForceQueryRecompile)                      {                          sb.Append(" OPTION(RECOMPILE)");                      }                        var stmt = sb.ToString();                      cmd.CommandText = stmt;                        commandCallback?.Invoke(cmd);                        try                      {                          cmd.ExecuteNonQuery();                          inserted++;                      }                      catch (Exception e)                      {                          if (_logger.IsInfoEnabled)                          {                              _logger.Info(                                  $"Failed to replicate changes to relational database for: {_etl.Name} " +                                  $"(doc: {itemToReplicate.DocumentId})' will continue trying. {Environment.NewLine}{cmd.CommandText}"' e);                          }                            _etl.Statistics.RecordLoadError(e);                      }                      finally                      {                          sp.Stop();                            var elapsedMilliseconds = sp.ElapsedMilliseconds;                            if (_logger.IsInfoEnabled)                              _logger.Info($"Insert took: {elapsedMilliseconds}ms' statement: {stmt}");                            var tableMetrics = _etl.SqlMetrics.GetTableMetrics(tableName);                          tableMetrics.InsertActionsMeter.Mark(1);                            if (elapsedMilliseconds > LongStatementWarnThresholdInMs)                          {                              HandleSlowSql(elapsedMilliseconds' stmt);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,DeleteItems,The following statement contains a magic number: const int maxParams = 1000;
Magic Number,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriter.cs,SetParamValue,The following statement contains a magic number: if (column.Value == null)                  colParam.Value = DBNull.Value;              else              {                  switch (column.Type & BlittableJsonReaderBase.TypesMask)                  {                      case BlittableJsonToken.Null:                          colParam.Value = DBNull.Value;                          break;                      case BlittableJsonToken.Boolean:                      case BlittableJsonToken.Integer:                          colParam.Value = column.Value;                          break;                      case BlittableJsonToken.LazyNumber:                          colParam.Value = (double)(LazyNumberValue)column.Value;                          break;                        case BlittableJsonToken.String:                          SetParamStringValue(colParam' ((LazyStringValue)column.Value).ToString()' stringParsers);                          break;                      case BlittableJsonToken.CompressedString:                          SetParamStringValue(colParam' ((LazyCompressedStringValue)column.Value).ToString()' stringParsers);                          break;                        case BlittableJsonToken.StartObject:                          var objectValue = (BlittableJsonReaderObject)column.Value;                          if (objectValue.Count >= 2)                          {                              if (objectValue.TryGetMember("Type"' out object dbType) && objectValue.TryGetMember("Value"' out object fieldValue))                              {                                  colParam.DbType = (DbType)Enum.Parse(typeof(DbType)' dbType.ToString()' false);                                  colParam.Value = fieldValue.ToString();                                    if (objectValue.TryGetMember("Size"' out object size))                                  {                                      colParam.Size = (int)size;                                  }                                  break;                              }                          }                          colParam.Value = objectValue.ToString();                          break;                      case BlittableJsonToken.StartArray:                          var blittableJsonReaderArray = (BlittableJsonReaderArray)column.Value;                          colParam.Value = blittableJsonReaderArray.ToString();                          break;                      default:                          {                              if (column.Value is Stream stream)                              {                                  colParam.DbType = DbType.Binary;                                    if (stream == Stream.Null)                                      colParam.Value = DBNull.Value;                                  else                                      colParam.Value = stream.ReadData();                                    break;                              }                              throw new InvalidOperationException("Cannot understand how to save " + column.Type + " for " + colParam.ParameterName);                          }                  }              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriterSimulator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriterSimulator.cs,GenerteInsertItemCommandText,The following statement contains a magic number: foreach (var itemToReplicate in dataForTable)              {                  token.ThrowIfCancellationRequested();                                    var sb = new StringBuilder("INSERT INTO ")                          .Append(GetTableNameString(tableName))                          .Append(" (")                          .Append(_commandBuilder.QuoteIdentifier(pkName))                          .Append("' ");                  foreach (var column in itemToReplicate.Columns)                  {                      if (column.Id == pkName)                          continue;                      sb.Append(_commandBuilder.QuoteIdentifier(column.Id)).Append("' ");                  }                  sb.Length = sb.Length - 2;                      sb.Append(") VALUES (")                      .Append("'")                      .Append(itemToReplicate.DocumentId)                      .Append("'")                      .Append("' ");                    foreach (var column in itemToReplicate.Columns)                  {                      if (column.Id == pkName)                          continue;                       DbParameter param = new SqlParameter();                       RelationalDatabaseWriter.SetParamValue(param' column' null);                       sb.Append("'").Append(param.Value).Append("'").Append("' ");                  }                  sb.Length = sb.Length - 2;                  sb.Append(")");                  if (IsSqlServerFactoryType && _configuration.ForceQueryRecompile)                  {                      sb.Append(" OPTION(RECOMPILE)");                  }                    sb.Append(";");                    yield return sb.ToString();              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriterSimulator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriterSimulator.cs,GenerteInsertItemCommandText,The following statement contains a magic number: foreach (var itemToReplicate in dataForTable)              {                  token.ThrowIfCancellationRequested();                                    var sb = new StringBuilder("INSERT INTO ")                          .Append(GetTableNameString(tableName))                          .Append(" (")                          .Append(_commandBuilder.QuoteIdentifier(pkName))                          .Append("' ");                  foreach (var column in itemToReplicate.Columns)                  {                      if (column.Id == pkName)                          continue;                      sb.Append(_commandBuilder.QuoteIdentifier(column.Id)).Append("' ");                  }                  sb.Length = sb.Length - 2;                      sb.Append(") VALUES (")                      .Append("'")                      .Append(itemToReplicate.DocumentId)                      .Append("'")                      .Append("' ");                    foreach (var column in itemToReplicate.Columns)                  {                      if (column.Id == pkName)                          continue;                       DbParameter param = new SqlParameter();                       RelationalDatabaseWriter.SetParamValue(param' column' null);                       sb.Append("'").Append(param.Value).Append("'").Append("' ");                  }                  sb.Length = sb.Length - 2;                  sb.Append(")");                  if (IsSqlServerFactoryType && _configuration.ForceQueryRecompile)                  {                      sb.Append(" OPTION(RECOMPILE)");                  }                    sb.Append(";");                    yield return sb.ToString();              }
Magic Number,Raven.Server.Documents.ETL.Providers.SQL.RelationalWriters,RelationalDatabaseWriterSimulator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Providers\SQL\RelationalWriters\RelationalDatabaseWriterSimulator.cs,GenerateDeleteItemsCommandText,The following statement contains a magic number: const int maxParams = 1000;
Magic Number,Raven.Server.Documents.ETL.Stats,EtlPerformanceOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Stats\EtlPerformanceOperation.cs,EtlPerformanceOperation,The following statement contains a magic number: DurationInMs = Math.Round(duration.TotalMilliseconds' 2);
Magic Number,Raven.Server.Documents.ETL.Stats,EtlPerformanceStats,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\ETL\Stats\EtlPerformanceStats.cs,EtlPerformanceStats,The following statement contains a magic number: DurationInMs = Math.Round(duration.TotalMilliseconds' 2);
Magic Number,Raven.Server.Documents.Expiration,ExpiredDocumentsCleaner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Expiration\ExpiredDocumentsCleaner.cs,ExpiredDocumentsCleaner,The following statement contains a magic number: var deleteFrequencyInSeconds = configuration.DeleteFrequencyInSec ?? 60;
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,ReturnBuffer,The following statement contains a magic number: if (_cache.Count > 1024)                  return;
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,BuildCommandsAsync,The following statement contains a magic number: using (ctx.GetManagedBuffer(out JsonOperationContext.ManagedPinnedBuffer buffer))              using (var parser = new UnmanagedJsonParser(ctx' state' "bulk_docs"))              {                  while (parser.Read() == false)                      await RefillParserBuffer(stream' buffer' parser);                    if (state.CurrentTokenType != JsonParserToken.StartObject)                      ThrowUnexpectedToken(JsonParserToken.StartObject' state);                    while (parser.Read() == false)                      await RefillParserBuffer(stream' buffer' parser);                    if (state.CurrentTokenType != JsonParserToken.String)                      ThrowUnexpectedToken(JsonParserToken.String' state);                    if (GetLongFromStringBuffer(state) != 8314892176759549763) // Commands                      ThrowUnexpectedToken(JsonParserToken.String' state);                    while (parser.Read() == false)                      await RefillParserBuffer(stream' buffer' parser);                    if (state.CurrentTokenType != JsonParserToken.StartArray)                      ThrowUnexpectedToken(JsonParserToken.StartArray' state);                    while (true)                  {                      while (parser.Read() == false)                          await RefillParserBuffer(stream' buffer' parser);                        if (state.CurrentTokenType == JsonParserToken.EndArray)                          break;                        index++;                      if (index >= cmds.Length)                      {                          cmds = IncreaseSizeOfCommandsBuffer(index' cmds);                      }                        var commandData = await ReadSingleCommand(ctx' stream' state' parser' buffer' default(CancellationToken));                        if (commandData.Type == CommandType.PATCH)                      {                          commandData.PatchCommand =                              new PatchDocumentCommand(ctx' commandData.Id' commandData.ChangeVector'                                  false'                                  (commandData.Patch' commandData.PatchArgs)'                                  (commandData.PatchIfMissing' commandData.PatchIfMissingArgs)'                                  database'                                  false'                                  false'                                  true                              );                      }                                            if (commandData.Type == CommandType.PUT && string.IsNullOrEmpty(commandData.Id) == false && commandData.Id[commandData.Id.Length - 1] == '|')                      {                          if (identities == null)                          {                              identities = new List<string>();                              positionInListToCommandIndex = new List<int>();                          }                          // queue identities requests in order to send them at once to the leader (using List for simplicity)                          identities.Add(commandData.Id);                          positionInListToCommandIndex.Add(index);                      }                        cmds[index] = commandData;                  }                    if (identities != null)                  {                      await GetIdentitiesValues(ctx'                           database'                           serverStore'                           identities'                           positionInListToCommandIndex'                           cmds);                  }              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,IncreaseSizeOfCommandsBuffer,The following statement contains a magic number: if (cmds.Length > MaxSizeOfCommandsInBatchToCache)              {                  Array.Resize(ref cmds' Math.Max(index + 8' cmds.Length * 2));                  return cmds;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,IncreaseSizeOfCommandsBuffer,The following statement contains a magic number: if (cmds.Length > MaxSizeOfCommandsInBatchToCache)              {                  Array.Resize(ref cmds' Math.Max(index + 8' cmds.Length * 2));                  return cmds;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,IncreaseSizeOfCommandsBuffer,The following statement contains a magic number: if (tmp == null)                  tmp = new CommandData[cmds.Length + 8];
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetPropertyType,The following statement contains a magic number: switch (state.StringSize)              {                  case 2:                      if (*(short*)state.StringBuffer != 25673)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Id;                    case 8:                      if (*(long*)state.StringBuffer != 8389754676633104196)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Document;                    case 4:                      if (*(int*)state.StringBuffer == 1701869908)                          return CommandPropertyName.Type;                      if (*(int*)state.StringBuffer == 1701667150)                          return CommandPropertyName.Name;                      return CommandPropertyName.NoSuchProperty;                    case 5:                      if (*(int*)state.StringBuffer != 1668571472 ||                          state.StringBuffer[4] != (byte)'h')                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.Patch;                    case 14:                      if (*(int*)state.StringBuffer != 1668571472 ||                          *(long*)(state.StringBuffer + 4) != 7598543892411468136 ||                          *(short*)(state.StringBuffer + 12) != 26478)                          return CommandPropertyName.NoSuchProperty;                      return CommandPropertyName.PatchIfMissing;                    case 10:                      if (*(long*)state.StringBuffer == 8676578743001572425 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 25701)                          return CommandPropertyName.IdPrefixed;                      return CommandPropertyName.NoSuchProperty;                    case 11:                      if (*(long*)state.StringBuffer == 6085610378508529475 &&                          *(short*)(state.StringBuffer + sizeof(long)) == 28793 &&                          state.StringBuffer[sizeof(long) + sizeof(short)] == (byte)'e')                          return CommandPropertyName.ContentType;                      return CommandPropertyName.NoSuchProperty;                    case 12:                      if (*(long*)state.StringBuffer == 7302135340735752259 &&                          *(int*)(state.StringBuffer + sizeof(long)) == 1919906915)                          return CommandPropertyName.ChangeVector;                        return CommandPropertyName.NoSuchProperty;                  default:                      return CommandPropertyName.NoSuchProperty;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,GetCommandType,The following statement contains a magic number: switch (state.StringSize)              {                  case 3:                      if (*(short*)state.StringBuffer != 21840 ||                          state.StringBuffer[2] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PUT;                    case 5:                      if (*(int*)state.StringBuffer != 1129595216 ||                          state.StringBuffer[4] != (byte)'H')                          ThrowInvalidProperty(state' ctx);                        return CommandType.PATCH;                    case 6:                      if (*(int*)state.StringBuffer != 1162626372 ||                       *(short*)(state.StringBuffer + 4) != 17748)                          ThrowInvalidProperty(state' ctx);                        return CommandType.DELETE;                    case 13:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(int*)(state.StringBuffer + sizeof(long)) != 1431336046 ||                          state.StringBuffer[sizeof(long) + sizeof(int)] != (byte)'T')                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentPUT;                    case 16:                      if (*(long*)state.StringBuffer != 7308612546338255937 ||                          *(long*)(state.StringBuffer + sizeof(long)) != 4995694080542667886)                          ThrowInvalidProperty(state' ctx);                        return CommandType.AttachmentDELETE;                    default:                      ThrowInvalidProperty(state' ctx);                      return CommandType.None;              }
Magic Number,Raven.Server.Documents.Handlers,BulkInsertHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BulkInsertHandler.cs,DoBulkInsert,The following statement contains a magic number: try              {                  var logger = LoggingSource.Instance.GetLogger<MergedInsertBulkCommand>(Database.Name);                  IDisposable currentCtxReset = null' previousCtxReset = null;                  try                  {                      using (ContextPool.AllocateOperationContext(out JsonOperationContext context))                      using (var buffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance())                      {                          currentCtxReset = ContextPool.AllocateOperationContext(out JsonOperationContext docsCtx);                          var requestBodyStream = RequestBodyStream();                            using (var parser = new BatchRequestParser.ReadMany(context' requestBodyStream' buffer' token))                          {                              await parser.Init();                                var array = new BatchRequestParser.CommandData[8];                              var numberOfCommands = 0;                              long totalSize = 0;                              while (true)                              {                                  var task = parser.MoveNext(docsCtx);                                  if (task == null)                                      break;                                    token.ThrowIfCancellationRequested();                                    // if we are going to wait on the network' flush immediately                                  if ((task.IsCompleted == false && numberOfCommands > 0) ||                                      // but don't batch too much anyway                                      totalSize > 16 * Voron.Global.Constants.Size.Megabyte)                                  {                                      using (ReplaceContextIfCurrentlyInUse(task' numberOfCommands' array))                                      {                                          await Database.TxMerger.Enqueue(new MergedInsertBulkCommand                                          {                                              Commands = array'                                              NumberOfCommands = numberOfCommands'                                              Database = Database'                                              Logger = logger'                                              TotalSize = totalSize                                          });                                      }                                        progress.BatchCount++;                                      progress.Processed += numberOfCommands;                                      progress.LastProcessedId = array.Last().Id;                                        onProgress(progress);                                        previousCtxReset?.Dispose();                                      previousCtxReset = currentCtxReset;                                      currentCtxReset = ContextPool.AllocateOperationContext(out docsCtx);                                        numberOfCommands = 0;                                      totalSize = 0;                                  }                                    var commandData = await task;                                  if (commandData.Type == CommandType.None)                                      break;                                    totalSize += commandData.Document.Size;                                  if (numberOfCommands >= array.Length)                                      Array.Resize(ref array' array.Length * 2);                                  array[numberOfCommands++] = commandData;                              }                              if (numberOfCommands > 0)                              {                                  await Database.TxMerger.Enqueue(new MergedInsertBulkCommand                                  {                                      Commands = array'                                      NumberOfCommands = numberOfCommands'                                      Database = Database'                                      Logger = logger'                                      TotalSize = totalSize                                  });                                    progress.BatchCount++;                                  progress.Processed += numberOfCommands;                                  progress.LastProcessedId = array[numberOfCommands-1].Id;                                    onProgress(progress);                              }                          }                      }                  }                  finally                  {                      currentCtxReset?.Dispose();                      previousCtxReset?.Dispose();                  }                    HttpContext.Response.StatusCode = (int)HttpStatusCode.Created;                    return new BulkOperationResult                  {                      Total = progress.Processed                  };              }              catch (Exception e)              {                  HttpContext.Response.Headers["Connection"] = "close";                  throw new InvalidOperationException("Failed to process bulk insert " + progress' e);              }
Magic Number,Raven.Server.Documents.Handlers,BulkInsertHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BulkInsertHandler.cs,DoBulkInsert,The following statement contains a magic number: try              {                  var logger = LoggingSource.Instance.GetLogger<MergedInsertBulkCommand>(Database.Name);                  IDisposable currentCtxReset = null' previousCtxReset = null;                  try                  {                      using (ContextPool.AllocateOperationContext(out JsonOperationContext context))                      using (var buffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance())                      {                          currentCtxReset = ContextPool.AllocateOperationContext(out JsonOperationContext docsCtx);                          var requestBodyStream = RequestBodyStream();                            using (var parser = new BatchRequestParser.ReadMany(context' requestBodyStream' buffer' token))                          {                              await parser.Init();                                var array = new BatchRequestParser.CommandData[8];                              var numberOfCommands = 0;                              long totalSize = 0;                              while (true)                              {                                  var task = parser.MoveNext(docsCtx);                                  if (task == null)                                      break;                                    token.ThrowIfCancellationRequested();                                    // if we are going to wait on the network' flush immediately                                  if ((task.IsCompleted == false && numberOfCommands > 0) ||                                      // but don't batch too much anyway                                      totalSize > 16 * Voron.Global.Constants.Size.Megabyte)                                  {                                      using (ReplaceContextIfCurrentlyInUse(task' numberOfCommands' array))                                      {                                          await Database.TxMerger.Enqueue(new MergedInsertBulkCommand                                          {                                              Commands = array'                                              NumberOfCommands = numberOfCommands'                                              Database = Database'                                              Logger = logger'                                              TotalSize = totalSize                                          });                                      }                                        progress.BatchCount++;                                      progress.Processed += numberOfCommands;                                      progress.LastProcessedId = array.Last().Id;                                        onProgress(progress);                                        previousCtxReset?.Dispose();                                      previousCtxReset = currentCtxReset;                                      currentCtxReset = ContextPool.AllocateOperationContext(out docsCtx);                                        numberOfCommands = 0;                                      totalSize = 0;                                  }                                    var commandData = await task;                                  if (commandData.Type == CommandType.None)                                      break;                                    totalSize += commandData.Document.Size;                                  if (numberOfCommands >= array.Length)                                      Array.Resize(ref array' array.Length * 2);                                  array[numberOfCommands++] = commandData;                              }                              if (numberOfCommands > 0)                              {                                  await Database.TxMerger.Enqueue(new MergedInsertBulkCommand                                  {                                      Commands = array'                                      NumberOfCommands = numberOfCommands'                                      Database = Database'                                      Logger = logger'                                      TotalSize = totalSize                                  });                                    progress.BatchCount++;                                  progress.Processed += numberOfCommands;                                  progress.LastProcessedId = array[numberOfCommands-1].Id;                                    onProgress(progress);                              }                          }                      }                  }                  finally                  {                      currentCtxReset?.Dispose();                      previousCtxReset?.Dispose();                  }                    HttpContext.Response.StatusCode = (int)HttpStatusCode.Created;                    return new BulkOperationResult                  {                      Total = progress.Processed                  };              }              catch (Exception e)              {                  HttpContext.Response.Headers["Connection"] = "close";                  throw new InvalidOperationException("Failed to process bulk insert " + progress' e);              }
Magic Number,Raven.Server.Documents.Handlers,BulkInsertHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BulkInsertHandler.cs,DoBulkInsert,The following statement contains a magic number: try              {                  var logger = LoggingSource.Instance.GetLogger<MergedInsertBulkCommand>(Database.Name);                  IDisposable currentCtxReset = null' previousCtxReset = null;                  try                  {                      using (ContextPool.AllocateOperationContext(out JsonOperationContext context))                      using (var buffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance())                      {                          currentCtxReset = ContextPool.AllocateOperationContext(out JsonOperationContext docsCtx);                          var requestBodyStream = RequestBodyStream();                            using (var parser = new BatchRequestParser.ReadMany(context' requestBodyStream' buffer' token))                          {                              await parser.Init();                                var array = new BatchRequestParser.CommandData[8];                              var numberOfCommands = 0;                              long totalSize = 0;                              while (true)                              {                                  var task = parser.MoveNext(docsCtx);                                  if (task == null)                                      break;                                    token.ThrowIfCancellationRequested();                                    // if we are going to wait on the network' flush immediately                                  if ((task.IsCompleted == false && numberOfCommands > 0) ||                                      // but don't batch too much anyway                                      totalSize > 16 * Voron.Global.Constants.Size.Megabyte)                                  {                                      using (ReplaceContextIfCurrentlyInUse(task' numberOfCommands' array))                                      {                                          await Database.TxMerger.Enqueue(new MergedInsertBulkCommand                                          {                                              Commands = array'                                              NumberOfCommands = numberOfCommands'                                              Database = Database'                                              Logger = logger'                                              TotalSize = totalSize                                          });                                      }                                        progress.BatchCount++;                                      progress.Processed += numberOfCommands;                                      progress.LastProcessedId = array.Last().Id;                                        onProgress(progress);                                        previousCtxReset?.Dispose();                                      previousCtxReset = currentCtxReset;                                      currentCtxReset = ContextPool.AllocateOperationContext(out docsCtx);                                        numberOfCommands = 0;                                      totalSize = 0;                                  }                                    var commandData = await task;                                  if (commandData.Type == CommandType.None)                                      break;                                    totalSize += commandData.Document.Size;                                  if (numberOfCommands >= array.Length)                                      Array.Resize(ref array' array.Length * 2);                                  array[numberOfCommands++] = commandData;                              }                              if (numberOfCommands > 0)                              {                                  await Database.TxMerger.Enqueue(new MergedInsertBulkCommand                                  {                                      Commands = array'                                      NumberOfCommands = numberOfCommands'                                      Database = Database'                                      Logger = logger'                                      TotalSize = totalSize                                  });                                    progress.BatchCount++;                                  progress.Processed += numberOfCommands;                                  progress.LastProcessedId = array[numberOfCommands-1].Id;                                    onProgress(progress);                              }                          }                      }                  }                  finally                  {                      currentCtxReset?.Dispose();                      previousCtxReset?.Dispose();                  }                    HttpContext.Response.StatusCode = (int)HttpStatusCode.Created;                    return new BulkOperationResult                  {                      Total = progress.Processed                  };              }              catch (Exception e)              {                  HttpContext.Response.Headers["Connection"] = "close";                  throw new InvalidOperationException("Failed to process bulk insert " + progress' e);              }
Magic Number,Raven.Server.Documents.Handlers,ConfigurationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ConfigurationHandler.cs,GetClientConfiguration,The following statement contains a magic number: etag = Hashing.Combine(etag' serverConfiguration?.Etag ?? -2);
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (DateTime.TryParseExact(lastRangeAtStr' DefaultFormat.DateTimeOffsetFormatsToWrite' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out DateTime lastRangeAt) == false)                  return Math.Max(32' lastSize);
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (span.TotalSeconds < 30)              {                  return Math.Min(Math.Max(32' Math.Max(lastSize' lastSize * 2))' 1024 * 1024);              }
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (span.TotalSeconds < 30)              {                  return Math.Min(Math.Max(32' Math.Max(lastSize' lastSize * 2))' 1024 * 1024);              }
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (span.TotalSeconds < 30)              {                  return Math.Min(Math.Max(32' Math.Max(lastSize' lastSize * 2))' 1024 * 1024);              }
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (span.TotalSeconds < 30)              {                  return Math.Min(Math.Max(32' Math.Max(lastSize' lastSize * 2))' 1024 * 1024);              }
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (span.TotalSeconds < 30)              {                  return Math.Min(Math.Max(32' Math.Max(lastSize' lastSize * 2))' 1024 * 1024);              }
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (span.TotalSeconds > 60)              {                  return Math.Max(32' lastSize / 2);              }
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (span.TotalSeconds > 60)              {                  return Math.Max(32' lastSize / 2);              }
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: if (span.TotalSeconds > 60)              {                  return Math.Max(32' lastSize / 2);              }
Magic Number,Raven.Server.Documents.Handlers,HiLoHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\HiLoHandler.cs,CalculateCapacity,The following statement contains a magic number: return Math.Max(32' lastSize);
Magic Number,Raven.Server.Documents.Handlers,IndexHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IndexHandler.cs,PerformanceLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var indexes = GetIndexesToReportOn().ToArray();                    var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveIndexingPerformanceCollector(Database' Database.DatabaseShutdown' indexes))                  {                      // 1. Send data to webSocket without making UI wait upon openning webSocket                      await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,IndexHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IndexHandler.cs,PerformanceLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var indexes = GetIndexesToReportOn().ToArray();                    var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveIndexingPerformanceCollector(Database' Database.DatabaseShutdown' indexes))                  {                      // 1. Send data to webSocket without making UI wait upon openning webSocket                      await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,IndexHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IndexHandler.cs,PerformanceLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var indexes = GetIndexesToReportOn().ToArray();                    var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveIndexingPerformanceCollector(Database' Database.DatabaseShutdown' indexes))                  {                      // 1. Send data to webSocket without making UI wait upon openning webSocket                      await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,IoMetricsLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveIOStatsCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon openning webSocket                      await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,IoMetricsLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveIOStatsCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon openning webSocket                      await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,IoMetricsLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveIOStatsCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon openning webSocket                      await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendDataOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,GetFileMetrics,The following statement contains a magic number: foreach (var historyMetric in fileMetric.GetSummaryMetrics())              {                  fileMetrics.History.Add(new IOMetricsHistoryStats                  {                      Start = historyMetric.TotalTimeStart.GetDefaultRavenFormat()'                      End = historyMetric.TotalTimeEnd.GetDefaultRavenFormat()'                      Size = historyMetric.TotalSize'                      HumaneSize = Sizes.Humane(historyMetric.TotalSize)'                      FileSize = historyMetric.TotalFileSize'                      HumaneFileSize = Sizes.Humane(historyMetric.TotalFileSize)'                      Duration = Math.Round((historyMetric.TotalTimeEnd - historyMetric.TotalTimeStart).TotalMilliseconds' 2)'                      ActiveDuration = Math.Round(historyMetric.TotalTime.TotalMilliseconds' 2)'                      MaxDuration = Math.Round(historyMetric.MaxTime.TotalMilliseconds' 2)'                      MinDuration = Math.Round(historyMetric.MinTime.TotalMilliseconds' 2)'                      MaxAcceleration = historyMetric.MaxAcceleration'                      MinAcceleration = historyMetric.MinAcceleration'                      CompressedSize = historyMetric.TotalCompressedSize'                      HumaneCompressedSize = Sizes.Humane(historyMetric.TotalCompressedSize)'                      Type = historyMetric.Type                  });              }
Magic Number,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,GetFileMetrics,The following statement contains a magic number: foreach (var historyMetric in fileMetric.GetSummaryMetrics())              {                  fileMetrics.History.Add(new IOMetricsHistoryStats                  {                      Start = historyMetric.TotalTimeStart.GetDefaultRavenFormat()'                      End = historyMetric.TotalTimeEnd.GetDefaultRavenFormat()'                      Size = historyMetric.TotalSize'                      HumaneSize = Sizes.Humane(historyMetric.TotalSize)'                      FileSize = historyMetric.TotalFileSize'                      HumaneFileSize = Sizes.Humane(historyMetric.TotalFileSize)'                      Duration = Math.Round((historyMetric.TotalTimeEnd - historyMetric.TotalTimeStart).TotalMilliseconds' 2)'                      ActiveDuration = Math.Round(historyMetric.TotalTime.TotalMilliseconds' 2)'                      MaxDuration = Math.Round(historyMetric.MaxTime.TotalMilliseconds' 2)'                      MinDuration = Math.Round(historyMetric.MinTime.TotalMilliseconds' 2)'                      MaxAcceleration = historyMetric.MaxAcceleration'                      MinAcceleration = historyMetric.MinAcceleration'                      CompressedSize = historyMetric.TotalCompressedSize'                      HumaneCompressedSize = Sizes.Humane(historyMetric.TotalCompressedSize)'                      Type = historyMetric.Type                  });              }
Magic Number,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,GetFileMetrics,The following statement contains a magic number: foreach (var historyMetric in fileMetric.GetSummaryMetrics())              {                  fileMetrics.History.Add(new IOMetricsHistoryStats                  {                      Start = historyMetric.TotalTimeStart.GetDefaultRavenFormat()'                      End = historyMetric.TotalTimeEnd.GetDefaultRavenFormat()'                      Size = historyMetric.TotalSize'                      HumaneSize = Sizes.Humane(historyMetric.TotalSize)'                      FileSize = historyMetric.TotalFileSize'                      HumaneFileSize = Sizes.Humane(historyMetric.TotalFileSize)'                      Duration = Math.Round((historyMetric.TotalTimeEnd - historyMetric.TotalTimeStart).TotalMilliseconds' 2)'                      ActiveDuration = Math.Round(historyMetric.TotalTime.TotalMilliseconds' 2)'                      MaxDuration = Math.Round(historyMetric.MaxTime.TotalMilliseconds' 2)'                      MinDuration = Math.Round(historyMetric.MinTime.TotalMilliseconds' 2)'                      MaxAcceleration = historyMetric.MaxAcceleration'                      MinAcceleration = historyMetric.MinAcceleration'                      CompressedSize = historyMetric.TotalCompressedSize'                      HumaneCompressedSize = Sizes.Humane(historyMetric.TotalCompressedSize)'                      Type = historyMetric.Type                  });              }
Magic Number,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,GetFileMetrics,The following statement contains a magic number: foreach (var historyMetric in fileMetric.GetSummaryMetrics())              {                  fileMetrics.History.Add(new IOMetricsHistoryStats                  {                      Start = historyMetric.TotalTimeStart.GetDefaultRavenFormat()'                      End = historyMetric.TotalTimeEnd.GetDefaultRavenFormat()'                      Size = historyMetric.TotalSize'                      HumaneSize = Sizes.Humane(historyMetric.TotalSize)'                      FileSize = historyMetric.TotalFileSize'                      HumaneFileSize = Sizes.Humane(historyMetric.TotalFileSize)'                      Duration = Math.Round((historyMetric.TotalTimeEnd - historyMetric.TotalTimeStart).TotalMilliseconds' 2)'                      ActiveDuration = Math.Round(historyMetric.TotalTime.TotalMilliseconds' 2)'                      MaxDuration = Math.Round(historyMetric.MaxTime.TotalMilliseconds' 2)'                      MinDuration = Math.Round(historyMetric.MinTime.TotalMilliseconds' 2)'                      MaxAcceleration = historyMetric.MaxAcceleration'                      MinAcceleration = historyMetric.MinAcceleration'                      CompressedSize = historyMetric.TotalCompressedSize'                      HumaneCompressedSize = Sizes.Humane(historyMetric.TotalCompressedSize)'                      Type = historyMetric.Type                  });              }
Magic Number,Raven.Server.Documents.Handlers,IoMetricsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IoMetricsHandler.cs,GetIoMetricsRecentStats,The following statement contains a magic number: return new IOMetricsRecentStats              {                  Start = recentMetric.Start.GetDefaultRavenFormat()'                  Size = recentMetric.Size'                  Acceleration = recentMetric.Acceleration'                  CompressedSize = recentMetric.CompressedSize'                  HumaneCompressedSize = Sizes.Humane(recentMetric.CompressedSize)'                  HumaneSize = Sizes.Humane(recentMetric.Size)'                  FileSize = recentMetric.FileSize'                  HumaneFileSize = Sizes.Humane(recentMetric.FileSize)'                  Duration = Math.Round(recentMetric.Duration.TotalMilliseconds' 2)'                  Type = recentMetric.Type              };
Magic Number,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,PerformanceLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveReplicationPerformanceCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon opening webSocket                      await SendPerformanceStatsOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendPerformanceStatsOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,PerformanceLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveReplicationPerformanceCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon opening webSocket                      await SendPerformanceStatsOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendPerformanceStatsOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,PerformanceLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveReplicationPerformanceCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon opening webSocket                      await SendPerformanceStatsOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendPerformanceStatsOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,PulsesLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveReplicationPulsesCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon opening webSocket                      await SendPulsesOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendPulsesOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,PulsesLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveReplicationPulsesCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon opening webSocket                      await SendPulsesOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendPulsesOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,ReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\ReplicationHandler.cs,PulsesLive,The following statement contains a magic number: using (var webSocket = await HttpContext.WebSockets.AcceptWebSocketAsync())              {                  var receiveBuffer = new ArraySegment<byte>(new byte[1024]);                  var receive = webSocket.ReceiveAsync(receiveBuffer' Database.DatabaseShutdown);                    using (var ms = new MemoryStream())                  using (var collector = new LiveReplicationPulsesCollector(Database))                  {                      // 1. Send data to webSocket without making UI wait upon opening webSocket                      await SendPulsesOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 100);                        // 2. Send data to webSocket when available                      while (Database.DatabaseShutdown.IsCancellationRequested == false)                      {                          if (await SendPulsesOrHeartbeatToWebSocket(receive' webSocket' collector' ms' 4000) == false)                          {                              break;                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,RevisionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\RevisionsHandler.cs,GetResolvedConflictsSince,The following statement contains a magic number: var take = GetIntValueQueryString("take"' required: false) ?? 1024;
Magic Number,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,Generate,The following statement contains a magic number: var key = new byte[256 / 8];
Magic Number,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,Generate,The following statement contains a magic number: var key = new byte[256 / 8];
Magic Number,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,DistributeKeyInCluster,The following statement contains a magic number: using (var reader = new StreamReader(HttpContext.Request.Body))              {                  var base64 = reader.ReadToEnd();                  using (Server.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext ctx))                  {                      ClusterTopology clusterTopology;                      using (ctx.OpenReadTransaction())                          clusterTopology = ServerStore.GetClusterTopology(ctx);                        foreach (var node in nodes)                      {                          if (string.IsNullOrEmpty(node))                              continue;                            var url = clusterTopology.GetUrlFromTag(node);                          if (url == null)                              throw new InvalidOperationException($"Node {node} is not a part of the cluster' cannot send secret key.");                            if (url.StartsWith("https:"' StringComparison.OrdinalIgnoreCase) == false)                              throw new InvalidOperationException($"Cannot put secret key for {name} on node {node} with url {url} because it is not using HTTPS");                            if (string.Equals(node' ServerStore.NodeTag' StringComparison.OrdinalIgnoreCase))                          {                              var key = Convert.FromBase64String(base64);                                if (key.Length != 256 / 8)                                  throw new ArgumentException($"Key size must be 256 bits' but was {key.Length * 8}"' nameof(key));                                StoreKeyLocally(name' key' ctx);                          }                          else                          {                              await SendKeyToNodeAsync(name' base64' ctx' ServerStore' node' url).ConfigureAwait(false);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,DistributeKeyInCluster,The following statement contains a magic number: using (var reader = new StreamReader(HttpContext.Request.Body))              {                  var base64 = reader.ReadToEnd();                  using (Server.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext ctx))                  {                      ClusterTopology clusterTopology;                      using (ctx.OpenReadTransaction())                          clusterTopology = ServerStore.GetClusterTopology(ctx);                        foreach (var node in nodes)                      {                          if (string.IsNullOrEmpty(node))                              continue;                            var url = clusterTopology.GetUrlFromTag(node);                          if (url == null)                              throw new InvalidOperationException($"Node {node} is not a part of the cluster' cannot send secret key.");                            if (url.StartsWith("https:"' StringComparison.OrdinalIgnoreCase) == false)                              throw new InvalidOperationException($"Cannot put secret key for {name} on node {node} with url {url} because it is not using HTTPS");                            if (string.Equals(node' ServerStore.NodeTag' StringComparison.OrdinalIgnoreCase))                          {                              var key = Convert.FromBase64String(base64);                                if (key.Length != 256 / 8)                                  throw new ArgumentException($"Key size must be 256 bits' but was {key.Length * 8}"' nameof(key));                                StoreKeyLocally(name' key' ctx);                          }                          else                          {                              await SendKeyToNodeAsync(name' base64' ctx' ServerStore' node' url).ConfigureAwait(false);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers,SecretKeyHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SecretKeyHandler.cs,DistributeKeyInCluster,The following statement contains a magic number: using (var reader = new StreamReader(HttpContext.Request.Body))              {                  var base64 = reader.ReadToEnd();                  using (Server.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext ctx))                  {                      ClusterTopology clusterTopology;                      using (ctx.OpenReadTransaction())                          clusterTopology = ServerStore.GetClusterTopology(ctx);                        foreach (var node in nodes)                      {                          if (string.IsNullOrEmpty(node))                              continue;                            var url = clusterTopology.GetUrlFromTag(node);                          if (url == null)                              throw new InvalidOperationException($"Node {node} is not a part of the cluster' cannot send secret key.");                            if (url.StartsWith("https:"' StringComparison.OrdinalIgnoreCase) == false)                              throw new InvalidOperationException($"Cannot put secret key for {name} on node {node} with url {url} because it is not using HTTPS");                            if (string.Equals(node' ServerStore.NodeTag' StringComparison.OrdinalIgnoreCase))                          {                              var key = Convert.FromBase64String(base64);                                if (key.Length != 256 / 8)                                  throw new ArgumentException($"Key size must be 256 bits' but was {key.Length * 8}"' nameof(key));                                StoreKeyLocally(name' key' ctx);                          }                          else                          {                              await SendKeyToNodeAsync(name' base64' ctx' ServerStore' node' url).ConfigureAwait(false);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Handlers.Debugging,AllDocumentIdsDebugHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\Debugging\ExportAllDocIdsHandler.cs,ExportAllDocIds,The following statement contains a magic number: using (ContextPool.AllocateOperationContext(out DocumentsOperationContext context))              using (var writer = new StreamWriter(ResponseBodyStream()' Encoding.UTF8' 4096))              using (context.OpenReadTransaction())              {                  foreach (var id in context.DocumentDatabase.DocumentsStorage.GetAllIds(context))                      writer.Write($"{id}{Environment.NewLine}");                    writer.Flush();              }
Magic Number,Raven.Server.Documents.Indexes,AutoIndexNameFinder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\AutoIndexNameFinder.cs,FindName,The following statement contains a magic number: if (formattableString.Length > 256)              {                  var shorterString = formattableString.Substring(0' 256) + "..." +                                      Hashing.XXHash64.Calculate(formattableString' Encoding.UTF8);                  return shorterString;                }
Magic Number,Raven.Server.Documents.Indexes,AutoIndexNameFinder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\AutoIndexNameFinder.cs,FindName,The following statement contains a magic number: if (formattableString.Length > 256)              {                  var shorterString = formattableString.Substring(0' 256) + "..." +                                      Hashing.XXHash64.Calculate(formattableString' Encoding.UTF8);                  return shorterString;                }
Magic Number,Raven.Server.Documents.Indexes,BloomFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\CollectionOfBloomFilters.cs,CalculateSecondaryHash,The following statement contains a magic number: return Hashing.XXHash64.CalculateInline(key.Buffer' (ulong)key.Size' seed: 1337);
Magic Number,Raven.Server.Documents.Indexes,ConcurrentLruRegexCache,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\ConcurrentLruRegexCache.cs,ConcurrentLruRegexCache,The following statement contains a magic number: _halfCapacity = _capacity / 2;
Magic Number,Raven.Server.Documents.Indexes,ConcurrentLruRegexCache,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\ConcurrentLruRegexCache.cs,ClearOldItems,The following statement contains a magic number: try              {                  Monitor.TryEnter(this' 0' ref lockTaken);                  if (lockTaken == false)                      return;                    if (Interlocked.Read(ref _count) < _capacity)                      return;                    if ((DateTime.UtcNow - _lastClearTime).TotalMinutes < 1)                  {                      //This is the second time we reached 100% capacity within a minute giving up on compiling                      _neverCompile = true;                   }                  //Dropping 25% of the cached items                  int countRemoved = 0;                  foreach (var kv in _regexCache                      .OrderBy(kv => kv.Value.Timestamp)                      .Take(_capacity / 4))                  {                                            if(_regexCache.Remove(kv.Key))                          countRemoved++;                  }                  Interlocked.Add(ref _count' -countRemoved);                    _lastClearTime = DateTime.UtcNow;              }              finally              {                  if (lockTaken)                      Monitor.Exit(this);              }
Magic Number,Raven.Server.Documents.Indexes,ConcurrentLruRegexCacheNode,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\ConcurrentLruRegexCache.cs,ConcurrentLruRegexCacheNode,The following statement contains a magic number: RegexLazy = new Lazy<Regex>(()=>new Regex(pattern' flags'                   // we use 50 ms as the max timeout because this is going to be evaluated                  // on _each_ term in the results' potentially millions' so we specify a very                  // short value to avoid very long queries                  TimeSpan.FromMilliseconds(50)));
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,DrainRunningQueries,The following statement contains a magic number: if (_currentlyRunningQueriesLock.TryEnterWriteLock(TimeSpan.FromSeconds(10)) == false)              {                  if (_disposing || _disposed)                      ThrowObjectDisposed();                    throw new TimeoutException("After waiting for 10 seconds for all running queries ");              }
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,ExecuteIndexing,The following statement contains a magic number: using (CultureHelper.EnsureInvariantCulture())              {                  // if we are starting indexing e.g. manually after failure                  // we need to reset errors to give it a chance                  ResetErrors();                    var storageEnvironment = _environment;                  if (storageEnvironment == null)                      return; // can be null if we disposed immediately                  try                  {                      _contextPool.SetMostWorkInGoingToHappenonThisThread();                        DocumentDatabase.Changes.OnDocumentChange += HandleDocumentChange;                      storageEnvironment.OnLogsApplied += HandleLogsApplied;                        while (true)                      {                          if (_indexDisabled)                              return;                            ChangeIndexThreadPriorityIfNeeded();                            if (_logger.IsInfoEnabled)                              _logger.Info($"Starting indexing for '{Name}'.");                            _mre.Reset();                            var stats = _lastStats = new IndexingStatsAggregator(DocumentDatabase.IndexStore.Identities.GetNextIndexingStatsId()' _lastStats);                          LastIndexingTime = stats.StartTime;                            AddIndexingPerformance(stats);                            var batchCompleted = false;                            bool didWork = false;                            try                          {                              using (var scope = stats.CreateScope())                              {                                  try                                  {                                      _indexingProcessCancellationTokenSource.Token.ThrowIfCancellationRequested();                                        try                                      {                                          TimeSpentIndexing.Start();                                          var lastAllocatedBytes = GC.GetAllocatedBytesForCurrentThread();                                            didWork = DoIndexingWork(scope' _indexingProcessCancellationTokenSource.Token);                                          batchCompleted = true;                                          lastAllocatedBytes = GC.GetAllocatedBytesForCurrentThread() - lastAllocatedBytes;                                          scope.AddAllocatedBytes(lastAllocatedBytes);                                      }                                      finally                                      {                                          if (_batchStopped)                                          {                                              _batchStopped = false;                                              DocumentDatabase.IndexStore.StoppedConcurrentIndexBatches.Release();                                          }                                            _inMemoryIndexProgress.Clear();                                          TimeSpentIndexing.Stop();                                      }                                        _indexingBatchCompleted.SetAndResetAtomically();                                        if (didWork)                                      {                                          ResetErrors();                                          _hadRealIndexingWorkToDo.Raise();                                      }                                        if (_logger.IsInfoEnabled)                                          _logger.Info($"Finished indexing for '{Name}'.'");                                        if (_logger.IsInfoEnabled)                                          _logger.Info($"Finished indexing for '{Name}'.'");                                  }                                  catch (OutOfMemoryException oome)                                  {                                      if (_logger.IsInfoEnabled)                                          _logger.Info($"Out of memory occurred for '{Name}'."' oome);                                      // TODO [ppekrol] GC?                                        scope.AddMemoryError(oome);                                  }                                  catch (VoronUnrecoverableErrorException ide)                                  {                                      HandleIndexCorruption(scope' ide);                                  }                                  catch (IndexCorruptionException ice)                                  {                                      HandleIndexCorruption(scope' ice);                                  }                                  catch (IndexWriteException iwe)                                  {                                      HandleWriteErrors(scope' iwe);                                  }                                  catch (IndexAnalyzerException iae)                                  {                                      HandleAnalyzerErrors(scope' iae);                                  }                                  catch (CriticalIndexingException cie)                                  {                                      HandleCriticalErrors(scope' cie);                                  }                                  catch (OperationCanceledException)                                  {                                      // We are here only in the case of indexing process cancellation.                                      scope.RecordMapCompletedReason("Operation canceled.");                                      return;                                  }                                  catch (Exception e)                                  {                                      if (_logger.IsOperationsEnabled)                                          _logger.Operations($"Critical exception occurred for '{Name}'."' e);                                        HandleUnexpectedErrors(scope' e);                                  }                                    try                                  {                                      var failureInformation = _indexStorage.UpdateStats(stats.StartTime' stats.ToIndexingBatchStats());                                      HandleIndexFailureInformation(failureInformation);                                  }                                  catch (VoronUnrecoverableErrorException vuee)                                  {                                      HandleIndexCorruption(scope' vuee);                                  }                                  catch (Exception e)                                  {                                      if (_logger.IsInfoEnabled)                                          _logger.Info($"Could not update stats for '{Name}'."' e);                                  }                                    try                                  {                                      if (ShouldReplace())                                      {                                          var originalName = Name.Replace(Constants.Documents.Indexing.SideBySideIndexNamePrefix' string.Empty);                                            // this can fail if the indexes lock is currently held' so we'll retry                                          // however' we might be requested to shutdown' so we want to skip replacing                                          // in this case' worst case scenario we'll handle this in the next batch                                          while (_indexingProcessCancellationTokenSource.IsCancellationRequested == false)                                          {                                              if (DocumentDatabase.IndexStore.TryReplaceIndexes(originalName' Definition.Name))                                                  break;                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      if (_logger.IsInfoEnabled)                                          _logger.Info($"Could not replace index '{Name}'."' e);                                  }                              }                          }                          finally                          {                              stats.Complete();                          }                            if (batchCompleted)                          {                              DocumentDatabase.Changes.RaiseNotifications(new IndexChange                              {                                  Name = Name'                                  Type = IndexChangeTypes.BatchCompleted                              });                                if (didWork)                              {                                  _didWork = true;                                  _firstBatchTimeout = null;                              }                          }                            try                          {                              // the logic here is that unless we hit the memory limit on the system' we want to retain our                              // allocated memory as long as we still have work to do (since we will reuse it on the next batch)                              // and it is probably better to avoid alloc/free jitter.                              // This is because faster indexes will tend to allocate the memory faster' and we want to give them                              // all the available resources so they can complete faster.                              var timeToWaitForMemoryCleanup = 5000;                              if (_allocationCleanupNeeded)                              {                                  timeToWaitForMemoryCleanup = 0; // if there is nothing to do' immediately cleanup everything                                    // at any rate' we'll reduce the budget for this index to what it currently has allocated to avoid                                  // the case where we freed memory at the end of the batch' but didn't adjust the budget accordingly                                  // so it will think that it can allocate more than it actually should                                  _currentMaximumAllowedMemory = Size.Min(_currentMaximumAllowedMemory'                                      new Size(NativeMemory.ThreadAllocations.Value.TotalAllocated' SizeUnit.Bytes));                              }                                if (_mre.Wait(timeToWaitForMemoryCleanup' _indexingProcessCancellationTokenSource.Token) == false)                              {                                  _allocationCleanupNeeded = false;                                    // there is no work to be done' and hasn't been for a while'                                  // so this is a good time to release resources we won't need                                   // anytime soon                                  ReduceMemoryUsage();                                    var numberOfSetEvents =                                      WaitHandle.WaitAny(new[]                                          {_mre.WaitHandle' _logsAppliedEvent.WaitHandle' _indexingProcessCancellationTokenSource.Token.WaitHandle});                                    if (numberOfSetEvents == 1 && _logsAppliedEvent.IsSet)                                  {                                      _hadRealIndexingWorkToDo.Lower();                                      storageEnvironment.Cleanup();                                      _logsAppliedEvent.Reset();                                  }                              }                          }                          catch (OperationCanceledException)                          {                              return;                          }                      }                  }                  finally                  {                      storageEnvironment.OnLogsApplied -= HandleLogsApplied;                      if (DocumentDatabase != null)                          DocumentDatabase.Changes.OnDocumentChange -= HandleDocumentChange;                  }              }
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,ReduceMemoryUsage,The following statement contains a magic number: if (_logger.IsInfoEnabled)                  _logger.Info(                      $"{beforeFree / 1024:#'#0} kb is used by '{Name}'' reducing memory utilization.");
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,ReduceMemoryUsage,The following statement contains a magic number: if (_logger.IsInfoEnabled)                  _logger.Info($"After cleanup' using {afterFree / 1024:#'#0} kb by '{Name}'.");
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,MarkQueryAsRunning,The following statement contains a magic number: if (queryId == 1 && _didWork == false)                  _firstBatchTimeout = query.WaitForNonStaleResultsTimeout / 2 ?? DefaultWaitForNonStaleResultsTimeout / 2;
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,MarkQueryAsRunning,The following statement contains a magic number: if (queryId == 1 && _didWork == false)                  _firstBatchTimeout = query.WaitForNonStaleResultsTimeout / 2 ?? DefaultWaitForNonStaleResultsTimeout / 2;
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,MinimumSizeForCalculateIndexEtagLength,The following statement contains a magic number: var length = sizeof(long) * 4 * Collections.Count + // last document etag' last tombstone etag and last mapped etags per collection                           sizeof(int) + // definition hash                           1;
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,AddIndexingPerformance,The following statement contains a magic number: while (_lastIndexingStats.Count > 25)                  _lastIndexingStats.TryDequeue(out stats);
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,HandleIndexOutputsPerDocument,The following statement contains a magic number: if (_indexOutputsPerDocumentWarning.LastWarnedAt != null &&                  (SystemTime.UtcNow - _indexOutputsPerDocumentWarning.LastWarnedAt.Value).Minutes <= 5)              {                  // save the hint every 5 minutes (at worst case)                  return;              }
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The following statement contains a magic number: if (sizeof(int) == IntPtr.Size || DocumentDatabase.Configuration.Storage.ForceUsing32BitsPager)              {                  IPagerLevelTransactionState pagerLevelTransactionState = documentsOperationContext.Transaction?.InnerTransaction?.LowLevelTransaction;                  var total32BitsMappedSize = pagerLevelTransactionState?.GetTotal32BitsMappedSize();                  if (total32BitsMappedSize > 8 * Voron.Global.Constants.Size.Megabyte)                  {                      stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in docs ctx");                      return false;                  }                    pagerLevelTransactionState = indexingContext.Transaction?.InnerTransaction?.LowLevelTransaction;                  total32BitsMappedSize = pagerLevelTransactionState?.GetTotal32BitsMappedSize();                  if (total32BitsMappedSize > 8 * Voron.Global.Constants.Size.Megabyte)                  {                      stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in index ctx");                      return false;                  }              }
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The following statement contains a magic number: if (sizeof(int) == IntPtr.Size || DocumentDatabase.Configuration.Storage.ForceUsing32BitsPager)              {                  IPagerLevelTransactionState pagerLevelTransactionState = documentsOperationContext.Transaction?.InnerTransaction?.LowLevelTransaction;                  var total32BitsMappedSize = pagerLevelTransactionState?.GetTotal32BitsMappedSize();                  if (total32BitsMappedSize > 8 * Voron.Global.Constants.Size.Megabyte)                  {                      stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in docs ctx");                      return false;                  }                    pagerLevelTransactionState = indexingContext.Transaction?.InnerTransaction?.LowLevelTransaction;                  total32BitsMappedSize = pagerLevelTransactionState?.GetTotal32BitsMappedSize();                  if (total32BitsMappedSize > 8 * Voron.Global.Constants.Size.Megabyte)                  {                      stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in index ctx");                      return false;                  }              }
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The following statement contains a magic number: if (sizeof(int) == IntPtr.Size || DocumentDatabase.Configuration.Storage.ForceUsing32BitsPager)              {                  IPagerLevelTransactionState pagerLevelTransactionState = documentsOperationContext.Transaction?.InnerTransaction?.LowLevelTransaction;                  var total32BitsMappedSize = pagerLevelTransactionState?.GetTotal32BitsMappedSize();                  if (total32BitsMappedSize > 8 * Voron.Global.Constants.Size.Megabyte)                  {                      stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in docs ctx");                      return false;                  }                    pagerLevelTransactionState = indexingContext.Transaction?.InnerTransaction?.LowLevelTransaction;                  total32BitsMappedSize = pagerLevelTransactionState?.GetTotal32BitsMappedSize();                  if (total32BitsMappedSize > 8 * Voron.Global.Constants.Size.Megabyte)                  {                      stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in index ctx");                      return false;                  }              }
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,CanContinueBatch,The following statement contains a magic number: if (sizeof(int) == IntPtr.Size || DocumentDatabase.Configuration.Storage.ForceUsing32BitsPager)              {                  IPagerLevelTransactionState pagerLevelTransactionState = documentsOperationContext.Transaction?.InnerTransaction?.LowLevelTransaction;                  var total32BitsMappedSize = pagerLevelTransactionState?.GetTotal32BitsMappedSize();                  if (total32BitsMappedSize > 8 * Voron.Global.Constants.Size.Megabyte)                  {                      stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in docs ctx");                      return false;                  }                    pagerLevelTransactionState = indexingContext.Transaction?.InnerTransaction?.LowLevelTransaction;                  total32BitsMappedSize = pagerLevelTransactionState?.GetTotal32BitsMappedSize();                  if (total32BitsMappedSize > 8 * Voron.Global.Constants.Size.Megabyte)                  {                      stats.RecordMapCompletedReason($"Running in 32 bits and have {total32BitsMappedSize / 1024:#'#0} kb mapped in index ctx");                      return false;                  }              }
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The following statement contains a magic number: result.SizeBeforeCompactionInMb = CalculateIndexStorageSizeInBytes(Name) / 1024 / 1024;
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The following statement contains a magic number: result.SizeBeforeCompactionInMb = CalculateIndexStorageSizeInBytes(Name) / 1024 / 1024;
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The following statement contains a magic number: using (DrainRunningQueries())              {                  if (_environment.Options.IncrementalBackupEnabled)                      throw new InvalidOperationException(                          $"Index '{Name}' cannot be compacted because incremental backup is enabled.");                    if (Configuration.RunInMemory)                      throw new InvalidOperationException(                          $"Index '{Name}' cannot be compacted because it runs in memory.");                    _isCompactionInProgress = true;                  PathSetting compactPath = null;                    try                  {                      var storageEnvironmentOptions = _environment.Options;                        using (StorageOperation())                      {                          var environmentOptions =                              (StorageEnvironmentOptions.DirectoryStorageEnvironmentOptions)storageEnvironmentOptions;                          var srcOptions = StorageEnvironmentOptions.ForPath(environmentOptions.BasePath.FullPath' null' null' DocumentDatabase.IoChanges'                              DocumentDatabase.CatastrophicFailureNotification);                          srcOptions.ForceUsing32BitsPager = DocumentDatabase.Configuration.Storage.ForceUsing32BitsPager;                          srcOptions.OnNonDurableFileSystemError += DocumentDatabase.HandleNonDurableFileSystemError;                          srcOptions.OnRecoveryError += DocumentDatabase.HandleOnRecoveryError;                          srcOptions.CompressTxAboveSizeInBytes = DocumentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes);                          srcOptions.TimeToSyncAfterFlashInSec = (int)DocumentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds;                          srcOptions.NumOfConcurrentSyncsPerPhysDrive = DocumentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive;                          Sodium.CloneKey(out srcOptions.MasterKey' DocumentDatabase.MasterKey);                            compactPath = Configuration.StoragePath.Combine(IndexDefinitionBase.GetIndexNameSafeForFileSystem(Name) + "_Compact");                            using (var compactOptions = (StorageEnvironmentOptions.DirectoryStorageEnvironmentOptions)                              StorageEnvironmentOptions.ForPath(compactPath.FullPath' null' null' DocumentDatabase.IoChanges'                                  DocumentDatabase.CatastrophicFailureNotification))                          {                              compactOptions.OnNonDurableFileSystemError += DocumentDatabase.HandleNonDurableFileSystemError;                              compactOptions.OnRecoveryError += DocumentDatabase.HandleOnRecoveryError;                              compactOptions.CompressTxAboveSizeInBytes = DocumentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes);                              compactOptions.ForceUsing32BitsPager = DocumentDatabase.Configuration.Storage.ForceUsing32BitsPager;                              compactOptions.TimeToSyncAfterFlashInSec = (int)DocumentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds;                              compactOptions.NumOfConcurrentSyncsPerPhysDrive = DocumentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive;                              Sodium.CloneKey(out srcOptions.MasterKey' DocumentDatabase.MasterKey);                                StorageCompaction.Execute(srcOptions' compactOptions' progressReport =>                              {                                  result.Progress.TreeProgress = progressReport.TreeProgress;                                  result.Progress.TreeTotal = progressReport.TreeTotal;                                  result.Progress.TreeName = progressReport.TreeName;                                  result.Progress.GlobalProgress = progressReport.GlobalProgress;                                  result.Progress.GlobalTotal = progressReport.GlobalTotal;                                  result.AddMessage(progressReport.Message);                                  onProgress?.Invoke(result.Progress);                              });                          }                            // reset tree name back to null after processing                          result.TreeName = null;                            IOExtensions.DeleteDirectory(environmentOptions.BasePath.FullPath);                          IOExtensions.MoveDirectory(compactPath.FullPath' environmentOptions.BasePath.FullPath);                      }                        result.SizeAfterCompactionInMb = CalculateIndexStorageSizeInBytes(Name) / 1024 / 1024;                  }                  finally                  {                      if (compactPath != null)                          IOExtensions.DeleteDirectory(compactPath.FullPath);                        _isCompactionInProgress = false;                  }              }
Magic Number,Raven.Server.Documents.Indexes,Index,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,Compact,The following statement contains a magic number: using (DrainRunningQueries())              {                  if (_environment.Options.IncrementalBackupEnabled)                      throw new InvalidOperationException(                          $"Index '{Name}' cannot be compacted because incremental backup is enabled.");                    if (Configuration.RunInMemory)                      throw new InvalidOperationException(                          $"Index '{Name}' cannot be compacted because it runs in memory.");                    _isCompactionInProgress = true;                  PathSetting compactPath = null;                    try                  {                      var storageEnvironmentOptions = _environment.Options;                        using (StorageOperation())                      {                          var environmentOptions =                              (StorageEnvironmentOptions.DirectoryStorageEnvironmentOptions)storageEnvironmentOptions;                          var srcOptions = StorageEnvironmentOptions.ForPath(environmentOptions.BasePath.FullPath' null' null' DocumentDatabase.IoChanges'                              DocumentDatabase.CatastrophicFailureNotification);                          srcOptions.ForceUsing32BitsPager = DocumentDatabase.Configuration.Storage.ForceUsing32BitsPager;                          srcOptions.OnNonDurableFileSystemError += DocumentDatabase.HandleNonDurableFileSystemError;                          srcOptions.OnRecoveryError += DocumentDatabase.HandleOnRecoveryError;                          srcOptions.CompressTxAboveSizeInBytes = DocumentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes);                          srcOptions.TimeToSyncAfterFlashInSec = (int)DocumentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds;                          srcOptions.NumOfConcurrentSyncsPerPhysDrive = DocumentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive;                          Sodium.CloneKey(out srcOptions.MasterKey' DocumentDatabase.MasterKey);                            compactPath = Configuration.StoragePath.Combine(IndexDefinitionBase.GetIndexNameSafeForFileSystem(Name) + "_Compact");                            using (var compactOptions = (StorageEnvironmentOptions.DirectoryStorageEnvironmentOptions)                              StorageEnvironmentOptions.ForPath(compactPath.FullPath' null' null' DocumentDatabase.IoChanges'                                  DocumentDatabase.CatastrophicFailureNotification))                          {                              compactOptions.OnNonDurableFileSystemError += DocumentDatabase.HandleNonDurableFileSystemError;                              compactOptions.OnRecoveryError += DocumentDatabase.HandleOnRecoveryError;                              compactOptions.CompressTxAboveSizeInBytes = DocumentDatabase.Configuration.Storage.CompressTxAboveSize.GetValue(SizeUnit.Bytes);                              compactOptions.ForceUsing32BitsPager = DocumentDatabase.Configuration.Storage.ForceUsing32BitsPager;                              compactOptions.TimeToSyncAfterFlashInSec = (int)DocumentDatabase.Configuration.Storage.TimeToSyncAfterFlash.AsTimeSpan.TotalSeconds;                              compactOptions.NumOfConcurrentSyncsPerPhysDrive = DocumentDatabase.Configuration.Storage.NumberOfConcurrentSyncsPerPhysicalDrive;                              Sodium.CloneKey(out srcOptions.MasterKey' DocumentDatabase.MasterKey);                                StorageCompaction.Execute(srcOptions' compactOptions' progressReport =>                              {                                  result.Progress.TreeProgress = progressReport.TreeProgress;                                  result.Progress.TreeTotal = progressReport.TreeTotal;                                  result.Progress.TreeName = progressReport.TreeName;                                  result.Progress.GlobalProgress = progressReport.GlobalProgress;                                  result.Progress.GlobalTotal = progressReport.GlobalTotal;                                  result.AddMessage(progressReport.Message);                                  onProgress?.Invoke(result.Progress);                              });                          }                            // reset tree name back to null after processing                          result.TreeName = null;                            IOExtensions.DeleteDirectory(environmentOptions.BasePath.FullPath);                          IOExtensions.MoveDirectory(compactPath.FullPath' environmentOptions.BasePath.FullPath);                      }                        result.SizeAfterCompactionInMb = CalculateIndexStorageSizeInBytes(Name) / 1024 / 1024;                  }                  finally                  {                      if (compactPath != null)                          IOExtensions.DeleteDirectory(compactPath.FullPath);                        _isCompactionInProgress = false;                  }              }
Magic Number,Raven.Server.Documents.Indexes,QueryDoneRunning,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,HoldLock,The following statement contains a magic number: var timeout = _parent._storageOperation.IsRunning ? TimeSpan.FromSeconds(30) : TimeSpan.FromSeconds(3);
Magic Number,Raven.Server.Documents.Indexes,QueryDoneRunning,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Index.cs,HoldLock,The following statement contains a magic number: var timeout = _parent._storageOperation.IsRunning ? TimeSpan.FromSeconds(30) : TimeSpan.FromSeconds(3);
Magic Number,Raven.Server.Documents.Indexes,IndexDefinitionBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionBase.cs,GetIndexNameSafeForFileSystem,The following statement contains a magic number: if (name.Length < 64)                  return name;
Magic Number,Raven.Server.Documents.Indexes,IndexDefinitionBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionBase.cs,GetIndexNameSafeForFileSystem,The following statement contains a magic number: return name.Substring(0' 64) + "." + Hashing.XXHash32.Calculate(name);
Magic Number,Raven.Server.Documents.Indexes,IndexDefinitionBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionBase.cs,EncryptStream,The following statement contains a magic number: var nonce = Sodium.GenerateRandomBuffer(sizeof(long) * 8);
Magic Number,Raven.Server.Documents.Indexes,IndexDefinitionBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = MapFields?.GetDictionaryHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Name?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Collections?.GetEnumerableHashCode() ?? 0);                    hashCode = ComputeRestOfHash(hashCode);                    _cachedHashCode = hashCode;                    return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexDefinitionBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexDefinitionBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = MapFields?.GetDictionaryHashCode() ?? 0;                  hashCode = (hashCode * 397) ^ (Name?.GetHashCode() ?? 0);                  hashCode = (hashCode * 397) ^ (Collections?.GetEnumerableHashCode() ?? 0);                    hashCode = ComputeRestOfHash(hashCode);                    _cachedHashCode = hashCode;                    return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (Analyzer != null ? StringComparer.Ordinal.GetHashCode(Analyzer) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)TermVector;                  hashCode = (hashCode * 397) ^ (HasSuggestions ? 233 : 343);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (Analyzer != null ? StringComparer.Ordinal.GetHashCode(Analyzer) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)TermVector;                  hashCode = (hashCode * 397) ^ (HasSuggestions ? 233 : 343);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (Analyzer != null ? StringComparer.Ordinal.GetHashCode(Analyzer) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)TermVector;                  hashCode = (hashCode * 397) ^ (HasSuggestions ? 233 : 343);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (Analyzer != null ? StringComparer.Ordinal.GetHashCode(Analyzer) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)TermVector;                  hashCode = (hashCode * 397) ^ (HasSuggestions ? 233 : 343);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (Analyzer != null ? StringComparer.Ordinal.GetHashCode(Analyzer) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)TermVector;                  hashCode = (hashCode * 397) ^ (HasSuggestions ? 233 : 343);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (Analyzer != null ? StringComparer.Ordinal.GetHashCode(Analyzer) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)TermVector;                  hashCode = (hashCode * 397) ^ (HasSuggestions ? 233 : 343);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (Analyzer != null ? StringComparer.Ordinal.GetHashCode(Analyzer) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)TermVector;                  hashCode = (hashCode * 397) ^ (HasSuggestions ? 233 : 343);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,AutoIndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)Aggregation;                    return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,AutoIndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)Aggregation;                    return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,AutoIndexField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexField.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? StringComparer.Ordinal.GetHashCode(Name) : 0);                  hashCode = (hashCode * 397) ^ (int)Storage;                  hashCode = (hashCode * 397) ^ (int)Indexing;                  hashCode = (hashCode * 397) ^ (int)Aggregation;                    return hashCode;              }
Magic Number,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,CreateSchema,The following statement contains a magic number: using (_contextPool.AllocateOperationContext(out TransactionOperationContext context))              using (var tx = context.OpenWriteTransaction())              {                  _errorsSchema.Create(tx.InnerTransaction' "Errors"' 16);                    var typeInt = (int)_index.Type;                    var statsTree = tx.InnerTransaction.CreateTree(IndexSchema.StatsTree);                  using (Slice.External(context.Allocator' (byte*)&typeInt' sizeof(int)' out Slice tmpSlice))                      statsTree.Add(IndexSchema.TypeSlice' tmpSlice);                    if (statsTree.Read(IndexSchema.CreatedTimestampSlice) == null)                  {                      var binaryDate = SystemTime.UtcNow.ToBinary();                      using (Slice.External(context.Allocator' (byte*)&binaryDate' sizeof(long)' out Slice tmpSlice))                          statsTree.Add(IndexSchema.CreatedTimestampSlice' tmpSlice);                  }                    tx.InnerTransaction.CreateTree(IndexSchema.EtagsTree);                  tx.InnerTransaction.CreateTree(IndexSchema.EtagsTombstoneTree);                  tx.InnerTransaction.CreateTree(IndexSchema.References);                    _index.Definition.Persist(context' _environment.Options);                    tx.Commit();              }
Magic Number,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,ReadErrors,The following statement contains a magic number: using (_contextPool.AllocateOperationContext(out TransactionOperationContext context))              using (var tx = context.OpenReadTransaction())              {                  var table = tx.InnerTransaction.OpenTable(_errorsSchema' "Errors");                    foreach (var tvr in table.SeekForwardFrom(_errorsSchema.Indexes[IndexSchema.ErrorTimestampsSlice]' Slices.BeforeAllKeys' 0))                  {                      var error = new IndexingError();                        var ptr = tvr.Result.Reader.Read(0' out int size);                      error.Timestamp = new DateTime(Bits.SwapBytes(*(long*)ptr)' DateTimeKind.Utc);                        ptr = tvr.Result.Reader.Read(1' out size);                      if (size != 0)                          error.Document = context.AllocateStringValue(null' ptr' size);                        ptr = tvr.Result.Reader.Read(2' out size);                      error.Action = context.AllocateStringValue(null' ptr' size);                        ptr = tvr.Result.Reader.Read(3' out size);                      error.Error = context.AllocateStringValue(null' ptr' size);                        errors.Add(error);                  }              }
Magic Number,Raven.Server.Documents.Indexes,IndexStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStorage.cs,ReadErrors,The following statement contains a magic number: using (_contextPool.AllocateOperationContext(out TransactionOperationContext context))              using (var tx = context.OpenReadTransaction())              {                  var table = tx.InnerTransaction.OpenTable(_errorsSchema' "Errors");                    foreach (var tvr in table.SeekForwardFrom(_errorsSchema.Indexes[IndexSchema.ErrorTimestampsSlice]' Slices.BeforeAllKeys' 0))                  {                      var error = new IndexingError();                        var ptr = tvr.Result.Reader.Read(0' out int size);                      error.Timestamp = new DateTime(Bits.SwapBytes(*(long*)ptr)' DateTimeKind.Utc);                        ptr = tvr.Result.Reader.Read(1' out size);                      if (size != 0)                          error.Document = context.AllocateStringValue(null' ptr' size);                        ptr = tvr.Result.Reader.Read(2' out size);                      error.Action = context.AllocateStringValue(null' ptr' size);                        ptr = tvr.Result.Reader.Read(3' out size);                      error.Error = context.AllocateStringValue(null' ptr' size);                        errors.Add(error);                  }              }
Magic Number,Raven.Server.Documents.Indexes,IndexStore,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\IndexStore.cs,TryReplaceIndexes,The following statement contains a magic number: try              {                  Monitor.TryEnter(_locker' 16' ref lockTaken);                  if (lockTaken == false)                      return false;                    if (_indexes.TryGetByName(replacementIndexName' out Index newIndex) == false)                      return true;                    if (_indexes.TryGetByName(oldIndexName' out Index oldIndex))                  {                      oldIndexName = oldIndex.Name;                        if (oldIndex.Type.IsStatic() && newIndex.Type.IsStatic())                      {                          var oldIndexDefinition = oldIndex.GetIndexDefinition();                          var newIndexDefinition = newIndex.Definition.GetOrCreateIndexDefinitionInternal();                            if (newIndex.Definition.LockMode == IndexLockMode.Unlock && newIndexDefinition.LockMode.HasValue == false && oldIndexDefinition.LockMode.HasValue)                              newIndex.SetLock(oldIndexDefinition.LockMode.Value);                            if (newIndex.Definition.Priority == IndexPriority.Normal && newIndexDefinition.Priority.HasValue == false && oldIndexDefinition.Priority.HasValue)                              newIndex.SetPriority(oldIndexDefinition.Priority.Value);                      }                  }                    _indexes.ReplaceIndex(oldIndexName' oldIndex' newIndex);                  newIndex.Rename(oldIndexName);                  newIndex.ResetIsSideBySideAfterReplacement();                    if (oldIndex != null)                  {                      while (_documentDatabase.DatabaseShutdown.IsCancellationRequested == false)                      {                          try                          {                              using (oldIndex.DrainRunningQueries())                                  DeleteIndexInternal(oldIndex);                                break;                          }                          catch (TimeoutException)                          {                          }                      }                  }                    if (newIndex.Configuration.RunInMemory == false)                  {                      while (_documentDatabase.DatabaseShutdown.IsCancellationRequested == false)                      {                          try                          {                              using (newIndex.DrainRunningQueries())                              using (newIndex.StorageOperation())                              {                                  var oldIndexDirectoryName = IndexDefinitionBase.GetIndexNameSafeForFileSystem(oldIndexName);                                  var replacementIndexDirectoryName = IndexDefinitionBase.GetIndexNameSafeForFileSystem(replacementIndexName);                                    IOExtensions.MoveDirectory(newIndex.Configuration.StoragePath.Combine(replacementIndexDirectoryName).FullPath'                                      newIndex.Configuration.StoragePath.Combine(oldIndexDirectoryName).FullPath);                                    if (newIndex.Configuration.TempPath != null)                                  {                                      IOExtensions.MoveDirectory(newIndex.Configuration.TempPath.Combine(replacementIndexDirectoryName).FullPath'                                          newIndex.Configuration.TempPath.Combine(oldIndexDirectoryName).FullPath);                                  }                              }                              break;                          }                          catch (TimeoutException)                          {                          }                      }                  }                    _documentDatabase.Changes.RaiseNotifications(                      new IndexChange                      {                          Name = oldIndexName'                          Type = IndexChangeTypes.SideBySideReplace                      });                    return true;              }              finally              {                  if (lockTaken)                      Monitor.Exit(_locker);              }
Magic Number,Raven.Server.Documents.Indexes,LiveIndexingPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\LiveIndexingPerformanceCollector.cs,StartCollectingStats,The following statement contains a magic number: using (var linkedToken = CancellationTokenSource.CreateLinkedTokenSource(_resourceShutdown' _cts.Token))              {                  var token = linkedToken.Token;                    while (token.IsCancellationRequested == false)                  {                      await TimeoutManager.WaitFor(TimeSpan.FromMilliseconds(3000)' token).ConfigureAwait(false);                        if (token.IsCancellationRequested)                          break;                        var performanceStats = PreparePerformanceStats();                        if (performanceStats.Count > 0)                      {                          Stats.Enqueue(performanceStats);                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Debugging,IndexDebugExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Debugging\IndexDebugExtensions.cs,GetAggregationResult,The following statement contains a magic number: using (Slice.External(context.Allocator' (byte*)&tmp' sizeof(long)' out Slice pageNumberSlice))              {                  table.ReadByKey(pageNumberSlice' out TableValueReader tvr);                    return new BlittableJsonReaderObject(tvr.Read(3' out int size)' size' context);              }
Magic Number,Raven.Server.Documents.Indexes.Errors,FaultyIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Errors\FaultyIndexDefinition.cs,ComputeRestOfHash,The following statement contains a magic number: return (hashCode * 397) ^ -1337;
Magic Number,Raven.Server.Documents.Indexes.Errors,FaultyIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Errors\FaultyIndexDefinition.cs,ComputeRestOfHash,The following statement contains a magic number: return (hashCode * 397) ^ -1337;
Magic Number,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following statement contains a magic number: if (value is BlittableJsonReaderObject json)              {                  _mode = Mode.MultipleValues;                    if (_buffer == null)                      _buffer = _buffersPool.Allocate(16);                    var prop = new BlittableJsonReaderObject.PropertyDetails();                    for (int i = 0; i < json.Count; i++)                  {                      // this call ensures properties to be returned in the same order' regardless their storing order                      json.GetPropertyByIndex(i' ref prop);                        Process(context' prop.Value' true);                  }                    return;              }
Magic Number,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following statement contains a magic number: if (value is IEnumerable enumerable)              {                  _mode = Mode.MultipleValues;                    if (_buffer == null)                      _buffer = _buffersPool.Allocate(16);                    foreach (var item in enumerable)                  {                      Process(context' item' true);                  }                    return;              }
Magic Number,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,Execute,The following statement contains a magic number: ReduceResultsSchema.Create(indexContext.Transaction.InnerTransaction' PageNumberToReduceResultTableName' 32);
Magic Number,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,AggregateBranchPage,The following statement contains a magic number: using (_treeReductionStats.BranchAggregation.Start())              {                  for (int i = 0; i < page.NumberOfEntries; i++)                  {                      var pageNumber = page.GetNode(i)->PageNumber;                      var childPageNumber = Bits.SwapBytes(pageNumber);                      using (Slice.External(indexContext.Allocator' (byte*)&childPageNumber' sizeof(long)' out Slice childPageNumberSlice))                      {                          if (table.ReadByKey(childPageNumberSlice' out TableValueReader tvr) == false)                          {                              if (remainingBranchesToAggregate.Contains(pageNumber))                              {                                  // we have a modified branch page but its children were not modified (branch page splitting) so we didn't aggregated it yet' let's do it now                                  try                                  {                                      page.Base = indexContext.Transaction.InnerTransaction.LowLevelTransaction.GetPage(pageNumber).Pointer;                                        using (var result = AggregateBranchPage(page' table' indexContext' remainingBranchesToAggregate' token))                                      {                                          StoreAggregationResult(page.PageNumber' page.NumberOfEntries' table' result);                                      }                                  }                                  finally                                  {                                      remainingBranchesToAggregate.Remove(pageNumber);                                  }                                    table.ReadByKey(childPageNumberSlice' out tvr);                              }                              else                              {                                  throw new InvalidOperationException("Couldn't find pre-computed results for existing page " + pageNumber);                              }                          }                            var numberOfResults = *(int*)tvr.Read(2' out int size);                            for (int j = 0; j < numberOfResults; j++)                          {                              _aggregationBatch.Items.Add(new BlittableJsonReaderObject(tvr.Read(3 + j' out size)' size' indexContext));                          }                      }                  }                    return AggregateBatchResults(_aggregationBatch.Items' indexContext' token);              }
Magic Number,Raven.Server.Documents.Indexes.MapReduce,ReduceMapResultsBase<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceMapResultsBase.cs,AggregateBranchPage,The following statement contains a magic number: using (_treeReductionStats.BranchAggregation.Start())              {                  for (int i = 0; i < page.NumberOfEntries; i++)                  {                      var pageNumber = page.GetNode(i)->PageNumber;                      var childPageNumber = Bits.SwapBytes(pageNumber);                      using (Slice.External(indexContext.Allocator' (byte*)&childPageNumber' sizeof(long)' out Slice childPageNumberSlice))                      {                          if (table.ReadByKey(childPageNumberSlice' out TableValueReader tvr) == false)                          {                              if (remainingBranchesToAggregate.Contains(pageNumber))                              {                                  // we have a modified branch page but its children were not modified (branch page splitting) so we didn't aggregated it yet' let's do it now                                  try                                  {                                      page.Base = indexContext.Transaction.InnerTransaction.LowLevelTransaction.GetPage(pageNumber).Pointer;                                        using (var result = AggregateBranchPage(page' table' indexContext' remainingBranchesToAggregate' token))                                      {                                          StoreAggregationResult(page.PageNumber' page.NumberOfEntries' table' result);                                      }                                  }                                  finally                                  {                                      remainingBranchesToAggregate.Remove(pageNumber);                                  }                                    table.ReadByKey(childPageNumberSlice' out tvr);                              }                              else                              {                                  throw new InvalidOperationException("Couldn't find pre-computed results for existing page " + pageNumber);                              }                          }                            var numberOfResults = *(int*)tvr.Read(2' out int size);                            for (int j = 0; j < numberOfResults; j++)                          {                              _aggregationBatch.Items.Add(new BlittableJsonReaderObject(tvr.Read(3 + j' out size)' size' indexContext));                          }                      }                  }                    return AggregateBatchResults(_aggregationBatch.Items' indexContext' token);              }
Magic Number,Raven.Server.Documents.Indexes.MapReduce.Auto,MapOutput,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndex.cs,MapOutput,The following statement contains a magic number: Results = new List<(DynamicJsonValue Json' ulong ReduceKeyHash)>(isFanout == false ? 1 : 4);
Magic Number,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndexDefinition.cs,ComputeRestOfHash,The following statement contains a magic number: return (hashCode * 397) ^ GroupByFields.GetDictionaryHashCode();
Magic Number,Raven.Server.Documents.Indexes.MapReduce.Static,MapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Static\MapReduceIndex.cs,CalculateIndexEtag,The following statement contains a magic number: var length = minLength +                           sizeof(long) * 2 * (Collections.Count * _referencedCollections.Count);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,GetEncodedLength,The following statement contains a magic number: return (original.Count == 0) ? 0 : ((original.Count * 8 + 14) / 15) + 1;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,GetEncodedLength,The following statement contains a magic number: return (original.Count == 0) ? 0 : ((original.Count * 8 + 14) / 15) + 1;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,GetEncodedLength,The following statement contains a magic number: return (original.Count == 0) ? 0 : ((original.Count * 8 + 14) / 15) + 1;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,GetDecodedLength,The following statement contains a magic number: return ((numEncodedChars * 15 + 7) / 8 + numFullBytesInFinalChar);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,GetDecodedLength,The following statement contains a magic number: return ((numEncodedChars * 15 + 7) / 8 + numFullBytesInFinalChar);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,GetDecodedLength,The following statement contains a magic number: return ((numEncodedChars * 15 + 7) / 8 + numFullBytesInFinalChar);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Encode,The following statement contains a magic number: if (input.Length > 0)              {                  int inputByteNum = 0;                  int caseNum = 0;                  int outputCharNum = 0;                  CodingCase codingCase;                  for (; inputByteNum + CODING_CASES[caseNum].numBytes <= input.Length; ++outputCharNum)                  {                      codingCase = CODING_CASES[caseNum];                      if (2 == codingCase.numBytes)                      {                          output[outputCharNum] = (char)(((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((SupportClass.Number.URShift((input[inputByteNum + 1] & 0xFF)' codingCase.finalShift)) & codingCase.finalMask) & (short)0x7FFF);                      }                      else                      {                          // numBytes is 3                          output[outputCharNum] = (char)(((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((input[inputByteNum + 1] & 0xFF) << codingCase.middleShift) + ((SupportClass.Number.URShift((input[inputByteNum + 2] & 0xFF)' codingCase.finalShift)) & codingCase.finalMask) & (short)0x7FFF);                      }                      inputByteNum += codingCase.advanceBytes;                      if (++caseNum == CODING_CASES.Length)                      {                          caseNum = 0;                      }                  }                  // Produce final char (if any) and trailing count chars.                  codingCase = CODING_CASES[caseNum];                    if (inputByteNum + 1 < input.Length)                  {                      // codingCase.numBytes must be 3                      output[outputCharNum++] = (char)((((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((input[inputByteNum + 1] & 0xFF) << codingCase.middleShift)) & (short)0x7FFF);                      // Add trailing char containing the number of full bytes in final char                      output[outputCharNum++] = (char)1;                  }                  else if (inputByteNum < input.Length)                  {                      output[outputCharNum++] = (char)(((input[inputByteNum] & 0xFF) << codingCase.initialShift) & (short)0x7FFF);                      // Add trailing char containing the number of full bytes in final char                      output[outputCharNum++] = caseNum == 0 ? (char)1 : (char)0;                  }                  else                  {                      // No left over bits - last char is completely filled.                      // Add trailing char containing the number of full bytes in final char                      output[outputCharNum++] = (char)1;                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Encode,The following statement contains a magic number: if (input.Length > 0)              {                  int inputByteNum = 0;                  int caseNum = 0;                  int outputCharNum = 0;                  CodingCase codingCase;                  for (; inputByteNum + CODING_CASES[caseNum].numBytes <= input.Length; ++outputCharNum)                  {                      codingCase = CODING_CASES[caseNum];                      if (2 == codingCase.numBytes)                      {                          output[outputCharNum] = (char)(((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((SupportClass.Number.URShift((input[inputByteNum + 1] & 0xFF)' codingCase.finalShift)) & codingCase.finalMask) & (short)0x7FFF);                      }                      else                      {                          // numBytes is 3                          output[outputCharNum] = (char)(((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((input[inputByteNum + 1] & 0xFF) << codingCase.middleShift) + ((SupportClass.Number.URShift((input[inputByteNum + 2] & 0xFF)' codingCase.finalShift)) & codingCase.finalMask) & (short)0x7FFF);                      }                      inputByteNum += codingCase.advanceBytes;                      if (++caseNum == CODING_CASES.Length)                      {                          caseNum = 0;                      }                  }                  // Produce final char (if any) and trailing count chars.                  codingCase = CODING_CASES[caseNum];                    if (inputByteNum + 1 < input.Length)                  {                      // codingCase.numBytes must be 3                      output[outputCharNum++] = (char)((((input[inputByteNum] & 0xFF) << codingCase.initialShift) + ((input[inputByteNum + 1] & 0xFF) << codingCase.middleShift)) & (short)0x7FFF);                      // Add trailing char containing the number of full bytes in final char                      output[outputCharNum++] = (char)1;                  }                  else if (inputByteNum < input.Length)                  {                      output[outputCharNum++] = (char)(((input[inputByteNum] & 0xFF) << codingCase.initialShift) & (short)0x7FFF);                      // Add trailing char containing the number of full bytes in final char                      output[outputCharNum++] = caseNum == 0 ? (char)1 : (char)0;                  }                  else                  {                      // No left over bits - last char is completely filled.                      // Add trailing char containing the number of full bytes in final char                      output[outputCharNum++] = (char)1;                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The following statement contains a magic number: if (input.Length > 0)              {                  int caseNum = 0;                  int outputByteNum = 0;                  int inputCharNum = 0;                  short inputChar;                  CodingCase codingCase;                  for (; inputCharNum < input.Length - 2; ++inputCharNum)                  {                      codingCase = CODING_CASES[caseNum];                      inputChar = (short)input[inputCharNum];                      if (2 == codingCase.numBytes)                      {                          if (0 == caseNum)                          {                              output[outputByteNum] = (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift));                          }                          else                          {                              output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          }                          output[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      else                      {                          // numBytes is 3                          output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      outputByteNum += codingCase.advanceBytes;                      if (++caseNum == CODING_CASES.Length)                      {                          caseNum = 0;                      }                  }                  // Handle final char                  inputChar = (short)input[inputCharNum];                  codingCase = CODING_CASES[caseNum];                  if (0 == caseNum)                  {                      output[outputByteNum] = 0;                  }                  output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                  long bytesLeft = numOutputBytes - outputByteNum;                  if (bytesLeft > 1)                  {                      if (2 == codingCase.numBytes)                      {                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.finalMask)' codingCase.finalShift));                      }                      else                      {                          // numBytes is 3                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          if (bytesLeft > 2)                          {                              output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The following statement contains a magic number: if (input.Length > 0)              {                  int caseNum = 0;                  int outputByteNum = 0;                  int inputCharNum = 0;                  short inputChar;                  CodingCase codingCase;                  for (; inputCharNum < input.Length - 2; ++inputCharNum)                  {                      codingCase = CODING_CASES[caseNum];                      inputChar = (short)input[inputCharNum];                      if (2 == codingCase.numBytes)                      {                          if (0 == caseNum)                          {                              output[outputByteNum] = (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift));                          }                          else                          {                              output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          }                          output[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      else                      {                          // numBytes is 3                          output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      outputByteNum += codingCase.advanceBytes;                      if (++caseNum == CODING_CASES.Length)                      {                          caseNum = 0;                      }                  }                  // Handle final char                  inputChar = (short)input[inputCharNum];                  codingCase = CODING_CASES[caseNum];                  if (0 == caseNum)                  {                      output[outputByteNum] = 0;                  }                  output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                  long bytesLeft = numOutputBytes - outputByteNum;                  if (bytesLeft > 1)                  {                      if (2 == codingCase.numBytes)                      {                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.finalMask)' codingCase.finalShift));                      }                      else                      {                          // numBytes is 3                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          if (bytesLeft > 2)                          {                              output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The following statement contains a magic number: if (input.Length > 0)              {                  int caseNum = 0;                  int outputByteNum = 0;                  int inputCharNum = 0;                  short inputChar;                  CodingCase codingCase;                  for (; inputCharNum < input.Length - 2; ++inputCharNum)                  {                      codingCase = CODING_CASES[caseNum];                      inputChar = (short)input[inputCharNum];                      if (2 == codingCase.numBytes)                      {                          if (0 == caseNum)                          {                              output[outputByteNum] = (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift));                          }                          else                          {                              output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          }                          output[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      else                      {                          // numBytes is 3                          output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      outputByteNum += codingCase.advanceBytes;                      if (++caseNum == CODING_CASES.Length)                      {                          caseNum = 0;                      }                  }                  // Handle final char                  inputChar = (short)input[inputCharNum];                  codingCase = CODING_CASES[caseNum];                  if (0 == caseNum)                  {                      output[outputByteNum] = 0;                  }                  output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                  long bytesLeft = numOutputBytes - outputByteNum;                  if (bytesLeft > 1)                  {                      if (2 == codingCase.numBytes)                      {                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.finalMask)' codingCase.finalShift));                      }                      else                      {                          // numBytes is 3                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          if (bytesLeft > 2)                          {                              output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The following statement contains a magic number: if (input.Length > 0)              {                  int caseNum = 0;                  int outputByteNum = 0;                  int inputCharNum = 0;                  short inputChar;                  CodingCase codingCase;                  for (; inputCharNum < input.Length - 2; ++inputCharNum)                  {                      codingCase = CODING_CASES[caseNum];                      inputChar = (short)input[inputCharNum];                      if (2 == codingCase.numBytes)                      {                          if (0 == caseNum)                          {                              output[outputByteNum] = (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift));                          }                          else                          {                              output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          }                          output[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      else                      {                          // numBytes is 3                          output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      outputByteNum += codingCase.advanceBytes;                      if (++caseNum == CODING_CASES.Length)                      {                          caseNum = 0;                      }                  }                  // Handle final char                  inputChar = (short)input[inputCharNum];                  codingCase = CODING_CASES[caseNum];                  if (0 == caseNum)                  {                      output[outputByteNum] = 0;                  }                  output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                  long bytesLeft = numOutputBytes - outputByteNum;                  if (bytesLeft > 1)                  {                      if (2 == codingCase.numBytes)                      {                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.finalMask)' codingCase.finalShift));                      }                      else                      {                          // numBytes is 3                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          if (bytesLeft > 2)                          {                              output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The following statement contains a magic number: if (input.Length > 0)              {                  int caseNum = 0;                  int outputByteNum = 0;                  int inputCharNum = 0;                  short inputChar;                  CodingCase codingCase;                  for (; inputCharNum < input.Length - 2; ++inputCharNum)                  {                      codingCase = CODING_CASES[caseNum];                      inputChar = (short)input[inputCharNum];                      if (2 == codingCase.numBytes)                      {                          if (0 == caseNum)                          {                              output[outputByteNum] = (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift));                          }                          else                          {                              output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          }                          output[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      else                      {                          // numBytes is 3                          output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      outputByteNum += codingCase.advanceBytes;                      if (++caseNum == CODING_CASES.Length)                      {                          caseNum = 0;                      }                  }                  // Handle final char                  inputChar = (short)input[inputCharNum];                  codingCase = CODING_CASES[caseNum];                  if (0 == caseNum)                  {                      output[outputByteNum] = 0;                  }                  output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                  long bytesLeft = numOutputBytes - outputByteNum;                  if (bytesLeft > 1)                  {                      if (2 == codingCase.numBytes)                      {                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.finalMask)' codingCase.finalShift));                      }                      else                      {                          // numBytes is 3                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          if (bytesLeft > 2)                          {                              output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,IndexableBinaryStringTools_UsingArrays,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,Decode,The following statement contains a magic number: if (input.Length > 0)              {                  int caseNum = 0;                  int outputByteNum = 0;                  int inputCharNum = 0;                  short inputChar;                  CodingCase codingCase;                  for (; inputCharNum < input.Length - 2; ++inputCharNum)                  {                      codingCase = CODING_CASES[caseNum];                      inputChar = (short)input[inputCharNum];                      if (2 == codingCase.numBytes)                      {                          if (0 == caseNum)                          {                              output[outputByteNum] = (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift));                          }                          else                          {                              output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          }                          output[outputByteNum + 1] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      else                      {                          // numBytes is 3                          output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                      }                      outputByteNum += codingCase.advanceBytes;                      if (++caseNum == CODING_CASES.Length)                      {                          caseNum = 0;                      }                  }                  // Handle final char                  inputChar = (short)input[inputCharNum];                  codingCase = CODING_CASES[caseNum];                  if (0 == caseNum)                  {                      output[outputByteNum] = 0;                  }                  output[outputByteNum] = (byte)(output[outputByteNum] + (byte)(SupportClass.Number.URShift(inputChar' codingCase.initialShift)));                  long bytesLeft = numOutputBytes - outputByteNum;                  if (bytesLeft > 1)                  {                      if (2 == codingCase.numBytes)                      {                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.finalMask)' codingCase.finalShift));                      }                      else                      {                          // numBytes is 3                          output[outputByteNum + 1] = (byte)(SupportClass.Number.URShift((inputChar & codingCase.middleMask)' codingCase.middleShift));                          if (bytesLeft > 2)                          {                              output[outputByteNum + 2] = (byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);                          }                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,CodingCase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,CodingCase,The following statement contains a magic number: numBytes = 3;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers.Collation,CodingCase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\Collation\IndexableBinaryStringTools_UsingArrays.cs,CodingCase,The following statement contains a magic number: numBytes = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,LowerCaseKeywordTokenizerHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\LowerCaseKeywordTokenizer.cs,Normalize,The following statement contains a magic number: if (cInt < 128)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,LowerCaseKeywordTokenizerHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\LowerCaseKeywordTokenizer.cs,Normalize,The following statement contains a magic number: if (cInt < 128)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,LowerCaseKeywordTokenizerHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\LowerCaseKeywordTokenizer.cs,Normalize,The following statement contains a magic number: if (cInt < 128)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,LowerCaseWhitespaceTokenizerHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\LowerCaseWhitespaceTokenizer.cs,Normalize,The following statement contains a magic number: if (cInt < 128)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,LowerCaseWhitespaceTokenizerHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\LowerCaseWhitespaceTokenizer.cs,Normalize,The following statement contains a magic number: if (cInt < 128)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,LowerCaseWhitespaceTokenizerHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\LowerCaseWhitespaceTokenizer.cs,Normalize,The following statement contains a magic number: if (cInt < 128)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,PerFieldAnalyzerComparer,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenPerFieldAnalyzerWrapper.cs,GetHashCode,The following statement contains a magic number: for (int i = start; i < end; i++)                  {                      hash = obj[i] * 397 ^ hash;                  }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,IncrementToken,The following statement contains a magic number: if (type == APOSTROPHE_TYPE && bufferLength >= 2 && buffer[bufferLength - 2] == '\'' && (buffer[bufferLength - 1] == 's' || buffer[bufferLength - 1] == 'S'))              {                  for (int i = 0; i < bufferLength - 2; i++)                  {                      buffer[i] = ToLower(buffer[i]);                  }                  // Strip last 2 characters off                  _termAtt.SetTermLength(bufferLength - 2);              }              else if (type == ACRONYM_TYPE)              {                  // remove dots                  int upto = 0;                  for (int i = 0; i < bufferLength; i++)                  {                      char c = buffer[i];                      if (c != '.')                          buffer[upto++] = ToLower(c);                  }                  _termAtt.SetTermLength(upto);              }              else              {                  do                  {                      //If we consumed a stop word we need to update the buffer and its length.                      if (!bufferUpdated)                      {                          bufferLength = _termAtt.TermLength();                          buffer = _termAtt.TermBuffer();                      }                        for (int i = 0; i < bufferLength; i++)                      {                          buffer[i] = ToLower(buffer[i]);                      }                      if (!_stopWords.Contains(buffer' 0' bufferLength))                      {                          return true;                      }                      bufferUpdated = false;                  } while (input.IncrementToken());                  return false;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,IncrementToken,The following statement contains a magic number: if (type == APOSTROPHE_TYPE && bufferLength >= 2 && buffer[bufferLength - 2] == '\'' && (buffer[bufferLength - 1] == 's' || buffer[bufferLength - 1] == 'S'))              {                  for (int i = 0; i < bufferLength - 2; i++)                  {                      buffer[i] = ToLower(buffer[i]);                  }                  // Strip last 2 characters off                  _termAtt.SetTermLength(bufferLength - 2);              }              else if (type == ACRONYM_TYPE)              {                  // remove dots                  int upto = 0;                  for (int i = 0; i < bufferLength; i++)                  {                      char c = buffer[i];                      if (c != '.')                          buffer[upto++] = ToLower(c);                  }                  _termAtt.SetTermLength(upto);              }              else              {                  do                  {                      //If we consumed a stop word we need to update the buffer and its length.                      if (!bufferUpdated)                      {                          bufferLength = _termAtt.TermLength();                          buffer = _termAtt.TermBuffer();                      }                        for (int i = 0; i < bufferLength; i++)                      {                          buffer[i] = ToLower(buffer[i]);                      }                      if (!_stopWords.Contains(buffer' 0' bufferLength))                      {                          return true;                      }                      bufferUpdated = false;                  } while (input.IncrementToken());                  return false;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,IncrementToken,The following statement contains a magic number: if (type == APOSTROPHE_TYPE && bufferLength >= 2 && buffer[bufferLength - 2] == '\'' && (buffer[bufferLength - 1] == 's' || buffer[bufferLength - 1] == 'S'))              {                  for (int i = 0; i < bufferLength - 2; i++)                  {                      buffer[i] = ToLower(buffer[i]);                  }                  // Strip last 2 characters off                  _termAtt.SetTermLength(bufferLength - 2);              }              else if (type == ACRONYM_TYPE)              {                  // remove dots                  int upto = 0;                  for (int i = 0; i < bufferLength; i++)                  {                      char c = buffer[i];                      if (c != '.')                          buffer[upto++] = ToLower(c);                  }                  _termAtt.SetTermLength(upto);              }              else              {                  do                  {                      //If we consumed a stop word we need to update the buffer and its length.                      if (!bufferUpdated)                      {                          bufferLength = _termAtt.TermLength();                          buffer = _termAtt.TermBuffer();                      }                        for (int i = 0; i < bufferLength; i++)                      {                          buffer[i] = ToLower(buffer[i]);                      }                      if (!_stopWords.Contains(buffer' 0' bufferLength))                      {                          return true;                      }                      bufferUpdated = false;                  } while (input.IncrementToken());                  return false;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,IncrementToken,The following statement contains a magic number: if (type == APOSTROPHE_TYPE && bufferLength >= 2 && buffer[bufferLength - 2] == '\'' && (buffer[bufferLength - 1] == 's' || buffer[bufferLength - 1] == 'S'))              {                  for (int i = 0; i < bufferLength - 2; i++)                  {                      buffer[i] = ToLower(buffer[i]);                  }                  // Strip last 2 characters off                  _termAtt.SetTermLength(bufferLength - 2);              }              else if (type == ACRONYM_TYPE)              {                  // remove dots                  int upto = 0;                  for (int i = 0; i < bufferLength; i++)                  {                      char c = buffer[i];                      if (c != '.')                          buffer[upto++] = ToLower(c);                  }                  _termAtt.SetTermLength(upto);              }              else              {                  do                  {                      //If we consumed a stop word we need to update the buffer and its length.                      if (!bufferUpdated)                      {                          bufferLength = _termAtt.TermLength();                          buffer = _termAtt.TermBuffer();                      }                        for (int i = 0; i < bufferLength; i++)                      {                          buffer[i] = ToLower(buffer[i]);                      }                      if (!_stopWords.Contains(buffer' 0' bufferLength))                      {                          return true;                      }                      bufferUpdated = false;                  } while (input.IncrementToken());                  return false;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,ToLower,The following statement contains a magic number: if (c < 128 && IsAsciiCasingSameAsInvariant)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,ToLower,The following statement contains a magic number: if (c < 128 && IsAsciiCasingSameAsInvariant)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Analyzers,RavenStandardFilter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Analyzers\RavenStandardFilter.cs,ToLower,The following statement contains a magic number: if (c < 128 && IsAsciiCasingSameAsInvariant)              {                  if (65 <= cInt && cInt <= 90)                      c |= ' ';                    return c;              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,Clean,The following statement contains a magic number: if (_fieldsCache.Count > 256)              {                  _fieldsCache.Clear();              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,BlittableObjectReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\BlittableObjectReader.cs,BlittableObjectReader,The following statement contains a magic number: _reader = new StreamReader(_ms' Encodings.Utf8' true' 1024' leaveOpen: true);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,BlittableObjectReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\BlittableObjectReader.cs,GetStringFor,The following statement contains a magic number: if (_readBuffer == null)                  _readBuffer = new char[128];
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,GetHashCode,The following statement contains a magic number: ulong tmpHash = Hashing.Marvin32.CalculateInline(name) << 32;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,GetHashCode,The following statement contains a magic number: int field = ((index != null ? (byte)index : 0xFF) << 16 | ((byte)store << 8) | (byte)termVector);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,GetHashCode,The following statement contains a magic number: int field = ((index != null ? (byte)index : 0xFF) << 16 | ((byte)store << 8) | (byte)termVector);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,GetHashCode,The following statement contains a magic number: ulong tmpHash = Hashing.Marvin32.CalculateInline(name) << 32;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,GetHashCode,The following statement contains a magic number: int field = ((index != null ? (byte)index : 0xFF) << 16 | ((byte)store << 8) | (byte)termVector);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents.Fields,FieldCacheKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\Fields\FieldCacheKey.cs,GetHashCode,The following statement contains a magic number: int field = ((index != null ? (byte)index : 0xFF) << 16 | ((byte)store << 8) | (byte)termVector);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexedTerms,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexedTerms.cs,ReadAllEntriesFromIndex,The following statement contains a magic number: if (reader.MaxDoc > 512 * 1024)              {                  throw new InvalidOperationException("Refusing to extract all index entries from an index with " + reader.MaxDoc +                                                      " entries' because of the probable time / memory costs associated with that." +                                                      Environment.NewLine +                                                      "Viewing index entries are a debug tool' and should not be used on indexes of this size.");              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexedTerms,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexedTerms.cs,ReadAllEntriesFromIndex,The following statement contains a magic number: if (reader.MaxDoc > 512 * 1024)              {                  throw new InvalidOperationException("Refusing to extract all index entries from an index with " + reader.MaxDoc +                                                      " entries' because of the probable time / memory costs associated with that." +                                                      Environment.NewLine +                                                      "Viewing index entries are a debug tool' and should not be used on indexes of this size.");              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexFacetedReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,GetIntersectedDocuments,The following statement contains a magic number: double o2 = nSize * Math.Log(mSize' 2);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IntersectDocs,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,IncreaseSize,The following statement contains a magic number: var newDocumentsArray = IntArraysPool.Instance.AllocateArray(Count * 2);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IntArraysPool,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexFacetedReadOperation.cs,GetRoundedSize,The following statement contains a magic number: const int roundSize = 1024;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The following statement contains a magic number: int pageSizeBestGuess = GetPageSize(_searcher' ((long)query.Start + query.PageSize) * 2);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,IntersectQuery,The following statement contains a magic number: using (var scope = new IndexQueryingScope(_indexType' query' fieldsToFetch' _searcher' retriever' _state))              {                  //Do the first sub-query in the normal way' so that sorting' filtering etc is accounted for                  var search = ExecuteQuery(firstSubDocumentQuery' 0' pageSizeBestGuess' sort);                  var currentBaseQueryMatches = search.ScoreDocs.Length;                  var intersectionCollector = new IntersectionCollector(_searcher' search.ScoreDocs' _state);                    int intersectMatches;                  do                  {                      token.ThrowIfCancellationRequested();                      if (skippedResultsInCurrentLoop > 0)                      {                          // We get here because out first attempt didn't get enough docs (after INTERSECTION was calculated)                          pageSizeBestGuess = pageSizeBestGuess * 2;                            search = ExecuteQuery(firstSubDocumentQuery' 0' pageSizeBestGuess' sort);                          previousBaseQueryMatches = currentBaseQueryMatches;                          currentBaseQueryMatches = search.ScoreDocs.Length;                          intersectionCollector = new IntersectionCollector(_searcher' search.ScoreDocs' _state);                      }                        for (var i = 1; i < subQueries.Length; i++)                      {                          _searcher.Search(subQueries[i]' null' intersectionCollector' _state);                      }                        var currentIntersectResults = intersectionCollector.DocumentsIdsForCount(subQueries.Length).ToList();                      intersectMatches = currentIntersectResults.Count;                      skippedResultsInCurrentLoop = pageSizeBestGuess - intersectMatches;                  } while (intersectMatches < pageSize                      //stop if we've got enough results to satisfy the pageSize                      && currentBaseQueryMatches < search.TotalHits           //stop if increasing the page size wouldn't make any difference                      && previousBaseQueryMatches < currentBaseQueryMatches); //stop if increasing the page size didn't result in any more "base query" results                    var intersectResults = intersectionCollector.DocumentsIdsForCount(subQueries.Length).ToList();                  //It's hard to know what to do here' the TotalHits from the base search isn't really the TotalSize'                   //because it's before the INTERSECTION has been applied' so only some of those results make it out.                  //Trying to give an accurate answer is going to be too costly' so we aren't going to try.                  totalResults.Value = search.TotalHits;                  skippedResults.Value = skippedResultsInCurrentLoop;                    //Using the final set of results in the intersectionCollector                  int returnedResults = 0;                  for (int i = query.Start; i < intersectResults.Count && (i - query.Start) < pageSizeBestGuess; i++)                  {                      var indexResult = intersectResults[i];                      var document = _searcher.Doc(indexResult.LuceneId' _state);                        if (retriever.TryGetKey(document' _state' out string key) && scope.WillProbablyIncludeInResults(key) == false)                      {                          skippedResults.Value++;                          skippedResultsInCurrentLoop++;                          continue;                      }                        var result = retriever.Get(document' indexResult.Score' _state);                      if (scope.TryIncludeInResults(result) == false)                      {                          skippedResults.Value++;                          skippedResultsInCurrentLoop++;                          continue;                      }                        returnedResults++;                      yield return result;                      if (returnedResults == pageSize)                          yield break;                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,GetSort,The following statement contains a magic number: foreach (var field in orderByFields)              {                  if (field.OrderingType == OrderByFieldType.Random)                  {                      string value = null;                      if (field.Arguments != null && field.Arguments.Length > 0)                          value = field.Arguments[0].NameOrValue;                        sort.Add(new RandomSortField(value));                      continue;                  }                    if (field.OrderingType == OrderByFieldType.Score)                  {                      sort.Add(SortField.FIELD_SCORE);                      continue;                  }                    if (field.OrderingType == OrderByFieldType.Distance)                  {                      var spatialField = getSpatialField(field.Name);                        Point point;                      switch (field.Method)                      {                          case MethodType.Spatial_Circle:                              var cLatitude = field.Arguments[1].GetDouble(query.QueryParameters);                              var cLongitude = field.Arguments[2].GetDouble(query.QueryParameters);                                point = spatialField.ReadPoint(cLatitude' cLongitude).GetCenter();                              break;                          case MethodType.Spatial_Wkt:                              var wkt = field.Arguments[0].GetString(query.QueryParameters);                              SpatialUnits? spatialUnits = null;                              if (field.Arguments.Length == 2)                                  spatialUnits = Enum.Parse<SpatialUnits>(field.Arguments[1].GetString(query.QueryParameters)' ignoreCase: true);                                point = spatialField.ReadShape(wkt' spatialUnits).GetCenter();                              break;                          case MethodType.Spatial_Point:                              var pLatitude = field.Arguments[0].GetDouble(query.QueryParameters);                              var pLongitude = field.Arguments[1].GetDouble(query.QueryParameters);                                point = spatialField.ReadPoint(pLatitude' pLongitude).GetCenter();                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }                        var dsort = new SpatialDistanceFieldComparatorSource(spatialField' point);                      sort.Add(new SortField(field.Name' dsort' field.Ascending == false));                      continue;                  }                    var fieldName = field.Name.Value;                  var sortOptions = SortField.STRING;                    switch (field.OrderingType)                  {                      case OrderByFieldType.AlphaNumeric:                          var anSort = new AlphaNumericComparatorSource();                          sort.Add(new SortField(fieldName' anSort' field.Ascending == false));                          continue;                      case OrderByFieldType.Long:                          sortOptions = SortField.LONG;                          fieldName = fieldName + Constants.Documents.Indexing.Fields.RangeFieldSuffixLong;                          break;                      case OrderByFieldType.Double:                          sortOptions = SortField.DOUBLE;                          fieldName = fieldName + Constants.Documents.Indexing.Fields.RangeFieldSuffixDouble;                          break;                  }                    sort.Add(new SortField(fieldName' sortOptions' field.Ascending == false));              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,GetSort,The following statement contains a magic number: foreach (var field in orderByFields)              {                  if (field.OrderingType == OrderByFieldType.Random)                  {                      string value = null;                      if (field.Arguments != null && field.Arguments.Length > 0)                          value = field.Arguments[0].NameOrValue;                        sort.Add(new RandomSortField(value));                      continue;                  }                    if (field.OrderingType == OrderByFieldType.Score)                  {                      sort.Add(SortField.FIELD_SCORE);                      continue;                  }                    if (field.OrderingType == OrderByFieldType.Distance)                  {                      var spatialField = getSpatialField(field.Name);                        Point point;                      switch (field.Method)                      {                          case MethodType.Spatial_Circle:                              var cLatitude = field.Arguments[1].GetDouble(query.QueryParameters);                              var cLongitude = field.Arguments[2].GetDouble(query.QueryParameters);                                point = spatialField.ReadPoint(cLatitude' cLongitude).GetCenter();                              break;                          case MethodType.Spatial_Wkt:                              var wkt = field.Arguments[0].GetString(query.QueryParameters);                              SpatialUnits? spatialUnits = null;                              if (field.Arguments.Length == 2)                                  spatialUnits = Enum.Parse<SpatialUnits>(field.Arguments[1].GetString(query.QueryParameters)' ignoreCase: true);                                point = spatialField.ReadShape(wkt' spatialUnits).GetCenter();                              break;                          case MethodType.Spatial_Point:                              var pLatitude = field.Arguments[0].GetDouble(query.QueryParameters);                              var pLongitude = field.Arguments[1].GetDouble(query.QueryParameters);                                point = spatialField.ReadPoint(pLatitude' pLongitude).GetCenter();                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }                        var dsort = new SpatialDistanceFieldComparatorSource(spatialField' point);                      sort.Add(new SortField(field.Name' dsort' field.Ascending == false));                      continue;                  }                    var fieldName = field.Name.Value;                  var sortOptions = SortField.STRING;                    switch (field.OrderingType)                  {                      case OrderByFieldType.AlphaNumeric:                          var anSort = new AlphaNumericComparatorSource();                          sort.Add(new SortField(fieldName' anSort' field.Ascending == false));                          continue;                      case OrderByFieldType.Long:                          sortOptions = SortField.LONG;                          fieldName = fieldName + Constants.Documents.Indexing.Fields.RangeFieldSuffixLong;                          break;                      case OrderByFieldType.Double:                          sortOptions = SortField.DOUBLE;                          fieldName = fieldName + Constants.Documents.Indexing.Fields.RangeFieldSuffixDouble;                          break;                  }                    sort.Add(new SortField(fieldName' sortOptions' field.Ascending == false));              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,StringCollectionValue,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexSearcherHolder.cs,StringCollectionValue,The following statement contains a magic number: foreach (var value in values)                  {                      fixed (char* p = value)                      {                          _hash = Hashing.XXHash32.Calculate((byte*)p' sizeof(char) * value.Length' _hash);                      }                      _hashCode = _hashCode * 397 ^ value.GetHashCode();                  }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneIndexWriter.cs,CreateIndexWriter,The following statement contains a magic number: _indexWriter.SetRAMBufferSizeMB(1024);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexReader.cs,LuceneSuggestionIndexReader,The following statement contains a magic number: GramsTable = new GramKeys[5];
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexReader.cs,QueryOverSingleWord,The following statement contains a magic number: int maxHits = 10 * pageSize;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexReader.cs,GetMin,The following statement contains a magic number: if (l > 5)                  r = 3;              else if (l == 5)                  r = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexReader.cs,GetMin,The following statement contains a magic number: if (l > 5)                  r = 3;              else if (l == 5)                  r = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexReader.cs,GetMin,The following statement contains a magic number: if (l > 5)                  r = 3;              else if (l == 5)                  r = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexReader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexReader.cs,GetMin,The following statement contains a magic number: if (l > 5)                  r = 3;              else if (l == 5)                  r = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,GetMin,The following statement contains a magic number: if (l > 5)                  r = 3;              else if (l == 5)                  r = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,GetMin,The following statement contains a magic number: if (l > 5)                  r = 3;              else if (l == 5)                  r = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,GetMin,The following statement contains a magic number: if (l > 5)                  r = 3;              else if (l == 5)                  r = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,GetMin,The following statement contains a magic number: if (l > 5)                  r = 3;              else if (l == 5)                  r = 2;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,LuceneSuggestionIndexWriter,The following statement contains a magic number: GramsTable = new GramKeys[5];
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,AddDocument,The following statement contains a magic number: foreach (var fieldable in fieldables)              {                  if (fieldable == null)                      continue;                    TextReader reader;                  var str = fieldable.StringValue(state);                  if (!string.IsNullOrEmpty(str))                  {                      reader = new StringReader(str);                  }                  else                  {                      // We are reusing the fieldable for indexing. Instead of recreating it' we just reset the underlying text reader.                      reader = fieldable.ReaderValue;                      if (reader is ReusableStringReader stringReader)                      {                          if (stringReader.Length == 0)                              continue;                            stringReader.Reset();                      }                      else if (reader is StreamReader streamReader)                      {                          if (streamReader.BaseStream.Length == 0)                              continue;                            streamReader.BaseStream.Position = 0;                      }                      else                          continue;                  }                    var tokenStream = _analyzer.ReusableTokenStream(_field' reader);                  while (tokenStream.IncrementToken())                  {                      var word = tokenStream.GetAttribute<ITermAttribute>().Term;                        // Index                      int len = word.Length;                      if (len < 3)                      {                          continue; // too short we bail but "too long" is fine...                      }                        // Early skip avoiding allocation of terms and searching.                       if (_alreadySeen.Contains(word))                          continue;                        if (_indexSearcher.DocFreq(_fWordTerm.CreateTerm(word)' state) <= 0)                      {                          // the word does not exist in the gramindex                          int min = GetMin(len);                            _indexWriter.AddDocument(CreateDocument(word' min' min + 1)' state);                      }                        _alreadySeen.Add(word);                  }              }
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,CreateIndexWriter,The following statement contains a magic number: _indexWriter.SetRAMBufferSizeMB(50);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene,LuceneSuggestionIndexWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\LuceneSuggestionIndexWriter.cs,CreateIndexWriter,The following statement contains a magic number: _indexWriter.MergeFactor = 300;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Suggestions,JaroWinklerDistance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Suggestions\JaroWinklerDistance.cs,Matches,The following statement contains a magic number: var range = Math.Max(max.Length / 2 - 1' 0);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Suggestions,JaroWinklerDistance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Suggestions\JaroWinklerDistance.cs,Matches,The following statement contains a magic number: return new[] { matches' transpositions / 2' prefix' max.Length };
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Suggestions,JaroWinklerDistance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Suggestions\JaroWinklerDistance.cs,GetDistance,The following statement contains a magic number: if (Math.Abs(m - 0.0001) < 0)                  return 0f;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Suggestions,JaroWinklerDistance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Suggestions\JaroWinklerDistance.cs,GetDistance,The following statement contains a magic number: float j = ((m / s1.Length + m / s2.Length + (m - mtp[1]) / m)) / 3;
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Suggestions,JaroWinklerDistance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Suggestions\JaroWinklerDistance.cs,GetDistance,The following statement contains a magic number: float jw = j < Threshold ? j : j + Math.Min(0.1f' 1f / mtp[3]) * mtp[2] * (1 - j);
Magic Number,Raven.Server.Documents.Indexes.Persistence.Lucene.Suggestions,JaroWinklerDistance,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Suggestions\JaroWinklerDistance.cs,GetDistance,The following statement contains a magic number: float jw = j < Threshold ? j : j + Math.Min(0.1f' 1f / mtp[3]) * mtp[2] * (1 - j);
Magic Number,Raven.Server.Documents.Indexes.Static,DynamicBlittableJson,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\DynamicBlittableJson.cs,DynamicBlittableJson,The following statement contains a magic number: PrecomputedTable = new[]              {                  new CompareKey(Constants.Documents.Indexing.Fields.DocumentIdFieldName' 0)'                  new CompareKey(Constants.Documents.Metadata.IdProperty' 0)'                  new CompareKey(Constants.Documents.Metadata.HasValue' 0)'                  new CompareKey(Constants.Documents.Metadata.Key' 0)'                  new CompareKey(Constants.Documents.Metadata.Id' 1)'                  new CompareKey(Constants.Documents.Metadata.ChangeVector' 1)'                  new CompareKey(Constants.Documents.Metadata.LastModified' 1)'                  new CompareKey("Count"' 2)              };
Magic Number,Raven.Server.Documents.Indexes.Static,MapIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndex.cs,CalculateIndexEtag,The following statement contains a magic number: var length = minLength +                           sizeof(long) * 2 * (Collections.Count * _referencedCollections.Count);
Magic Number,Raven.Server.Documents.Indexes.Static,MapIndexDefinition,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\MapIndexDefinition.cs,ComputeRestOfHash,The following statement contains a magic number: return hashCode * 397 ^ IndexDefinition.GetHashCode();
Magic Number,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,MethodSyntaxRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\CollectionNameRetriever.cs,VisitInvocationExpression,The following statement contains a magic number: if (nodeParts.Length <= 2)                      return node;
Magic Number,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,MethodSyntaxRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\CollectionNameRetriever.cs,VisitInvocationExpression,The following statement contains a magic number: if (arguments.Count < 2)                      return node;
Magic Number,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqPrettifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqPrettifier.cs,VisitInvocationExpression,The following statement contains a magic number: switch (memeberAccess.Name.Identifier.ValueText)              {                  case "SelectMany":                      var sourceExp = GetSimpleLambdaExpressionSyntax(node);                      var selectorExp = GetSelectorLambdaFromSelectManyExpression(node);                        if (sourceExp == null || selectorExp == null || selectorExp.ParameterList.Parameters.Count < 2)                          return base.VisitInvocationExpression(node);                        sourceExp = sourceExp.WithParameter(selectorExp.ParameterList.Parameters[0])                          .WithBody(sourceExp.Body.ReplaceNodes(sourceExp.Body.DescendantNodes().OfType<IdentifierNameSyntax>()' (orig' _) =>                          {                              if (orig.Parent is MemberAccessExpressionSyntax access && orig == access.Name)                                  return orig;                                if (orig.Identifier.ValueText != sourceExp.Parameter.Identifier.ValueText)                                  return orig;                              return orig.WithIdentifier(selectorExp.ParameterList.Parameters[0].Identifier);                          }));                        var sourceExpBody = GetBodyAndRemoveCastingIfNeeded(sourceExp);                      var selectManyInvocExp = memeberAccess.Expression as InvocationExpressionSyntax;                      MemberAccessExpressionSyntax selectManyInnerMemberAccess = null;                      if (selectManyInvocExp != null)                          selectManyInnerMemberAccess = selectManyInvocExp.Expression as MemberAccessExpressionSyntax;                        if (selectManyInnerMemberAccess == null)                      {                          //handle innermost SelectMany()                          return SyntaxFactory.QueryExpression(                              SyntaxFactory.FromClause(                                  SyntaxFactory.Identifier(sourceExp.Parameter.Identifier.ValueText)'                                  (ExpressionSyntax)Visit(memeberAccess.Expression))'                              SyntaxFactory.QueryBody(                                      SyntaxFactory.SelectClause((ExpressionSyntax)selectorExp.Body))                                  .WithClauses(                                      SyntaxFactory.SingletonList<QueryClauseSyntax>(                                          SyntaxFactory.FromClause(                                              selectorExp.ParameterList.Parameters[1].Identifier'                                              (ExpressionSyntax)sourceExpBody                                          )                                      )));                      }                        if (selectManyInnerMemberAccess.Name.Identifier.ValueText != "SelectMany")                          return base.VisitInvocationExpression(node);                        //handle docs.SelectMany().SelectMany()...                      var innerQueryExp = (QueryExpressionSyntax)Visit(selectManyInvocExp);                        var clausesList = innerQueryExp.Body.Clauses.Add(SyntaxFactory.LetClause(                          SyntaxFactory.Identifier(selectorExp.ParameterList.Parameters[0].Identifier.ValueText)'                          (ExpressionSyntax)Visit((innerQueryExp.Body.SelectOrGroup as SelectClauseSyntax)?.Expression)));                      clausesList = clausesList.Add(SyntaxFactory.FromClause(                          SyntaxFactory.Identifier(selectorExp.ParameterList.Parameters[1].Identifier.ValueText)'                          (ExpressionSyntax)Visit(sourceExpBody)));                        //TODO : aviv - try to remove 'this0'' 'this1'' etc.. from sourceExp and selectorExp'                      //TODO          so that we can avoid adding 'let' clauses to QueryBody                         return SyntaxFactory.QueryExpression(                          innerQueryExp.FromClause'                          SyntaxFactory.QueryBody(                                  SyntaxFactory.SelectClause((ExpressionSyntax)Visit(selectorExp.Body)))                              .WithClauses(clausesList));                      case "Select":                      var expressionSyntax = GetSimpleLambdaExpressionSyntax(node);                      if (expressionSyntax == null)                          return base.VisitInvocationExpression(node);                        var invocExp = memeberAccess.Expression as InvocationExpressionSyntax;                      MemberAccessExpressionSyntax innerMemberAccess = null;                      if (invocExp != null)                          innerMemberAccess = invocExp.Expression as MemberAccessExpressionSyntax;                        var name = innerMemberAccess?.Name.Identifier.ValueText;                        var innerInvocExp = innerMemberAccess?.Expression as InvocationExpressionSyntax;                      MemberAccessExpressionSyntax innerInnerMemberAccess = null;                      if (innerInvocExp != null)                          innerInnerMemberAccess = innerInvocExp.Expression as MemberAccessExpressionSyntax;                        if (innerMemberAccess == null || name == "Select" && innerInnerMemberAccess == null)                          //handle docs.Select()                          return SyntaxFactory.QueryExpression(                              SyntaxFactory.FromClause(                                  expressionSyntax.Parameter.Identifier'                                  RavenLinqOptimizer.MaybeParenthesizedExpression((ExpressionSyntax)Visit(memeberAccess.Expression))                              )'                              SyntaxFactory.QueryBody(SyntaxFactory.SelectClause((ExpressionSyntax)Visit(expressionSyntax.Body))));                        if (name != "Where")                          return base.VisitInvocationExpression(node);                        var whereClause = GetSimpleLambdaExpressionSyntax(invocExp);                        if (innerInnerMemberAccess != null && innerInnerMemberAccess.Name.Identifier.ValueText == "SelectMany")                      {                          //handle docs.SelectMany().Where().Select()                          var innerQueryExpSyntax = Visit(innerInvocExp) as QueryExpressionSyntax;                          if (innerQueryExpSyntax == null)                              throw new NotSupportedException("This expression is not recognized' skipping prettifying");                            var clauses = innerQueryExpSyntax.Body.Clauses.Add(SyntaxFactory.LetClause(                          SyntaxFactory.Identifier(whereClause.Parameter.Identifier.ValueText)'                          (ExpressionSyntax)Visit((innerQueryExpSyntax.Body.SelectOrGroup as SelectClauseSyntax)?.Expression)));                          clauses = clauses.Add(SyntaxFactory.WhereClause((ExpressionSyntax)Visit(whereClause.Body)));                            return SyntaxFactory.QueryExpression(                              innerQueryExpSyntax.FromClause'                              SyntaxFactory.QueryBody(                                      SyntaxFactory.SelectClause((ExpressionSyntax)Visit(expressionSyntax.Body)))                                  .WithClauses(clauses));                      }                        //handle docs.Where().Select()                      var identifierNameSyntax = innerMemberAccess.Expression as IdentifierNameSyntax;                      if (identifierNameSyntax == null)                          return base.VisitInvocationExpression(node);                        whereClause = whereClause.WithParameter(expressionSyntax.Parameter)                          .WithBody(whereClause.Body.ReplaceNodes(whereClause.Body.DescendantNodes().OfType<IdentifierNameSyntax>()' (orig' _) =>                          {                              if (orig.Parent is MemberAccessExpressionSyntax access && orig == access.Name)                                  return orig;                                if (orig.Identifier.ValueText != whereClause.Parameter.Identifier.ValueText)                                  return orig;                              return orig.WithIdentifier(expressionSyntax.Parameter.Identifier);                          }));                        return SyntaxFactory.QueryExpression(                          SyntaxFactory.FromClause(                              expressionSyntax.Parameter.Identifier'                              SyntaxFactory.IdentifierName(identifierNameSyntax.Identifier.ValueText)                          )'                          SyntaxFactory.QueryBody(SyntaxFactory.SelectClause((ExpressionSyntax)Visit(expressionSyntax.Body)))                              .WithClauses(SyntaxFactory.SingletonList<QueryClauseSyntax>(SyntaxFactory.WhereClause((ExpressionSyntax)Visit(whereClause.Body)))));                    default:                      return base.VisitInvocationExpression(node);                }
Magic Number,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,RavenLinqPrettifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\RavenLinqPrettifier.cs,GetSelectorLambdaFromSelectManyExpression,The following statement contains a magic number: if (node.ArgumentList.Arguments.Count < 2)                  return null;
Magic Number,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters.ReduceIndex,QuerySyntaxRetriever,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\ReduceIndex\GroupByFieldsRetriever.cs,VisitGroupClause,The following statement contains a magic number: if (by.StartsWith("new"))                  {                      by = by.Substring(3);                      by = by.Trim('{'' ' '' '}'' '\r'' '\n');                  }
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,RecursivePrefixTreeStrategyThatSupportsWithin,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\RecursivePrefixTreeStrategyThatSupportsWithin.cs,RecursivePrefixTreeStrategyThatSupportsWithin,The following statement contains a magic number: _prefixGridScanLevel = grid.GetMaxLevels() - 4;
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseBox,The following statement contains a magic number: if (match.Success)              {                  shape = $"{match.Groups[1].Value} {match.Groups[2].Value} {match.Groups[3].Value} {match.Groups[4].Value}";                  return true;              }
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseBox,The following statement contains a magic number: if (match.Success)              {                  shape = $"{match.Groups[1].Value} {match.Groups[2].Value} {match.Groups[3].Value} {match.Groups[4].Value}";                  return true;              }
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseBox,The following statement contains a magic number: if (match.Success)              {                  shape = $"{match.Groups[1].Value} {match.Groups[2].Value} {match.Groups[3].Value} {match.Groups[4].Value}";                  return true;              }
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseGeoUri,The following statement contains a magic number: var components = uriString.Substring(4' uriString.Length - 4).Split(';').Select(x => x.Trim());
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseGeoUri,The following statement contains a magic number: var components = uriString.Substring(4' uriString.Length - 4).Split(';').Select(x => x.Trim());
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseGeoUri,The following statement contains a magic number: foreach (var component in components)              {                  var coord = RegexGeoUriCoord.Match(component);                  if (coord.Success)                  {                      if (coord.Groups.Count > 1)                          coordinate = new[] { double.Parse(coord.Groups[1].Value' CultureInfo.InvariantCulture)' double.Parse(coord.Groups[2].Value' CultureInfo.InvariantCulture) };                      continue;                  }                  var u = RegexGeoUriUncert.Match(component);                  if (u.Success)                  {                      uncertainty = double.Parse(u.Groups[1].Value' CultureInfo.InvariantCulture);                        // Uncertainty is in meters when in a geographic context                      if (uncertainty > 0 && _options.Type == SpatialFieldType.Geography)                      {                          uncertainty = uncertainty / 1000;                          if (_options.Units == SpatialUnits.Miles)                              uncertainty *= KmToMiles;                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringConverter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringConverter.cs,TryParseGeoUri,The following statement contains a magic number: foreach (var component in components)              {                  var coord = RegexGeoUriCoord.Match(component);                  if (coord.Success)                  {                      if (coord.Groups.Count > 1)                          coordinate = new[] { double.Parse(coord.Groups[1].Value' CultureInfo.InvariantCulture)' double.Parse(coord.Groups[2].Value' CultureInfo.InvariantCulture) };                      continue;                  }                  var u = RegexGeoUriUncert.Match(component);                  if (u.Success)                  {                      uncertainty = double.Parse(u.Groups[1].Value' CultureInfo.InvariantCulture);                        // Uncertainty is in meters when in a geographic context                      if (uncertainty > 0 && _options.Type == SpatialFieldType.Geography)                      {                          uncertainty = uncertainty / 1000;                          if (_options.Units == SpatialUnits.Miles)                              uncertainty *= KmToMiles;                      }                  }              }
Magic Number,Raven.Server.Documents.Indexes.Static.Spatial,ShapeStringReadWriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\ShapeStringReadWriter.cs,TranslateCircleRadius,The following statement contains a magic number: var radCapture = match.Groups[3];
Magic Number,Raven.Server.Documents.Indexes.Workers,CleanupDeletedDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\CleanupDeletedDocuments.cs,Execute,The following statement contains a magic number: var maxTimeForDocumentTransactionToRemainOpen = Debugger.IsAttached == false                  ? _configuration.MaxTimeForDocumentTransactionToRemainOpen.AsTimeSpan                  : TimeSpan.FromMinutes(15);
Magic Number,Raven.Server.Documents.Indexes.Workers,HandleReferences,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\HandleReferences.cs,Execute,The following statement contains a magic number: var maxTimeForDocumentTransactionToRemainOpen = Debugger.IsAttached == false                              ? _configuration.MaxTimeForDocumentTransactionToRemainOpen.AsTimeSpan                              : TimeSpan.FromMinutes(15);
Magic Number,Raven.Server.Documents.Indexes.Workers,MapDocuments,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Workers\MapDocuments.cs,Execute,The following statement contains a magic number: var maxTimeForDocumentTransactionToRemainOpen = Debugger.IsAttached == false                              ? _configuration.MaxTimeForDocumentTransactionToRemainOpen.AsTimeSpan                              : TimeSpan.FromMinutes(15);
Magic Number,Raven.Server.Documents.Operations,Operations,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Operations\Operations.cs,CleanupOperations,The following statement contains a magic number: var twoDaysAgo = SystemTime.UtcNow.AddDays(-2);
Magic Number,Raven.Server.Documents.Patch,AdminJsScriptKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\AdminJsConsole.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = 0;                  hashCode = (hashCode * 397) ^ (_script != null ? _script.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Patch,PatchRequest,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchRequest.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = 0;                  hashCode = (hashCode * 397) ^ (Script != null ? Script.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)Type;                  return hashCode;              }
Magic Number,Raven.Server.Documents.Patch,PatchRequest,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\PatchRequest.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = 0;                  hashCode = (hashCode * 397) ^ (Script != null ? Script.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)Type;                  return hashCode;              }
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,SingleRun,The following statement contains a magic number: ScriptEngine = new Engine(options =>                  {                      options.LimitRecursion(64)                          .SetReferencesResolver(new JintPreventResolvingTasksReferenceResolver())                          .MaxStatements(_configuration.Patching.MaxStepsForScript)                          .Strict()                          .AddObjectConverter(new JintGuidConverter())                          .AddObjectConverter(new JintStringConverter())                          .AddObjectConverter(new JintEnumConverter())                          .AddObjectConverter(new JintDateTimeConverter())                          .AddObjectConverter(new JintTimeSpanConverter())                          .LocalTimeZone(TimeZoneInfo.Utc);                    });
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,GetLastModified,The following statement contains a magic number: if (args[0].AsObject() is BlittableObjectInstance doc)                  {                      if (doc.LastModified == null)                          return Undefined.Instance;                        // we use UTC because last modified is in UTC                      var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                      var jsTime = doc.LastModified.Value.Subtract(epoch)                          .TotalMilliseconds;                      return new JsValue(jsTime);                  }
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,PutDocument,The following statement contains a magic number: if (args.Length != 2 && args.Length != 3)                      throw new InvalidOperationException("put(id' doc' changeVector) must be called with called with 2 or 3 arguments only");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,PutDocument,The following statement contains a magic number: if (args.Length != 2 && args.Length != 3)                      throw new InvalidOperationException("put(id' doc' changeVector) must be called with called with 2 or 3 arguments only");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,PutDocument,The following statement contains a magic number: if (args.Length == 3)                      if (args[2].IsString())                          changeVector = args[2].AsString();                      else if (args[2].IsNull() == false && args[0].IsUndefined() == false)                          throw new InvalidOperationException(                              $"The change vector must be a string or null. Document ID: '{id}'.");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,PutDocument,The following statement contains a magic number: if (args.Length == 3)                      if (args[2].IsString())                          changeVector = args[2].AsString();                      else if (args[2].IsNull() == false && args[0].IsUndefined() == false)                          throw new InvalidOperationException(                              $"The change vector must be a string or null. Document ID: '{id}'.");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,PutDocument,The following statement contains a magic number: if (args.Length == 3)                      if (args[2].IsString())                          changeVector = args[2].AsString();                      else if (args[2].IsNull() == false && args[0].IsUndefined() == false)                          throw new InvalidOperationException(                              $"The change vector must be a string or null. Document ID: '{id}'.");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,PutDocument,The following statement contains a magic number: if (args.Length == 3)                      if (args[2].IsString())                          changeVector = args[2].AsString();                      else if (args[2].IsNull() == false && args[0].IsUndefined() == false)                          throw new InvalidOperationException(                              $"The change vector must be a string or null. Document ID: '{id}'.");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,DeleteDocument,The following statement contains a magic number: if (args.Length != 1 && args.Length != 2)                      throw new InvalidOperationException("delete(id' changeVector) must be called with at least one parameter");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,DeleteDocument,The following statement contains a magic number: if (args.Length == 2 && args[1].IsString())                      changeVector = args[1].AsString();
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,LoadDocumentByPath,The following statement contains a magic number: if (args.Length != 2 ||                      (args[0].IsNull() == false && args[0].IsUndefined() == false && args[0].IsObject() == false)                      || args[1].IsString() == false)                      throw new InvalidOperationException("loadPath(doc' path) must be called with a document and path");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,ConvertJsTimeToTimeSpanString,The following statement contains a magic number: var ticks = Convert.ToInt64(args[0].AsNumber()) * 10000;
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,StartsWith,The following statement contains a magic number: if (args.Length != 2 || args[0].IsString() == false || args[1].IsString() == false)                      throw new InvalidOperationException("startsWith(text' contained) must be called with two string paremters");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,EndsWith,The following statement contains a magic number: if (args.Length != 2 || args[0].IsString() == false || args[1].IsString() == false)                      throw new InvalidOperationException("endsWith(text' contained) must be called with two string paremters");
Magic Number,Raven.Server.Documents.Patch,SingleRun,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunner.cs,Regex,The following statement contains a magic number: if (args.Length != 2 || args[0].IsString() == false || args[1].IsString() == false)                      throw new InvalidOperationException("regex(text' regex) must be called with two string paremters");
Magic Number,Raven.Server.Documents.Patch,ScriptRunnerCache,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunnerCache.cs,CleanTheCache,The following statement contains a magic number: foreach (var pair in _cache.OrderBy(x => x.Value.Value.Runs)                  .Take(_configuration.Patching.MaxNumberOfCachedScripts / 4)              )              {                  _cache.TryRemove(pair.Key' out _);              }
Magic Number,Raven.Server.Documents.Patch,ScriptRunnerCache,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Patch\ScriptRunnerCache.cs,CleanTheCache,The following statement contains a magic number: foreach (var pair in _cache)              {                  count++;                  var valueRuns = pair.Value.Value.Runs / 2;                  Interlocked.Add(ref pair.Value.Value.Runs' -valueRuns);              }
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,UploadArchive,The following statement contains a magic number: var client = GetClient(TimeSpan.FromHours(24));
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,MultiPartUpload,The following statement contains a magic number: var maxLengthPerPart = Math.Max(MinOnePartUploadSizeLimitInBytes' stream.Length / 10000);
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,MultiPartUpload,The following statement contains a magic number: const long maxPartLength = 4L * 1024 * 1024 * 1024;
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,MultiPartUpload,The following statement contains a magic number: const long maxPartLength = 4L * 1024 * 1024 * 1024;
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,MultiPartUpload,The following statement contains a magic number: const long maxPartLength = 4L * 1024 * 1024 * 1024;
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,MultiPartUpload,The following statement contains a magic number: var client = GetClient(TimeSpan.FromDays(7));
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsGlacierClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsGlacierClient.cs,UploadPart,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsHelper.cs,ComputeSha256TreeHash,The following statement contains a magic number: while (prevLvlHashes.GetLength(0) > 1)              {                  int len = prevLvlHashes.GetLength(0) / 2;                  if (prevLvlHashes.GetLength(0) % 2 != 0)                  {                      len++;                  }                    var currLvlHashes = new byte[len][];                    int j = 0;                  for (int i = 0; i < prevLvlHashes.GetLength(0); i = i + 2' j++)                  {                      // If there are at least two elements remaining                      if (prevLvlHashes.GetLength(0) - i > 1)                      {                          // Calculate a digest of the concatenated nodes                          byte[] firstPart = prevLvlHashes[i];                          byte[] secondPart = prevLvlHashes[i + 1];                          var concatenation = new byte[firstPart.Length + secondPart.Length];                          Buffer.BlockCopy(firstPart' 0' concatenation' 0' firstPart.Length);                          Buffer.BlockCopy(secondPart' 0' concatenation' firstPart.Length' secondPart.Length);                            currLvlHashes[j] = CalculateSha256Hash(concatenation' concatenation.Length);                      }                      else                      {                          // Take care of remaining odd chunk                          currLvlHashes[j] = prevLvlHashes[i];                      }                  }                    prevLvlHashes = currLvlHashes;              }
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsHelper.cs,ComputeSha256TreeHash,The following statement contains a magic number: while (prevLvlHashes.GetLength(0) > 1)              {                  int len = prevLvlHashes.GetLength(0) / 2;                  if (prevLvlHashes.GetLength(0) % 2 != 0)                  {                      len++;                  }                    var currLvlHashes = new byte[len][];                    int j = 0;                  for (int i = 0; i < prevLvlHashes.GetLength(0); i = i + 2' j++)                  {                      // If there are at least two elements remaining                      if (prevLvlHashes.GetLength(0) - i > 1)                      {                          // Calculate a digest of the concatenated nodes                          byte[] firstPart = prevLvlHashes[i];                          byte[] secondPart = prevLvlHashes[i + 1];                          var concatenation = new byte[firstPart.Length + secondPart.Length];                          Buffer.BlockCopy(firstPart' 0' concatenation' 0' firstPart.Length);                          Buffer.BlockCopy(secondPart' 0' concatenation' firstPart.Length' secondPart.Length);                            currLvlHashes[j] = CalculateSha256Hash(concatenation' concatenation.Length);                      }                      else                      {                          // Take care of remaining odd chunk                          currLvlHashes[j] = prevLvlHashes[i];                      }                  }                    prevLvlHashes = currLvlHashes;              }
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsHelper.cs,ComputeSha256TreeHash,The following statement contains a magic number: while (prevLvlHashes.GetLength(0) > 1)              {                  int len = prevLvlHashes.GetLength(0) / 2;                  if (prevLvlHashes.GetLength(0) % 2 != 0)                  {                      len++;                  }                    var currLvlHashes = new byte[len][];                    int j = 0;                  for (int i = 0; i < prevLvlHashes.GetLength(0); i = i + 2' j++)                  {                      // If there are at least two elements remaining                      if (prevLvlHashes.GetLength(0) - i > 1)                      {                          // Calculate a digest of the concatenated nodes                          byte[] firstPart = prevLvlHashes[i];                          byte[] secondPart = prevLvlHashes[i + 1];                          var concatenation = new byte[firstPart.Length + secondPart.Length];                          Buffer.BlockCopy(firstPart' 0' concatenation' 0' firstPart.Length);                          Buffer.BlockCopy(secondPart' 0' concatenation' firstPart.Length' secondPart.Length);                            currLvlHashes[j] = CalculateSha256Hash(concatenation' concatenation.Length);                      }                      else                      {                          // Take care of remaining odd chunk                          currLvlHashes[j] = prevLvlHashes[i];                      }                  }                    prevLvlHashes = currLvlHashes;              }
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsS3Client,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsS3Client.cs,PutObject,The following statement contains a magic number: var client = GetClient(TimeSpan.FromHours(24));
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsS3Client,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsS3Client.cs,MultiPartUpload,The following statement contains a magic number: var client = GetClient(TimeSpan.FromDays(7));
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsS3Client,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsS3Client.cs,MultiPartUpload,The following statement contains a magic number: var maxLengthPerPart = Math.Max(MinOnePartUploadSizeLimitInBytes' stream.Length / 1000);
Magic Number,Raven.Server.Documents.PeriodicBackup.Aws,RavenAwsS3Client,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Aws\RavenAwsS3Client.cs,UploadPart,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,PutBlob,The following statement contains a magic number: var client = GetClient(TimeSpan.FromHours(3));
Magic Number,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,PutBlockApi,The following statement contains a magic number: var client = GetClient(TimeSpan.FromDays(7));
Magic Number,Raven.Server.Documents.PeriodicBackup.Azure,RavenAzureClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\Azure\RavenAzureClient.cs,PutBlock,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Raven.Server.Documents.PeriodicBackup,RavenFtpClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RavenFtpClient.cs,ExtractUrlAndDirectories,The following statement contains a magic number: if (port < 1 || port > 65535)                  throw new ArgumentException("Port number range: 1-65535");
Magic Number,Raven.Server.Documents.PeriodicBackup,RavenStorageClient,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RavenStorageClient.cs,GetClient,The following statement contains a magic number: var client = new HttpClient(handler)              {                  Timeout = timeout ?? TimeSpan.FromSeconds(120)              };
Magic Number,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,WriteIdentitiesAsync,The following statement contains a magic number: const int batchSize = 1024;
Magic Number,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,ValidateArguments,The following statement contains a magic number: if (_hasEncryptionKey)              {                  var key = Convert.FromBase64String(_restoreConfiguration.EncryptionKey);                  if (key.Length != 256 / 8)                      throw new InvalidOperationException($"The size of the encryption key must be 256 bits' but was {key.Length * 8} bits.");              }
Magic Number,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,ValidateArguments,The following statement contains a magic number: if (_hasEncryptionKey)              {                  var key = Convert.FromBase64String(_restoreConfiguration.EncryptionKey);                  if (key.Length != 256 / 8)                      throw new InvalidOperationException($"The size of the encryption key must be 256 bits' but was {key.Length * 8} bits.");              }
Magic Number,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,ValidateArguments,The following statement contains a magic number: if (_hasEncryptionKey)              {                  var key = Convert.FromBase64String(_restoreConfiguration.EncryptionKey);                  if (key.Length != 256 / 8)                      throw new InvalidOperationException($"The size of the encryption key must be 256 bits' but was {key.Length * 8} bits.");              }
Magic Number,Raven.Server.Documents.PeriodicBackup,RestoreBackupTask,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\PeriodicBackup\RestoreBackupTask.cs,ImportSingleBackupFile,The following statement contains a magic number: using (var fileStream = File.Open(filePath' FileMode.Open))              using (var stream = new GZipStream(new BufferedStream(fileStream' 128 * Voron.Global.Constants.Size.Kilobyte)' CompressionMode.Decompress))              using (var source = new StreamSource(stream' context' database))              {                  var smuggler = new Smuggler.Documents.DatabaseSmuggler(database' source' destination'                      database.Time' options' result: restoreResult' onProgress: onProgress' token: _operationCancelToken.Token)                  {                      OnIndexAction = onIndexAction'                  };                    smuggler.Execute();              }
Magic Number,Raven.Server.Documents.Queries,AbstractQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AbstractQueryRunner.cs,ExecuteOperation,The following statement contains a magic number: const int batchSize = 1024;
Magic Number,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,CreateRange,The following statement contains a magic number: return NumericRangeQuery.NewLongRange(fieldName' 4' minValue' maxValue' inclusiveMin' inclusiveMax);
Magic Number,Raven.Server.Documents.Queries,LuceneQueryHelper,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\LuceneQueryHelper.cs,CreateRange,The following statement contains a magic number: return NumericRangeQuery.NewDoubleRange(fieldName' 4' minValue' maxValue' inclusiveMin' inclusiveMax);
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToMoreLikeThisQuery,The following statement contains a magic number: if (moreLikeThisExpression.Arguments.Count == 2)              {                  var value = GetValue(query' metadata' parameters' moreLikeThisExpression.Arguments[1]' allowObjectsInParameters: true);                  if (value.Type == ValueTokenType.String)                      options = IndexReadOperation.ParseJsonStringIntoBlittable(GetValueAsString(value.Value)' context);                  else                      options = value.Value as BlittableJsonReaderObject;              }
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleRegex,The following statement contains a magic number: if (expression.Arguments.Count != 2)                  throw new ArgumentException(                      $"Regex method was invoked with {expression.Arguments.Count} arguments ({expression})" +                      " while it should be invoked with 2 arguments e.g. Regex(foo.Name'\"^[a-z]+?\")");
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSearch,The following statement contains a magic number: if (expression.Arguments.Count == 3)              {                  var fieldExpression = (FieldExpression)expression.Arguments[2];                  if (fieldExpression.Compound.Count != 1)                      ThrowInvalidOperatorInSearch(metadata' parameters' fieldExpression);                    var op = fieldExpression.Compound[0];                  if (string.Equals("AND"' op' StringComparison.OrdinalIgnoreCase))                      occur = Occur.MUST;                  else if (string.Equals("OR"' op' StringComparison.OrdinalIgnoreCase))                      occur = Occur.SHOULD;                  else                      ThrowInvalidOperatorInSearch(metadata' parameters' fieldExpression);              }
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSearch,The following statement contains a magic number: if (expression.Arguments.Count == 3)              {                  var fieldExpression = (FieldExpression)expression.Arguments[2];                  if (fieldExpression.Compound.Count != 1)                      ThrowInvalidOperatorInSearch(metadata' parameters' fieldExpression);                    var op = fieldExpression.Compound[0];                  if (string.Equals("AND"' op' StringComparison.OrdinalIgnoreCase))                      occur = Occur.MUST;                  else if (string.Equals("OR"' op' StringComparison.OrdinalIgnoreCase))                      occur = Occur.SHOULD;                  else                      ThrowInvalidOperatorInSearch(metadata' parameters' fieldExpression);              }
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSearch,The following statement contains a magic number: LuceneTermType GetTermType(string termValue)              {                  if (string.IsNullOrEmpty(termValue))                      return LuceneTermType.String;                    if (termValue[0] == LuceneQueryHelper.AsteriskChar)                      return LuceneTermType.WildCard;                    if (termValue[termValue.Length - 1] == LuceneQueryHelper.AsteriskChar)                  {                      if (termValue[termValue.Length - 2] != '\\')                          return LuceneTermType.Prefix;                  }                    return LuceneTermType.String;              }
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSpatial,The following statement contains a magic number: if (expression.Arguments.Count == 3)              {                  var distanceErrorPctValue = GetValue(query' metadata' parameters' (ValueExpression)expression.Arguments[2]);                  AssertValueIsNumber(fieldName' distanceErrorPctValue.Type);                    distanceErrorPct = Convert.ToDouble(distanceErrorPctValue.Value);              }
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleSpatial,The following statement contains a magic number: if (expression.Arguments.Count == 3)              {                  var distanceErrorPctValue = GetValue(query' metadata' parameters' (ValueExpression)expression.Arguments[2]);                  AssertValueIsNumber(fieldName' distanceErrorPctValue.Type);                    distanceErrorPct = Convert.ToDouble(distanceErrorPctValue.Value);              }
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleWkt,The following statement contains a magic number: if (expression.Arguments.Count == 2)                  spatialUnits = GetSpatialUnits(query' expression.Arguments[3] as ValueExpression' metadata' parameters' fieldName);
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleWkt,The following statement contains a magic number: if (expression.Arguments.Count == 2)                  spatialUnits = GetSpatialUnits(query' expression.Arguments[3] as ValueExpression' metadata' parameters' fieldName);
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleCircle,The following statement contains a magic number: var longitude = GetValue(query' metadata' parameters' (ValueExpression)expression.Arguments[2]);
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleCircle,The following statement contains a magic number: if (expression.Arguments.Count == 4)                  spatialUnits = GetSpatialUnits(query' expression.Arguments[3] as ValueExpression' metadata' parameters' fieldName);
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,HandleCircle,The following statement contains a magic number: if (expression.Arguments.Count == 4)                  spatialUnits = GetSpatialUnits(query' expression.Arguments[3] as ValueExpression' metadata' parameters' fieldName);
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ParseInt64WithSeparators,The following statement contains a magic number: for (var index = 0; index < token.Length; index++)              {                  var ch = token[index];                  if (ch == '_')                      continue;                  if (ch < '0' || ch > '9')                      ThrowInvalidInt64(token);                  l = (l*10) + (ch - '0');              }
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,Unescape,The following statement contains a magic number: for (var i = start; i < length; i++)              {                  var ch = term[i];                  if (prev != '\\')                  {                      prev = ch;                      continue;                  }                  prev = '\0'; // reset                  switch (ch)                  {                      case '*':                      case '?':                      case '+':                      case '-':                      case '&':                      case '|':                      case '!':                      case '(':                      case ')':                      case '{':                      case '}':                      case '[':                      case ']':                      case '^':                      case '"':                      case '~':                      case ':':                      case '\\':                          {                              if (buffer == null)                              {                                  // allocate builder with headroom                                  buffer = new StringBuilder(length * 2);                              }                              // append any leading substring                              buffer.Append(term' start' i - start - 1);                              buffer.Append(ch);                              start = i + 1;                              break;                          }                  }              }
Magic Number,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,Unescape,The following statement contains a magic number: if (buffer == null)              {                  if (isPhrase)                      return term.Substring(1' term.Length - 2);                  // no changes required                  return term;              }
Magic Number,Raven.Server.Documents.Queries,QueryFieldName,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryFieldName.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Value != null ? Value.GetHashCode() : 0) * 397) ^ IsQuoted.GetHashCode();              }
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleLoadClause,The following statement contains a magic number: foreach (var load in Query.Load)              {                  if (load.Alias == null)                  {                      ThrowInvalidWith(load.Expression' "LOAD clause requires an alias but got: "' parameters);                      return; // never hit                  }                    var alias = load.Alias.Value;                    var parameter = false;                  var quoted = false;                  string path;                  if (load.Expression is FieldExpression fe)                  {                      path = fe.FieldValue;                      quoted = fe.IsQuoted;                  }                  else if (load.Expression is ValueExpression ve)                  {                      path = ve.Token;                      parameter = ve.Value == ValueTokenType.Parameter;                  }                  else                  {                      ThrowInvalidWith(load.Expression' "LOAD clause require a field or value refereces"' parameters);                      return; // never hit                  }                    var array = false;                  if (alias.EndsWith("[]"))                  {                      array = true;                      alias = alias.Subsegment(0' alias.Length - 2);                  }                    string loadFromAlias;                  (path' loadFromAlias) = ParseExpressionPath(load.Expression' path' parameters);                    if (RootAliasPaths.TryAdd(alias' (path' array' parameter' quoted' loadFromAlias)) == false)                  {                      ThrowInvalidWith(load.Expression' "LOAD clause duplicate alias detected: "' parameters);                  }              }
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,ExtractOrderByFromMethod,The following statement contains a magic number: if (me.Name.Equals("spatial.distance"' StringComparison.OrdinalIgnoreCase))              {                  if (me.Arguments.Count != 2)                      throw new InvalidQueryException("Invalid ORDER BY 'spatial.distance()' call' expected two arguments' got " + me.Arguments.Count' QueryText'                          parameters);                    var fieldName = ExtractFieldNameFromFirstArgument(me.Arguments' "spatial.distance"' parameters);                    var lastArgument = me.Arguments[me.Arguments.Count - 1];                    if (!(lastArgument is MethodExpression expression))                      throw new InvalidQueryException("Invalid ORDER BY 'spatial.distance()' call' expected expression' got " + lastArgument' QueryText'                          parameters);                    var methodName = expression.Name;                  var methodType = QueryMethod.GetMethodType(methodName);                    switch (methodType)                  {                      case MethodType.Spatial_Circle:                          QueryValidator.ValidateCircle(expression.Arguments' QueryText' parameters);                          break;                      case MethodType.Spatial_Wkt:                          QueryValidator.ValidateWkt(expression.Arguments' QueryText' parameters);                          break;                      case MethodType.Spatial_Point:                          QueryValidator.ValidatePoint(expression.Arguments' QueryText' parameters);                          break;                      default:                          QueryMethod.ThrowMethodNotSupported(methodType' QueryText' parameters);                          break;                  }                    var arguments = new OrderByField.Argument[expression.Arguments.Count];                  for (var i = 0; i < expression.Arguments.Count; i++)                  {                      var argument = (ValueExpression)expression.Arguments[i];                      arguments[i] = new OrderByField.Argument(argument.Token' argument.Value);                  }                    return new OrderByField(                      fieldName'                      OrderByFieldType.Distance'                      asc'                      methodType'                      arguments);              }
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,CreateSuggest,The following statement contains a magic number: if (expression.Arguments.Count < 2 || expression.Arguments.Count > 3)                  ThrowSuggestMethodMustHaveTwoOrThreeArguments(expression.Arguments.Count' parameters);
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,CreateSuggest,The following statement contains a magic number: if (expression.Arguments.Count < 2 || expression.Arguments.Count > 3)                  ThrowSuggestMethodMustHaveTwoOrThreeArguments(expression.Arguments.Count' parameters);
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,CreateSuggest,The following statement contains a magic number: if (expression.Arguments[1] is ValueExpression termExpression)                  result.AddTerm(termExpression.Token' termExpression.Value);              else                  ThrowSuggestMethodArgumentMustBeValue(2' expression.Arguments[1]' parameters);
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,CreateSuggest,The following statement contains a magic number: if (expression.Arguments.Count == 3)              {                  if (expression.Arguments[2] is ValueExpression optionsExpression)                      result.AddOptions(optionsExpression.Token' optionsExpression.Value);                  else                      ThrowSuggestMethodArgumentMustBeValue(3' expression.Arguments[1]' parameters);              }
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,CreateSuggest,The following statement contains a magic number: if (expression.Arguments.Count == 3)              {                  if (expression.Arguments[2] is ValueExpression optionsExpression)                      result.AddOptions(optionsExpression.Token' optionsExpression.Value);                  else                      ThrowSuggestMethodArgumentMustBeValue(3' expression.Arguments[1]' parameters);              }
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,CreateSuggest,The following statement contains a magic number: if (expression.Arguments.Count == 3)              {                  if (expression.Arguments[2] is ValueExpression optionsExpression)                      result.AddOptions(optionsExpression.Token' optionsExpression.Value);                  else                      ThrowSuggestMethodArgumentMustBeValue(3' expression.Arguments[1]' parameters);              }
Magic Number,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,GetIndexFieldName,The following statement contains a magic number: if (RootAliasPaths.TryGetValue(fe.Compound[0]' out _))              {                  if (fe.Compound.Count == 2)                  {                      return new QueryFieldName(fe.Compound[1]' fe.IsQuoted);                  }                  return new QueryFieldName(fe.FieldValueWithoutAlias' fe.IsQuoted);              }
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The following statement contains a magic number: switch (methodType)                  {                      case MethodType.Id:                            if (arguments.Count == 0)                          {                              if (_fromAlias == null)                              {                                  _metadata.AddWhereField(QueryFieldName.DocumentId' parameters);                                  break;                              }                                                            throw new InvalidQueryException($"Method {methodName}() was called' but as the query is using an alias ({_fromAlias})' must also be provided to this method."' QueryText' parameters);                          }                                                    if (arguments.Count > 2)                              throw new InvalidQueryException($"Method {methodName}() expects not more than two arguments to be provided"' QueryText' parameters);                            var idExpression = arguments[arguments.Count - 1];                          if (idExpression == null)                              throw new InvalidQueryException($"Method {methodName}() expects expression ' got {arguments[arguments.Count - 1]}"' QueryText' parameters);                            if (arguments.Count == 2)                          {                              if (_fromAlias == null)                                  throw new InvalidQueryException("Alias was passed to method 'id()' but query does not specify document alias."' QueryText' parameters);                                if (!(arguments[0] is FieldExpression idAliasToken))                                  throw new InvalidQueryException($"Method 'id()' expects field token as a first argument' got {arguments[0]} type"' QueryText' parameters);                                if (idAliasToken.Compound.Count != 1 || idAliasToken.Compound[0].Equals(_fromAlias) == false)                                  throw new InvalidQueryException(                                      $"Alias passed to method 'id({idAliasToken.Compound[0]})' does not match specified document alias ('{_fromAlias}')."' QueryText'                                      parameters);                          }                            _metadata.AddWhereField(QueryFieldName.DocumentId' parameters);                          break;                      case MethodType.StartsWith:                      case MethodType.EndsWith:                      case MethodType.Search:                      case MethodType.Regex:                      case MethodType.Lucene:                          fieldName = _metadata.ExtractFieldNameFromFirstArgument(arguments' methodName' parameters);                            if (arguments.Count == 1)                              throw new InvalidQueryException($"Method {methodName}() expects second argument to be provided"' QueryText' parameters);                            if (!(arguments[1] is ValueExpression valueToken))                              throw new InvalidQueryException($"Method {methodName}() expects value token as second argument' got {arguments[1]} type"' QueryText'                                  parameters);                            if (methodType == MethodType.Search || methodType == MethodType.Lucene)                              _metadata.AddWhereField(fieldName' parameters' search: true);                          else                              _metadata.AddWhereField(fieldName' parameters' exact: _insideExact > 0);                          break;                      case MethodType.Exists:                          fieldName = _metadata.ExtractFieldNameFromFirstArgument(arguments' methodName' parameters);                          _metadata.AddExistField(fieldName' parameters);                          break;                      case MethodType.Boost:                            var firstArg = arguments.Count == 0 ? null : arguments[0];                            if (firstArg == null)                              throw new InvalidQueryException($"Method {methodName}() expects expression ' got {arguments[0]}"' QueryText' parameters);                            Visit(firstArg' parameters);                          break;                      case MethodType.Intersect:                          _metadata.IsIntersect = true;                            for (var i = 0; i < arguments.Count; i++)                          {                              var expressionArgument = arguments[i];                              Visit(expressionArgument' parameters);                          }                          return;                      case MethodType.Exact:                          if (arguments.Count != 1)                              throw new InvalidQueryException($"Method {methodName}() expects one argument' got " + arguments.Count' QueryText' parameters);                            using (Exact())                          {                              var expressionArgument = arguments[0];                              Visit(expressionArgument' parameters);                          }                          return;                      case MethodType.Count:                          // nothing needs to be done here                          return;                      case MethodType.Sum:                          HandleSum(arguments' parameters);                          return;                      case MethodType.Spatial_Within:                      case MethodType.Spatial_Contains:                      case MethodType.Spatial_Disjoint:                      case MethodType.Spatial_Intersects:                          HandleSpatial(methodName' arguments' parameters);                          return;                      case MethodType.MoreLikeThis:                          HandleMoreLikeThis(methodName' arguments' parameters);                          return;                      default:                          QueryMethod.ThrowMethodNotSupported(methodType' QueryText' parameters);                          break;                  }
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitMethodTokens,The following statement contains a magic number: switch (methodType)                  {                      case MethodType.Id:                            if (arguments.Count == 0)                          {                              if (_fromAlias == null)                              {                                  _metadata.AddWhereField(QueryFieldName.DocumentId' parameters);                                  break;                              }                                                            throw new InvalidQueryException($"Method {methodName}() was called' but as the query is using an alias ({_fromAlias})' must also be provided to this method."' QueryText' parameters);                          }                                                    if (arguments.Count > 2)                              throw new InvalidQueryException($"Method {methodName}() expects not more than two arguments to be provided"' QueryText' parameters);                            var idExpression = arguments[arguments.Count - 1];                          if (idExpression == null)                              throw new InvalidQueryException($"Method {methodName}() expects expression ' got {arguments[arguments.Count - 1]}"' QueryText' parameters);                            if (arguments.Count == 2)                          {                              if (_fromAlias == null)                                  throw new InvalidQueryException("Alias was passed to method 'id()' but query does not specify document alias."' QueryText' parameters);                                if (!(arguments[0] is FieldExpression idAliasToken))                                  throw new InvalidQueryException($"Method 'id()' expects field token as a first argument' got {arguments[0]} type"' QueryText' parameters);                                if (idAliasToken.Compound.Count != 1 || idAliasToken.Compound[0].Equals(_fromAlias) == false)                                  throw new InvalidQueryException(                                      $"Alias passed to method 'id({idAliasToken.Compound[0]})' does not match specified document alias ('{_fromAlias}')."' QueryText'                                      parameters);                          }                            _metadata.AddWhereField(QueryFieldName.DocumentId' parameters);                          break;                      case MethodType.StartsWith:                      case MethodType.EndsWith:                      case MethodType.Search:                      case MethodType.Regex:                      case MethodType.Lucene:                          fieldName = _metadata.ExtractFieldNameFromFirstArgument(arguments' methodName' parameters);                            if (arguments.Count == 1)                              throw new InvalidQueryException($"Method {methodName}() expects second argument to be provided"' QueryText' parameters);                            if (!(arguments[1] is ValueExpression valueToken))                              throw new InvalidQueryException($"Method {methodName}() expects value token as second argument' got {arguments[1]} type"' QueryText'                                  parameters);                            if (methodType == MethodType.Search || methodType == MethodType.Lucene)                              _metadata.AddWhereField(fieldName' parameters' search: true);                          else                              _metadata.AddWhereField(fieldName' parameters' exact: _insideExact > 0);                          break;                      case MethodType.Exists:                          fieldName = _metadata.ExtractFieldNameFromFirstArgument(arguments' methodName' parameters);                          _metadata.AddExistField(fieldName' parameters);                          break;                      case MethodType.Boost:                            var firstArg = arguments.Count == 0 ? null : arguments[0];                            if (firstArg == null)                              throw new InvalidQueryException($"Method {methodName}() expects expression ' got {arguments[0]}"' QueryText' parameters);                            Visit(firstArg' parameters);                          break;                      case MethodType.Intersect:                          _metadata.IsIntersect = true;                            for (var i = 0; i < arguments.Count; i++)                          {                              var expressionArgument = arguments[i];                              Visit(expressionArgument' parameters);                          }                          return;                      case MethodType.Exact:                          if (arguments.Count != 1)                              throw new InvalidQueryException($"Method {methodName}() expects one argument' got " + arguments.Count' QueryText' parameters);                            using (Exact())                          {                              var expressionArgument = arguments[0];                              Visit(expressionArgument' parameters);                          }                          return;                      case MethodType.Count:                          // nothing needs to be done here                          return;                      case MethodType.Sum:                          HandleSum(arguments' parameters);                          return;                      case MethodType.Spatial_Within:                      case MethodType.Spatial_Contains:                      case MethodType.Spatial_Disjoint:                      case MethodType.Spatial_Intersects:                          HandleSpatial(methodName' arguments' parameters);                          return;                      case MethodType.MoreLikeThis:                          HandleMoreLikeThis(methodName' arguments' parameters);                          return;                      default:                          QueryMethod.ThrowMethodNotSupported(methodType' QueryText' parameters);                          break;                  }
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleMoreLikeThis,The following statement contains a magic number: if (arguments.Count == 0 || arguments.Count > 2)                      throw new InvalidQueryException($"Method {methodName}() expects to have one or two arguments"' QueryText' parameters);
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleMoreLikeThis,The following statement contains a magic number: if (arguments.Count != 2)                      return;
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The following statement contains a magic number: if (_metadata.IsDynamic == false)                      fieldName = _metadata.ExtractFieldNameFromFirstArgument(arguments' methodName' parameters);                  else                  {                      if (!(arguments[0] is MethodExpression spatialExpression))                          throw new InvalidQueryException($"Method {methodName}() expects first argument to be a method expression"' QueryText' parameters);                        var spatialType = QueryMethod.GetMethodType(spatialExpression.Name);                      switch (spatialType)                      {                          case MethodType.Spatial_Wkt:                              if (spatialExpression.Arguments.Count != 1)                                  throw new InvalidQueryException($"Method {methodName}() expects first argument to be a wkt() method with 1 argument"' QueryText' parameters);                                var wkt = ExtractFieldNameFromArgument(spatialExpression.Arguments[0]' "wkt"' parameters' QueryText).Value;                                fieldOptions = new AutoSpatialOptions(AutoSpatialOptions.AutoSpatialMethodType.Wkt' new List<string>                              {                                  wkt                              });                              break;                          case MethodType.Spatial_Point:                              if (spatialExpression.Arguments.Count != 2)                                  throw new InvalidQueryException($"Method {methodName}() expects first argument to be a point() method with 2 arguments"' QueryText' parameters);                                var latitude = ExtractFieldNameFromArgument(spatialExpression.Arguments[0]' "point"' parameters' QueryText).Value;                              var longitude = ExtractFieldNameFromArgument(spatialExpression.Arguments[1]' "point"' parameters' QueryText).Value;                                fieldOptions = new AutoSpatialOptions(AutoSpatialOptions.AutoSpatialMethodType.Point' new List<string>                              {                                  latitude'                                  longitude                              });                              break;                          default:                              throw new InvalidQueryException($"Method {methodName}() expects first argument to be a point() or wkt() method"' QueryText' parameters);                      }                        fieldName = new QueryFieldName(spatialExpression.GetText()' false);                  }
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The following statement contains a magic number: if (arguments.Count < 2 || arguments.Count > 3)                      throw new InvalidQueryException($"Method {methodName}() expects 2-3 arguments to be provided"' QueryText' parameters);
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The following statement contains a magic number: if (arguments.Count < 2 || arguments.Count > 3)                      throw new InvalidQueryException($"Method {methodName}() expects 2-3 arguments to be provided"' QueryText' parameters);
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The following statement contains a magic number: if (arguments.Count == 3)                  {                      var valueToken = arguments[2] as ValueExpression;                        if (valueToken == null)                          throw new InvalidQueryException($"Method {methodName}() expects value token as third argument' got {arguments[1]} type"' QueryText' parameters);                  }
Magic Number,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,HandleSpatial,The following statement contains a magic number: if (arguments.Count == 3)                  {                      var valueToken = arguments[2] as ValueExpression;                        if (valueToken == null)                          throw new InvalidQueryException($"Method {methodName}() expects value token as third argument' got {arguments[1]} type"' QueryText' parameters);                  }
Magic Number,Raven.Server.Documents.Queries,QueryMetadataCache,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadataCache.cs,MaybeAddToCache,The following statement contains a magic number: var loc = metadata.GetHashCode() % 2 == 0 ? bestLocation : nextProbe;
Magic Number,Raven.Server.Documents.Queries,QueryValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryValidator.cs,ValidateCircle,The following statement contains a magic number: if (arguments.Count < 3 || arguments.Count > 4)                  throw new InvalidQueryException("Method 'circle()' expects three or four arguments to be provided"' queryText' parameters);
Magic Number,Raven.Server.Documents.Queries,QueryValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryValidator.cs,ValidateCircle,The following statement contains a magic number: if (arguments.Count < 3 || arguments.Count > 4)                  throw new InvalidQueryException("Method 'circle()' expects three or four arguments to be provided"' queryText' parameters);
Magic Number,Raven.Server.Documents.Queries,QueryValidator,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryValidator.cs,ValidatePoint,The following statement contains a magic number: if (arguments.Count != 2)                  throw new InvalidQueryException("Method 'point()' expects two arguments to be provided"' queryText' parameters);
Magic Number,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,VisitMethod,The following statement contains a magic number: if (expr.Name.Value.Equals("startswith"' StringComparison.OrdinalIgnoreCase))              {                  if (expr.Arguments.Count != 2)                  {                      throw new InvalidOperationException("startsWith(text' prefix) must be called with two string paremters");                  }                  _sb.Append("startsWith(");                  VisitExpression(expr.Arguments[0]);                  _sb.Append("'");                  VisitExpression(expr.Arguments[1]);                  _sb.Append(")");                  return;              }
Magic Number,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,VisitMethod,The following statement contains a magic number: if (expr.Name.Value.Equals("endswith"' StringComparison.OrdinalIgnoreCase))              {                  if (expr.Arguments.Count != 2)                  {                      throw new InvalidOperationException("endsWith(text' suffix) must be called with two string paremters");                  }                  _sb.Append("endsWith(");                  VisitExpression(expr.Arguments[0]);                  _sb.Append("'");                  VisitExpression(expr.Arguments[1]);                  _sb.Append(")");                  return;              }
Magic Number,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,VisitMethod,The following statement contains a magic number: if (expr.Name.Value.Equals("regex"' StringComparison.OrdinalIgnoreCase))              {                  if (expr.Arguments.Count != 2)                  {                      throw new InvalidOperationException("regex(text' regex) must be called with two string paremters");                  }                  _sb.Append("regex(");                  VisitExpression(expr.Arguments[0]);                  _sb.Append("'");                  VisitExpression(expr.Arguments[1]);                  _sb.Append(")");                  return;              }
Magic Number,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,VisitMethod,The following statement contains a magic number: if (expr.Name.Value.Equals("intersect"' StringComparison.OrdinalIgnoreCase))              {                  if (expr.Arguments.Count < 2)                  {                      throw new InvalidOperationException("intersect(logical statement' logical statement' ..) must be called with two or more logical statements parameters");                  }                  _sb.Append("(");                  for (var index = 0; index < expr.Arguments.Count; index++)                  {                      var argument = expr.Arguments[index];                                            VisitExpression(argument);                                            if (index < expr.Arguments.Count - 1)                          _sb.Append(" && ");                  }                                    _sb.Append(")");                  return;                  }
Magic Number,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,FillCountOfResultsAndIndexEtag,The following statement contains a magic number: var buffer = stackalloc long[3];
Magic Number,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,FillCountOfResultsAndIndexEtag,The following statement contains a magic number: if (collection == Constants.Documents.Collections.AllDocumentsCollection ||                   query.HasIncludeOrLoad)              {                  var numberOfDocuments = Database.DocumentsStorage.GetNumberOfDocuments(context);                  buffer[0] = DocumentsStorage.ReadLastDocumentEtag(context.Transaction.InnerTransaction);                  buffer[1] = DocumentsStorage.ReadLastTombstoneEtag(context.Transaction.InnerTransaction);                  buffer[2] = numberOfDocuments;                  resultToFill.TotalResults = (int)numberOfDocuments;              }              else              {                  var collectionStats = Database.DocumentsStorage.GetCollection(collection' context);                    buffer[0] = Database.DocumentsStorage.GetLastDocumentEtag(context' collection);                  buffer[1] = Database.DocumentsStorage.GetLastTombstoneEtag(context' collection);                  buffer[2] = collectionStats.Count;              }
Magic Number,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,FillCountOfResultsAndIndexEtag,The following statement contains a magic number: if (collection == Constants.Documents.Collections.AllDocumentsCollection ||                   query.HasIncludeOrLoad)              {                  var numberOfDocuments = Database.DocumentsStorage.GetNumberOfDocuments(context);                  buffer[0] = DocumentsStorage.ReadLastDocumentEtag(context.Transaction.InnerTransaction);                  buffer[1] = DocumentsStorage.ReadLastTombstoneEtag(context.Transaction.InnerTransaction);                  buffer[2] = numberOfDocuments;                  resultToFill.TotalResults = (int)numberOfDocuments;              }              else              {                  var collectionStats = Database.DocumentsStorage.GetCollection(collection' context);                    buffer[0] = Database.DocumentsStorage.GetLastDocumentEtag(context' collection);                  buffer[1] = Database.DocumentsStorage.GetLastTombstoneEtag(context' collection);                  buffer[2] = collectionStats.Count;              }
Magic Number,Raven.Server.Documents.Queries.Dynamic,CollectionQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\CollectionQueryRunner.cs,FillCountOfResultsAndIndexEtag,The following statement contains a magic number: resultToFill.ResultEtag = (long)Hashing.XXHash64.Calculate((byte*)buffer' sizeof(long) * 3);
Magic Number,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,ExecuteStreamQuery,The following statement contains a magic number: var index = await MatchIndex(query' true' token.Token' customStalenessWaitTimeout: TimeSpan.FromSeconds(60));
Magic Number,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,MatchIndex,The following statement contains a magic number: if (TryMatchExistingIndexToQuery(map' out index) == false)              {                  if (createAutoIndexIfNoMatchIsFound == false)                      throw new IndexDoesNotExistException("Could not find index for a given query.");                    var definition = map.CreateAutoIndexDefinition();                    index = await _indexStore.CreateIndex(definition);                    if (query.WaitForNonStaleResultsTimeout.HasValue == false)                  {                      if (customStalenessWaitTimeout.HasValue)                          query.WaitForNonStaleResultsTimeout = customStalenessWaitTimeout.Value;                      else                          query.WaitForNonStaleResultsTimeout = TimeSpan.FromSeconds(15); // allow new auto indexes to have some results                  }                    var t = CleanupSupercededAutoIndexes(index' map' token)                      .ContinueWith(task =>                      {                          if (task.Exception != null)                          {                              if (token.IsCancellationRequested)                                  return;                                if (_indexStore.Logger.IsInfoEnabled)                              {                                  _indexStore.Logger.Info("Failed to delete superceded indexes for index " + index.Name);                              }                          }                      });                    if (query.WaitForNonStaleResults &&                       Database.Configuration.Indexing.TimeToWaitBeforeDeletingAutoIndexMarkedAsIdle.AsTimeSpan ==                      TimeSpan.Zero)                      await t; // this is used in testing' mainly              }
Magic Number,Raven.Server.Documents.Queries.MoreLikeThis,MoreLikeThis,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\MoreLikeThis.cs,SetMaxDocFreqPct,The following statement contains a magic number: _maxDocfreq = maxPercentage * _ir.NumDocs() / 100;
Magic Number,Raven.Server.Documents.Queries.MoreLikeThis,MoreLikeThis,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\MoreLikeThis.cs,CreateQuery,The following statement contains a magic number: while ((cur = q.Pop()) != null)              {                  var ar = (object[])cur;                  var tq = new TermQuery(new Term((string)ar[1]' (string)ar[0]));                    if (_boost)                  {                      if (qterms == 0)                      {                          bestScore = (float)ar[2];                      }                      var myScore = (float)ar[2];                        tq.Boost = _boostFactor * myScore / bestScore;                  }                    try                  {                      query.Add(tq' Occur.SHOULD);                  }                  catch (BooleanQuery.TooManyClauses)                  {                      break;                  }                    qterms++;                  if (_maxQueryTerms > 0 && qterms >= _maxQueryTerms)                  {                      break;                  }              }
Magic Number,Raven.Server.Documents.Queries.MoreLikeThis,MoreLikeThis,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\MoreLikeThis.cs,CreateQuery,The following statement contains a magic number: while ((cur = q.Pop()) != null)              {                  var ar = (object[])cur;                  var tq = new TermQuery(new Term((string)ar[1]' (string)ar[0]));                    if (_boost)                  {                      if (qterms == 0)                      {                          bestScore = (float)ar[2];                      }                      var myScore = (float)ar[2];                        tq.Boost = _boostFactor * myScore / bestScore;                  }                    try                  {                      query.Add(tq' Occur.SHOULD);                  }                  catch (BooleanQuery.TooManyClauses)                  {                      break;                  }                    qterms++;                  if (_maxQueryTerms > 0 && qterms >= _maxQueryTerms)                  {                      break;                  }              }
Magic Number,Raven.Server.Documents.Queries.MoreLikeThis,FreqQ,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\MoreLikeThis.cs,LessThan,The following statement contains a magic number: var fa = (float)aa[2];
Magic Number,Raven.Server.Documents.Queries.MoreLikeThis,FreqQ,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\MoreLikeThis.cs,LessThan,The following statement contains a magic number: var fb = (float)bb[2];
Magic Number,Raven.Server.Documents.Queries.Parser,QueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryParser.cs,Expression,The following statement contains a magic number: if (++_depth > 128)                  ThrowQueryException("Query is too complex' over 128 nested clauses are not allowed");
Magic Number,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,SkipWhitespace,The following statement contains a magic number: for (; _pos < _q.Length; _pos++' Column++)                  switch (_q[_pos])                  {                      case ' ':                      case '\t':                      case '\r':                          continue;                      case '\n':                          Line++;                          Column = 1;                          break;                      case '/': // comment to end of line / input' /* */ for multi line                      {                          if (_pos + 1 >= _q.Length || _q[_pos + 1] != '/' && _q[_pos + 1] != '*')                              return true;                          _pos += 2;                          if (_q[_pos - 1] == '/')                          {                              for (; _pos < _q.Length; _pos++)                                  if (_q[_pos] == '\n')                                      goto case '\n';                              return false; // end of input                          }                          // multi line comment                          for (; _pos < _q.Length; _pos++)                          {                              if (_q[_pos] == '\n')                                  Line++;                              if (_q[_pos] == '*' && _pos + 1 <= _q.Length && _q[_pos + 1] == '/')                              {                                  _pos++;                                  break;                              }                          }                          break;// now search for more whitespace / done / eof                      }                      default:                          return true;                  }
Magic Number,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,String,The following statement contains a magic number: for (; i < _q.Length; i++)              {                  if (_q[i] == '\\')                      hasEscape = true;                  else if (_q[i] != quoteChar)                      continue;                    if (i + 1 < _q.Length && _q[i + 1] == quoteChar)                  {                      i++; // escape char                      hasEscape = true;                      continue;                  }                    if (_q[i] != quoteChar)                  {                      continue;                  }                  Column += i + 1 - _pos;                    _pos = i + 1;                  TokenLength = _pos - TokenStart;                    str = hasEscape ?                       GetEscapedString(quoteChar) :                      new StringSegment(Input' TokenStart + 1' TokenLength - 2);                    return true;              }
Magic Number,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,GetEscapedString,The following statement contains a magic number: var sb = new StringBuilder(Input' TokenStart + 1' TokenLength - 2' TokenLength - 2);
Magic Number,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,GetEscapedString,The following statement contains a magic number: var sb = new StringBuilder(Input' TokenStart + 1' TokenLength - 2' TokenLength - 2);
Magic Number,Lucene.Net.Search,RegexQuery,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Regex\RegexQuery.cs,GetHashCode,The following statement contains a magic number: return 29 * base.GetHashCode() + Term.GetHashCode();
Magic Number,Raven.Server.Documents.Queries.Results,QueryKey,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Results\QueryResultRetrieverBase.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      int hashCode = 0;                      foreach (var function in _functions)                      {                          hashCode = (hashCode * 397) ^ (function.Value.GetHashCode());                      }                      return hashCode;                  }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorEntry,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorEntry.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((int)Hashing.Marvin32.Calculate(DbId) * 397) ^ Etag.GetHashCode();              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorExtensions.cs,AsChangeVectorDbId,The following statement contains a magic number: var dbIdAsString = new string(' '' 22);
Magic Number,Raven.Server.Documents.Replication,ChangeVectorExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorExtensions.cs,AsChangeVectorDbId,The following statement contains a magic number: fixed (char* dbIdPtr = dbIdAsString)              {                  var res = Base64.ConvertToBase64ArrayUnpadded(dbIdPtr' (byte*)&DbId' 0' 16);                  Debug.Assert(res == 22);              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorExtensions.cs,AsChangeVectorDbId,The following statement contains a magic number: fixed (char* dbIdPtr = dbIdAsString)              {                  var res = Base64.ConvertToBase64ArrayUnpadded(dbIdPtr' (byte*)&DbId' 0' 16);                  Debug.Assert(res == 22);              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorExtensions.cs,ToBase26,The following statement contains a magic number: do              {                  var reminder = tag % 26;                  sb.Append((char)('A' + reminder));                  tag /= 26;              } while (tag != 0);
Magic Number,Raven.Server.Documents.Replication,ChangeVectorExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorExtensions.cs,ToBase26,The following statement contains a magic number: do              {                  var reminder = tag % 26;                  sb.Append((char)('A' + reminder));                  tag /= 26;              } while (tag != 0);
Magic Number,Raven.Server.Documents.Replication,ChangeVectorExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorExtensions.cs,FromBase26,The following statement contains a magic number: for (int i = 0; i < tag.Length; i++)              {                  val *= 26;                  val += (tag[i] - 'A');              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,GetEtagByNode,The following statement contains a magic number: while (nodeStart + nodeTag.Length < changeVector.Length )               {                  var endNode = changeVector.IndexOf(':'' nodeStart);                  if (string.Compare(nodeTag' 0' changeVector' nodeStart' endNode - nodeStart) == 0)                  {                      long etagVal = 0;                      var endEtag = changeVector.IndexOf('-'' endNode + 1);                      for (int i = endNode+1; i < endEtag; i++)                      {                          etagVal *= 10;                          etagVal += changeVector[i] - '0';                      }                      return etagVal;                  }                  nodeStart = changeVector.IndexOf(' '' endNode);                  if (nodeStart == -1)                      break;                  nodeStart++;              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseNodeTag,The following statement contains a magic number: for (int i = end - 1; i >= start; i--)              {                  AssertValidNodeTagChar(changeVector[i]);                  tag *= 26;                  tag += changeVector[i] - 'A';              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseEtag,The following statement contains a magic number: for (int i = start + 1; i <= end; i++)              {                  etag *= 10;                  etag += changeVector[i] - '0';              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseDbId,The following statement contains a magic number: char* buffer = stackalloc char[24];
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseDbId,The following statement contains a magic number: fixed (char* str = changeVector)              {                  Buffer.MemoryCopy(str + start' buffer' 24 * sizeof(char)' 22 * sizeof(char));                  buffer[22] = '=';                  buffer[23] = '=';                  Base64.FromBase64_Decode(buffer' 24' (byte*)&id' 16);              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseDbId,The following statement contains a magic number: fixed (char* str = changeVector)              {                  Buffer.MemoryCopy(str + start' buffer' 24 * sizeof(char)' 22 * sizeof(char));                  buffer[22] = '=';                  buffer[23] = '=';                  Base64.FromBase64_Decode(buffer' 24' (byte*)&id' 16);              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseDbId,The following statement contains a magic number: fixed (char* str = changeVector)              {                  Buffer.MemoryCopy(str + start' buffer' 24 * sizeof(char)' 22 * sizeof(char));                  buffer[22] = '=';                  buffer[23] = '=';                  Base64.FromBase64_Decode(buffer' 24' (byte*)&id' 16);              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseDbId,The following statement contains a magic number: fixed (char* str = changeVector)              {                  Buffer.MemoryCopy(str + start' buffer' 24 * sizeof(char)' 22 * sizeof(char));                  buffer[22] = '=';                  buffer[23] = '=';                  Base64.FromBase64_Decode(buffer' 24' (byte*)&id' 16);              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseDbId,The following statement contains a magic number: fixed (char* str = changeVector)              {                  Buffer.MemoryCopy(str + start' buffer' 24 * sizeof(char)' 22 * sizeof(char));                  buffer[22] = '=';                  buffer[23] = '=';                  Base64.FromBase64_Decode(buffer' 24' (byte*)&id' 16);              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ParseDbId,The following statement contains a magic number: fixed (char* str = changeVector)              {                  Buffer.MemoryCopy(str + start' buffer' 24 * sizeof(char)' 22 * sizeof(char));                  buffer[22] = '=';                  buffer[23] = '=';                  Base64.FromBase64_Decode(buffer' 24' (byte*)&id' 16);              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ToChangeVector,The following statement contains a magic number: while (current < changeVector.Length)              {                  switch (state)                  {                      case State.Tag:                          if (changeVector[current] == ':')                          {                              tag = ParseNodeTag(changeVector' start' current - 1);                              state = State.Etag;                              start = current + 1;                          }                          current++;                          break;                      case State.Etag:                          if (changeVector[current] == '-')                          {                              var etag = ParseEtag(changeVector' start' current - 1);                              if (current + 23 > changeVector.Length)                                  ThrowInvalidEndOfString("DbId"' changeVector);                              list.Add(new ChangeVectorEntry                              {                                  NodeTag = tag'                                  Etag = etag'                                  DbId = changeVector.Substring(current + 1' 22)                              });                              start = current + 23;                              current = start;                              state = State.Whitespace;                          }                          current++;                          break;                      case State.Whitespace:                          if (char.IsWhiteSpace(changeVector[current]) ||                              changeVector[current] == '=' || // TODO: Remove me                              changeVector[current] == ''')                          {                              start++;                              current++;                          }                          else                          {                              start = current;                              current++;                              state = State.Tag;                          }                          break;                        default:                          ThrowInvalidState(state' changeVector);                          break;                  }              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ToChangeVector,The following statement contains a magic number: while (current < changeVector.Length)              {                  switch (state)                  {                      case State.Tag:                          if (changeVector[current] == ':')                          {                              tag = ParseNodeTag(changeVector' start' current - 1);                              state = State.Etag;                              start = current + 1;                          }                          current++;                          break;                      case State.Etag:                          if (changeVector[current] == '-')                          {                              var etag = ParseEtag(changeVector' start' current - 1);                              if (current + 23 > changeVector.Length)                                  ThrowInvalidEndOfString("DbId"' changeVector);                              list.Add(new ChangeVectorEntry                              {                                  NodeTag = tag'                                  Etag = etag'                                  DbId = changeVector.Substring(current + 1' 22)                              });                              start = current + 23;                              current = start;                              state = State.Whitespace;                          }                          current++;                          break;                      case State.Whitespace:                          if (char.IsWhiteSpace(changeVector[current]) ||                              changeVector[current] == '=' || // TODO: Remove me                              changeVector[current] == ''')                          {                              start++;                              current++;                          }                          else                          {                              start = current;                              current++;                              state = State.Tag;                          }                          break;                        default:                          ThrowInvalidState(state' changeVector);                          break;                  }              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,ToChangeVector,The following statement contains a magic number: while (current < changeVector.Length)              {                  switch (state)                  {                      case State.Tag:                          if (changeVector[current] == ':')                          {                              tag = ParseNodeTag(changeVector' start' current - 1);                              state = State.Etag;                              start = current + 1;                          }                          current++;                          break;                      case State.Etag:                          if (changeVector[current] == '-')                          {                              var etag = ParseEtag(changeVector' start' current - 1);                              if (current + 23 > changeVector.Length)                                  ThrowInvalidEndOfString("DbId"' changeVector);                              list.Add(new ChangeVectorEntry                              {                                  NodeTag = tag'                                  Etag = etag'                                  DbId = changeVector.Substring(current + 1' 22)                              });                              start = current + 23;                              current = start;                              state = State.Whitespace;                          }                          current++;                          break;                      case State.Whitespace:                          if (char.IsWhiteSpace(changeVector[current]) ||                              changeVector[current] == '=' || // TODO: Remove me                              changeVector[current] == ''')                          {                              start++;                              current++;                          }                          else                          {                              start = current;                              current++;                              state = State.Tag;                          }                          break;                        default:                          ThrowInvalidState(state' changeVector);                          break;                  }              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,MergeChangeVector,The following statement contains a magic number: while (current < changeVector.Length)              {                  switch (state)                  {                      case State.Tag:                          if (changeVector[current] == ':')                          {                              tag = ParseNodeTag(changeVector' start' current - 1);                              state = State.Etag;                              start = current + 1;                          }                          current++;                          break;                      case State.Etag:                          if (changeVector[current] == '-')                          {                              var etag = ParseEtag(changeVector' start' current - 1);                              if (current + 23 > changeVector.Length)                                  ThrowInvalidEndOfString("DbId"' changeVector);                              bool found = false;                              var dbId = changeVector.Substring(current + 1' 22);                              for (int i = 0; i < entries.Count; i++)                              {                                  if (entries[i].DbId == dbId)                                  {                                      if (entries[i].Etag < etag)                                      {                                          entries[i] = new ChangeVectorEntry                                          {                                              NodeTag = tag'                                              Etag = etag'                                              DbId = dbId                                          };                                      }                                      found = true;                                      break;                                  }                              }                              if (found == false)                              {                                  entries.Add(new ChangeVectorEntry                                  {                                      NodeTag = tag'                                      Etag = etag'                                      DbId = dbId                                  });                              }                                                          start = current + 23;                              current = start;                              state = State.Whitespace;                          }                          current++;                          break;                      case State.Whitespace:                          if (char.IsWhiteSpace(changeVector[current]) ||                              changeVector[current] == ''')                          {                              start++;                              current++;                          }                          else                          {                              start = current;                              current++;                              state = State.Tag;                          }                          break;                        default:                          ThrowInvalidState(state' changeVector);                          break;                  }              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,MergeChangeVector,The following statement contains a magic number: while (current < changeVector.Length)              {                  switch (state)                  {                      case State.Tag:                          if (changeVector[current] == ':')                          {                              tag = ParseNodeTag(changeVector' start' current - 1);                              state = State.Etag;                              start = current + 1;                          }                          current++;                          break;                      case State.Etag:                          if (changeVector[current] == '-')                          {                              var etag = ParseEtag(changeVector' start' current - 1);                              if (current + 23 > changeVector.Length)                                  ThrowInvalidEndOfString("DbId"' changeVector);                              bool found = false;                              var dbId = changeVector.Substring(current + 1' 22);                              for (int i = 0; i < entries.Count; i++)                              {                                  if (entries[i].DbId == dbId)                                  {                                      if (entries[i].Etag < etag)                                      {                                          entries[i] = new ChangeVectorEntry                                          {                                              NodeTag = tag'                                              Etag = etag'                                              DbId = dbId                                          };                                      }                                      found = true;                                      break;                                  }                              }                              if (found == false)                              {                                  entries.Add(new ChangeVectorEntry                                  {                                      NodeTag = tag'                                      Etag = etag'                                      DbId = dbId                                  });                              }                                                          start = current + 23;                              current = start;                              state = State.Whitespace;                          }                          current++;                          break;                      case State.Whitespace:                          if (char.IsWhiteSpace(changeVector[current]) ||                              changeVector[current] == ''')                          {                              start++;                              current++;                          }                          else                          {                              start = current;                              current++;                              state = State.Tag;                          }                          break;                        default:                          ThrowInvalidState(state' changeVector);                          break;                  }              }
Magic Number,Raven.Server.Documents.Replication,ChangeVectorParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ChangeVectorParser.cs,MergeChangeVector,The following statement contains a magic number: while (current < changeVector.Length)              {                  switch (state)                  {                      case State.Tag:                          if (changeVector[current] == ':')                          {                              tag = ParseNodeTag(changeVector' start' current - 1);                              state = State.Etag;                              start = current + 1;                          }                          current++;                          break;                      case State.Etag:                          if (changeVector[current] == '-')                          {                              var etag = ParseEtag(changeVector' start' current - 1);                              if (current + 23 > changeVector.Length)                                  ThrowInvalidEndOfString("DbId"' changeVector);                              bool found = false;                              var dbId = changeVector.Substring(current + 1' 22);                              for (int i = 0; i < entries.Count; i++)                              {                                  if (entries[i].DbId == dbId)                                  {                                      if (entries[i].Etag < etag)                                      {                                          entries[i] = new ChangeVectorEntry                                          {                                              NodeTag = tag'                                              Etag = etag'                                              DbId = dbId                                          };                                      }                                      found = true;                                      break;                                  }                              }                              if (found == false)                              {                                  entries.Add(new ChangeVectorEntry                                  {                                      NodeTag = tag'                                      Etag = etag'                                      DbId = dbId                                  });                              }                                                          start = current + 23;                              current = start;                              state = State.Whitespace;                          }                          current++;                          break;                      case State.Whitespace:                          if (char.IsWhiteSpace(changeVector[current]) ||                              changeVector[current] == ''')                          {                              start++;                              current++;                          }                          else                          {                              start = current;                              current++;                              state = State.Tag;                          }                          break;                        default:                          ThrowInvalidState(state' changeVector);                          break;                  }              }
Magic Number,Raven.Server.Documents.Replication,IncomingConnectionInfo,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingConnectionInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (SourceDatabaseName != null ? StringComparer.CurrentCultureIgnoreCase.GetHashCode(SourceDatabaseName) : 0);                  hashCode = (hashCode * 397) ^ (SourceUrl != null ? StringComparer.CurrentCultureIgnoreCase.GetHashCode(SourceUrl) : 0);                  hashCode = (hashCode * 397) ^ (SourceMachineName != null ? StringComparer.CurrentCultureIgnoreCase.GetHashCode(SourceMachineName) : 0);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Replication,IncomingConnectionInfo,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingConnectionInfo.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (SourceDatabaseName != null ? StringComparer.CurrentCultureIgnoreCase.GetHashCode(SourceDatabaseName) : 0);                  hashCode = (hashCode * 397) ^ (SourceUrl != null ? StringComparer.CurrentCultureIgnoreCase.GetHashCode(SourceUrl) : 0);                  hashCode = (hashCode * 397) ^ (SourceMachineName != null ? StringComparer.CurrentCultureIgnoreCase.GetHashCode(SourceMachineName) : 0);                  return hashCode;              }
Magic Number,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The following statement contains a magic number: try              {                  using (var networkStats = stats.For(ReplicationOperation.Incoming.Network))                  {                      // this will read the documents to memory from the network                      // without holding the write tx open                      ReadItemsFromSource(ref writeBuffer' replicatedItemsCount' documentsContext' networkStats);                        using (networkStats.For(ReplicationOperation.Incoming.AttachmentRead))                      {                          ReadAttachmentStreamsFromSource(attachmentStreamCount' documentsContext);                      }                  }                    writeBuffer.EnsureSingleChunk(out byte* buffer' out int totalSize);                    if (_log.IsInfoEnabled)                      _log.Info(                          $"Replication connection {FromToString}: received {replicatedItemsCount:#'#;;0} documents with size {totalSize / 1024:#'#;;0} kb to database in {sw.ElapsedMilliseconds:#'#;;0} ms.");                    using (stats.For(ReplicationOperation.Incoming.Storage))                  {                      var replicationCommand = new MergedDocumentReplicationCommand(this' buffer' totalSize' lastEtag);                      task = _database.TxMerger.Enqueue(replicationCommand).AsTask();                        using (var writer = new BlittableJsonTextWriter(documentsContext' _connectionOptions.Stream))                      using (var msg = documentsContext.ReadObject(new DynamicJsonValue                      {                          [nameof(ReplicationMessageReply.MessageType)] = "Processing"                      }' "heartbeat message"))                      {                          while (task.Wait(Math.Min(3000' (int)(_database.Configuration.Replication.ActiveConnectionTimeout.AsTimeSpan.TotalMilliseconds * 2 / 3))) == false)                          {                              // send heartbeats while batch is processed in TxMerger. We wait until merger finishes with this command without timeouts                              documentsContext.Write(writer' msg);                              writer.Flush();                          }                          task = null;                      }                  }                    sw.Stop();                    if (_log.IsInfoEnabled)                      _log.Info($"Replication connection {FromToString}: " +                                $"received and written {replicatedItemsCount:#'#;;0} documents to database in {sw.ElapsedMilliseconds:#'#;;0} ms' " +                                $"with last etag = {lastEtag}.");              }              catch (Exception e)              {                  if (_log.IsInfoEnabled)                      _log.Info("Failed to receive documents replication batch. This is not supposed to happen' and is likely a bug."' e);                  throw;              }              finally              {                  // before we dispose the buffer we must ensure it is not being processed in TxMerger' so we wait for it                  try                  {                      task?.Wait();                  }                  catch (Exception)                  {                      // ignore this failure' if this failed' we are already                      // in a bad state and likely in the process of shutting                       // down                  }                  writeBuffer.Dispose();              }
Magic Number,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The following statement contains a magic number: try              {                  using (var networkStats = stats.For(ReplicationOperation.Incoming.Network))                  {                      // this will read the documents to memory from the network                      // without holding the write tx open                      ReadItemsFromSource(ref writeBuffer' replicatedItemsCount' documentsContext' networkStats);                        using (networkStats.For(ReplicationOperation.Incoming.AttachmentRead))                      {                          ReadAttachmentStreamsFromSource(attachmentStreamCount' documentsContext);                      }                  }                    writeBuffer.EnsureSingleChunk(out byte* buffer' out int totalSize);                    if (_log.IsInfoEnabled)                      _log.Info(                          $"Replication connection {FromToString}: received {replicatedItemsCount:#'#;;0} documents with size {totalSize / 1024:#'#;;0} kb to database in {sw.ElapsedMilliseconds:#'#;;0} ms.");                    using (stats.For(ReplicationOperation.Incoming.Storage))                  {                      var replicationCommand = new MergedDocumentReplicationCommand(this' buffer' totalSize' lastEtag);                      task = _database.TxMerger.Enqueue(replicationCommand).AsTask();                        using (var writer = new BlittableJsonTextWriter(documentsContext' _connectionOptions.Stream))                      using (var msg = documentsContext.ReadObject(new DynamicJsonValue                      {                          [nameof(ReplicationMessageReply.MessageType)] = "Processing"                      }' "heartbeat message"))                      {                          while (task.Wait(Math.Min(3000' (int)(_database.Configuration.Replication.ActiveConnectionTimeout.AsTimeSpan.TotalMilliseconds * 2 / 3))) == false)                          {                              // send heartbeats while batch is processed in TxMerger. We wait until merger finishes with this command without timeouts                              documentsContext.Write(writer' msg);                              writer.Flush();                          }                          task = null;                      }                  }                    sw.Stop();                    if (_log.IsInfoEnabled)                      _log.Info($"Replication connection {FromToString}: " +                                $"received and written {replicatedItemsCount:#'#;;0} documents to database in {sw.ElapsedMilliseconds:#'#;;0} ms' " +                                $"with last etag = {lastEtag}.");              }              catch (Exception e)              {                  if (_log.IsInfoEnabled)                      _log.Info("Failed to receive documents replication batch. This is not supposed to happen' and is likely a bug."' e);                  throw;              }              finally              {                  // before we dispose the buffer we must ensure it is not being processed in TxMerger' so we wait for it                  try                  {                      task?.Wait();                  }                  catch (Exception)                  {                      // ignore this failure' if this failed' we are already                      // in a bad state and likely in the process of shutting                       // down                  }                  writeBuffer.Dispose();              }
Magic Number,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The following statement contains a magic number: try              {                  using (var networkStats = stats.For(ReplicationOperation.Incoming.Network))                  {                      // this will read the documents to memory from the network                      // without holding the write tx open                      ReadItemsFromSource(ref writeBuffer' replicatedItemsCount' documentsContext' networkStats);                        using (networkStats.For(ReplicationOperation.Incoming.AttachmentRead))                      {                          ReadAttachmentStreamsFromSource(attachmentStreamCount' documentsContext);                      }                  }                    writeBuffer.EnsureSingleChunk(out byte* buffer' out int totalSize);                    if (_log.IsInfoEnabled)                      _log.Info(                          $"Replication connection {FromToString}: received {replicatedItemsCount:#'#;;0} documents with size {totalSize / 1024:#'#;;0} kb to database in {sw.ElapsedMilliseconds:#'#;;0} ms.");                    using (stats.For(ReplicationOperation.Incoming.Storage))                  {                      var replicationCommand = new MergedDocumentReplicationCommand(this' buffer' totalSize' lastEtag);                      task = _database.TxMerger.Enqueue(replicationCommand).AsTask();                        using (var writer = new BlittableJsonTextWriter(documentsContext' _connectionOptions.Stream))                      using (var msg = documentsContext.ReadObject(new DynamicJsonValue                      {                          [nameof(ReplicationMessageReply.MessageType)] = "Processing"                      }' "heartbeat message"))                      {                          while (task.Wait(Math.Min(3000' (int)(_database.Configuration.Replication.ActiveConnectionTimeout.AsTimeSpan.TotalMilliseconds * 2 / 3))) == false)                          {                              // send heartbeats while batch is processed in TxMerger. We wait until merger finishes with this command without timeouts                              documentsContext.Write(writer' msg);                              writer.Flush();                          }                          task = null;                      }                  }                    sw.Stop();                    if (_log.IsInfoEnabled)                      _log.Info($"Replication connection {FromToString}: " +                                $"received and written {replicatedItemsCount:#'#;;0} documents to database in {sw.ElapsedMilliseconds:#'#;;0} ms' " +                                $"with last etag = {lastEtag}.");              }              catch (Exception e)              {                  if (_log.IsInfoEnabled)                      _log.Info("Failed to receive documents replication batch. This is not supposed to happen' and is likely a bug."' e);                  throw;              }              finally              {                  // before we dispose the buffer we must ensure it is not being processed in TxMerger' so we wait for it                  try                  {                      task?.Wait();                  }                  catch (Exception)                  {                      // ignore this failure' if this failed' we are already                      // in a bad state and likely in the process of shutting                       // down                  }                  writeBuffer.Dispose();              }
Magic Number,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,ReceiveSingleDocumentsBatch,The following statement contains a magic number: try              {                  using (var networkStats = stats.For(ReplicationOperation.Incoming.Network))                  {                      // this will read the documents to memory from the network                      // without holding the write tx open                      ReadItemsFromSource(ref writeBuffer' replicatedItemsCount' documentsContext' networkStats);                        using (networkStats.For(ReplicationOperation.Incoming.AttachmentRead))                      {                          ReadAttachmentStreamsFromSource(attachmentStreamCount' documentsContext);                      }                  }                    writeBuffer.EnsureSingleChunk(out byte* buffer' out int totalSize);                    if (_log.IsInfoEnabled)                      _log.Info(                          $"Replication connection {FromToString}: received {replicatedItemsCount:#'#;;0} documents with size {totalSize / 1024:#'#;;0} kb to database in {sw.ElapsedMilliseconds:#'#;;0} ms.");                    using (stats.For(ReplicationOperation.Incoming.Storage))                  {                      var replicationCommand = new MergedDocumentReplicationCommand(this' buffer' totalSize' lastEtag);                      task = _database.TxMerger.Enqueue(replicationCommand).AsTask();                        using (var writer = new BlittableJsonTextWriter(documentsContext' _connectionOptions.Stream))                      using (var msg = documentsContext.ReadObject(new DynamicJsonValue                      {                          [nameof(ReplicationMessageReply.MessageType)] = "Processing"                      }' "heartbeat message"))                      {                          while (task.Wait(Math.Min(3000' (int)(_database.Configuration.Replication.ActiveConnectionTimeout.AsTimeSpan.TotalMilliseconds * 2 / 3))) == false)                          {                              // send heartbeats while batch is processed in TxMerger. We wait until merger finishes with this command without timeouts                              documentsContext.Write(writer' msg);                              writer.Flush();                          }                          task = null;                      }                  }                    sw.Stop();                    if (_log.IsInfoEnabled)                      _log.Info($"Replication connection {FromToString}: " +                                $"received and written {replicatedItemsCount:#'#;;0} documents to database in {sw.ElapsedMilliseconds:#'#;;0} ms' " +                                $"with last etag = {lastEtag}.");              }              catch (Exception e)              {                  if (_log.IsInfoEnabled)                      _log.Info("Failed to receive documents replication batch. This is not supposed to happen' and is likely a bug."' e);                  throw;              }              finally              {                  // before we dispose the buffer we must ensure it is not being processed in TxMerger' so we wait for it                  try                  {                      task?.Wait();                  }                  catch (Exception)                  {                      // ignore this failure' if this failed' we are already                      // in a bad state and likely in the process of shutting                       // down                  }                  writeBuffer.Dispose();              }
Magic Number,Raven.Server.Documents.Replication,IncomingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\IncomingReplicationHandler.cs,AddReplicationPerformance,The following statement contains a magic number: while (_lastReplicationStats.Count > 25)                  _lastReplicationStats.TryDequeue(out stats);
Magic Number,Raven.Server.Documents.Replication,LiveReplicationPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\LiveReplicationPerformanceCollector.cs,StartCollectingStats,The following statement contains a magic number: try              {                  while (token.IsCancellationRequested == false)                  {                      await TimeoutManager.WaitFor(TimeSpan.FromMilliseconds(3000)' token).ConfigureAwait(false);                        if (token.IsCancellationRequested)                          break;                        var performanceStats = PreparePerformanceStats().ToList();                        if (performanceStats.Count > 0)                      {                          Stats.Enqueue(performanceStats);                      }                  }              }              finally              {                  _database.ReplicationLoader.OutgoingReplicationRemoved -= OutgoingHandlerRemoved;                  _database.ReplicationLoader.OutgoingReplicationAdded -= OutgoingHandlerAdded;                  _database.ReplicationLoader.IncomingReplicationRemoved -= IncomingHandlerRemoved;                  _database.ReplicationLoader.IncomingReplicationAdded -= IncomingHandlerAdded;                    foreach (var kvp in _incoming)                      IncomingHandlerRemoved(kvp.Value.Handler);                    foreach (var kvp in _outgoing)                      OutgoingHandlerRemoved(kvp.Key);              }
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReplicateToDestination,The following statement contains a magic number: try              {                  if (_log.IsInfoEnabled)                      _log.Info($"Will replicate to {Destination.FromString()} via {_connectionInfo.Url}");                    using (_parent._server.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                  using (context.OpenReadTransaction())                  {                      var record = _parent.LoadDatabaseRecord();                      if (record == null)                          throw new InvalidOperationException($"The database record for {_parent.Database.Name} does not exist?!");                        if (record.Encrypted && Destination.Url.StartsWith("https:"' StringComparison.OrdinalIgnoreCase) == false)                          throw new InvalidOperationException(                              $"{record.DatabaseName} is encrypted' and require HTTPS for replication' but had endpoint with url {Destination.Url} to database {Destination.Database}");                  }                    var task = TcpUtils.ConnectSocketAsync(_connectionInfo' _parent._server.Engine.TcpConnectionTimeout' _log);                  task.Wait(CancellationToken);                  using (_tcpClient = task.Result)                  {                      var wrapSsl = TcpUtils.WrapStreamWithSslAsync(_tcpClient' _connectionInfo' _parent._server.Server.Certificate.Certificate);                        wrapSsl.Wait(CancellationToken);                        using (_stream = wrapSsl.Result)                      using (_interruptibleRead = new InterruptibleRead(_database.DocumentsStorage.ContextPool' _stream))                      using (_buffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance())                      {                          var documentSender = new ReplicationDocumentSender(_stream' this' _log);                            WriteHeaderToRemotePeer();                          //handle initial response to last etag and staff                          try                          {                              var response = HandleServerResponse(getFullResponse: true);                              if (response.ReplyType == ReplicationMessageReply.ReplyType.Error)                              {                                  var exception = new InvalidOperationException(response.Reply.Exception);                                  if (response.Reply.Exception.Contains(nameof(DatabaseDoesNotExistException)) ||                                      response.Reply.Exception.Contains(nameof(DatabaseNotRelevantException)))                                  {                                      AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' "Database does not exist");                                      DatabaseDoesNotExistException.ThrowWithMessageAndException(Destination.Database' response.Reply.Message' exception);                                  }                                    AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' $"Got error: {response.Reply.Exception}");                                  throw exception;                              }                          }                          catch (DatabaseDoesNotExistException e)                          {                              var msg = $"Failed to parse initial server replication response' because there is no database named {_database.Name} " +                                        "on the other end. ";                              if (_external)                                  msg += "In order for the replication to work' a database with the same name needs to be created at the destination";                                var young = (DateTime.UtcNow - _startedAt).TotalSeconds < 30;                              if (young)                                  msg += "This can happen if the other node wasn't yet notified about being assigned this database and should be resolved shortly.";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                                AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                                // won't add an alert on young connections                              // because it may take a few seconds for the other side to be notified by                              // the cluster that it has this db.                              if (young == false)                                  AddAlertOnFailureToReachOtherSide(msg' e);                                throw;                          }                          catch (OperationCanceledException e)                          {                              const string msg = "Got operation canceled notification while opening outgoing replication channel. " +                                                 "Aborting and closing the channel.";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                              AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                              throw;                          }                          catch (Exception e)                          {                              string msg = $"{OutgoingReplicationThreadName} got an unexpected exception during initial handshake error:{e}";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                                AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                              AddAlertOnFailureToReachOtherSide(msg' e);                                throw;                          }                            DateTime nextReplicateAt = default(DateTime);                            while (_cts.IsCancellationRequested == false)                          {                              while (_database.Time.GetUtcNow() > nextReplicateAt)                              {                                  if (_parent.DebugWaitAndRunReplicationOnce != null)                                  {                                      _parent.DebugWaitAndRunReplicationOnce.Wait(_cts.Token);                                      _parent.DebugWaitAndRunReplicationOnce.Reset();                                  }                                    var sp = Stopwatch.StartNew();                                  var stats = _lastStats = new OutgoingReplicationStatsAggregator(_parent.GetNextReplicationStatsId()' _lastStats);                                  AddReplicationPerformance(stats);                                  AddReplicationPulse(ReplicationPulseDirection.OutgoingBegin);                                    try                                  {                                      using (var scope = stats.CreateScope())                                      {                                          try                                          {                                              if (Destination is InternalReplication dest)                                              {                                                  _parent.EnsureNotDeleted(dest.NodeTag);                                              }                                              var didWork = documentSender.ExecuteReplicationOnce(scope' ref nextReplicateAt);                                              if (didWork == false)                                                  break;                                                DocumentsSend?.Invoke(this);                                                if (sp.ElapsedMilliseconds > 60 * 1000)                                              {                                                  _waitForChanges.Set();                                                  break;                                              }                                          }                                          catch (OperationCanceledException)                                          {                                              // cancellation is not an actual error'                                              // it is a "notification" that we need to cancel current operation                                                const string msg = "Operation was canceled.";                                              AddReplicationPulse(ReplicationPulseDirection.OutgoingError' msg);                                                throw;                                          }                                          catch (Exception e)                                          {                                              AddReplicationPulse(ReplicationPulseDirection.OutgoingError' e.Message);                                                scope.AddError(e);                                              throw;                                          }                                      }                                  }                                  finally                                  {                                      stats.Complete();                                      AddReplicationPulse(ReplicationPulseDirection.OutgoingEnd);                                  }                              }                                //if this returns false' this means either timeout or canceled token is activated                                                  while (WaitForChanges(_parent.MinimalHeartbeatInterval' _cts.Token) == false)                              {                                  // open tx                                  // read current change vector compare to last sent                                  // if okay' send cv                                  using (_database.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext ctx))                                  using (var tx = ctx.OpenReadTransaction())                                  {                                      var etag = DocumentsStorage.ReadLastEtag(tx.InnerTransaction);                                      if (etag == _lastSentDocumentEtag)                                      {                                          SendHeartbeat(DocumentsStorage.GetDatabaseChangeVector(ctx));                                          _parent.CompleteDeletionIfNeeded();                                      }                                      else if (nextReplicateAt > DateTime.UtcNow)                                      {                                          SendHeartbeat(null);                                      }                                      else                                      {                                          // we have updates that we need to send to the other side                                          // let's do that..                                           // this can happen if we got replication from another node                                          // that we need to send to it. Note that we typically                                          // will wait for the other node to send the data directly to                                          // our destination' but if it doesn't' we'll step in.                                          // In this case' we try to limit congestion in the network and                                          // only send updates that we have gotten from someone else after                                          // a certain time' to let the other side tell us that it already                                          // got it. Note that this is merely an optimization to reduce network                                          // traffic. It is fine to have the same data come from different sources.                                          break;                                      }                                  }                              }                              _waitForChanges.Reset();                          }                      }                  }              }              catch (AggregateException e)              {                  if (e.InnerExceptions.Count == 1)                  {                      if (e.InnerException is OperationCanceledException oce)                      {                          HandleOperationCancelException(oce);                      }                      if (e.InnerException is IOException ioe)                      {                          HandleIOException(ioe);                      }                  }                                    HandleException(e);              }              catch (OperationCanceledException e)              {                  HandleOperationCancelException(e);              }              catch (IOException e)              {                  HandleIOException(e);              }              catch (Exception e)              {                  HandleException(e);              }
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReplicateToDestination,The following statement contains a magic number: try              {                  if (_log.IsInfoEnabled)                      _log.Info($"Will replicate to {Destination.FromString()} via {_connectionInfo.Url}");                    using (_parent._server.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                  using (context.OpenReadTransaction())                  {                      var record = _parent.LoadDatabaseRecord();                      if (record == null)                          throw new InvalidOperationException($"The database record for {_parent.Database.Name} does not exist?!");                        if (record.Encrypted && Destination.Url.StartsWith("https:"' StringComparison.OrdinalIgnoreCase) == false)                          throw new InvalidOperationException(                              $"{record.DatabaseName} is encrypted' and require HTTPS for replication' but had endpoint with url {Destination.Url} to database {Destination.Database}");                  }                    var task = TcpUtils.ConnectSocketAsync(_connectionInfo' _parent._server.Engine.TcpConnectionTimeout' _log);                  task.Wait(CancellationToken);                  using (_tcpClient = task.Result)                  {                      var wrapSsl = TcpUtils.WrapStreamWithSslAsync(_tcpClient' _connectionInfo' _parent._server.Server.Certificate.Certificate);                        wrapSsl.Wait(CancellationToken);                        using (_stream = wrapSsl.Result)                      using (_interruptibleRead = new InterruptibleRead(_database.DocumentsStorage.ContextPool' _stream))                      using (_buffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance())                      {                          var documentSender = new ReplicationDocumentSender(_stream' this' _log);                            WriteHeaderToRemotePeer();                          //handle initial response to last etag and staff                          try                          {                              var response = HandleServerResponse(getFullResponse: true);                              if (response.ReplyType == ReplicationMessageReply.ReplyType.Error)                              {                                  var exception = new InvalidOperationException(response.Reply.Exception);                                  if (response.Reply.Exception.Contains(nameof(DatabaseDoesNotExistException)) ||                                      response.Reply.Exception.Contains(nameof(DatabaseNotRelevantException)))                                  {                                      AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' "Database does not exist");                                      DatabaseDoesNotExistException.ThrowWithMessageAndException(Destination.Database' response.Reply.Message' exception);                                  }                                    AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' $"Got error: {response.Reply.Exception}");                                  throw exception;                              }                          }                          catch (DatabaseDoesNotExistException e)                          {                              var msg = $"Failed to parse initial server replication response' because there is no database named {_database.Name} " +                                        "on the other end. ";                              if (_external)                                  msg += "In order for the replication to work' a database with the same name needs to be created at the destination";                                var young = (DateTime.UtcNow - _startedAt).TotalSeconds < 30;                              if (young)                                  msg += "This can happen if the other node wasn't yet notified about being assigned this database and should be resolved shortly.";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                                AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                                // won't add an alert on young connections                              // because it may take a few seconds for the other side to be notified by                              // the cluster that it has this db.                              if (young == false)                                  AddAlertOnFailureToReachOtherSide(msg' e);                                throw;                          }                          catch (OperationCanceledException e)                          {                              const string msg = "Got operation canceled notification while opening outgoing replication channel. " +                                                 "Aborting and closing the channel.";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                              AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                              throw;                          }                          catch (Exception e)                          {                              string msg = $"{OutgoingReplicationThreadName} got an unexpected exception during initial handshake error:{e}";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                                AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                              AddAlertOnFailureToReachOtherSide(msg' e);                                throw;                          }                            DateTime nextReplicateAt = default(DateTime);                            while (_cts.IsCancellationRequested == false)                          {                              while (_database.Time.GetUtcNow() > nextReplicateAt)                              {                                  if (_parent.DebugWaitAndRunReplicationOnce != null)                                  {                                      _parent.DebugWaitAndRunReplicationOnce.Wait(_cts.Token);                                      _parent.DebugWaitAndRunReplicationOnce.Reset();                                  }                                    var sp = Stopwatch.StartNew();                                  var stats = _lastStats = new OutgoingReplicationStatsAggregator(_parent.GetNextReplicationStatsId()' _lastStats);                                  AddReplicationPerformance(stats);                                  AddReplicationPulse(ReplicationPulseDirection.OutgoingBegin);                                    try                                  {                                      using (var scope = stats.CreateScope())                                      {                                          try                                          {                                              if (Destination is InternalReplication dest)                                              {                                                  _parent.EnsureNotDeleted(dest.NodeTag);                                              }                                              var didWork = documentSender.ExecuteReplicationOnce(scope' ref nextReplicateAt);                                              if (didWork == false)                                                  break;                                                DocumentsSend?.Invoke(this);                                                if (sp.ElapsedMilliseconds > 60 * 1000)                                              {                                                  _waitForChanges.Set();                                                  break;                                              }                                          }                                          catch (OperationCanceledException)                                          {                                              // cancellation is not an actual error'                                              // it is a "notification" that we need to cancel current operation                                                const string msg = "Operation was canceled.";                                              AddReplicationPulse(ReplicationPulseDirection.OutgoingError' msg);                                                throw;                                          }                                          catch (Exception e)                                          {                                              AddReplicationPulse(ReplicationPulseDirection.OutgoingError' e.Message);                                                scope.AddError(e);                                              throw;                                          }                                      }                                  }                                  finally                                  {                                      stats.Complete();                                      AddReplicationPulse(ReplicationPulseDirection.OutgoingEnd);                                  }                              }                                //if this returns false' this means either timeout or canceled token is activated                                                  while (WaitForChanges(_parent.MinimalHeartbeatInterval' _cts.Token) == false)                              {                                  // open tx                                  // read current change vector compare to last sent                                  // if okay' send cv                                  using (_database.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext ctx))                                  using (var tx = ctx.OpenReadTransaction())                                  {                                      var etag = DocumentsStorage.ReadLastEtag(tx.InnerTransaction);                                      if (etag == _lastSentDocumentEtag)                                      {                                          SendHeartbeat(DocumentsStorage.GetDatabaseChangeVector(ctx));                                          _parent.CompleteDeletionIfNeeded();                                      }                                      else if (nextReplicateAt > DateTime.UtcNow)                                      {                                          SendHeartbeat(null);                                      }                                      else                                      {                                          // we have updates that we need to send to the other side                                          // let's do that..                                           // this can happen if we got replication from another node                                          // that we need to send to it. Note that we typically                                          // will wait for the other node to send the data directly to                                          // our destination' but if it doesn't' we'll step in.                                          // In this case' we try to limit congestion in the network and                                          // only send updates that we have gotten from someone else after                                          // a certain time' to let the other side tell us that it already                                          // got it. Note that this is merely an optimization to reduce network                                          // traffic. It is fine to have the same data come from different sources.                                          break;                                      }                                  }                              }                              _waitForChanges.Reset();                          }                      }                  }              }              catch (AggregateException e)              {                  if (e.InnerExceptions.Count == 1)                  {                      if (e.InnerException is OperationCanceledException oce)                      {                          HandleOperationCancelException(oce);                      }                      if (e.InnerException is IOException ioe)                      {                          HandleIOException(ioe);                      }                  }                                    HandleException(e);              }              catch (OperationCanceledException e)              {                  HandleOperationCancelException(e);              }              catch (IOException e)              {                  HandleIOException(e);              }              catch (Exception e)              {                  HandleException(e);              }
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReplicateToDestination,The following statement contains a magic number: try              {                  if (_log.IsInfoEnabled)                      _log.Info($"Will replicate to {Destination.FromString()} via {_connectionInfo.Url}");                    using (_parent._server.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                  using (context.OpenReadTransaction())                  {                      var record = _parent.LoadDatabaseRecord();                      if (record == null)                          throw new InvalidOperationException($"The database record for {_parent.Database.Name} does not exist?!");                        if (record.Encrypted && Destination.Url.StartsWith("https:"' StringComparison.OrdinalIgnoreCase) == false)                          throw new InvalidOperationException(                              $"{record.DatabaseName} is encrypted' and require HTTPS for replication' but had endpoint with url {Destination.Url} to database {Destination.Database}");                  }                    var task = TcpUtils.ConnectSocketAsync(_connectionInfo' _parent._server.Engine.TcpConnectionTimeout' _log);                  task.Wait(CancellationToken);                  using (_tcpClient = task.Result)                  {                      var wrapSsl = TcpUtils.WrapStreamWithSslAsync(_tcpClient' _connectionInfo' _parent._server.Server.Certificate.Certificate);                        wrapSsl.Wait(CancellationToken);                        using (_stream = wrapSsl.Result)                      using (_interruptibleRead = new InterruptibleRead(_database.DocumentsStorage.ContextPool' _stream))                      using (_buffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance())                      {                          var documentSender = new ReplicationDocumentSender(_stream' this' _log);                            WriteHeaderToRemotePeer();                          //handle initial response to last etag and staff                          try                          {                              var response = HandleServerResponse(getFullResponse: true);                              if (response.ReplyType == ReplicationMessageReply.ReplyType.Error)                              {                                  var exception = new InvalidOperationException(response.Reply.Exception);                                  if (response.Reply.Exception.Contains(nameof(DatabaseDoesNotExistException)) ||                                      response.Reply.Exception.Contains(nameof(DatabaseNotRelevantException)))                                  {                                      AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' "Database does not exist");                                      DatabaseDoesNotExistException.ThrowWithMessageAndException(Destination.Database' response.Reply.Message' exception);                                  }                                    AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' $"Got error: {response.Reply.Exception}");                                  throw exception;                              }                          }                          catch (DatabaseDoesNotExistException e)                          {                              var msg = $"Failed to parse initial server replication response' because there is no database named {_database.Name} " +                                        "on the other end. ";                              if (_external)                                  msg += "In order for the replication to work' a database with the same name needs to be created at the destination";                                var young = (DateTime.UtcNow - _startedAt).TotalSeconds < 30;                              if (young)                                  msg += "This can happen if the other node wasn't yet notified about being assigned this database and should be resolved shortly.";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                                AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                                // won't add an alert on young connections                              // because it may take a few seconds for the other side to be notified by                              // the cluster that it has this db.                              if (young == false)                                  AddAlertOnFailureToReachOtherSide(msg' e);                                throw;                          }                          catch (OperationCanceledException e)                          {                              const string msg = "Got operation canceled notification while opening outgoing replication channel. " +                                                 "Aborting and closing the channel.";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                              AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                              throw;                          }                          catch (Exception e)                          {                              string msg = $"{OutgoingReplicationThreadName} got an unexpected exception during initial handshake error:{e}";                              if (_log.IsInfoEnabled)                                  _log.Info(msg' e);                                AddReplicationPulse(ReplicationPulseDirection.OutgoingInitiateError' msg);                              AddAlertOnFailureToReachOtherSide(msg' e);                                throw;                          }                            DateTime nextReplicateAt = default(DateTime);                            while (_cts.IsCancellationRequested == false)                          {                              while (_database.Time.GetUtcNow() > nextReplicateAt)                              {                                  if (_parent.DebugWaitAndRunReplicationOnce != null)                                  {                                      _parent.DebugWaitAndRunReplicationOnce.Wait(_cts.Token);                                      _parent.DebugWaitAndRunReplicationOnce.Reset();                                  }                                    var sp = Stopwatch.StartNew();                                  var stats = _lastStats = new OutgoingReplicationStatsAggregator(_parent.GetNextReplicationStatsId()' _lastStats);                                  AddReplicationPerformance(stats);                                  AddReplicationPulse(ReplicationPulseDirection.OutgoingBegin);                                    try                                  {                                      using (var scope = stats.CreateScope())                                      {                                          try                                          {                                              if (Destination is InternalReplication dest)                                              {                                                  _parent.EnsureNotDeleted(dest.NodeTag);                                              }                                              var didWork = documentSender.ExecuteReplicationOnce(scope' ref nextReplicateAt);                                              if (didWork == false)                                                  break;                                                DocumentsSend?.Invoke(this);                                                if (sp.ElapsedMilliseconds > 60 * 1000)                                              {                                                  _waitForChanges.Set();                                                  break;                                              }                                          }                                          catch (OperationCanceledException)                                          {                                              // cancellation is not an actual error'                                              // it is a "notification" that we need to cancel current operation                                                const string msg = "Operation was canceled.";                                              AddReplicationPulse(ReplicationPulseDirection.OutgoingError' msg);                                                throw;                                          }                                          catch (Exception e)                                          {                                              AddReplicationPulse(ReplicationPulseDirection.OutgoingError' e.Message);                                                scope.AddError(e);                                              throw;                                          }                                      }                                  }                                  finally                                  {                                      stats.Complete();                                      AddReplicationPulse(ReplicationPulseDirection.OutgoingEnd);                                  }                              }                                //if this returns false' this means either timeout or canceled token is activated                                                  while (WaitForChanges(_parent.MinimalHeartbeatInterval' _cts.Token) == false)                              {                                  // open tx                                  // read current change vector compare to last sent                                  // if okay' send cv                                  using (_database.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext ctx))                                  using (var tx = ctx.OpenReadTransaction())                                  {                                      var etag = DocumentsStorage.ReadLastEtag(tx.InnerTransaction);                                      if (etag == _lastSentDocumentEtag)                                      {                                          SendHeartbeat(DocumentsStorage.GetDatabaseChangeVector(ctx));                                          _parent.CompleteDeletionIfNeeded();                                      }                                      else if (nextReplicateAt > DateTime.UtcNow)                                      {                                          SendHeartbeat(null);                                      }                                      else                                      {                                          // we have updates that we need to send to the other side                                          // let's do that..                                           // this can happen if we got replication from another node                                          // that we need to send to it. Note that we typically                                          // will wait for the other node to send the data directly to                                          // our destination' but if it doesn't' we'll step in.                                          // In this case' we try to limit congestion in the network and                                          // only send updates that we have gotten from someone else after                                          // a certain time' to let the other side tell us that it already                                          // got it. Note that this is merely an optimization to reduce network                                          // traffic. It is fine to have the same data come from different sources.                                          break;                                      }                                  }                              }                              _waitForChanges.Reset();                          }                      }                  }              }              catch (AggregateException e)              {                  if (e.InnerExceptions.Count == 1)                  {                      if (e.InnerException is OperationCanceledException oce)                      {                          HandleOperationCancelException(oce);                      }                      if (e.InnerException is IOException ioe)                      {                          HandleIOException(ioe);                      }                  }                                    HandleException(e);              }              catch (OperationCanceledException e)              {                  HandleOperationCancelException(e);              }              catch (IOException e)              {                  HandleIOException(e);              }              catch (Exception e)              {                  HandleException(e);              }
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,AddReplicationPerformance,The following statement contains a magic number: while (_lastReplicationStats.Count > 25)                  _lastReplicationStats.TryDequeue(out _);
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReadHeaderResponseAndThrowIfUnAuthorized,The following statement contains a magic number: const int timeout = 2 * 60 * 1000;
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReadHeaderResponseAndThrowIfUnAuthorized,The following statement contains a magic number: const int timeout = 2 * 60 * 1000;
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReadHeaderResponseAndThrowIfUnAuthorized,The following statement contains a magic number: const int timeout = 2 * 60 * 1000;
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,HandleServerResponse,The following statement contains a magic number: while (true)              {                  var timeout = 2 * 60 * 1000; // TODO: configurable                  DebuggerAttachedTimeout.OutgoingReplication(ref timeout);                    using (var replicationBatchReplyMessage = _interruptibleRead.ParseToMemory(                      _connectionDisposed'                      "replication acknowledge message"'                      timeout'                      _buffer'                      CancellationToken))                  {                      if (replicationBatchReplyMessage.Timeout)                      {                          ThrowTimeout(timeout);                      }                      if (replicationBatchReplyMessage.Interrupted)                      {                          ThrowConnectionClosed();                      }                        var replicationBatchReply = HandleServerResponse(replicationBatchReplyMessage.Document' allowNotify: false);                      if (replicationBatchReply == null)                          continue;                        LastHeartbeatTicks = _database.Time.GetUtcNow().Ticks;                        var sendFullReply = replicationBatchReply.Type == ReplicationMessageReply.ReplyType.Error ||                                          getFullResponse;                        var type = replicationBatchReply.Type;                      var reply = sendFullReply ? replicationBatchReply : null;                      return (type' reply);                  }              }
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,HandleServerResponse,The following statement contains a magic number: while (true)              {                  var timeout = 2 * 60 * 1000; // TODO: configurable                  DebuggerAttachedTimeout.OutgoingReplication(ref timeout);                    using (var replicationBatchReplyMessage = _interruptibleRead.ParseToMemory(                      _connectionDisposed'                      "replication acknowledge message"'                      timeout'                      _buffer'                      CancellationToken))                  {                      if (replicationBatchReplyMessage.Timeout)                      {                          ThrowTimeout(timeout);                      }                      if (replicationBatchReplyMessage.Interrupted)                      {                          ThrowConnectionClosed();                      }                        var replicationBatchReply = HandleServerResponse(replicationBatchReplyMessage.Document' allowNotify: false);                      if (replicationBatchReply == null)                          continue;                        LastHeartbeatTicks = _database.Time.GetUtcNow().Ticks;                        var sendFullReply = replicationBatchReply.Type == ReplicationMessageReply.ReplyType.Error ||                                          getFullResponse;                        var type = replicationBatchReply.Type;                      var reply = sendFullReply ? replicationBatchReply : null;                      return (type' reply);                  }              }
Magic Number,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,HandleServerResponse,The following statement contains a magic number: while (true)              {                  var timeout = 2 * 60 * 1000; // TODO: configurable                  DebuggerAttachedTimeout.OutgoingReplication(ref timeout);                    using (var replicationBatchReplyMessage = _interruptibleRead.ParseToMemory(                      _connectionDisposed'                      "replication acknowledge message"'                      timeout'                      _buffer'                      CancellationToken))                  {                      if (replicationBatchReplyMessage.Timeout)                      {                          ThrowTimeout(timeout);                      }                      if (replicationBatchReplyMessage.Interrupted)                      {                          ThrowConnectionClosed();                      }                        var replicationBatchReply = HandleServerResponse(replicationBatchReplyMessage.Document' allowNotify: false);                      if (replicationBatchReply == null)                          continue;                        LastHeartbeatTicks = _database.Time.GetUtcNow().Ticks;                        var sendFullReply = replicationBatchReply.Type == ReplicationMessageReply.ReplyType.Error ||                                          getFullResponse;                        var type = replicationBatchReply.Type;                      var reply = sendFullReply ? replicationBatchReply : null;                      return (type' reply);                  }              }
Magic Number,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,ExecuteReplicationOnce,The following statement contains a magic number: using (_parent._database.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext documentsContext))              using (documentsContext.OpenReadTransaction())              {                  try                  {                      // we scan through the documents to send to the other side' we need to be careful about                      // filtering a lot of documents' because we need to let the other side know about this' and                       // at the same time' we need to send a heartbeat to keep the tcp connection alive                      _lastEtag = _parent._lastSentDocumentEtag;                      _parent.CancellationToken.ThrowIfCancellationRequested();                        var batchSize = _parent._database.Configuration.Replication.MaxItemsCount;                      var maxSizeToSend = _parent._database.Configuration.Replication.MaxSizeToSend;                      long size = 0;                      int numberOfItemsSent = 0;                      short lastTransactionMarker = -1;                      using (_stats.Storage.Start())                      {                          foreach (var item in GetDocsConflictsTombstonesRevisionsAndAttachmentsAfter(documentsContext' _lastEtag' _stats))                          {                              if (lastTransactionMarker != item.TransactionMarker)                              {                                  if (delay.Ticks > 0)                                  {                                      var nextReplication = item.LastModifiedTicks + delay.Ticks;                                      if (_parent._database.Time.GetUtcNow().Ticks < nextReplication)                                      {                                          next = new DateTime(nextReplication);                                          wasInterrupted = true;                                          break;                                      }                                  }                                  lastTransactionMarker = item.TransactionMarker;                                    // Include the attachment's document which is right after its latest attachment.                                  if ((item.Type == ReplicationBatchItem.ReplicationItemType.Document ||                                       item.Type == ReplicationBatchItem.ReplicationItemType.DocumentTombstone) &&                                      // We want to limit batch sizes to reasonable limits.                                      ((maxSizeToSend.HasValue && size > maxSizeToSend.Value.GetValue(SizeUnit.Bytes)) ||                                       (batchSize.HasValue && numberOfItemsSent > batchSize.Value)))                                  {                                      wasInterrupted = true;                                      break;                                  }                                    if (_stats.Storage.CurrentStats.InputCount % 16384 == 0)                                  {                                      // ReSharper disable once PossibleLossOfFraction                                      if ((_parent._parent.MinimalHeartbeatInterval / 2) < _stats.Storage.Duration.TotalMilliseconds)                                      {                                          wasInterrupted = true;                                          break;                                      }                                  }                              }                                _stats.Storage.RecordInputAttempt();                                _lastEtag = item.Etag;                                if (item.Data != null)                                  size += item.Data.Size;                              else if (item.Type == ReplicationBatchItem.ReplicationItemType.Attachment)                                  size += item.Stream.Length;                                if (AddReplicationItemToBatch(item' _stats.Storage))                                  numberOfItemsSent++;                          }                      }                        if (_log.IsInfoEnabled)                          _log.Info($"Found {_orderedReplicaItems.Count:#'#;;0} documents and {_replicaAttachmentStreams.Count} attachment's streams to replicate to {_parent.Node.FromString()}.");                        if (_orderedReplicaItems.Count == 0)                      {                          var hasModification = _lastEtag != _parent._lastSentDocumentEtag;                            // ensure that the other server is aware that we skipped                           // on (potentially a lot of) documents to send' and we update                          // the last etag they have from us on the other side                          _parent._lastSentDocumentEtag = _lastEtag;                          _parent._lastDocumentSentTime = DateTime.UtcNow;                          var changeVector = wasInterrupted ? null : DocumentsStorage.GetDatabaseChangeVector(documentsContext);                          _parent.SendHeartbeat(changeVector);                          return hasModification;                      }                        _parent.CancellationToken.ThrowIfCancellationRequested();                        try                      {                          using (_stats.Network.Start())                          {                              SendDocumentsBatch(documentsContext' _stats.Network);                          }                      }                      catch (OperationCanceledException)                      {                          if (_log.IsInfoEnabled)                              _log.Info("Received cancellation notification while sending document replication batch.");                          throw;                      }                      catch (Exception e)                      {                          if (_log.IsInfoEnabled)                              _log.Info("Failed to send document replication batch"' e);                          throw;                      }                      return true;                  }                  finally                  {                      foreach (var item in _orderedReplicaItems)                      {                          var value = item.Value;                          if (value.Type == ReplicationBatchItem.ReplicationItemType.Attachment)                          {                              // TODO: Why are we disposing here?                              // Shouldn't the all context be disposed here?                              // If not' should we dispose all strings here?                              value.Stream.Dispose();                          }                          else                          {                              value.Data?.Dispose(); //item.Value.Data is null if tombstone                          }                      }                      _orderedReplicaItems.Clear();                      _replicaAttachmentStreams.Clear();                  }              }
Magic Number,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,ExecuteReplicationOnce,The following statement contains a magic number: using (_parent._database.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext documentsContext))              using (documentsContext.OpenReadTransaction())              {                  try                  {                      // we scan through the documents to send to the other side' we need to be careful about                      // filtering a lot of documents' because we need to let the other side know about this' and                       // at the same time' we need to send a heartbeat to keep the tcp connection alive                      _lastEtag = _parent._lastSentDocumentEtag;                      _parent.CancellationToken.ThrowIfCancellationRequested();                        var batchSize = _parent._database.Configuration.Replication.MaxItemsCount;                      var maxSizeToSend = _parent._database.Configuration.Replication.MaxSizeToSend;                      long size = 0;                      int numberOfItemsSent = 0;                      short lastTransactionMarker = -1;                      using (_stats.Storage.Start())                      {                          foreach (var item in GetDocsConflictsTombstonesRevisionsAndAttachmentsAfter(documentsContext' _lastEtag' _stats))                          {                              if (lastTransactionMarker != item.TransactionMarker)                              {                                  if (delay.Ticks > 0)                                  {                                      var nextReplication = item.LastModifiedTicks + delay.Ticks;                                      if (_parent._database.Time.GetUtcNow().Ticks < nextReplication)                                      {                                          next = new DateTime(nextReplication);                                          wasInterrupted = true;                                          break;                                      }                                  }                                  lastTransactionMarker = item.TransactionMarker;                                    // Include the attachment's document which is right after its latest attachment.                                  if ((item.Type == ReplicationBatchItem.ReplicationItemType.Document ||                                       item.Type == ReplicationBatchItem.ReplicationItemType.DocumentTombstone) &&                                      // We want to limit batch sizes to reasonable limits.                                      ((maxSizeToSend.HasValue && size > maxSizeToSend.Value.GetValue(SizeUnit.Bytes)) ||                                       (batchSize.HasValue && numberOfItemsSent > batchSize.Value)))                                  {                                      wasInterrupted = true;                                      break;                                  }                                    if (_stats.Storage.CurrentStats.InputCount % 16384 == 0)                                  {                                      // ReSharper disable once PossibleLossOfFraction                                      if ((_parent._parent.MinimalHeartbeatInterval / 2) < _stats.Storage.Duration.TotalMilliseconds)                                      {                                          wasInterrupted = true;                                          break;                                      }                                  }                              }                                _stats.Storage.RecordInputAttempt();                                _lastEtag = item.Etag;                                if (item.Data != null)                                  size += item.Data.Size;                              else if (item.Type == ReplicationBatchItem.ReplicationItemType.Attachment)                                  size += item.Stream.Length;                                if (AddReplicationItemToBatch(item' _stats.Storage))                                  numberOfItemsSent++;                          }                      }                        if (_log.IsInfoEnabled)                          _log.Info($"Found {_orderedReplicaItems.Count:#'#;;0} documents and {_replicaAttachmentStreams.Count} attachment's streams to replicate to {_parent.Node.FromString()}.");                        if (_orderedReplicaItems.Count == 0)                      {                          var hasModification = _lastEtag != _parent._lastSentDocumentEtag;                            // ensure that the other server is aware that we skipped                           // on (potentially a lot of) documents to send' and we update                          // the last etag they have from us on the other side                          _parent._lastSentDocumentEtag = _lastEtag;                          _parent._lastDocumentSentTime = DateTime.UtcNow;                          var changeVector = wasInterrupted ? null : DocumentsStorage.GetDatabaseChangeVector(documentsContext);                          _parent.SendHeartbeat(changeVector);                          return hasModification;                      }                        _parent.CancellationToken.ThrowIfCancellationRequested();                        try                      {                          using (_stats.Network.Start())                          {                              SendDocumentsBatch(documentsContext' _stats.Network);                          }                      }                      catch (OperationCanceledException)                      {                          if (_log.IsInfoEnabled)                              _log.Info("Received cancellation notification while sending document replication batch.");                          throw;                      }                      catch (Exception e)                      {                          if (_log.IsInfoEnabled)                              _log.Info("Failed to send document replication batch"' e);                          throw;                      }                      return true;                  }                  finally                  {                      foreach (var item in _orderedReplicaItems)                      {                          var value = item.Value;                          if (value.Type == ReplicationBatchItem.ReplicationItemType.Attachment)                          {                              // TODO: Why are we disposing here?                              // Shouldn't the all context be disposed here?                              // If not' should we dispose all strings here?                              value.Stream.Dispose();                          }                          else                          {                              value.Data?.Dispose(); //item.Value.Data is null if tombstone                          }                      }                      _orderedReplicaItems.Clear();                      _replicaAttachmentStreams.Clear();                  }              }
Magic Number,Raven.Server.Documents.Replication,ReplicationDocumentSender,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationDocumentSender.cs,WriteDocumentToServer,The following statement contains a magic number: using(Slice.From(context.Allocator' item.ChangeVector' out var cv))              fixed (byte* pTemp = _tempBuffer)              {                  var requiredSize = sizeof(byte) + // type                                sizeof(int) + //  size of change vector                                cv.Size +                                sizeof(short) + // transaction marker                                sizeof(long) + // Last modified ticks                                sizeof(DocumentFlags) +                                sizeof(int) + // size of document ID                                item.Id.Size +                                sizeof(int); // size of document                    if (requiredSize > _tempBuffer.Length)                      ThrowTooManyChangeVectorEntries(item);                  int tempBufferPos = 0;                  pTemp[tempBufferPos++] = (byte)item.Type;                    *(int*)(pTemp + tempBufferPos) = cv.Size;                  tempBufferPos += sizeof(int);                    Memory.Copy(pTemp + tempBufferPos' cv.Content.Ptr' cv.Size);                  tempBufferPos += cv.Size;                    *(short*)(pTemp + tempBufferPos) = item.TransactionMarker;                  tempBufferPos += sizeof(short);                    *(long*)(pTemp + tempBufferPos) = item.LastModifiedTicks;                  tempBufferPos += sizeof(long);                    *(DocumentFlags*)(pTemp + tempBufferPos) = item.Flags;                  tempBufferPos += sizeof(DocumentFlags);                    *(int*)(pTemp + tempBufferPos) = item.Id.Size;                  tempBufferPos += sizeof(int);                    Memory.Copy(pTemp + tempBufferPos' item.Id.Buffer' item.Id.Size);                  tempBufferPos += item.Id.Size;                    if (item.Data != null)                  {                      *(int*)(pTemp + tempBufferPos) = item.Data.Size;                      tempBufferPos += sizeof(int);                        var docReadPos = 0;                      while (docReadPos < item.Data.Size)                      {                          var sizeToCopy = Math.Min(item.Data.Size - docReadPos' _tempBuffer.Length - tempBufferPos);                          if (sizeToCopy == 0) // buffer is full' need to flush it                          {                              _stream.Write(_tempBuffer' 0' tempBufferPos);                              tempBufferPos = 0;                              continue;                          }                          Memory.Copy(pTemp + tempBufferPos' item.Data.BasePointer + docReadPos' sizeToCopy);                          tempBufferPos += sizeToCopy;                          docReadPos += sizeToCopy;                      }                  }                  else                  {                      int dataSize;                      if (item.Type == ReplicationBatchItem.ReplicationItemType.DocumentTombstone)                          dataSize = -1;                      else if ((item.Flags & DocumentFlags.DeleteRevision) == DocumentFlags.DeleteRevision)                          dataSize = -2;                      else                          throw new InvalidDataException("Cannot write document with empty data.");                      *(int*)(pTemp + tempBufferPos) = dataSize;                      tempBufferPos += sizeof(int);                        if (item.Collection == null) //precaution                          throw new InvalidDataException("Cannot write item with empty collection name...");                        *(int*)(pTemp + tempBufferPos) = item.Collection.Size;                      tempBufferPos += sizeof(int);                      Memory.Copy(pTemp + tempBufferPos' item.Collection.Buffer' item.Collection.Size);                      tempBufferPos += item.Collection.Size;                  }                    _stream.Write(_tempBuffer' 0' tempBufferPos);              }
Magic Number,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,GetLastProcessedDocumentTombstonesPerCollection,The following statement contains a magic number: const int maxTombstones = 16 * 1024;
Magic Number,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,GetLastProcessedDocumentTombstonesPerCollection,The following statement contains a magic number: const int maxTombstones = 16 * 1024;
Magic Number,Raven.Server.Documents.Replication,ReplicationLoader,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,GetSizeOfMajority,The following statement contains a magic number: return _numberOfSiblings / 2 + 1;
Magic Number,Raven.Server.Documents.Replication,ConnectionShutdownInfo,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,Reset,The following statement contains a magic number: NextTimeout = TimeSpan.FromMilliseconds(500);
Magic Number,Raven.Server.Documents.Replication,ConnectionShutdownInfo,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,OnError,The following statement contains a magic number: while (Errors.Count > 25)                      Errors.TryDequeue(out _);
Magic Number,Raven.Server.Documents.Replication,ConnectionShutdownInfo,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ReplicationLoader.cs,OnError,The following statement contains a magic number: NextTimeout = TimeSpan.FromMilliseconds(Math.Min(NextTimeout.TotalMilliseconds * 4' MaxConnectionTimeout));
Magic Number,Raven.Server.Documents.Replication,ResolveConflictOnReplicationConfigurationChange,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\ResolveConflictOnReplicationConfigurationChange.cs,ValidatedResolveByScriptInput,The following statement contains a magic number: if (conflicts.Count < 2)                  return false;
Magic Number,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,RevisionsStorage,The following statement contains a magic number: ConflictConfiguration = new RevisionsConfiguration              {                  Default = new RevisionsCollectionConfiguration                  {                      MinimumRevisionAgeToKeep = TimeSpan.FromDays(45)'                      Disabled = false                  }              };
Magic Number,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,EnsureRevisionTableCreated,The following statement contains a magic number: if (_tableCreated.Add(collection.Name))                  RevisionsSchema.Create(tx' tableName' 16);
Magic Number,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,RevisionsStorage,The following statement contains a magic number: RevisionsSchema.DefineIndex(new TableSchema.SchemaIndexDef              {                  StartIndex = (int)Columns.LowerId'                  Count = 3'                  Name = IdAndEtagSlice'                  IsGlobal = true              });
Magic Number,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,RevisionsStorage,The following statement contains a magic number: RevisionsSchema.DefineIndex(new TableSchema.SchemaIndexDef              {                  StartIndex = (int)Columns.Resolved'                  Count = 2'                  Name = ResolvedFlagByEtagSlice'                  IsGlobal = true              });
Magic Number,Raven.Server.Documents.Revisions,RevisionsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Revisions\RevisionsStorage.cs,CreateTrees,The following statement contains a magic number: TombstonesSchema.Create(tx' RevisionsTombstonesSlice' 16);
Magic Number,Raven.Server.Documents.Subscriptions,SubscriptionConnectionState,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionConnectionState.cs,RegisterSubscriptionConnection,The following statement contains a magic number: return new DisposableAction(() =>              {                  while (_recentConnections.Count > 10)                  {                      _recentConnections.TryDequeue(out SubscriptionConnection _);                  }                  _recentConnections.Enqueue(incomingConnection);                  Interlocked.CompareExchange(ref _currentConnection' null' incomingConnection);                  ConnectionInUse.Set();              });
Magic Number,Raven.Server.Documents.Subscriptions,SubscriptionConnectionState,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionConnectionState.cs,RegisterRejectedConnection,The following statement contains a magic number: while (_rejectedConnections.Count > 10)              {                  _rejectedConnections.TryDequeue(out SubscriptionConnection _);              }
Magic Number,Raven.Server.Documents.Subscriptions,SubscriptionPatchDocument,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Subscriptions\SubscriptionPatchDocument.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = Script.GetHashCode();                  foreach (var function in DeclaredFunctions)                  {                      hashCode = (hashCode * 397) ^ (function.GetHashCode());                  }                  return hashCode;              }
Magic Number,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The following statement contains a magic number: var timeout = TimeSpan.FromMilliseconds(16);
Magic Number,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The following statement contains a magic number: do              {                  try                  {                      DisposeOnDisconnect = await _connectionState.RegisterSubscriptionConnection(this' timeout);                      shouldRetry = false;                  }                  catch (TimeoutException)                  {                      if (timeout == TimeSpan.Zero && _logger.IsInfoEnabled)                      {                          _logger.Info(                              $"Subscription Id {SubscriptionId} from IP {TcpConnection.TcpClient.Client.RemoteEndPoint} starts to wait until previous connection from {_connectionState.Connection?.TcpConnection.TcpClient.Client.RemoteEndPoint} is released");                      }                      timeout = TimeSpan.FromMilliseconds(Math.Max(250' (long)_options.TimeToWaitBeforeConnectionRetry.TotalMilliseconds / 2));                      await SendHeartBeat();                      shouldRetry = true;                  }              } while (shouldRetry);
Magic Number,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,InitAsync,The following statement contains a magic number: do              {                  try                  {                      DisposeOnDisconnect = await _connectionState.RegisterSubscriptionConnection(this' timeout);                      shouldRetry = false;                  }                  catch (TimeoutException)                  {                      if (timeout == TimeSpan.Zero && _logger.IsInfoEnabled)                      {                          _logger.Info(                              $"Subscription Id {SubscriptionId} from IP {TcpConnection.TcpClient.Client.RemoteEndPoint} starts to wait until previous connection from {_connectionState.Connection?.TcpConnection.TcpClient.Client.RemoteEndPoint} is released");                      }                      timeout = TimeSpan.FromMilliseconds(Math.Max(250' (long)_options.TimeToWaitBeforeConnectionRetry.TotalMilliseconds / 2));                      await SendHeartBeat();                      shouldRetry = true;                  }              } while (shouldRetry);
Magic Number,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ReportExceptionToClient,The following statement contains a magic number: if (recursionDepth == 2)                  return;
Magic Number,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,ProcessSubscriptionAsync,The following statement contains a magic number: using (DisposeOnDisconnect)              using (RegisterForNotificationOnNewDocuments())              {                  var replyFromClientTask = GetReplyFromClientAsync();                                    string subscriptionChangeVectorBeforeCurrentBatch = SubscriptionState.ChangeVectorForNextBatchStartingPoint;                    _startEtag = GetStartEtagForSubscription(SubscriptionState);                  _filterAndProjectionScript = SetupFilterAndProjectionScript();                  _documentsFetcher = new SubscriptionDocumentsFetcher(TcpConnection.DocumentDatabase' _options.MaxDocsPerBatch' SubscriptionId' TcpConnection.TcpClient.Client.RemoteEndPoint' Collection' Revisions' SubscriptionState' _filterAndProjectionScript);                    while (CancellationTokenSource.IsCancellationRequested == false)                  {                      _buffer.SetLength(0);                        using (TcpConnection.DocumentDatabase.DocumentsStorage.ContextPool.AllocateOperationContext(out DocumentsOperationContext docsContext))                      {                          var sendingCurrentBatchStopwatch = Stopwatch.StartNew();                            var anyDocumentsSentInCurrentIteration = await TrySendingBatchToClient(docsContext' sendingCurrentBatchStopwatch);                            if (anyDocumentsSentInCurrentIteration == false)                          {                              if (_logger.IsInfoEnabled)                              {                                  _logger.Info(                                      $"Did not find any documents to send for subscription {Options.SubscriptionName}");                              }                                                            await TcpConnection.DocumentDatabase.SubscriptionStorage.AcknowledgeBatchProcessed(SubscriptionId'                                  Options.SubscriptionName'                                  // if this is a new subscription that we sent anything in this iteration'                                   // _lastChangeVector is null' so let's not change it                                  _lastChangeVector ??                                       nameof(Client.Constants.Documents.SubscriptionChangeVectorSpecialStates.DoNotChange)'                                  subscriptionChangeVectorBeforeCurrentBatch);                                                                                          subscriptionChangeVectorBeforeCurrentBatch = _lastChangeVector?? SubscriptionState.ChangeVectorForNextBatchStartingPoint;                                if (sendingCurrentBatchStopwatch.ElapsedMilliseconds > 1000)                                  await SendHeartBeat();                                using (docsContext.OpenReadTransaction())                              {                                  long globalEtag = TcpConnection.DocumentDatabase.DocumentsStorage.GetLastDocumentEtag(docsContext' Collection);                                    if (globalEtag > _startEtag)                                      continue;                              }                                                            AssertCloseWhenNoDocsLeft();                                if (await WaitForChangedDocuments(replyFromClientTask))                                  continue;                          }                      }                        (replyFromClientTask' subscriptionChangeVectorBeforeCurrentBatch) =                           await WaitForClientAck(replyFromClientTask' subscriptionChangeVectorBeforeCurrentBatch);                  }                    CancellationTokenSource.Token.ThrowIfCancellationRequested();              }
Magic Number,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,WaitForClientAck,The following statement contains a magic number: while (true)              {                  var result = await Task.WhenAny(replyFromClientTask'                      TimeoutManager.WaitFor(TimeSpan.FromMilliseconds(5000)' CancellationTokenSource.Token)).ConfigureAwait(false);                  CancellationTokenSource.Token.ThrowIfCancellationRequested();                  if (result == replyFromClientTask)                  {                      clientReply = await replyFromClientTask;                      if (clientReply.Type == SubscriptionConnectionClientMessage.MessageType.DisposedNotification)                      {                          CancellationTokenSource.Cancel();                          break;                      }                      replyFromClientTask = GetReplyFromClientAsync();                      break;                  }                  await SendHeartBeat();                  await SendNoopAck();              }
Magic Number,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,TrySendingBatchToClient,The following statement contains a magic number: using (var writer = new BlittableJsonTextWriter(docsContext' _buffer))              {                  using (docsContext.OpenReadTransaction())                  {                      foreach (var result in _documentsFetcher.GetDataToSend(docsContext' _startEtag))                      {                          _startEtag = result.Doc.Etag;                          _lastChangeVector = string.IsNullOrEmpty(SubscriptionState.ChangeVectorForNextBatchStartingPoint)                              ? result.Doc.ChangeVector                              : ChangeVectorUtils.MergeVectors(result.Doc.ChangeVector' SubscriptionState.ChangeVectorForNextBatchStartingPoint);                            if (result.Doc.Data == null)                          {                              if (sendingCurrentBatchStopwatch.ElapsedMilliseconds > 1000)                              {                                  await SendHeartBeat();                                  sendingCurrentBatchStopwatch.Restart();                              }                                continue;                          }                            anyDocumentsSentInCurrentIteration = true;                          writer.WriteStartObject();                            writer.WritePropertyName(docsContext.GetLazyStringForFieldWithCaching(TypeSegment));                          writer.WriteValue(BlittableJsonToken.String' docsContext.GetLazyStringForFieldWithCaching(DataSegment));                          writer.WriteComma();                          writer.WritePropertyName(docsContext.GetLazyStringForFieldWithCaching(DataSegment));                          result.Doc.EnsureMetadata();                            if (result.Exception != null)                          {                              var metadata = result.Doc.Data[Client.Constants.Documents.Metadata.Key];                              writer.WriteValue(BlittableJsonToken.StartObject'                                  docsContext.ReadObject(new DynamicJsonValue                                  {                                      [Client.Constants.Documents.Metadata.Key] = metadata                                  }' result.Doc.Id)                              );                              writer.WriteComma();                              writer.WritePropertyName(docsContext.GetLazyStringForFieldWithCaching(ExceptionSegment));                              writer.WriteValue(BlittableJsonToken.String' docsContext.GetLazyStringForFieldWithCaching(result.Exception.ToString()));                          }                          else                          {                              writer.WriteDocument(docsContext' result.Doc' metadataOnly: false);                          }                            writer.WriteEndObject();                          docsToFlush++;                            // perform flush for current batch after 1000ms of running or 1 MB                          if (_buffer.Length > Constants.Size.Megabyte ||                              sendingCurrentBatchStopwatch.ElapsedMilliseconds > 1000)                          {                              if (docsToFlush > 0)                              {                                  await FlushDocsToClient(writer' docsToFlush);                                  docsToFlush = 0;                                  sendingCurrentBatchStopwatch.Restart();                              }                              else                              {                                  await SendHeartBeat();                              }                          }                      }                  }                    if (anyDocumentsSentInCurrentIteration)                  {                      docsContext.Write(writer' new DynamicJsonValue                      {                          [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.EndOfBatch)                      });                        await FlushDocsToClient(writer' docsToFlush' true);                      if (_logger.IsInfoEnabled)                      {                          _logger.Info(                              $"Finished sending a batch with {docsToFlush} documents for subscription {Options.SubscriptionName}");                      }                  }              }
Magic Number,Raven.Server.Documents.TcpHandlers,SubscriptionConnection,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\TcpHandlers\SubscriptionConnection.cs,TrySendingBatchToClient,The following statement contains a magic number: using (var writer = new BlittableJsonTextWriter(docsContext' _buffer))              {                  using (docsContext.OpenReadTransaction())                  {                      foreach (var result in _documentsFetcher.GetDataToSend(docsContext' _startEtag))                      {                          _startEtag = result.Doc.Etag;                          _lastChangeVector = string.IsNullOrEmpty(SubscriptionState.ChangeVectorForNextBatchStartingPoint)                              ? result.Doc.ChangeVector                              : ChangeVectorUtils.MergeVectors(result.Doc.ChangeVector' SubscriptionState.ChangeVectorForNextBatchStartingPoint);                            if (result.Doc.Data == null)                          {                              if (sendingCurrentBatchStopwatch.ElapsedMilliseconds > 1000)                              {                                  await SendHeartBeat();                                  sendingCurrentBatchStopwatch.Restart();                              }                                continue;                          }                            anyDocumentsSentInCurrentIteration = true;                          writer.WriteStartObject();                            writer.WritePropertyName(docsContext.GetLazyStringForFieldWithCaching(TypeSegment));                          writer.WriteValue(BlittableJsonToken.String' docsContext.GetLazyStringForFieldWithCaching(DataSegment));                          writer.WriteComma();                          writer.WritePropertyName(docsContext.GetLazyStringForFieldWithCaching(DataSegment));                          result.Doc.EnsureMetadata();                            if (result.Exception != null)                          {                              var metadata = result.Doc.Data[Client.Constants.Documents.Metadata.Key];                              writer.WriteValue(BlittableJsonToken.StartObject'                                  docsContext.ReadObject(new DynamicJsonValue                                  {                                      [Client.Constants.Documents.Metadata.Key] = metadata                                  }' result.Doc.Id)                              );                              writer.WriteComma();                              writer.WritePropertyName(docsContext.GetLazyStringForFieldWithCaching(ExceptionSegment));                              writer.WriteValue(BlittableJsonToken.String' docsContext.GetLazyStringForFieldWithCaching(result.Exception.ToString()));                          }                          else                          {                              writer.WriteDocument(docsContext' result.Doc' metadataOnly: false);                          }                            writer.WriteEndObject();                          docsToFlush++;                            // perform flush for current batch after 1000ms of running or 1 MB                          if (_buffer.Length > Constants.Size.Megabyte ||                              sendingCurrentBatchStopwatch.ElapsedMilliseconds > 1000)                          {                              if (docsToFlush > 0)                              {                                  await FlushDocsToClient(writer' docsToFlush);                                  docsToFlush = 0;                                  sendingCurrentBatchStopwatch.Restart();                              }                              else                              {                                  await SendHeartBeat();                              }                          }                      }                  }                    if (anyDocumentsSentInCurrentIteration)                  {                      docsContext.Write(writer' new DynamicJsonValue                      {                          [nameof(SubscriptionConnectionServerMessage.Type)] = nameof(SubscriptionConnectionServerMessage.MessageType.EndOfBatch)                      });                        await FlushDocsToClient(writer' docsToFlush' true);                      if (_logger.IsInfoEnabled)                      {                          _logger.Info(                              $"Finished sending a batch with {docsToFlush} documents for subscription {Options.SubscriptionName}");                      }                  }              }
Magic Number,Raven.Server.Extensions,PropertyPathExpressionVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\ExpressionExtensions.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.Name != "Select" && node.Arguments.Count != 2)                      throw new InvalidOperationException("No idea how to deal with convert " + node + " to a member expression");
Magic Number,Raven.Server.Extensions,HttpExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\HttpExtensions.cs,ExtractNodeUrlFromRequest,The following statement contains a magic number: if (request != null)              {                  var uriBuilder = new UriBuilder(                      request.Scheme'                      request.Host.Host'                      request.Host.Port ?? 8080'                      string.Empty);                  requestUrl = uriBuilder.ToString().TrimEnd('/');              }
Magic Number,Raven.Server.Extensions,WhoIsLocking,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,The following statement contains a magic number: try              {                  // Let the restart manager know what files we’re interested in                  var pathStrings = new[]{filePath};                  rv = RmRegisterResources(sessionHandle'                                           (uint) pathStrings.Length' pathStrings'                                           0' null' 0' null);                  if (rv != 0)                      throw new Win32Exception(Marshal.GetLastWin32Error()' "Failed to RmRegisterResources (sessionHandle=" + sessionHandle + ")");                    // Ask the restart manager what other applications                   // are using those files                  const int ERROR_MORE_DATA = 234;                  uint pnProcInfo = 0'                       lpdwRebootReasons = RmRebootReasonNone;                  rv = RmGetList(sessionHandle' out uint pnProcInfoNeeded'                                 ref pnProcInfo' null' ref lpdwRebootReasons);                  if (rv == ERROR_MORE_DATA)                  {                      // Create an array to store the process results                      var processInfo = new RM_PROCESS_INFO[pnProcInfoNeeded];                      pnProcInfo = (uint) processInfo.Length;                        // Get the list                      rv = RmGetList(sessionHandle' out pnProcInfoNeeded'                                     ref pnProcInfo' processInfo' ref lpdwRebootReasons);                      if (rv == 0)                      {                          // Enumerate all of the results and add them to the                           // list to be returned                          for (int i = 0; i < pnProcInfo; i++)                          {                              try                              {                                  processes.Add(Process.GetProcessById(processInfo[i].Process.dwProcessId));                              }                              catch (ArgumentException)                              {                                  // in case the process is no longer running                              }                          }                      }                      else                          throw new Win32Exception(Marshal.GetLastWin32Error()' "Failed to RmGetList (sessionHandle=" + sessionHandle + ")");                  }                  else if (rv != 0)                      throw new Win32Exception(Marshal.GetLastWin32Error()' "Failed to RmGetList (sessionHandle=" + sessionHandle + ")");              }              finally              {                  // Close the resource manager                  RmEndSession(sessionHandle);              }
Magic Number,Raven.Server.Indexing,VoronIndexOutput,C:\repos\ravendb_ravendb\src\Raven.Server\Indexing\VoronIndexOutput.cs,VoronIndexOutput,The following statement contains a magic number: if (options.EncryptionEnabled)                  _file = new TempCryptoStream(_fileTempPath);              else                  _file = new FileStream(_fileTempPath' FileMode.CreateNew' FileAccess.ReadWrite' FileShare.ReadWrite' 4096' FileOptions.DeleteOnClose);
Magic Number,Raven.Server.Json,BlittableJsonTraverser,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverser.cs,TryRead,The following statement contains a magic number: switch (path[propertySegmentLength])              {                  case PropertySeparator:                      var pathSegment = path.Subsegment(propertySegmentLength + 1);                        if (reader is BlittableJsonReaderObject propertyInnerObject)                      {                          if (TryRead(propertyInnerObject' pathSegment' out result' out leftPath))                              return true;                            if (result == null)                              result = reader;                            return false;                      }                        leftPath = pathSegment;                      result = reader;                      return false;                  case CollectionSeparatorStartBracket:                        var type = GetCollectionSeparatorType(path' propertySegmentLength);                        switch (type)                      {                          case CollectionSeparatorType.BracketsOnly:                              leftPath = string.Empty; // we are done with this path                                if (reader is BlittableJsonReaderArray innerArray)                              {                                  result = ReadArray(innerArray' leftPath);                                  return true;                              }                                result = null;                              leftPath = path;                              return false;                          case CollectionSeparatorType.MultiBrackets:                              leftPath = path.Subsegment(propertySegmentLength + 2);                                if (reader is BlittableJsonReaderArray multiDimensionalArray)                              {                                  result = ReadArray(multiDimensionalArray' leftPath);                                  leftPath = string.Empty; // we consume and handle internally the rest of it                                  return true;                              }                                result = reader;                              return false;                          case CollectionSeparatorType.BracketsAndProperty:                              leftPath = path.Subsegment(propertySegmentLength + CollectionAndPropertySeparators.Length);                                if (reader is BlittableJsonReaderArray collectionInnerArray)                              {                                  result = ReadArray(collectionInnerArray' leftPath);                                  leftPath = string.Empty; // we consume and handle internally the rest of it                                  return true;                              }                                if (reader is BlittableJsonReaderObject nested)                              {                                  return ReadNestedObjects(nested' leftPath' out result' out leftPath);                              }                              result = reader;                              return false;                          default:                              throw new NotSupportedException($"Invalid collection separator in a given path: {path}");                      }                                        default:                      throw new NotSupportedException($"Unhandled separator character: {path[propertySegmentLength]}");              }
Magic Number,Raven.Server.Json,BlittableJsonTraverser,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverser.cs,GetCollectionSeparatorType,The following statement contains a magic number: if (path[propertySegmentLength + 2] != '.')              {                  if (path[propertySegmentLength + 2] == CollectionSeparatorStartBracket)                      return CollectionSeparatorType.MultiBrackets;                    return CollectionSeparatorType.Invalid;              }
Magic Number,Raven.Server.Json,BlittableJsonTraverser,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverser.cs,GetCollectionSeparatorType,The following statement contains a magic number: if (path[propertySegmentLength + 2] != '.')              {                  if (path[propertySegmentLength + 2] == CollectionSeparatorStartBracket)                      return CollectionSeparatorType.MultiBrackets;                    return CollectionSeparatorType.Invalid;              }
Magic Number,Raven.Server.Json,BlittableJsonTraverser,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverser.cs,GetNextToken,The following statement contains a magic number: if (path[0] == '"' || path[0] == '\'')              {                  consumed = SkipQoute(path[0]' 1);                  return path.Subsegment(1' consumed - 2);              }
Magic Number,Raven.Server.Json,BlittableJsonTraverser,C:\repos\ravendb_ravendb\src\Raven.Server\Json\BlittableJsonTraverser.cs,ReadArray,The following statement contains a magic number: for (int i = 0; i < array.Length; i++)              {                  var item = array[i];                  if (item is BlittableJsonReaderObject arrayObject)                  {                      if (BlittableJsonTraverserHelper.TryRead(this' arrayObject' pathSegment' out var result))                      {                          if (result is IEnumerable enumerable && result is string == false)                          {                              foreach (var nestedItem in enumerable)                              {                                  yield return nestedItem;                              }                          }                          else                          {                              yield return result;                          }                      }                  }                  else                  {                      if (item is BlittableJsonReaderArray arrayReader)                      {                          var type = GetCollectionSeparatorType(pathSegment' 0);                            StringSegment subSegment;                          switch (type)                          {                              case CollectionSeparatorType.BracketsAndProperty:                                  subSegment = pathSegment.Subsegment(CollectionAndPropertySeparators.Length);                                  break;                              case CollectionSeparatorType.MultiBrackets:                                  subSegment = pathSegment.Subsegment(2);                                  break;                              case CollectionSeparatorType.BracketsOnly:                                  subSegment = string.Empty;                                  break;                              default:                                  throw new NotSupportedException($"Invalid collection separator in a given path: {pathSegment}");                          }                            foreach (var nestedItem in ReadArray(arrayReader' subSegment))                          {                              yield return nestedItem;                          }                      }                      else                      {                          yield return item;                      }                  }              }
Magic Number,Raven.Server.Json,LazyStringReader,C:\repos\ravendb_ravendb\src\Raven.Server\Json\LazyStringValueReader.cs,GetTextReaderFor,The following statement contains a magic number: if (value.Length < 2048 && _reader == null)                  return new ReusableStringReader(GetStringFor(value));
Magic Number,Raven.Server.NotificationCenter.BackgroundWork,Stats,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\BackgroundWork\DatabaseStatsSender.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = CountOfDocuments.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ LastEtag.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexingErrors.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfStaleIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ GlobalChangeVector.GetHashCode();                      hashCode = (hashCode * 397) ^ (Collections != null ? Collections.GetHashCode() : 0);                      return hashCode;                  }
Magic Number,Raven.Server.NotificationCenter.BackgroundWork,Stats,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\BackgroundWork\DatabaseStatsSender.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = CountOfDocuments.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ LastEtag.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexingErrors.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfStaleIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ GlobalChangeVector.GetHashCode();                      hashCode = (hashCode * 397) ^ (Collections != null ? Collections.GetHashCode() : 0);                      return hashCode;                  }
Magic Number,Raven.Server.NotificationCenter.BackgroundWork,Stats,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\BackgroundWork\DatabaseStatsSender.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = CountOfDocuments.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ LastEtag.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexingErrors.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfStaleIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ GlobalChangeVector.GetHashCode();                      hashCode = (hashCode * 397) ^ (Collections != null ? Collections.GetHashCode() : 0);                      return hashCode;                  }
Magic Number,Raven.Server.NotificationCenter.BackgroundWork,Stats,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\BackgroundWork\DatabaseStatsSender.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = CountOfDocuments.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ LastEtag.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexingErrors.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfStaleIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ GlobalChangeVector.GetHashCode();                      hashCode = (hashCode * 397) ^ (Collections != null ? Collections.GetHashCode() : 0);                      return hashCode;                  }
Magic Number,Raven.Server.NotificationCenter.BackgroundWork,Stats,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\BackgroundWork\DatabaseStatsSender.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = CountOfDocuments.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ LastEtag.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexingErrors.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfStaleIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ GlobalChangeVector.GetHashCode();                      hashCode = (hashCode * 397) ^ (Collections != null ? Collections.GetHashCode() : 0);                      return hashCode;                  }
Magic Number,Raven.Server.NotificationCenter.BackgroundWork,Stats,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\BackgroundWork\DatabaseStatsSender.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = CountOfDocuments.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ LastEtag.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfIndexingErrors.GetHashCode();                      hashCode = (hashCode * 397) ^ CountOfStaleIndexes.GetHashCode();                      hashCode = (hashCode * 397) ^ GlobalChangeVector.GetHashCode();                      hashCode = (hashCode * 397) ^ (Collections != null ? Collections.GetHashCode() : 0);                      return hashCode;                  }
Magic Number,Raven.Server.NotificationCenter,NotificationCenterWebSocketWriter,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationCenterWebsocketWriter.cs,WriteNotifications,The following statement contains a magic number: var receiveBuffer = new ArraySegment<byte>(new byte[1024]);
Magic Number,Raven.Server.NotificationCenter,NotificationCenterWebSocketWriter,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationCenterWebsocketWriter.cs,WriteNotifications,The following statement contains a magic number: try              {                  using (_notificationsBase.TrackActions(asyncQueue' this))                  {                      while (_resourceShutdown.IsCancellationRequested == false)                      {                          // we use this to detect client-initialized closure                          if (receive.IsCompleted)                          {                              break;                          }                            var tuple = await asyncQueue.TryDequeueAsync(TimeSpan.FromSeconds(5));                          if (tuple.Item1 == false)                          {                              await _webSocket.SendAsync(WebSocketHelper.Heartbeat' WebSocketMessageType.Text' true' _resourceShutdown);                              continue;                          }                            if(shouldWriteByDb != null &&                               shouldWriteByDb((string)tuple.Item2["Database"]) == false)                              continue;                            await WriteToWebSocket(tuple.Item2);                      }                  }              }              catch (OperationCanceledException)              {              }
Magic Number,Raven.Server.NotificationCenter,NotificationsStorage,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\NotificationsStorage.cs,Initialize,The following statement contains a magic number: using (contextPool.AllocateOperationContext(out TransactionOperationContext context))              using (var tx = _environment.WriteTransaction(context.PersistentContext))              {                  _actionsSchema.Create(tx' NotificationsSchema.NotificationsTree' 16);                    tx.Commit();              }
Magic Number,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,Add,The following statement contains a magic number: if (now - update < TimeSpan.FromSeconds(15))                  return;
Magic Number,Raven.Server.NotificationCenter,Paging,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Paging.cs,Add,The following statement contains a magic number: while (_pagingQueue.Count > 50)                  _pagingQueue.TryDequeue(out _);
Magic Number,Raven.Server.NotificationCenter.Notifications,ModifiedCollection,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\DatabaseStatsChanged.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = Name?.GetHashCode() ?? 0;                      hashCode = (hashCode * 397) ^ Count.GetHashCode();                      hashCode = (hashCode * 397) ^ LastDocumentChangeVector.GetHashCode();                      return hashCode;                  }
Magic Number,Raven.Server.NotificationCenter.Notifications,ModifiedCollection,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\DatabaseStatsChanged.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      var hashCode = Name?.GetHashCode() ?? 0;                      hashCode = (hashCode * 397) ^ Count.GetHashCode();                      hashCode = (hashCode * 397) ^ LastDocumentChangeVector.GetHashCode();                      return hashCode;                  }
Magic Number,Raven.Server.NotificationCenter.Notifications.Details,PagingPerformanceDetails,C:\repos\ravendb_ravendb\src\Raven.Server\NotificationCenter\Notifications\Details\PagingPerformanceDetails.cs,Update,The following statement contains a magic number: while (actionDetails.Count > 10)                  actionDetails.Dequeue();
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,Main,The following statement contains a magic number: do              {                  if (rerun)                  {                      Console.WriteLine("\nRestarting Server...");                      rerun = false;                        configuration = new RavenConfiguration(null' ResourceType.Server' CommandLineSwitches.CustomConfigPath);                        if (configurationArgs != null)                      {                          var argsAfterRestart = PostSetupCliArgumentsUpdater.Process(                              configurationArgs' configBeforeRestart' configuration);                            configuration.AddCommandLine(argsAfterRestart);                          configBeforeRestart = configuration;                      }                        configuration.Initialize();                  }                    try                  {                      using (var server = new RavenServer(configuration))                      {                          try                          {                              try                              {                                  server.OpenPipes();                              }                              catch (Exception e)                              {                                  if (Logger.IsInfoEnabled)                                      Logger.Info("Unable to OpenPipe. Admin Channel will not be available to the user"' e);                                  Console.WriteLine("Warning: Admin Channel is not available");                              }                              server.Initialize();                                if (CommandLineSwitches.PrintServerId)                                  Console.WriteLine($"Server ID is {server.ServerStore.GetServerId()}.");                                new RuntimeSettings(Console.Out).Print();                                if (CommandLineSwitches.LaunchBrowser)                                  BrowserHelper.OpenStudioInBrowser(server.ServerStore.GetNodeHttpServerUrl());                                new ClusterMessage(Console.Out' server.ServerStore).Print();                                var prevColor = Console.ForegroundColor;                              Console.Write("Server available on: ");                              Console.ForegroundColor = ConsoleColor.Green;                              Console.WriteLine($"{server.ServerStore.GetNodeHttpServerUrl()}");                              Console.ForegroundColor = prevColor;                                var tcpServerStatus = server.GetTcpServerStatus();                              prevColor = Console.ForegroundColor;                              Console.Write("Tcp listening on ");                              Console.ForegroundColor = ConsoleColor.Green;                              Console.WriteLine($"{string.Join("' "' tcpServerStatus.Listeners.Select(l => l.LocalEndpoint))}");                              Console.ForegroundColor = prevColor;                                Console.WriteLine("Server started' listening to requests...");                                prevColor = Console.ForegroundColor;                              Console.ForegroundColor = ConsoleColor.DarkGray;                              Console.WriteLine("TIP: type 'help' to list the available commands.");                              Console.ForegroundColor = prevColor;                                IsRunningNonInteractive = false;                              rerun = CommandLineSwitches.NonInteractive ||                                   configuration.Core.SetupMode == SetupMode.Initial ? RunAsNonInteractive() : RunInteractive(server);                                Console.WriteLine("Starting shut down...");                              if (Logger.IsInfoEnabled)                                  Logger.Info("Server is shutting down");                          }                          catch (Exception e)                          {                              if (Logger.IsOperationsEnabled)                                  Logger.Operations("Failed to initialize the server"' e);                              Console.WriteLine(e);                                return -1;                          }                      }                        Console.WriteLine("Shutdown completed");                  }                  catch (Exception e)                  {                      if (e.ToString().Contains(@"'WriteReqPool'") &&                          e.ToString().Contains("System.ObjectDisposedException")) // TODO : Remove this check in dotnet 2.0 - https://github.com/aspnet/KestrelHttpServer/issues/1231                      {                          Console.WriteLine("Ignoring Kestrel's Exception : 'Cannot access a disposed object. Object name: 'WriteReqPool'");                          Console.Out.Flush();                      }                      else                      {                          Console.WriteLine("Error during shutdown");                          Console.WriteLine(e);                          return -2;                      }                  }              } while (rerun);
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,Program,C:\repos\ravendb_ravendb\src\Raven.Server\Program.cs,WriteServerStatsAndWaitForEsc,The following statement contains a magic number: while (Console.KeyAvailable == false)              {                  var stats = RavenCli.MemoryStatsWithMemoryMappedInfo();                  var reqCounter = server.Metrics.Requests.RequestsPerSec;                    Console.Write($"\r {((i++ % 2) == 0 ? "*" : "+")} ");                    Console.Write($" {stats.WorkingSet'-14} ");                  Console.Write($" | {stats.TotalUnmanagedAllocations'-14} ");                  Console.Write($" | {stats.ManagedMemory'-14} ");                  Console.Write($" | {stats.TotalMemoryMapped'-17} ");                    Console.Write($"| {Math.Round(reqCounter.OneSecondRate' 1)'-14:#'#.#;;0} ");                    long allDocs = 0;                  foreach (var value in server.ServerStore.DatabasesLandlord.DatabasesCache.Values)                  {                      if (value.Status != TaskStatus.RanToCompletion)                          continue;                        try                      {                          allDocs += value.Result.DocumentsStorage.GetNumberOfDocuments();                      }                      catch (Exception)                      {                          // may run out of virtual address space' or just shutdown' etc                      }                  }                    Console.Write($"| {allDocs'14:#'#.#;;0}      ");                    for (int j = 0; j < 5 && Console.KeyAvailable == false; j++)                  {                      Thread.Sleep(100);                  }              }
Magic Number,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,DoActualCertificateRefresh,The following statement contains a magic number: try              {                  CertificateHolder newCertificate = null;                  try                  {                      newCertificate = LoadCertificate();                  }                  catch (Exception e)                  {                      if (Logger.IsOperationsEnabled)                          Logger.Operations("Tried to load certificate as part of refresh check' but got an error!"' e);                  }                  if (newCertificate == null)                  {                      if (Logger.IsOperationsEnabled)                          Logger.Operations("Tried to load certificate as part of refresh check' but got a null back' but got a valid certificate on startup!");                      return;                  }                    if (newCertificate.Certificate.Thumbprint != currentCertificate.Certificate.Thumbprint)                  {                      if (Interlocked.CompareExchange(ref Certificate' newCertificate' currentCertificate) == currentCertificate)                          _httpsConnectionAdapter.SetCertificate(newCertificate.Certificate);                      return;                  }                  if (Configuration.Core.SetupMode != SetupMode.LetsEncrypt)                      return;                    if (ServerStore.IsLeader() == false)                      return;                    // we need to see if there is already an ongoing process                  using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                  using (context.OpenReadTransaction())                  {                      var certUpdate = ServerStore.Cluster.GetItem(context' "server/cert");                      if (certUpdate != null                          && certUpdate.TryGet("Thumbprint"' out string thumbprint)                          && thumbprint != currentCertificate.Certificate.Thumbprint)                      {                          // we are already in the process of updating the certificate' so we need                          // to nudge all the nodes in the cluster in case we have a node that didn't                          // confirm to us but the time to replace has already passed.                          await ServerStore.SendToLeaderAsync(new RecheckStatusOfServerCertificateCommand());                          return;                      }                  }                        // same certificate' but now we need to see if we are need to auto update it                      var remainingDays = (currentCertificate.Certificate.NotAfter - DateTime.Now).TotalDays;                      if (remainingDays > 30)                          return; // nothing to do' the certs are the same and we have enough time                        // we want to setup all the renewals for Saturday so we'll have reduce the amount of cert renwals that are counted against our renewals                      // but if we have less than 20 days' we'll try anyway                      if (DateTime.Today.DayOfWeek != DayOfWeek.Saturday && remainingDays > 20)                          return;                    try                  {                      newCertificate = await RefreshLetsEncryptCertificate(currentCertificate);                  }                  catch (Exception e)                  {                      if (Logger.IsOperationsEnabled)                          Logger.Operations("Failed to update certificate from Lets Encrypt"' e);                      return;                  }                  await StartCertificateReplicationAsync(newCertificate.Certificate);              }              catch (Exception e)              {                  if (Logger.IsOperationsEnabled)                      Logger.Operations("Failure when trying to refresh certificate"' e);              }
Magic Number,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,DoActualCertificateRefresh,The following statement contains a magic number: try              {                  CertificateHolder newCertificate = null;                  try                  {                      newCertificate = LoadCertificate();                  }                  catch (Exception e)                  {                      if (Logger.IsOperationsEnabled)                          Logger.Operations("Tried to load certificate as part of refresh check' but got an error!"' e);                  }                  if (newCertificate == null)                  {                      if (Logger.IsOperationsEnabled)                          Logger.Operations("Tried to load certificate as part of refresh check' but got a null back' but got a valid certificate on startup!");                      return;                  }                    if (newCertificate.Certificate.Thumbprint != currentCertificate.Certificate.Thumbprint)                  {                      if (Interlocked.CompareExchange(ref Certificate' newCertificate' currentCertificate) == currentCertificate)                          _httpsConnectionAdapter.SetCertificate(newCertificate.Certificate);                      return;                  }                  if (Configuration.Core.SetupMode != SetupMode.LetsEncrypt)                      return;                    if (ServerStore.IsLeader() == false)                      return;                    // we need to see if there is already an ongoing process                  using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                  using (context.OpenReadTransaction())                  {                      var certUpdate = ServerStore.Cluster.GetItem(context' "server/cert");                      if (certUpdate != null                          && certUpdate.TryGet("Thumbprint"' out string thumbprint)                          && thumbprint != currentCertificate.Certificate.Thumbprint)                      {                          // we are already in the process of updating the certificate' so we need                          // to nudge all the nodes in the cluster in case we have a node that didn't                          // confirm to us but the time to replace has already passed.                          await ServerStore.SendToLeaderAsync(new RecheckStatusOfServerCertificateCommand());                          return;                      }                  }                        // same certificate' but now we need to see if we are need to auto update it                      var remainingDays = (currentCertificate.Certificate.NotAfter - DateTime.Now).TotalDays;                      if (remainingDays > 30)                          return; // nothing to do' the certs are the same and we have enough time                        // we want to setup all the renewals for Saturday so we'll have reduce the amount of cert renwals that are counted against our renewals                      // but if we have less than 20 days' we'll try anyway                      if (DateTime.Today.DayOfWeek != DayOfWeek.Saturday && remainingDays > 20)                          return;                    try                  {                      newCertificate = await RefreshLetsEncryptCertificate(currentCertificate);                  }                  catch (Exception e)                  {                      if (Logger.IsOperationsEnabled)                          Logger.Operations("Failed to update certificate from Lets Encrypt"' e);                      return;                  }                  await StartCertificateReplicationAsync(newCertificate.Certificate);              }              catch (Exception e)              {                  if (Logger.IsOperationsEnabled)                      Logger.Operations("Failure when trying to refresh certificate"' e);              }
Magic Number,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,StartListeners,The following statement contains a magic number: try              {                  bool successfullyBoundToAtLeastOne = false;                  var errors = new List<Exception>();                  foreach (var ipAddress in GetListenIpAddresses(host))                  {                      if (Logger.IsInfoEnabled)                          Logger.Info($"RavenDB TCP is configured to use {Configuration.Core.TcpServerUrls} and bind to {ipAddress} at {port}");                        var listener = new TcpListener(ipAddress' status.Port != 0 ? status.Port : port);                      status.Listeners.Add(listener);                      listener.Server.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' true);                      try                      {                          listener.Start();                      }                      catch (Exception ex)                      {                          var msg = "Unable to start tcp listener on " + ipAddress + " on port " + port;                          errors.Add(new IOException(msg' ex));                          if (Logger.IsOperationsEnabled)                              Logger.Operations(msg' ex);                          continue;                      }                      successfullyBoundToAtLeastOne = true;                      var listenerLocalEndpoint = (IPEndPoint)listener.LocalEndpoint;                      status.Port = listenerLocalEndpoint.Port;                      // when binding to multiple interfaces and the port is 0' use                      // the same port across all interfaces                      port = listenerLocalEndpoint.Port;                      for (int i = 0; i < 4; i++)                      {                          ListenToNewTcpConnection(listener);                      }                  }                    if (successfullyBoundToAtLeastOne == false)                  {                      if (errors.Count == 1)                          throw errors[0];                      throw new AggregateException(errors);                  }              }              catch (Exception e)              {                  if (_tcpLogger.IsOperationsEnabled)                  {                      _tcpLogger.Operations($"Failed to start tcp server on tcp://{host}:{port}' tcp listening disabled"' e);                  }                    foreach (var tcpListener in status.Listeners)                  {                      tcpListener.Stop();                  }                    throw;              }
Magic Number,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The following statement contains a magic number: Task.Run(async () =>              {                  TcpClient tcpClient;                  try                  {                      tcpClient = await listener.AcceptTcpClientAsync();                  }                  catch (ObjectDisposedException)                  {                          // shutting down                          return;                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failed to accept new tcp connection"' e);                      }                      return;                  }                  ListenToNewTcpConnection(listener);                  try                  {                      tcpClient.NoDelay = true;                      tcpClient.ReceiveBufferSize = 32 * 1024;                      tcpClient.SendBufferSize = 4096;                      Stream stream = tcpClient.GetStream();                      stream = await AuthenticateAsServerIfSslNeeded(stream);                      var tcp = new TcpConnectionOptions                      {                          ContextPool = _tcpContextPool'                          Stream = stream'                          TcpClient = tcpClient'                          PinnedBuffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance()                      };                        try                      {                          TcpConnectionHeaderMessage header;                          using (_tcpContextPool.AllocateOperationContext(out JsonOperationContext context))                          {                              using (var headerJson = await context.ParseToMemoryAsync(                                  stream'                                  "tcp-header"'                                  BlittableJsonDocumentBuilder.UsageMode.None'                                  tcp.PinnedBuffer'                                  ServerStore.ServerShutdown'                                  // we don't want to allow external (and anonymous) users to send us unlimited data                                  // a maximum of 2 KB for the header is big enough to include any valid header that                                  // we can currently think of                                  maxSize: 1024 * 2                              ))                              {                                  header = JsonDeserializationClient.TcpConnectionHeaderMessage(headerJson);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}");                                  }                              }                                if (MatchingOperationVersion(header' out var error) == false)                              {                                  RespondToTcpConnection(stream' context' error' TcpConnectionStatus.TcpVersionMismatch);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint} failed because:" +                                          $" {error}");                                  }                                  return; //we will not accept not matching versions                              }                                bool authSuccessful = TryAuthorize(Configuration' tcp.Stream' header' out var err);                                RespondToTcpConnection(stream' context' error' authSuccessful ? TcpConnectionStatus.Ok : TcpConnectionStatus.AuthorizationFailed);                                if (authSuccessful == false)                              {                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}" +                                          $" is not authorized to access {header.DatabaseName ?? "the cluster node"} because {err}");                                  }                                  return; // cannot proceed                              }                          }                            if (await DispatchServerWideTcpConnection(tcp' header))                          {                              tcp = null; //do not keep reference -> tcp will be disposed by server-wide connection handlers                              return;                          }                            await DispatchDatabaseTcpConnection(tcp' header);                      }                      catch (Exception e)                      {                          if (_tcpLogger.IsInfoEnabled)                              _tcpLogger.Info("Failed to process TCP connection run"' e);                            SendErrorIfPossible(tcp' e);                      }                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failure when processing tcp connection"' e);                      }                  }              });
Magic Number,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The following statement contains a magic number: Task.Run(async () =>              {                  TcpClient tcpClient;                  try                  {                      tcpClient = await listener.AcceptTcpClientAsync();                  }                  catch (ObjectDisposedException)                  {                          // shutting down                          return;                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failed to accept new tcp connection"' e);                      }                      return;                  }                  ListenToNewTcpConnection(listener);                  try                  {                      tcpClient.NoDelay = true;                      tcpClient.ReceiveBufferSize = 32 * 1024;                      tcpClient.SendBufferSize = 4096;                      Stream stream = tcpClient.GetStream();                      stream = await AuthenticateAsServerIfSslNeeded(stream);                      var tcp = new TcpConnectionOptions                      {                          ContextPool = _tcpContextPool'                          Stream = stream'                          TcpClient = tcpClient'                          PinnedBuffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance()                      };                        try                      {                          TcpConnectionHeaderMessage header;                          using (_tcpContextPool.AllocateOperationContext(out JsonOperationContext context))                          {                              using (var headerJson = await context.ParseToMemoryAsync(                                  stream'                                  "tcp-header"'                                  BlittableJsonDocumentBuilder.UsageMode.None'                                  tcp.PinnedBuffer'                                  ServerStore.ServerShutdown'                                  // we don't want to allow external (and anonymous) users to send us unlimited data                                  // a maximum of 2 KB for the header is big enough to include any valid header that                                  // we can currently think of                                  maxSize: 1024 * 2                              ))                              {                                  header = JsonDeserializationClient.TcpConnectionHeaderMessage(headerJson);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}");                                  }                              }                                if (MatchingOperationVersion(header' out var error) == false)                              {                                  RespondToTcpConnection(stream' context' error' TcpConnectionStatus.TcpVersionMismatch);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint} failed because:" +                                          $" {error}");                                  }                                  return; //we will not accept not matching versions                              }                                bool authSuccessful = TryAuthorize(Configuration' tcp.Stream' header' out var err);                                RespondToTcpConnection(stream' context' error' authSuccessful ? TcpConnectionStatus.Ok : TcpConnectionStatus.AuthorizationFailed);                                if (authSuccessful == false)                              {                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}" +                                          $" is not authorized to access {header.DatabaseName ?? "the cluster node"} because {err}");                                  }                                  return; // cannot proceed                              }                          }                            if (await DispatchServerWideTcpConnection(tcp' header))                          {                              tcp = null; //do not keep reference -> tcp will be disposed by server-wide connection handlers                              return;                          }                            await DispatchDatabaseTcpConnection(tcp' header);                      }                      catch (Exception e)                      {                          if (_tcpLogger.IsInfoEnabled)                              _tcpLogger.Info("Failed to process TCP connection run"' e);                            SendErrorIfPossible(tcp' e);                      }                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failure when processing tcp connection"' e);                      }                  }              });
Magic Number,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The following statement contains a magic number: Task.Run(async () =>              {                  TcpClient tcpClient;                  try                  {                      tcpClient = await listener.AcceptTcpClientAsync();                  }                  catch (ObjectDisposedException)                  {                          // shutting down                          return;                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failed to accept new tcp connection"' e);                      }                      return;                  }                  ListenToNewTcpConnection(listener);                  try                  {                      tcpClient.NoDelay = true;                      tcpClient.ReceiveBufferSize = 32 * 1024;                      tcpClient.SendBufferSize = 4096;                      Stream stream = tcpClient.GetStream();                      stream = await AuthenticateAsServerIfSslNeeded(stream);                      var tcp = new TcpConnectionOptions                      {                          ContextPool = _tcpContextPool'                          Stream = stream'                          TcpClient = tcpClient'                          PinnedBuffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance()                      };                        try                      {                          TcpConnectionHeaderMessage header;                          using (_tcpContextPool.AllocateOperationContext(out JsonOperationContext context))                          {                              using (var headerJson = await context.ParseToMemoryAsync(                                  stream'                                  "tcp-header"'                                  BlittableJsonDocumentBuilder.UsageMode.None'                                  tcp.PinnedBuffer'                                  ServerStore.ServerShutdown'                                  // we don't want to allow external (and anonymous) users to send us unlimited data                                  // a maximum of 2 KB for the header is big enough to include any valid header that                                  // we can currently think of                                  maxSize: 1024 * 2                              ))                              {                                  header = JsonDeserializationClient.TcpConnectionHeaderMessage(headerJson);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}");                                  }                              }                                if (MatchingOperationVersion(header' out var error) == false)                              {                                  RespondToTcpConnection(stream' context' error' TcpConnectionStatus.TcpVersionMismatch);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint} failed because:" +                                          $" {error}");                                  }                                  return; //we will not accept not matching versions                              }                                bool authSuccessful = TryAuthorize(Configuration' tcp.Stream' header' out var err);                                RespondToTcpConnection(stream' context' error' authSuccessful ? TcpConnectionStatus.Ok : TcpConnectionStatus.AuthorizationFailed);                                if (authSuccessful == false)                              {                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}" +                                          $" is not authorized to access {header.DatabaseName ?? "the cluster node"} because {err}");                                  }                                  return; // cannot proceed                              }                          }                            if (await DispatchServerWideTcpConnection(tcp' header))                          {                              tcp = null; //do not keep reference -> tcp will be disposed by server-wide connection handlers                              return;                          }                            await DispatchDatabaseTcpConnection(tcp' header);                      }                      catch (Exception e)                      {                          if (_tcpLogger.IsInfoEnabled)                              _tcpLogger.Info("Failed to process TCP connection run"' e);                            SendErrorIfPossible(tcp' e);                      }                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failure when processing tcp connection"' e);                      }                  }              });
Magic Number,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The following statement contains a magic number: Task.Run(async () =>              {                  TcpClient tcpClient;                  try                  {                      tcpClient = await listener.AcceptTcpClientAsync();                  }                  catch (ObjectDisposedException)                  {                          // shutting down                          return;                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failed to accept new tcp connection"' e);                      }                      return;                  }                  ListenToNewTcpConnection(listener);                  try                  {                      tcpClient.NoDelay = true;                      tcpClient.ReceiveBufferSize = 32 * 1024;                      tcpClient.SendBufferSize = 4096;                      Stream stream = tcpClient.GetStream();                      stream = await AuthenticateAsServerIfSslNeeded(stream);                      var tcp = new TcpConnectionOptions                      {                          ContextPool = _tcpContextPool'                          Stream = stream'                          TcpClient = tcpClient'                          PinnedBuffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance()                      };                        try                      {                          TcpConnectionHeaderMessage header;                          using (_tcpContextPool.AllocateOperationContext(out JsonOperationContext context))                          {                              using (var headerJson = await context.ParseToMemoryAsync(                                  stream'                                  "tcp-header"'                                  BlittableJsonDocumentBuilder.UsageMode.None'                                  tcp.PinnedBuffer'                                  ServerStore.ServerShutdown'                                  // we don't want to allow external (and anonymous) users to send us unlimited data                                  // a maximum of 2 KB for the header is big enough to include any valid header that                                  // we can currently think of                                  maxSize: 1024 * 2                              ))                              {                                  header = JsonDeserializationClient.TcpConnectionHeaderMessage(headerJson);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}");                                  }                              }                                if (MatchingOperationVersion(header' out var error) == false)                              {                                  RespondToTcpConnection(stream' context' error' TcpConnectionStatus.TcpVersionMismatch);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint} failed because:" +                                          $" {error}");                                  }                                  return; //we will not accept not matching versions                              }                                bool authSuccessful = TryAuthorize(Configuration' tcp.Stream' header' out var err);                                RespondToTcpConnection(stream' context' error' authSuccessful ? TcpConnectionStatus.Ok : TcpConnectionStatus.AuthorizationFailed);                                if (authSuccessful == false)                              {                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}" +                                          $" is not authorized to access {header.DatabaseName ?? "the cluster node"} because {err}");                                  }                                  return; // cannot proceed                              }                          }                            if (await DispatchServerWideTcpConnection(tcp' header))                          {                              tcp = null; //do not keep reference -> tcp will be disposed by server-wide connection handlers                              return;                          }                            await DispatchDatabaseTcpConnection(tcp' header);                      }                      catch (Exception e)                      {                          if (_tcpLogger.IsInfoEnabled)                              _tcpLogger.Info("Failed to process TCP connection run"' e);                            SendErrorIfPossible(tcp' e);                      }                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failure when processing tcp connection"' e);                      }                  }              });
Magic Number,Raven.Server,RavenServer,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServer.cs,ListenToNewTcpConnection,The following statement contains a magic number: Task.Run(async () =>              {                  TcpClient tcpClient;                  try                  {                      tcpClient = await listener.AcceptTcpClientAsync();                  }                  catch (ObjectDisposedException)                  {                          // shutting down                          return;                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failed to accept new tcp connection"' e);                      }                      return;                  }                  ListenToNewTcpConnection(listener);                  try                  {                      tcpClient.NoDelay = true;                      tcpClient.ReceiveBufferSize = 32 * 1024;                      tcpClient.SendBufferSize = 4096;                      Stream stream = tcpClient.GetStream();                      stream = await AuthenticateAsServerIfSslNeeded(stream);                      var tcp = new TcpConnectionOptions                      {                          ContextPool = _tcpContextPool'                          Stream = stream'                          TcpClient = tcpClient'                          PinnedBuffer = JsonOperationContext.ManagedPinnedBuffer.LongLivedInstance()                      };                        try                      {                          TcpConnectionHeaderMessage header;                          using (_tcpContextPool.AllocateOperationContext(out JsonOperationContext context))                          {                              using (var headerJson = await context.ParseToMemoryAsync(                                  stream'                                  "tcp-header"'                                  BlittableJsonDocumentBuilder.UsageMode.None'                                  tcp.PinnedBuffer'                                  ServerStore.ServerShutdown'                                  // we don't want to allow external (and anonymous) users to send us unlimited data                                  // a maximum of 2 KB for the header is big enough to include any valid header that                                  // we can currently think of                                  maxSize: 1024 * 2                              ))                              {                                  header = JsonDeserializationClient.TcpConnectionHeaderMessage(headerJson);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}");                                  }                              }                                if (MatchingOperationVersion(header' out var error) == false)                              {                                  RespondToTcpConnection(stream' context' error' TcpConnectionStatus.TcpVersionMismatch);                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint} failed because:" +                                          $" {error}");                                  }                                  return; //we will not accept not matching versions                              }                                bool authSuccessful = TryAuthorize(Configuration' tcp.Stream' header' out var err);                                RespondToTcpConnection(stream' context' error' authSuccessful ? TcpConnectionStatus.Ok : TcpConnectionStatus.AuthorizationFailed);                                if (authSuccessful == false)                              {                                  if (Logger.IsInfoEnabled)                                  {                                      Logger.Info(                                          $"New {header.Operation} TCP connection to {header.DatabaseName ?? "the cluster node"} from {tcpClient.Client.RemoteEndPoint}" +                                          $" is not authorized to access {header.DatabaseName ?? "the cluster node"} because {err}");                                  }                                  return; // cannot proceed                              }                          }                            if (await DispatchServerWideTcpConnection(tcp' header))                          {                              tcp = null; //do not keep reference -> tcp will be disposed by server-wide connection handlers                              return;                          }                            await DispatchDatabaseTcpConnection(tcp' header);                      }                      catch (Exception e)                      {                          if (_tcpLogger.IsInfoEnabled)                              _tcpLogger.Info("Failed to process TCP connection run"' e);                            SendErrorIfPossible(tcp' e);                      }                  }                  catch (Exception e)                  {                      if (_tcpLogger.IsInfoEnabled)                      {                          _tcpLogger.Info("Failure when processing tcp connection"' e);                      }                  }              });
Magic Number,Raven.Server,RavenServerStartup,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServerStartup.cs,Configure,The following statement contains a magic number: app.UseWebSockets(new WebSocketOptions              {                  // TODO: KeepAlive causes "Unexpect reserved bit set" (we are sending our own heartbeats' so we do not need this)                  //KeepAliveInterval = Debugger.IsAttached ?                   //    TimeSpan.FromHours(24) : TimeSpan.FromSeconds(30)'                   KeepAliveInterval = TimeSpan.FromHours(24)'                  ReceiveBufferSize = 4096              });
Magic Number,Raven.Server,RavenServerStartup,C:\repos\ravendb_ravendb\src\Raven.Server\RavenServerStartup.cs,Configure,The following statement contains a magic number: app.UseWebSockets(new WebSocketOptions              {                  // TODO: KeepAlive causes "Unexpect reserved bit set" (we are sending our own heartbeats' so we do not need this)                  //KeepAliveInterval = Debugger.IsAttached ?                   //    TimeSpan.FromHours(24) : TimeSpan.FromSeconds(30)'                   KeepAliveInterval = TimeSpan.FromHours(24)'                  ReceiveBufferSize = 4096              });
Magic Number,Raven.Server.Rachis,Candidate,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Candidate.cs,Run,The following statement contains a magic number: using (this)              {                  try                  {                      // Operation may fail' that's why we don't RaiseOrDie                      _running.Raise();                      if (_engine.Log.IsInfoEnabled)                      {                          _engine.Log.Info($"Candidate {_engine.Tag}: Starting elections");                      }                      ClusterTopology clusterTopology;                      using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                      using (context.OpenReadTransaction())                      {                          clusterTopology = _engine.GetTopology(context);                      }                        if (clusterTopology.Members.Count == 1)                      {                          CastVoteForSelf();                          _engine.SwitchToLeaderState(ElectionTerm' "I\'m the only one in the cluster' so no need for elections' I rule.");                          return;                      }                        if (IsForcedElection)                      {                          CastVoteForSelf();                      }                      else                      {                          ElectionTerm = _engine.CurrentTerm + 1;                      }                        foreach (var voter in clusterTopology.Members)                      {                          if (voter.Key == _engine.Tag)                              continue; // we already voted for ourselves                          var candidateAmbassador = new CandidateAmbassador(_engine' this' voter.Key' voter.Value'                              _engine.ClusterCertificate);                          _voters.Add(candidateAmbassador);                          try                          {                              _engine.AppendStateDisposable(this' candidateAmbassador);                          }                          catch (ConcurrencyException)                          {                              return; // we lost the election' because someone else changed our state to follower                          }                          candidateAmbassador.Start();                      }                      while (_running)                      {                          if (_peersWaiting.WaitOne(_engine.Timeout.TimeoutPeriod) == false)                          {                              // timeout?                               if (IsForcedElection)                              {                                  CastVoteForSelf();                              }                              else                              {                                  ElectionTerm = _engine.CurrentTerm + 1;                              }                              _engine.RandomizeTimeout(extend: true);                                StateChange(); // will wake ambassadors and make them ping peers again                              continue;                          }                          if (_running == false)                              return;                            _peersWaiting.Reset();                            bool removedFromTopology = false;                          var trialElectionsCount = 1;                          var realElectionsCount = 1;                          foreach (var ambassador in _voters)                          {                              if (ambassador.NotInTopology)                              {                                  removedFromTopology = true;                                  break;                              }                              if (ambassador.RealElectionWonAtTerm == ElectionTerm)                                  realElectionsCount++;                              if (ambassador.TrialElectionWonAtTerm == ElectionTerm)                                  trialElectionsCount++;                          }                            var majority = ((_voters.Count + 1) / 2) + 1;                            if (removedFromTopology)                          {                              if (_engine.Log.IsInfoEnabled)                              {                                  _engine.Log.Info($"Candidate {_engine.Tag}: A leader node has indicated that I'm not in their topology' I was probably kicked out. Moving to passive mode");                              }                              var engineCurrentTerm = _engine.CurrentTerm;                              _engine.SetNewState(RachisState.Passive' this' engineCurrentTerm'                                  "I just learned from the leader that I\'m not in their topology' moving to passive state");                              break;                          }                            if (realElectionsCount >= majority)                          {                              ElectionResult = ElectionResult.Won;                              _running.Lower();                              StateChange();                                var connections = new Dictionary<string' RemoteConnection>();                              foreach (var candidateAmbassador in _voters)                              {                                  connections[candidateAmbassador.Tag] = candidateAmbassador.Connection;                              }                              _engine.SwitchToLeaderState(ElectionTerm' $"Was elected by {majority} nodes to leadership"' connections);                                break;                          }                          if (RunRealElectionAtTerm != ElectionTerm &&                              trialElectionsCount >= majority)                          {                              CastVoteForSelf();                          }                      }                  }                  catch (Exception e)                  {                      if (_engine.Log.IsInfoEnabled)                      {                          _engine.Log.Info($"Candidate {_engine.Tag}:Failure during candidacy run"' e);                      }                  }              }
Magic Number,Raven.Server.Rachis,CandidateAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\CandidateAmbassador.cs,Dispose,The following statement contains a magic number: if (_candidate.ElectionResult != ElectionResult.Won)              {                  Connection?.Dispose();                  if (_thread != null && _thread.ManagedThreadId != Thread.CurrentThread.ManagedThreadId)                  {                      while (_thread.Join(16) == false)                      {                          Connection?.Dispose();                      }                  }              }
Magic Number,Raven.Server.Rachis,Elector,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Elector.cs,HandleVoteRequest,The following statement contains a magic number: try              {                  while (true)                  {                      using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                      {                          var rv = _connection.Read<RequestVote>(context);                            ClusterTopology clusterTopology;                          long lastIndex;                          long lastTerm;                          string whoGotMyVoteIn;                            using (context.OpenReadTransaction())                          {                              lastIndex = _engine.GetLastEntryIndex(context);                              lastTerm = _engine.GetTermForKnownExisting(context' lastIndex);                              whoGotMyVoteIn = _engine.GetWhoGotMyVoteIn(context' rv.Term);                                clusterTopology = _engine.GetTopology(context);                          }                            if (clusterTopology.TopologyId == null)                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = rv.Term'                                  VoteGranted = true'                                  Message = "I might vote for you' because I'm not part of any cluster."                              });                              continue;                          }                                                    if (clusterTopology.Members.ContainsKey(rv.Source) == false &&                              clusterTopology.Promotables.ContainsKey(rv.Source) == false &&                              clusterTopology.Watchers.ContainsKey(rv.Source) == false)                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = _engine.CurrentTerm'                                  VoteGranted = false'                                  // we only report to the node asking for our vote if we are the leader' this gives                                  // the oust node a authorotative confirmation that they were removed from the cluster                                  NotInTopology = _engine.CurrentState == RachisState.Leader'                                  Message = $"Node {rv.Source} is not in my topology' cannot vote for it"                              });                              _connection.Dispose();                              return;                          }                            if (rv.Term == _engine.CurrentTerm && rv.ElectionResult == ElectionResult.Won)                          {                              _electionWon = true;                              var follower = new Follower(_engine' _connection);                              follower.TryAcceptConnection();                              return;                          }                            if (rv.Term == _engine.CurrentTerm && rv.ElectionResult == ElectionResult.Lost)                          {                              _connection.Dispose();                              return;                          }                            if (rv.Term <= _engine.CurrentTerm)                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = _engine.CurrentTerm'                                  VoteGranted = false'                                  Message = "My term is higher or equals to yours"                              });                              _connection.Dispose();                              return;                          }                            if (rv.IsForcedElection == false &&                              (                                  _engine.CurrentState == RachisState.Leader ||                                  _engine.CurrentState == RachisState.LeaderElect                              )                          )                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = _engine.CurrentTerm'                                  VoteGranted = false'                                  Message = "I'm a leader in good standing' coup will be resisted"                              });                              _connection.Dispose();                              return;                          }                            if (whoGotMyVoteIn != null && whoGotMyVoteIn != rv.Source)                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = _engine.CurrentTerm'                                  VoteGranted = false'                                  Message = $"Already voted in {rv.LastLogTerm}' for {whoGotMyVoteIn}"                              });                              continue;                          }                            if (lastTerm > rv.LastLogTerm)                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = _engine.CurrentTerm'                                  VoteGranted = false'                                  Message = $"My last log entry is of term {lastTerm} / {lastIndex} while yours is {rv.LastLogTerm}' so I'm more up to date"                              });                              continue;                          }                            if (lastIndex > rv.LastLogIndex)                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = _engine.CurrentTerm'                                  VoteGranted = false'                                  Message =                                      $"My last log entry is of term {lastTerm} / {lastIndex} while yours is {rv.LastLogTerm} / {rv.LastLogIndex}' so I'm more up to date"                              });                              continue;                          }                            if (rv.IsTrialElection)                          {                              if (_engine.Timeout.ExpiredLastDeferral(_engine.ElectionTimeout.TotalMilliseconds / 2' out string currentLeader) == false)                              {                                  _connection.Send(context' new RequestVoteResponse                                  {                                      Term = _engine.CurrentTerm'                                      VoteGranted = false'                                      Message = $"My leader {currentLeader} is keeping me up to date' so I don't want to vote for you"                                  });                                  continue;                              }                                _connection.Send(context' new RequestVoteResponse                              {                                  Term = rv.Term'                                  VoteGranted = true'                                  Message = "I might vote for you"                              });                              continue;                          }                            bool alreadyVoted = false;                          using (context.OpenWriteTransaction())                          {                              whoGotMyVoteIn = _engine.GetWhoGotMyVoteIn(context' rv.Term);                              if (whoGotMyVoteIn != null && whoGotMyVoteIn != rv.Source)                              {                                  alreadyVoted = true;                              }                              else                              {                                  _engine.CastVoteInTerm(context' rv.Term' rv.Source);                              }                              context.Transaction.Commit();                          }                          if (alreadyVoted)                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = _engine.CurrentTerm'                                  VoteGranted = false'                                  Message = $"Already voted in {rv.LastLogTerm}' for {whoGotMyVoteIn}"                              });                          }                          else                          {                              _connection.Send(context' new RequestVoteResponse                              {                                  Term = _engine.CurrentTerm'                                  VoteGranted = true'                                  Message = "I've voted for you"                              });                          }                      }                  }              }              catch (OperationCanceledException)              {              }              catch (ObjectDisposedException)              {              }              catch (AggregateException ae)                  when (ae.InnerException is OperationCanceledException || ae.InnerException is ObjectDisposedException)              {              }              catch (Exception e)              {                  if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info("Failed to talk to candidate: " + _engine.Tag' e);                  }              }              finally              {                  if (_electionWon == false)                  {                      _connection.Dispose();                  }              }
Magic Number,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,MaybeNotifyLeaderThatWeAreStillAlive,The following statement contains a magic number: if (sp.ElapsedMilliseconds <= _engine.ElectionTimeout.TotalMilliseconds / 4)                  return;
Magic Number,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateMatchEntryWithLeaderAndApplyEntries,The following statement contains a magic number: using (context.OpenReadTransaction())              {                  minIndex = _engine.GetFirstEntryIndex(context);                    if (minIndex == 0) // no entries at all                  {                      connection.Send(context' new LogLengthNegotiationResponse                      {                          Status = LogLengthNegotiationResponse.ResponseStatus.Acceptable'                          Message = "No entries at all here' give me everything from the start"'                          CurrentTerm = _engine.CurrentTerm'                          LastLogIndex = 0                      });                        return; // leader will know where to start from here                  }                    maxIndex = Math.Min(                      _engine.GetLastEntryIndex(context)' // max                      negotiation.PrevLogIndex                  );                    midpointIndex = (maxIndex + minIndex) / 2;                    midpointTerm = _engine.GetTermForKnownExisting(context' midpointIndex);              }
Magic Number,Raven.Server.Rachis,Follower,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Follower.cs,NegotiateMatchEntryWithLeaderAndApplyEntries,The following statement contains a magic number: while (minIndex < maxIndex)              {                  _engine.Timeout.Defer(_connection.Source);                    // TODO: cancellation                  //_cancellationTokenSource.Token.ThrowIfCancellationRequested();                    connection.Send(context' new LogLengthNegotiationResponse                  {                      Status = LogLengthNegotiationResponse.ResponseStatus.Negotiation'                      Message =                          $"Term/Index mismatch from leader' need to figure out at what point the logs match' range: {maxIndex} - {minIndex} | {midpointIndex} in term {midpointTerm}"'                      CurrentTerm = _engine.CurrentTerm'                      MaxIndex = maxIndex'                      MinIndex = minIndex'                      MidpointIndex = midpointIndex'                      MidpointTerm = midpointTerm                  });                    var response = connection.Read<LogLengthNegotiation>(context);                    _engine.Timeout.Defer(_connection.Source);                  if (response.Truncated)                  {                      if (_engine.Log.IsInfoEnabled)                      {                          _engine.Log.Info($"Follower {_engine.Tag}: Got a truncated response from the leader will request all entries");                      }                      connection.Send(context' new LogLengthNegotiationResponse                      {                          Status = LogLengthNegotiationResponse.ResponseStatus.Acceptable'                          Message = "We have entries that are already truncated at the leader' will ask for full snapshot"'                          CurrentTerm = _engine.CurrentTerm'                          LastLogIndex = 0                      });                      return;                  }                  using (context.OpenReadTransaction())                  {                      if (_engine.GetTermFor(context' response.PrevLogIndex) == response.PrevLogTerm)                      {                          minIndex = midpointIndex + 1;                      }                      else                      {                          maxIndex = midpointIndex - 1;                      }                  }                  midpointIndex = (maxIndex + minIndex) / 2;                  using (context.OpenReadTransaction())                      midpointTerm = _engine.GetTermForKnownExisting(context' midpointIndex);              }
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,Run,The following statement contains a magic number: try              {                  var needNewConnection = _connection == null;                  while (_leader.Running && _dispose == false)                  {                      try                      {                          try                          {                              if (needNewConnection)                              {                                  if (_engine.Log.IsInfoEnabled)                                  {                                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Creating new connection to {_tag}");                                  }                                  using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                                  {                                      _connection?.Dispose();                                      var stream = _engine.ConnectToPeer(_url' _certificate' context).Result;                                      _connection = new RemoteConnection(_tag' _engine.Tag' stream);                                      ClusterTopology topology;                                      using (context.OpenReadTransaction())                                      {                                          topology = _engine.GetTopology(context);                                      }                                      SendHello(context' topology);                                  }                              }                          }                          catch (Exception e)                          {                              Status = AmbassadorStatus.FailedToConnect;                              StatusMessage = $"Failed to connect with {_tag}.{Environment.NewLine}" + e.Message;                              if (_engine.Log.IsInfoEnabled)                              {                                  _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Failed to connect to remote follower: {_tag} {_url}"' e);                              }                              // wait a bit                              _leader.WaitForNewEntries().Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 2));                              continue; // we'll retry connecting                          }                          finally                          {                              needNewConnection = true;                          }                            Status = AmbassadorStatus.Connected;                          StatusMessage = $"Connected with {_tag}";                            try                          {                              _engine.AppendStateDisposable(_leader' _connection);                          }                          catch (ConcurrencyException)                          {                              // we are no longer the leader' but we'll not abort the thread here' we'll                               // go to the top of the while loop and exit from there if needed                              continue;                          }                            var matchIndex = InitialNegotiationWithFollower();                          UpdateLastMatchFromFollower(matchIndex);                          SendSnapshot(_connection.Stream);                          var entries = new List<BlittableJsonReaderObject>();                          var disposeRequested = false;                          while (_leader.Running && disposeRequested == false)                          {                              disposeRequested = _dispose; // we give last loop before closing                              // TODO: how to close                              entries.Clear();                              using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                              {                                  AppendEntries appendEntries;                                  using (context.OpenReadTransaction())                                  {                                      var table = context.Transaction.InnerTransaction.OpenTable(RachisConsensus.LogsTable' RachisConsensus.EntriesSlice);                                        var reveredNextIndex = Bits.SwapBytes(_followerMatchIndex + 1);                                      using (Slice.External(context.Allocator' (byte*)&reveredNextIndex' sizeof(long)' out Slice key))                                      {                                          long totalSize = 0;                                          foreach (var value in table.SeekByPrimaryKey(key' 0))                                          {                                              var entry = BuildRachisEntryToSend(context' value);                                              entries.Add(entry);                                              totalSize += entry.Size;                                              if (totalSize > Constants.Size.Megabyte)                                                  break; // TODO: Configurable?                                          }                                            appendEntries = new AppendEntries                                          {                                              ForceElections = ForceElectionsNow'                                              EntriesCount = entries.Count'                                              LeaderCommit = _engine.GetLastCommitIndex(context)'                                              Term = _engine.CurrentTerm'                                              TruncateLogBefore = _leader.LowestIndexInEntireCluster'                                              PrevLogTerm = _engine.GetTermFor(context' _followerMatchIndex) ?? 0'                                              PrevLogIndex = _followerMatchIndex'                                              TimeAsLeader = _leader.LeaderShipDuration                                          };                                      }                                  }                                    // out of the tx' we can do network calls                                  UpdateLastSend(                                      entries.Count > 0                                          ? "Append Entries"                                          : "Heartbeat"                                  );                                  if (_engine.Log.IsInfoEnabled && entries.Count > 0)                                  {                                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}:sending {entries.Count} entries to {_tag}"  #if DEBUG                                                       + $" [{string.Join(" '"' entries.Select(x => x.ToString()))}]"  #endif                                      );                                  }                                  _connection.Send(context' appendEntries' entries);                                  var aer = _connection.Read<AppendEntriesResponse>(context);                                  if (aer.Success == false)                                  {                                      // shouldn't happen' the connection should be aborted if this is the case' but still                                      var msg =                                          "A negative Append Entries Response after the connection has been established shouldn't happen. Message: " +                                          aer.Message;                                      if (_engine.Log.IsInfoEnabled)                                      {                                          _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: failure to append entries to {_tag} because: " + msg);                                      }                                      throw new InvalidOperationException(msg);                                  }                                  if (aer.CurrentTerm != _engine.CurrentTerm)                                      ThrowInvalidTermChanged(aer);                                                                    UpdateLastMatchFromFollower(aer.LastLogIndex);                              }                                                            if(disposeRequested)                                  break;                                                            var task = _leader.WaitForNewEntries();                              using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                              using (context.OpenReadTransaction())                              {                                  if (_engine.GetLastEntryIndex(context) != _followerMatchIndex)                                      continue; // instead of waiting' we have new entries' start immediately                              }                                                            // either we have new entries to send' or we waited for long enough                               // to send another heartbeat                              task.Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 3));                          }                      }                      catch (OperationCanceledException)                      {                          throw;                      }                      catch (AggregateException ae) when (ae.InnerException is OperationCanceledException)                      {                          throw;                      }                      catch (Exception e)                      {                          Status = AmbassadorStatus.FailedToConnect;                          StatusMessage = $"Failed to talk with {_tag}.{Environment.NewLine}" + e;                          if (_engine.Log.IsInfoEnabled)                          {                              _engine.Log.Info("Failed to talk to remote follower: " + _tag' e);                          }                          // notify leader about an error                            _connection?.Dispose();                            _leader?.NotifyAboutException(this' e);                          _leader.WaitForNewEntries().Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 2));                      }                      finally                      {                          if (Status == AmbassadorStatus.Connected)                          {                              StatusMessage = "Disconnected";                          }                          else                          {                              StatusMessage = "Disconnected due to :" + StatusMessage;                          }                          Status = AmbassadorStatus.Disconnected;                      }                  }              }              catch (OperationCanceledException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (ObjectDisposedException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (AggregateException ae)                  when (ae.InnerException is OperationCanceledException || ae.InnerException is ObjectDisposedException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (Exception e)              {                  StatusMessage = $"Failed to talk with {_tag}.{Environment.NewLine}" + e.Message;                  Status = AmbassadorStatus.FailedToConnect;                    if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info("Failed to talk to remote follower: " + _tag' e);                  }              }              finally              {                  if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Node {_tag} is disposed with the message '{StatusMessage}'.");                  }                  _connection?.Dispose();              }
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,Run,The following statement contains a magic number: try              {                  var needNewConnection = _connection == null;                  while (_leader.Running && _dispose == false)                  {                      try                      {                          try                          {                              if (needNewConnection)                              {                                  if (_engine.Log.IsInfoEnabled)                                  {                                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Creating new connection to {_tag}");                                  }                                  using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                                  {                                      _connection?.Dispose();                                      var stream = _engine.ConnectToPeer(_url' _certificate' context).Result;                                      _connection = new RemoteConnection(_tag' _engine.Tag' stream);                                      ClusterTopology topology;                                      using (context.OpenReadTransaction())                                      {                                          topology = _engine.GetTopology(context);                                      }                                      SendHello(context' topology);                                  }                              }                          }                          catch (Exception e)                          {                              Status = AmbassadorStatus.FailedToConnect;                              StatusMessage = $"Failed to connect with {_tag}.{Environment.NewLine}" + e.Message;                              if (_engine.Log.IsInfoEnabled)                              {                                  _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Failed to connect to remote follower: {_tag} {_url}"' e);                              }                              // wait a bit                              _leader.WaitForNewEntries().Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 2));                              continue; // we'll retry connecting                          }                          finally                          {                              needNewConnection = true;                          }                            Status = AmbassadorStatus.Connected;                          StatusMessage = $"Connected with {_tag}";                            try                          {                              _engine.AppendStateDisposable(_leader' _connection);                          }                          catch (ConcurrencyException)                          {                              // we are no longer the leader' but we'll not abort the thread here' we'll                               // go to the top of the while loop and exit from there if needed                              continue;                          }                            var matchIndex = InitialNegotiationWithFollower();                          UpdateLastMatchFromFollower(matchIndex);                          SendSnapshot(_connection.Stream);                          var entries = new List<BlittableJsonReaderObject>();                          var disposeRequested = false;                          while (_leader.Running && disposeRequested == false)                          {                              disposeRequested = _dispose; // we give last loop before closing                              // TODO: how to close                              entries.Clear();                              using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                              {                                  AppendEntries appendEntries;                                  using (context.OpenReadTransaction())                                  {                                      var table = context.Transaction.InnerTransaction.OpenTable(RachisConsensus.LogsTable' RachisConsensus.EntriesSlice);                                        var reveredNextIndex = Bits.SwapBytes(_followerMatchIndex + 1);                                      using (Slice.External(context.Allocator' (byte*)&reveredNextIndex' sizeof(long)' out Slice key))                                      {                                          long totalSize = 0;                                          foreach (var value in table.SeekByPrimaryKey(key' 0))                                          {                                              var entry = BuildRachisEntryToSend(context' value);                                              entries.Add(entry);                                              totalSize += entry.Size;                                              if (totalSize > Constants.Size.Megabyte)                                                  break; // TODO: Configurable?                                          }                                            appendEntries = new AppendEntries                                          {                                              ForceElections = ForceElectionsNow'                                              EntriesCount = entries.Count'                                              LeaderCommit = _engine.GetLastCommitIndex(context)'                                              Term = _engine.CurrentTerm'                                              TruncateLogBefore = _leader.LowestIndexInEntireCluster'                                              PrevLogTerm = _engine.GetTermFor(context' _followerMatchIndex) ?? 0'                                              PrevLogIndex = _followerMatchIndex'                                              TimeAsLeader = _leader.LeaderShipDuration                                          };                                      }                                  }                                    // out of the tx' we can do network calls                                  UpdateLastSend(                                      entries.Count > 0                                          ? "Append Entries"                                          : "Heartbeat"                                  );                                  if (_engine.Log.IsInfoEnabled && entries.Count > 0)                                  {                                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}:sending {entries.Count} entries to {_tag}"  #if DEBUG                                                       + $" [{string.Join(" '"' entries.Select(x => x.ToString()))}]"  #endif                                      );                                  }                                  _connection.Send(context' appendEntries' entries);                                  var aer = _connection.Read<AppendEntriesResponse>(context);                                  if (aer.Success == false)                                  {                                      // shouldn't happen' the connection should be aborted if this is the case' but still                                      var msg =                                          "A negative Append Entries Response after the connection has been established shouldn't happen. Message: " +                                          aer.Message;                                      if (_engine.Log.IsInfoEnabled)                                      {                                          _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: failure to append entries to {_tag} because: " + msg);                                      }                                      throw new InvalidOperationException(msg);                                  }                                  if (aer.CurrentTerm != _engine.CurrentTerm)                                      ThrowInvalidTermChanged(aer);                                                                    UpdateLastMatchFromFollower(aer.LastLogIndex);                              }                                                            if(disposeRequested)                                  break;                                                            var task = _leader.WaitForNewEntries();                              using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                              using (context.OpenReadTransaction())                              {                                  if (_engine.GetLastEntryIndex(context) != _followerMatchIndex)                                      continue; // instead of waiting' we have new entries' start immediately                              }                                                            // either we have new entries to send' or we waited for long enough                               // to send another heartbeat                              task.Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 3));                          }                      }                      catch (OperationCanceledException)                      {                          throw;                      }                      catch (AggregateException ae) when (ae.InnerException is OperationCanceledException)                      {                          throw;                      }                      catch (Exception e)                      {                          Status = AmbassadorStatus.FailedToConnect;                          StatusMessage = $"Failed to talk with {_tag}.{Environment.NewLine}" + e;                          if (_engine.Log.IsInfoEnabled)                          {                              _engine.Log.Info("Failed to talk to remote follower: " + _tag' e);                          }                          // notify leader about an error                            _connection?.Dispose();                            _leader?.NotifyAboutException(this' e);                          _leader.WaitForNewEntries().Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 2));                      }                      finally                      {                          if (Status == AmbassadorStatus.Connected)                          {                              StatusMessage = "Disconnected";                          }                          else                          {                              StatusMessage = "Disconnected due to :" + StatusMessage;                          }                          Status = AmbassadorStatus.Disconnected;                      }                  }              }              catch (OperationCanceledException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (ObjectDisposedException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (AggregateException ae)                  when (ae.InnerException is OperationCanceledException || ae.InnerException is ObjectDisposedException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (Exception e)              {                  StatusMessage = $"Failed to talk with {_tag}.{Environment.NewLine}" + e.Message;                  Status = AmbassadorStatus.FailedToConnect;                    if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info("Failed to talk to remote follower: " + _tag' e);                  }              }              finally              {                  if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Node {_tag} is disposed with the message '{StatusMessage}'.");                  }                  _connection?.Dispose();              }
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,Run,The following statement contains a magic number: try              {                  var needNewConnection = _connection == null;                  while (_leader.Running && _dispose == false)                  {                      try                      {                          try                          {                              if (needNewConnection)                              {                                  if (_engine.Log.IsInfoEnabled)                                  {                                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Creating new connection to {_tag}");                                  }                                  using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                                  {                                      _connection?.Dispose();                                      var stream = _engine.ConnectToPeer(_url' _certificate' context).Result;                                      _connection = new RemoteConnection(_tag' _engine.Tag' stream);                                      ClusterTopology topology;                                      using (context.OpenReadTransaction())                                      {                                          topology = _engine.GetTopology(context);                                      }                                      SendHello(context' topology);                                  }                              }                          }                          catch (Exception e)                          {                              Status = AmbassadorStatus.FailedToConnect;                              StatusMessage = $"Failed to connect with {_tag}.{Environment.NewLine}" + e.Message;                              if (_engine.Log.IsInfoEnabled)                              {                                  _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Failed to connect to remote follower: {_tag} {_url}"' e);                              }                              // wait a bit                              _leader.WaitForNewEntries().Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 2));                              continue; // we'll retry connecting                          }                          finally                          {                              needNewConnection = true;                          }                            Status = AmbassadorStatus.Connected;                          StatusMessage = $"Connected with {_tag}";                            try                          {                              _engine.AppendStateDisposable(_leader' _connection);                          }                          catch (ConcurrencyException)                          {                              // we are no longer the leader' but we'll not abort the thread here' we'll                               // go to the top of the while loop and exit from there if needed                              continue;                          }                            var matchIndex = InitialNegotiationWithFollower();                          UpdateLastMatchFromFollower(matchIndex);                          SendSnapshot(_connection.Stream);                          var entries = new List<BlittableJsonReaderObject>();                          var disposeRequested = false;                          while (_leader.Running && disposeRequested == false)                          {                              disposeRequested = _dispose; // we give last loop before closing                              // TODO: how to close                              entries.Clear();                              using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                              {                                  AppendEntries appendEntries;                                  using (context.OpenReadTransaction())                                  {                                      var table = context.Transaction.InnerTransaction.OpenTable(RachisConsensus.LogsTable' RachisConsensus.EntriesSlice);                                        var reveredNextIndex = Bits.SwapBytes(_followerMatchIndex + 1);                                      using (Slice.External(context.Allocator' (byte*)&reveredNextIndex' sizeof(long)' out Slice key))                                      {                                          long totalSize = 0;                                          foreach (var value in table.SeekByPrimaryKey(key' 0))                                          {                                              var entry = BuildRachisEntryToSend(context' value);                                              entries.Add(entry);                                              totalSize += entry.Size;                                              if (totalSize > Constants.Size.Megabyte)                                                  break; // TODO: Configurable?                                          }                                            appendEntries = new AppendEntries                                          {                                              ForceElections = ForceElectionsNow'                                              EntriesCount = entries.Count'                                              LeaderCommit = _engine.GetLastCommitIndex(context)'                                              Term = _engine.CurrentTerm'                                              TruncateLogBefore = _leader.LowestIndexInEntireCluster'                                              PrevLogTerm = _engine.GetTermFor(context' _followerMatchIndex) ?? 0'                                              PrevLogIndex = _followerMatchIndex'                                              TimeAsLeader = _leader.LeaderShipDuration                                          };                                      }                                  }                                    // out of the tx' we can do network calls                                  UpdateLastSend(                                      entries.Count > 0                                          ? "Append Entries"                                          : "Heartbeat"                                  );                                  if (_engine.Log.IsInfoEnabled && entries.Count > 0)                                  {                                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}:sending {entries.Count} entries to {_tag}"  #if DEBUG                                                       + $" [{string.Join(" '"' entries.Select(x => x.ToString()))}]"  #endif                                      );                                  }                                  _connection.Send(context' appendEntries' entries);                                  var aer = _connection.Read<AppendEntriesResponse>(context);                                  if (aer.Success == false)                                  {                                      // shouldn't happen' the connection should be aborted if this is the case' but still                                      var msg =                                          "A negative Append Entries Response after the connection has been established shouldn't happen. Message: " +                                          aer.Message;                                      if (_engine.Log.IsInfoEnabled)                                      {                                          _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: failure to append entries to {_tag} because: " + msg);                                      }                                      throw new InvalidOperationException(msg);                                  }                                  if (aer.CurrentTerm != _engine.CurrentTerm)                                      ThrowInvalidTermChanged(aer);                                                                    UpdateLastMatchFromFollower(aer.LastLogIndex);                              }                                                            if(disposeRequested)                                  break;                                                            var task = _leader.WaitForNewEntries();                              using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                              using (context.OpenReadTransaction())                              {                                  if (_engine.GetLastEntryIndex(context) != _followerMatchIndex)                                      continue; // instead of waiting' we have new entries' start immediately                              }                                                            // either we have new entries to send' or we waited for long enough                               // to send another heartbeat                              task.Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 3));                          }                      }                      catch (OperationCanceledException)                      {                          throw;                      }                      catch (AggregateException ae) when (ae.InnerException is OperationCanceledException)                      {                          throw;                      }                      catch (Exception e)                      {                          Status = AmbassadorStatus.FailedToConnect;                          StatusMessage = $"Failed to talk with {_tag}.{Environment.NewLine}" + e;                          if (_engine.Log.IsInfoEnabled)                          {                              _engine.Log.Info("Failed to talk to remote follower: " + _tag' e);                          }                          // notify leader about an error                            _connection?.Dispose();                            _leader?.NotifyAboutException(this' e);                          _leader.WaitForNewEntries().Wait(TimeSpan.FromMilliseconds(_engine.ElectionTimeout.TotalMilliseconds / 2));                      }                      finally                      {                          if (Status == AmbassadorStatus.Connected)                          {                              StatusMessage = "Disconnected";                          }                          else                          {                              StatusMessage = "Disconnected due to :" + StatusMessage;                          }                          Status = AmbassadorStatus.Disconnected;                      }                  }              }              catch (OperationCanceledException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (ObjectDisposedException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (AggregateException ae)                  when (ae.InnerException is OperationCanceledException || ae.InnerException is ObjectDisposedException)              {                  StatusMessage = "Closed";                  Status = AmbassadorStatus.Closed;              }              catch (Exception e)              {                  StatusMessage = $"Failed to talk with {_tag}.{Environment.NewLine}" + e.Message;                  Status = AmbassadorStatus.FailedToConnect;                    if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info("Failed to talk to remote follower: " + _tag' e);                  }              }              finally              {                  if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Node {_tag} is disposed with the message '{StatusMessage}'.");                  }                  _connection?.Dispose();              }
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,MaybeNotifyLeaderThatWeAreSillAlive,The following statement contains a magic number: if (count % 100 != 0)                  return;
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,MaybeNotifyLeaderThatWeAreSillAlive,The following statement contains a magic number: if (sp.ElapsedMilliseconds <= _engine.ElectionTimeout.TotalMilliseconds / 2)                  return;
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,BuildRachisEntryToSend,The following statement contains a magic number: using (var writer =                  new ManualBlittableJsonDocumentBuilder<UnmanagedWriteBuffer>(                      context' BlittableJsonDocumentBuilder.UsageMode.None))              {                  writer.Reset(BlittableJsonDocumentBuilder.UsageMode.None);                    writer.StartWriteObjectDocument();                  writer.StartWriteObject();                    writer.WritePropertyName("Type");                  writer.WriteValue(nameof(RachisEntry));                    writer.WritePropertyName(nameof(RachisEntry.Index));                    var index = Bits.SwapBytes(*(long*)value.Reader.Read(0' out int size));                  Debug.Assert(size == sizeof(long));                  writer.WriteValue(index);                    writer.WritePropertyName(nameof(RachisEntry.Term));                  var term = *(long*)value.Reader.Read(1' out size);                  Debug.Assert(size == sizeof(long));                  writer.WriteValue(term);                    writer.WritePropertyName(nameof(RachisEntry.Entry));                  writer.WriteEmbeddedBlittableDocument(value.Reader.Read(2' out size)' size);                      writer.WritePropertyName(nameof(RachisEntry.Flags));                  var flags = *(RachisEntryFlags*)value.Reader.Read(3' out size);                  Debug.Assert(size == sizeof(RachisEntryFlags));                  writer.WriteValue(flags.ToString());                      writer.WriteObjectEnd();                  writer.FinalizeDocument();                  entry = writer.CreateReader();              }
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,BuildRachisEntryToSend,The following statement contains a magic number: using (var writer =                  new ManualBlittableJsonDocumentBuilder<UnmanagedWriteBuffer>(                      context' BlittableJsonDocumentBuilder.UsageMode.None))              {                  writer.Reset(BlittableJsonDocumentBuilder.UsageMode.None);                    writer.StartWriteObjectDocument();                  writer.StartWriteObject();                    writer.WritePropertyName("Type");                  writer.WriteValue(nameof(RachisEntry));                    writer.WritePropertyName(nameof(RachisEntry.Index));                    var index = Bits.SwapBytes(*(long*)value.Reader.Read(0' out int size));                  Debug.Assert(size == sizeof(long));                  writer.WriteValue(index);                    writer.WritePropertyName(nameof(RachisEntry.Term));                  var term = *(long*)value.Reader.Read(1' out size);                  Debug.Assert(size == sizeof(long));                  writer.WriteValue(term);                    writer.WritePropertyName(nameof(RachisEntry.Entry));                  writer.WriteEmbeddedBlittableDocument(value.Reader.Read(2' out size)' size);                      writer.WritePropertyName(nameof(RachisEntry.Flags));                  var flags = *(RachisEntryFlags*)value.Reader.Read(3' out size);                  Debug.Assert(size == sizeof(RachisEntryFlags));                  writer.WriteValue(flags.ToString());                      writer.WriteObjectEnd();                  writer.FinalizeDocument();                  entry = writer.CreateReader();              }
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,InitialNegotiationWithFollower,The following statement contains a magic number: using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  LogLengthNegotiation lln;                  var engineCurrentTerm = _engine.CurrentTerm;                  using (context.OpenReadTransaction())                  {                      var lastIndexEntry = _engine.GetLastEntryIndex(context);                      lln = new LogLengthNegotiation                      {                          Term = engineCurrentTerm'                          PrevLogIndex = lastIndexEntry'                          PrevLogTerm = _engine.GetTermForKnownExisting(context' lastIndexEntry)                      };                  }                    UpdateLastSend("Negotiation");                  _connection.Send(context' lln);                    var llr = _connection.Read<LogLengthNegotiationResponse>(context);                  if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info($"Got 1st LogLengthNegotiationResponse from {_tag} with term {llr.CurrentTerm} ({llr.MidpointIndex} / {llr.MidpointTerm}) {llr.Status}");                  }                  // need to negotiate                  do                  {                      if (llr.CurrentTerm > engineCurrentTerm)                      {                          // we need to abort the current leadership                          var msg = $"Follower ambassador {_engine.Tag}: found election term {llr.CurrentTerm} that is higher than ours {engineCurrentTerm}";                          _engine.SetNewState(RachisState.Follower' null' engineCurrentTerm'                              msg);                          _engine.FoundAboutHigherTerm(llr.CurrentTerm);                          throw new InvalidOperationException(msg);                      }                        if (llr.Status == LogLengthNegotiationResponse.ResponseStatus.Acceptable)                      {                          if (_engine.Log.IsInfoEnabled)                          {                              _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: {_tag} agreed on term={llr.CurrentTerm} index={llr.LastLogIndex}");                          }                          return llr.LastLogIndex;                      }                        if (llr.Status == LogLengthNegotiationResponse.ResponseStatus.Rejected)                      {                          var message = "Failed to get acceptable status from " + _tag + " because " + llr.Message;                          if (_engine.Log.IsInfoEnabled)                          {                              _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: {message}");                          }                          throw new InvalidOperationException(message);                      }                        UpdateLastMatchFromFollower(0);                        using (context.OpenReadTransaction())                      {                          var termForMidpointIndex = _engine.GetTermFor(context' llr.MidpointIndex);                          bool truncated = false;                          if (termForMidpointIndex == null) //follower has this log entry but we already truncated it.                          {                              truncated = true;                          }                          else if (llr.MidpointTerm == termForMidpointIndex)                          {                              llr.MinIndex = llr.MidpointIndex + 1;                          }                          else                          {                              llr.MaxIndex = llr.MidpointIndex - 1;                          }                          var midIndex = (llr.MinIndex + llr.MaxIndex) / 2;                          var termFor = _engine.GetTermFor(context' midIndex);                          Debug.Assert(termFor != 0);                          lln = new LogLengthNegotiation                          {                              Term = engineCurrentTerm'                              PrevLogIndex = midIndex'                              PrevLogTerm = termFor ?? 0'                              Truncated = truncated || termFor == null                          };                          if (_engine.Log.IsInfoEnabled)                          {                              _engine.Log.Info($"Sending LogLengthNegotiation to {_tag} with term {lln.Term} ({lln.PrevLogIndex} / {lln.PrevLogTerm}) - Trnuncated {lln.Truncated}");                          }                      }                      UpdateLastSend("Negotiation 2");                      _connection.Send(context' lln);                      llr = _connection.Read<LogLengthNegotiationResponse>(context);                      if (_engine.Log.IsInfoEnabled)                      {                          _engine.Log.Info($"Got LogLengthNegotiationResponse from {_tag} with term {llr.CurrentTerm} ({llr.MidpointIndex} / {llr.MidpointTerm}) {llr.Status}");                      }                  } while (true);              }
Magic Number,Raven.Server.Rachis,FollowerAmbassador,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\FollowerAmbassador.cs,Dispose,The following statement contains a magic number: if (_thread != null && _thread.ManagedThreadId != Thread.CurrentThread.ManagedThreadId)              {                  if (_thread.Join(TimeSpan.FromSeconds(60)) == false)                  {                      if (_engine.Log.IsInfoEnabled)                      {                          _engine.Log.Info($"FollowerAmbassador {_engine.Tag}: Waited 60 seconds for disposing node {_tag}' continue the thread anyway.");                      }                  }              }
Magic Number,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,Run,The following statement contains a magic number: try              {                  var handles = new WaitHandle[]                  {                      _newEntry'                      _voterResponded'                      _promotableUpdated'                      _shutdownRequested                  };                    var noopCmd = new DynamicJsonValue                  {                      ["Command"] = "noop"                  };                  using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                  using (var tx = context.OpenWriteTransaction())                  using (var cmd = context.ReadObject(noopCmd' "noop-cmd"))                  {                      _engine.InsertToLeaderLog(context' cmd' RachisEntryFlags.Noop);                      tx.Commit();                  }                  _newEntry.Set(); //This is so the noop would register right away                  while (_running)                  {                      switch (WaitHandle.WaitAny(handles' _engine.ElectionTimeout))                      {                          case 0: // new entry                              _newEntry.Reset();                              // release any waiting ambassadors to send immediately                              TaskExecutor.CompleteAndReplace(ref _newEntriesArrived);                              if (_voters.Count == 0)                                  goto case 1;                              break;                          case 1: // voter responded                              _voterResponded.Reset();                              OnVoterConfirmation();                              break;                          case 2: // promotable updated                              _promotableUpdated.Reset();                              CheckPromotables();                              break;                          case WaitHandle.WaitTimeout:                              break;                          case 3: // shutdown requested                              if (_engine.Log.IsInfoEnabled && _voters.Count != 0)                              {                                  _engine.Log.Info($"Leader {_engine.Tag}: shutting down");                              }                              return;                      }                        EnsureThatWeHaveLeadership(VotersMajority);                      _engine.ReportLeaderTime(LeaderShipDuration);                        // don't trancate if we are disposing an old peer                      // otherwise he would not recieve notification that he was                       // kick out of the cluster                      if(_previousPeersWereDisposed > 0) // Not Interlocked' because the race here is not interesting.                           continue;                                            var lowestIndexInEntireCluster = GetLowestIndexInEntireCluster();                      if (lowestIndexInEntireCluster != LowestIndexInEntireCluster)                      {                          using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                          using (context.OpenWriteTransaction())                          {                              _engine.TruncateLogBefore(context' lowestIndexInEntireCluster);                              LowestIndexInEntireCluster = lowestIndexInEntireCluster;                              context.Transaction.Commit();                          }                      }                  }              }              catch (Exception e)              {                  if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info("Error when running leader behavior"' e);                  }                  try                  {                      _engine.SwitchToCandidateState("An error occurred during our leadership." + Environment.NewLine + e);                  }                  catch (Exception e2)                  {                      if (_engine.Log.IsOperationsEnabled)                      {                          _engine.Log.Operations("After leadership failure' could not setup switch to candidate state"' e2);                      }                  }              }
Magic Number,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,Run,The following statement contains a magic number: try              {                  var handles = new WaitHandle[]                  {                      _newEntry'                      _voterResponded'                      _promotableUpdated'                      _shutdownRequested                  };                    var noopCmd = new DynamicJsonValue                  {                      ["Command"] = "noop"                  };                  using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                  using (var tx = context.OpenWriteTransaction())                  using (var cmd = context.ReadObject(noopCmd' "noop-cmd"))                  {                      _engine.InsertToLeaderLog(context' cmd' RachisEntryFlags.Noop);                      tx.Commit();                  }                  _newEntry.Set(); //This is so the noop would register right away                  while (_running)                  {                      switch (WaitHandle.WaitAny(handles' _engine.ElectionTimeout))                      {                          case 0: // new entry                              _newEntry.Reset();                              // release any waiting ambassadors to send immediately                              TaskExecutor.CompleteAndReplace(ref _newEntriesArrived);                              if (_voters.Count == 0)                                  goto case 1;                              break;                          case 1: // voter responded                              _voterResponded.Reset();                              OnVoterConfirmation();                              break;                          case 2: // promotable updated                              _promotableUpdated.Reset();                              CheckPromotables();                              break;                          case WaitHandle.WaitTimeout:                              break;                          case 3: // shutdown requested                              if (_engine.Log.IsInfoEnabled && _voters.Count != 0)                              {                                  _engine.Log.Info($"Leader {_engine.Tag}: shutting down");                              }                              return;                      }                        EnsureThatWeHaveLeadership(VotersMajority);                      _engine.ReportLeaderTime(LeaderShipDuration);                        // don't trancate if we are disposing an old peer                      // otherwise he would not recieve notification that he was                       // kick out of the cluster                      if(_previousPeersWereDisposed > 0) // Not Interlocked' because the race here is not interesting.                           continue;                                            var lowestIndexInEntireCluster = GetLowestIndexInEntireCluster();                      if (lowestIndexInEntireCluster != LowestIndexInEntireCluster)                      {                          using (_engine.ContextPool.AllocateOperationContext(out TransactionOperationContext context))                          using (context.OpenWriteTransaction())                          {                              _engine.TruncateLogBefore(context' lowestIndexInEntireCluster);                              LowestIndexInEntireCluster = lowestIndexInEntireCluster;                              context.Transaction.Commit();                          }                      }                  }              }              catch (Exception e)              {                  if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info("Error when running leader behavior"' e);                  }                  try                  {                      _engine.SwitchToCandidateState("An error occurred during our leadership." + Environment.NewLine + e);                  }                  catch (Exception e2)                  {                      if (_engine.Log.IsOperationsEnabled)                      {                          _engine.Log.Operations("After leadership failure' could not setup switch to candidate state"' e2);                      }                  }              }
Magic Number,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,VoteOfNoConfidence,The following statement contains a magic number: foreach (var timeoutsForVoter in _timeoutsForVoters)              {                  sb.Append($"\t{timeoutsForVoter.voter.Tag} - {Math.Round(timeoutsForVoter.time.TotalMilliseconds' 3)} ms").AppendLine();              }
Magic Number,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,NotifyAboutException,The following statement contains a magic number: ErrorsList.Reduce(25);
Magic Number,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,Dispose,The following statement contains a magic number: try              {                  if (lockTaken == false)                  {                      //We need to wait that refresh ambassador finish                      if (Monitor.Wait(this' TimeSpan.FromSeconds(15)) == false)                      {                          var message = $"Leader {_engine.Tag}: Refresh ambassador is taking the lock for 15 sec giving up on leader dispose";                          if (_engine.Log.IsInfoEnabled)                          {                              _engine.Log.Info(message);                          }                          throw new TimeoutException(message);                      }                  }                  _running.Lower();                  _shutdownRequested.Set();                  TaskExecutor.Execute(_ =>                  {                      _newEntriesArrived.TrySetCanceled();                      var lastStateChangeReason = _engine.LastStateChangeReason;                      TimeoutException te = null;                      if (string.IsNullOrEmpty(lastStateChangeReason) == false)                          te = new TimeoutException(lastStateChangeReason);                      foreach (var entry in _entries)                      {                          if (te == null)                          {                              entry.Value.TaskCompletionSource.TrySetCanceled();                          }                          else                          {                              entry.Value.TaskCompletionSource.TrySetException(te);                          }                      }                  }' null);                    if (_thread != null && _thread.ManagedThreadId != Thread.CurrentThread.ManagedThreadId)                      _thread.Join();                    var ae = new ExceptionAggregator("Could not properly dispose Leader");                  foreach (var ambasaddor in _nonVoters)                  {                      ae.Execute(ambasaddor.Value.Dispose);                  }                    foreach (var ambasaddor in _promotables)                  {                      ae.Execute(ambasaddor.Value.Dispose);                  }                  foreach (var ambasaddor in _voters)                  {                      ae.Execute(ambasaddor.Value.Dispose);                  }                      _newEntry.Dispose();                  _voterResponded.Dispose();                  _promotableUpdated.Dispose();                  _shutdownRequested.Dispose();                  _noop.Dispose();                  if (_engine.Log.IsInfoEnabled)                  {                      _engine.Log.Info($"Leader {_engine.Tag}: Dispose");                  }              }              finally              {                  if (lockTaken)                      Monitor.Exit(this);              }
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,RandomizeTimeout,The following statement contains a magic number: if (extend)                  timeout = Math.Max(timeout' timeout * 2);
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,RandomizeTimeout,The following statement contains a magic number: Timeout.TimeoutPeriod = _rand.Next(timeout / 3 * 2' timeout);
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,RandomizeTimeout,The following statement contains a magic number: Timeout.TimeoutPeriod = _rand.Next(timeout / 3 * 2' timeout);
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,Initialize,The following statement contains a magic number: try              {                  _persistentState = env;                    OperationTimeout = configuration.Cluster.OperationTimeout.AsTimeSpan;                  ElectionTimeout = configuration.Cluster.ElectionTimeout.AsTimeSpan;                  TcpConnectionTimeout = configuration.Cluster.TcpConnectionTimeout.AsTimeSpan;                                    DebuggerAttachedTimeout.LongTimespanIfDebugging(ref _operationTimeout);                  DebuggerAttachedTimeout.LongTimespanIfDebugging(ref _electionTimeout);                    ContextPool = new TransactionContextPool(_persistentState);                    ClusterTopology topology;                  using (ContextPool.AllocateOperationContext(out TransactionOperationContext context))                  using (var tx = context.OpenWriteTransaction())                  {                      var state = tx.InnerTransaction.CreateTree(GlobalStateSlice);                        var readResult = state.Read(TagSlice);                      _tag = readResult == null ? InitialTag : readResult.Reader.ToStringValue();                        Log = LoggingSource.Instance.GetLogger<RachisConsensus>(_tag);                      LogsTable.Create(tx.InnerTransaction' EntriesSlice' 16);                        var read = state.Read(CurrentTermSlice);                      if (read == null || read.Reader.Length != sizeof(long))                      {                          using (state.DirectAdd(CurrentTermSlice' sizeof(long)' out byte* ptr))                              *(long*)ptr = CurrentTerm = 0;                      }                      else                          CurrentTerm = read.Reader.ReadLittleEndianInt64();                        topology = GetTopology(context);                      if (topology.AllNodes.Count == 1 && topology.Members.Count == 1)                      {                          if (topology.GetUrlFromTag(_tag) != myUrl)                          {                              topology.Members.Remove(_tag);                              topology.Members.Add(_tag' configuration.Core.GetNodeHttpServerUrl(myUrl));                              SetTopology(this' context' topology);                          }                      }                      _clusterId = topology.TopologyId;                      InitializeState(context);                        tx.Commit();                  }                    Timeout = new TimeoutEvent(0);                  RandomizeTimeout();                    // if we don't have a topology id' then we are passive                  // an admin needs to let us know that it is fine' either                  // by explicit bootstraping or by connecting us to a cluster                  if (topology.TopologyId == null ||                      topology.Members.ContainsKey(_tag) == false)                  {                      CurrentState = RachisState.Passive;                      return;                  }                    CurrentState = RachisState.Follower;                  if (topology.Members.Count == 1)                  {                      using (ContextPool.AllocateOperationContext(out TransactionOperationContext ctx))                      {                          using (ctx.OpenWriteTransaction())                          {                              SwitchToSingleLeader(ctx);                              ctx.Transaction.Commit();                          }                        }                  }                  else                      Timeout.Start(SwitchToCandidateStateOnTimeout);              }              catch (Exception)              {                  Dispose();                  throw;              }
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,SetNewStateInTx,The following statement contains a magic number: PrevStates.LimitedSizeEnqueue(transition' 5);
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,ClearLogEntriesAndSetLastTruncate,The following statement contains a magic number: using (state.DirectAdd(LastTruncatedSlice' sizeof(long) * 2' out byte* ptr))              {                  var data = (long*)ptr;                  data[0] = index;                  data[1] = term;              }
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,TruncateLogBefore,The following statement contains a magic number: using (state.DirectAdd(LastTruncatedSlice' sizeof(long) * 2' out byte* ptr))              {                  var data = (long*)ptr;                  data[0] = entryIndex;                  data[1] = entryTerm;              }
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,GetEntry,The following statement contains a magic number: using (Slice.External(context.Allocator' (byte*)&reversedIndex' sizeof(long)' out Slice key))              {                  if (table.ReadByKey(key' out TableValueReader reader) == false)                  {                      flags = RachisEntryFlags.Invalid;                      return null;                  }                  flags = *(RachisEntryFlags*)reader.Read(3' out int size);                  Debug.Assert(size == sizeof(RachisEntryFlags));                  var ptr = reader.Read(2' out size);                  return new BlittableJsonReaderObject(ptr' size' context);              }
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,GetEntry,The following statement contains a magic number: using (Slice.External(context.Allocator' (byte*)&reversedIndex' sizeof(long)' out Slice key))              {                  if (table.ReadByKey(key' out TableValueReader reader) == false)                  {                      flags = RachisEntryFlags.Invalid;                      return null;                  }                  flags = *(RachisEntryFlags*)reader.Read(3' out int size);                  Debug.Assert(size == sizeof(RachisEntryFlags));                  var ptr = reader.Read(2' out size);                  return new BlittableJsonReaderObject(ptr' size' context);              }
Magic Number,Raven.Server.Rachis,RachisConsensus,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\RachisConsensus.cs,SetLastCommitIndex,The following statement contains a magic number: using (state.DirectAdd(LastCommitSlice' sizeof(long) * 2' out byte* ptr))              {                  var data = (long*)ptr;                  data[0] = index;                  data[1] = term;              }
Magic Number,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,OptimizeInternal,The following statement contains a magic number: Mask = int.MaxValue >> 31 - Bits.CeilLog2(size);
Magic Number,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,OptimizeInternal,The following statement contains a magic number: foreach (var trie in children)              {                  var key = trie.Key[0] & Mask;                  if (smallChildren[key] != null)                  {                      if (smallChildren[key] == trie)                          break; // different casing' same val' nothing to do                      // real collision' double the size and try again                      OptimizeInternal(size*2' children);                      return;                  }                  trie.DebugKey = DebugKey + trie.Key;                    smallChildren[key] = trie;                  trie.Optimize();              }
Magic Number,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,EnsureRoutsAreOnlyUsingASCII,The following statement contains a magic number: foreach (var sortedKey in sortedKeys)              {                  for (int i = 0; i < sortedKey.Length; i++)                  {                      if (sortedKey[i] >= 127)                          throw new InvalidOperationException("Cannot use non ASCII chars in routes' but got: " + sortedKey);                  }              }
Magic Number,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,Build,The following statement contains a magic number: current.Children = new Trie<T>[127];
Magic Number,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,HandleStarRoute,The following statement contains a magic number: if (current.Children == null)                  current.Children = new Trie<T>[127];
Magic Number,Raven.Server.Routing,Trie<T>,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\Trie.cs,HandleStarRoute,The following statement contains a magic number: current.Children['*'] = new Trie<T>              {                  Key = "*"'                  Children = new Trie<T>[127]              };
Magic Number,Raven.Server.ServerWide.BackgroundTasks,LatestVersionCheck,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\BackgroundTasks\LatestVersionCheck.cs,LatestVersionCheck,The following statement contains a magic number: _timer = new Timer(state => PerformAsync()' null' (int)TimeSpan.FromMinutes(5).TotalMilliseconds' (int)TimeSpan.FromHours(12).TotalMilliseconds);
Magic Number,Raven.Server.ServerWide.BackgroundTasks,LatestVersionCheck,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\BackgroundTasks\LatestVersionCheck.cs,LatestVersionCheck,The following statement contains a magic number: _timer = new Timer(state => PerformAsync()' null' (int)TimeSpan.FromMinutes(5).TotalMilliseconds' (int)TimeSpan.FromHours(12).TotalMilliseconds);
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,ClusterStateMachine,The following statement contains a magic number: ItemsSchema.DefineFixedSizeIndex(new TableSchema.FixedSizeSchemaIndexDef              {                  Name = EtagIndexName'                  IsGlobal = true'                  StartIndex = 3              });
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,RemoveNodeFromDatabase,The following statement contains a magic number: using (Slice.From(context.Allocator' "db/" + databaseNameLowered' out Slice lowerKey))              using (Slice.From(context.Allocator' "db/" + databaseName' out Slice key))              {                  if (items.ReadByKey(lowerKey' out TableValueReader reader) == false)                  {                      NotifyLeaderAboutError(index' leader' new InvalidOperationException($"The database {databaseName} does not exists"));                      return;                  }                  var doc = new BlittableJsonReaderObject(reader.Read(2' out int size)' size' context);                    var databaseRecord = JsonDeserializationCluster.DatabaseRecord(doc);                    if (doc.TryGet(nameof(DatabaseRecord.Topology)' out BlittableJsonReaderObject _) == false)                  {                      items.DeleteByKey(lowerKey);                      NotifyDatabaseChanged(context' databaseName' index' nameof(RemoveNodeFromDatabaseCommand));                      return;                  }                  remove.UpdateDatabaseRecord(databaseRecord' index);                    if (databaseRecord.DeletionInProgress.Count == 0 && databaseRecord.Topology.Count == 0)                  {                      DeleteDatabaseRecord(context' index' items' lowerKey' databaseName);                      return;                  }                    var updated = EntityToBlittable.ConvertEntityToBlittable(databaseRecord' DocumentConventions.Default' context);                    UpdateValue(index' items' lowerKey' key' updated);                    NotifyDatabaseChanged(context' databaseName' index' nameof(RemoveNodeFromDatabaseCommand));              }
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,AddDatabase,The following statement contains a magic number: try              {                  var items = context.Transaction.InnerTransaction.OpenTable(ItemsSchema' Items);                  using (Slice.From(context.Allocator' "db/" + addDatabaseCommand.Name' out Slice valueName))                  using (Slice.From(context.Allocator' "db/" + addDatabaseCommand.Name.ToLowerInvariant()' out Slice valueNameLowered))                  using (var databaseRecordAsJson = EntityToBlittable.ConvertEntityToBlittable(addDatabaseCommand.Record' DocumentConventions.Default' context))                  {                      if (addDatabaseCommand.RaftCommandIndex != null)                      {                          if (items.ReadByKey(valueNameLowered' out TableValueReader reader) == false && addDatabaseCommand.RaftCommandIndex != 0)                          {                              NotifyLeaderAboutError(index' leader'                                  new ConcurrencyException("Concurrency violation' the database " + addDatabaseCommand.Name + " does not exists' but had a non zero etag"));                              return;                          }                            var actualEtag = Bits.SwapBytes(*(long*)reader.Read(3' out int size));                          Debug.Assert(size == sizeof(long));                            if (actualEtag != addDatabaseCommand.RaftCommandIndex.Value)                          {                              NotifyLeaderAboutError(index' leader'                                  new ConcurrencyException("Concurrency violation' the database " + addDatabaseCommand.Name + " has etag " + actualEtag +                                                           " but was expecting " + addDatabaseCommand.RaftCommandIndex));                              return;                          }                      }                        UpdateValue(index' items' valueNameLowered' valueName' databaseRecordAsJson);                      SetDatabaseValues(addDatabaseCommand.DatabaseValues' addDatabaseCommand.Name' context' index' items);                  }              }              finally              {                  NotifyDatabaseChanged(context' addDatabaseCommand.Name' index' nameof(AddDatabaseCommand));              }
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,UpdateValue,The following statement contains a magic number: try              {                  var items = context.Transaction.InnerTransaction.OpenTable(ItemsSchema' Items);                  var command = (UpdateValueCommand<T>)CommandBase.CreateFrom(cmd);                  if (command.Name.StartsWith(Constants.Documents.Prefix))                  {                      NotifyLeaderAboutError(index' leader'                          new InvalidOperationException("Cannot set " + command.Name + " using PutValueCommand' only via dedicated database calls"));                      return;                  }                    using (Slice.From(context.Allocator' command.Name' out Slice valueName))                  using (Slice.From(context.Allocator' command.Name.ToLowerInvariant()' out Slice valueNameLowered))                  {                      BlittableJsonReaderObject previousValue = null;                      if (items.ReadByKey(valueNameLowered' out var tvr))                      {                          var ptr = tvr.Read(2' out int size);                          previousValue = new BlittableJsonReaderObject(ptr' size' context);                      }                        var newValue = command.GetUpdatedValue(context' previousValue);                      if (newValue == null)                          return;                        UpdateValue(index' items' valueNameLowered' valueName' newValue);                  }              }              finally              {                  NotifyValueChanged(context' type' index);              }
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Initialize,The following statement contains a magic number: ItemsSchema.Create(context.Transaction.InnerTransaction' Items' 32);
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Initialize,The following statement contains a magic number: CmpXchgItemsSchema.Create(context.Transaction.InnerTransaction' CmpXchg' 32);
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,GetDatabaseNames,The following statement contains a magic number: using (Slice.From(context.Allocator' dbKey' out Slice loweredPrefix))              {                  foreach (var result in items.SeekByPrimaryKeyPrefix(loweredPrefix' Slices.Empty' 0))                  {                      if (take-- <= 0)                          yield break;                        yield return GetCurrentItemKey(result.Value).Substring(3);                  }              }
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,GetCurrentItem,The following statement contains a magic number: var ptr = result.Reader.Read(2' out int size);
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,DeleteTreeByPrefix,The following statement contains a magic number: const int batchSize = 1024;
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,ReadInternal,The following statement contains a magic number: var ptr = reader.Read(2' out int size);
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,ReadInternal,The following statement contains a magic number: etag = Bits.SwapBytes(*(long*)reader.Read(3' out size));
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,GetDataAndEtagTupleFromReader,The following statement contains a magic number: var ptr = reader.Read(2' out int size);
Magic Number,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,GetDataAndEtagTupleFromReader,The following statement contains a magic number: etag = Bits.SwapBytes(*(long*)reader.Read(3' out size));
Magic Number,Raven.Server.ServerWide,RachisLogIndexNotifications,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,RecordNotification,The following statement contains a magic number: while (RecentNotifications.Count > 25)                  RecentNotifications.TryDequeue(out _);
Magic Number,Raven.Server.ServerWide,RachisLogIndexNotifications,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,NotifyListenersAbout,The following statement contains a magic number: if (e != null)              {                  _errors.Enqueue(new ErrorHolder                  {                      Index = index'                      Exception = ExceptionDispatchInfo.Capture(e)                  });                  if (Interlocked.Increment(ref _numberOfErrors) > 25)                  {                      _errors.TryDequeue(out _);                      Interlocked.Decrement(ref _numberOfErrors);                  }              }
Magic Number,Raven.Server.ServerWide,LocalHttpResponse,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\LocalEndpointClient.cs,LocalHttpResponse,The following statement contains a magic number: StatusCode = 200;
Magic Number,Raven.Server.ServerWide,OperationCancelToken,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\OperationCancelToken.cs,Delay,The following statement contains a magic number: const int minimumDelayTime = 25;
Magic Number,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,Protect,The following statement contains a magic number: if (entropy.Length < 8)                  throw new InvalidOperationException($"The provided entropy is too small. Should be at least 8 bytes but was {entropy.Length} bytes");
Magic Number,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,Unprotect,The following statement contains a magic number: if (entropy.Length < 8)                  throw new InvalidOperationException($"The provided entropy is too small. Should be at least 8 bytes but was {entropy.Length} bytes");
Magic Number,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The following statement contains a magic number: const int keySize = 512;
Magic Number,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The following statement contains a magic number: if (rawData.Length * 8 != keySize)              {                  throw new InvalidOperationException(                      $"Got wrong master key after executing {_config.MasterKeyExec} {_config.MasterKeyExecArguments}' the size of the key must be {keySize} bits' but was {rawData.Length * 8} bits.");              }
Magic Number,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyWithExecutable,The following statement contains a magic number: if (rawData.Length * 8 != keySize)              {                  throw new InvalidOperationException(                      $"Got wrong master key after executing {_config.MasterKeyExec} {_config.MasterKeyExecArguments}' the size of the key must be {keySize} bits' but was {rawData.Length * 8} bits.");              }
Magic Number,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyFromPath,The following statement contains a magic number: try              {                  var key = File.ReadAllBytes(_config.MasterKeyPath);                    if (key.Length * 8 != KeySize)                  {                      throw new InvalidOperationException(                          $"The size of the key must be {KeySize} bits' but was {key.Length * 8} bits.");                  }                  return key;              }              catch (Exception e)              {                  throw new CryptographicException(                      $"Unable to open the master secret key at {_config.MasterKeyPath}' won't proceed because losing this key will lose access to all user encrypted information. Admin assistance required."'                      e);              }
Magic Number,Raven.Server.ServerWide,SecretProtection,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\SecretProtection.cs,LoadMasterKeyFromPath,The following statement contains a magic number: try              {                  var key = File.ReadAllBytes(_config.MasterKeyPath);                    if (key.Length * 8 != KeySize)                  {                      throw new InvalidOperationException(                          $"The size of the key must be {KeySize} bits' but was {key.Length * 8} bits.");                  }                  return key;              }              catch (Exception e)              {                  throw new CryptographicException(                      $"Unable to open the master secret key at {_config.MasterKeyPath}' won't proceed because losing this key will lose access to all user encrypted information. Admin assistance required."'                      e);              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The following statement contains a magic number: if (Configuration.Core.RunInMemory)              {                  options = StorageEnvironmentOptions.CreateMemoryOnly();              }              else              {                  options = StorageEnvironmentOptions.ForPath(path.FullPath);                  var secretKey = Path.Combine(path.FullPath' "secret.key.encrypted");                  if (File.Exists(secretKey))                  {                      byte[] buffer;                      try                      {                          buffer = File.ReadAllBytes(secretKey);                      }                      catch (Exception e)                      {                          throw new FileLoadException($"The server store secret key is provided in {secretKey} but the server failed to read the file. Admin assistance required."' e);                      }                        var secret = new byte[buffer.Length - 32];                      var entropy = new byte[32];                      Array.Copy(buffer' 0' secret' 0' buffer.Length - 32);                      Array.Copy(buffer' buffer.Length - 32' entropy' 0' 32);                        try                      {                          options.MasterKey = Secrets.Unprotect(secret' entropy);                      }                      catch (Exception e)                      {                          throw new CryptographicException($"Unable to unprotect the secret key file {secretKey}. " +                                                           "Was the server store encrypted using a different OS user? In that case' " +                                                           "you must provide an unprotected key (rvn server put-key). " +                                                           "Admin assistance required."' e);                      }                  }              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The following statement contains a magic number: if (Configuration.Core.RunInMemory)              {                  options = StorageEnvironmentOptions.CreateMemoryOnly();              }              else              {                  options = StorageEnvironmentOptions.ForPath(path.FullPath);                  var secretKey = Path.Combine(path.FullPath' "secret.key.encrypted");                  if (File.Exists(secretKey))                  {                      byte[] buffer;                      try                      {                          buffer = File.ReadAllBytes(secretKey);                      }                      catch (Exception e)                      {                          throw new FileLoadException($"The server store secret key is provided in {secretKey} but the server failed to read the file. Admin assistance required."' e);                      }                        var secret = new byte[buffer.Length - 32];                      var entropy = new byte[32];                      Array.Copy(buffer' 0' secret' 0' buffer.Length - 32);                      Array.Copy(buffer' buffer.Length - 32' entropy' 0' 32);                        try                      {                          options.MasterKey = Secrets.Unprotect(secret' entropy);                      }                      catch (Exception e)                      {                          throw new CryptographicException($"Unable to unprotect the secret key file {secretKey}. " +                                                           "Was the server store encrypted using a different OS user? In that case' " +                                                           "you must provide an unprotected key (rvn server put-key). " +                                                           "Admin assistance required."' e);                      }                  }              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The following statement contains a magic number: if (Configuration.Core.RunInMemory)              {                  options = StorageEnvironmentOptions.CreateMemoryOnly();              }              else              {                  options = StorageEnvironmentOptions.ForPath(path.FullPath);                  var secretKey = Path.Combine(path.FullPath' "secret.key.encrypted");                  if (File.Exists(secretKey))                  {                      byte[] buffer;                      try                      {                          buffer = File.ReadAllBytes(secretKey);                      }                      catch (Exception e)                      {                          throw new FileLoadException($"The server store secret key is provided in {secretKey} but the server failed to read the file. Admin assistance required."' e);                      }                        var secret = new byte[buffer.Length - 32];                      var entropy = new byte[32];                      Array.Copy(buffer' 0' secret' 0' buffer.Length - 32);                      Array.Copy(buffer' buffer.Length - 32' entropy' 0' 32);                        try                      {                          options.MasterKey = Secrets.Unprotect(secret' entropy);                      }                      catch (Exception e)                      {                          throw new CryptographicException($"Unable to unprotect the secret key file {secretKey}. " +                                                           "Was the server store encrypted using a different OS user? In that case' " +                                                           "you must provide an unprotected key (rvn server put-key). " +                                                           "Admin assistance required."' e);                      }                  }              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The following statement contains a magic number: if (Configuration.Core.RunInMemory)              {                  options = StorageEnvironmentOptions.CreateMemoryOnly();              }              else              {                  options = StorageEnvironmentOptions.ForPath(path.FullPath);                  var secretKey = Path.Combine(path.FullPath' "secret.key.encrypted");                  if (File.Exists(secretKey))                  {                      byte[] buffer;                      try                      {                          buffer = File.ReadAllBytes(secretKey);                      }                      catch (Exception e)                      {                          throw new FileLoadException($"The server store secret key is provided in {secretKey} but the server failed to read the file. Admin assistance required."' e);                      }                        var secret = new byte[buffer.Length - 32];                      var entropy = new byte[32];                      Array.Copy(buffer' 0' secret' 0' buffer.Length - 32);                      Array.Copy(buffer' buffer.Length - 32' entropy' 0' 32);                        try                      {                          options.MasterKey = Secrets.Unprotect(secret' entropy);                      }                      catch (Exception e)                      {                          throw new CryptographicException($"Unable to unprotect the secret key file {secretKey}. " +                                                           "Was the server store encrypted using a different OS user? In that case' " +                                                           "you must provide an unprotected key (rvn server put-key). " +                                                           "Admin assistance required."' e);                      }                  }              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The following statement contains a magic number: if (Configuration.Core.RunInMemory)              {                  options = StorageEnvironmentOptions.CreateMemoryOnly();              }              else              {                  options = StorageEnvironmentOptions.ForPath(path.FullPath);                  var secretKey = Path.Combine(path.FullPath' "secret.key.encrypted");                  if (File.Exists(secretKey))                  {                      byte[] buffer;                      try                      {                          buffer = File.ReadAllBytes(secretKey);                      }                      catch (Exception e)                      {                          throw new FileLoadException($"The server store secret key is provided in {secretKey} but the server failed to read the file. Admin assistance required."' e);                      }                        var secret = new byte[buffer.Length - 32];                      var entropy = new byte[32];                      Array.Copy(buffer' 0' secret' 0' buffer.Length - 32);                      Array.Copy(buffer' buffer.Length - 32' entropy' 0' 32);                        try                      {                          options.MasterKey = Secrets.Unprotect(secret' entropy);                      }                      catch (Exception e)                      {                          throw new CryptographicException($"Unable to unprotect the secret key file {secretKey}. " +                                                           "Was the server store encrypted using a different OS user? In that case' " +                                                           "you must provide an unprotected key (rvn server put-key). " +                                                           "Admin assistance required."' e);                      }                  }              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,Initialize,The following statement contains a magic number: _timer = new Timer(IdleOperations' null' _frequencyToCheckForIdleDatabases' TimeSpan.FromDays(7));
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,OnValueChanged,The following statement contains a magic number: switch (t.Type)              {                  case nameof(RecheckStatusOfServerCertificateCommand):                  case nameof(ConfirmReceiptServerCertificateCommand):                      using (ContextPool.AllocateOperationContext(out TransactionOperationContext context))                      using (context.OpenReadTransaction())                      {                          var cert = Cluster.GetItem(context' "server/cert");                          if (cert == null)                              return; // was already processed?                          if (cert.TryGet("Confirmations"' out int confirmations) == false)                              throw new InvalidOperationException("Expected to get confirmations count");                            if (GetClusterTopology(context).AllNodes.Count > confirmations)                          {                              if (Server.Certificate?.Certificate != null &&                                  (Server.Certificate.Certificate.NotAfter - DateTime.Now).TotalDays > 3)                                  return; // we still have time for all the nodes to update themselves                                                         }                                                    if (cert.TryGet("Certificate"' out string certBase64) == false ||                               cert.TryGet("Thumbprint"' out string certThumbprint) == false)                              throw new InvalidOperationException("Invalid server cert value' expected to get Certificate and Thumbprint properties");                            if (certThumbprint == Server.Certificate?.Certificate?.Thumbprint)                              return;// already replaced it' nothing to do                                                    // and now we have to replace the cert...                          if (string.IsNullOrEmpty(Configuration.Security.CertificatePath))                          {                              NotificationCenter.Add(AlertRaised.Create(                                  null'                                  "Unable to refresh server certificate"'                                   "Cluster wanted to install updated server certificate' but no path has been configured"'                                   AlertType.ClusterTopologyWarning'                                   NotificationSeverity.Error'                                  "Cluster.Certificate.Install.Error"));                              return;                          }                                                  var bytesToSave = Convert.FromBase64String(certBase64);                          var newClusterCertificate = new X509Certificate2(bytesToSave'(string)null' X509KeyStorageFlags.Exportable);                                                    if(Logger.IsOperationsEnabled)                              Logger.Operations($"Replacing the certificate used by the server to: {newClusterCertificate.FriendlyName} - {newClusterCertificate.Thumbprint}");                                                                              if (string.IsNullOrEmpty(Configuration.Security.CertificatePassword) == false)                          {                              bytesToSave = newClusterCertificate.Export(X509ContentType.Pkcs12' Configuration.Security.CertificatePassword);                          }                            using (var certStream = File.Create(Path.Combine(AppContext.BaseDirectory' Configuration.Security.CertificatePath)))                          {                              certStream.Write(bytesToSave' 0' bytesToSave.Length);                              certStream.Flush(true);                          }                                                    Server.SetCertificate(newClusterCertificate' bytesToSave' Configuration.Security.CertificatePassword);                                                }                      break;                  case nameof(InstallUpdatedServerCertificateCommand):                      using (ContextPool.AllocateOperationContext(out TransactionOperationContext context))                      using (context.OpenReadTransaction())                      {                          var cert = Cluster.GetItem(context' "server/cert");                          if (cert == null)                              return; // was already processed?                          if (cert.TryGet("Thumbprint"' out string certThumbprint) == false)                              throw new InvalidOperationException("Invalid server cert value' expected to get Thumbprint property");                            if(cert.TryGet("Certificate"' out string base64Cert) == false)                              throw new InvalidOperationException("Invalid server cert value' expected to get Certificate property");                            var certificate = new X509Certificate2(Convert.FromBase64String(base64Cert));                            var now = DateTime.UtcNow;                          if (certificate.NotBefore.ToUniversalTime() > now)                          {                              if (Logger.IsOperationsEnabled)                              {                                  Logger.Operations($"Unable to confirm certificate update because the NotBefore property is set " +                                                    $"to {certificate.NotBefore.ToUniversalTime():O} and now it is {now:O}. Will try again later");                              }                              return;                          }                            // we got it' now let us let the leader know about it                          SendToLeaderAsync(new ConfirmReceiptServerCertificateCommand(certThumbprint));                      }                      break;                  case nameof(PutClientConfigurationCommand):                      LastClientConfigurationIndex = t.Index;                      break;                  case nameof(PutLicenseCommand):                  case nameof(DeactivateLicenseCommand):                      InvokeLicenseChanged();                      break;                  case nameof(PutLicenseLimitsCommand):                      LicenseLimitsChanged?.Invoke(null' null);                      using (ContextPool.AllocateOperationContext(out TransactionOperationContext context))                      using (context.OpenReadTransaction())                      {                          OnTopologyChanged(null' GetClusterTopology(context));                      }                      break;              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The following statement contains a magic number: if (key.Length != 256 / 8)                  throw new InvalidOperationException($"The size of the key must be 256 bits' but was {key.Length * 8} bits.");
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The following statement contains a magic number: if (key.Length != 256 / 8)                  throw new InvalidOperationException($"The size of the key must be 256 bits' but was {key.Length * 8} bits.");
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The following statement contains a magic number: if (key.Length != 256 / 8)                  throw new InvalidOperationException($"The size of the key must be 256 bits' but was {key.Length * 8} bits.");
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The following statement contains a magic number: if (secretKey.Length != 256 / 8)                  throw new ArgumentException($"Key size must be 256 bits' but was {secretKey.Length * 8}"' nameof(secretKey));
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The following statement contains a magic number: if (secretKey.Length != 256 / 8)                  throw new ArgumentException($"Key size must be 256 bits' but was {secretKey.Length * 8}"' nameof(secretKey));
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The following statement contains a magic number: if (secretKey.Length != 256 / 8)                  throw new ArgumentException($"Key size must be 256 bits' but was {secretKey.Length * 8}"' nameof(secretKey));
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,PutSecretKey,The following statement contains a magic number: fixed (byte* pHash = hash)              fixed (byte* pKey = key)              {                  try                  {                      if (Sodium.crypto_generichash(pHash' (UIntPtr)hashLen' pKey' (ulong)key.Length' null' UIntPtr.Zero) != 0)                          throw new InvalidOperationException("Failed to hash key");                        Sparrow.Memory.Copy(pHash + hashLen' pKey' key.Length);                        var entropy = Sodium.GenerateRandomBuffer(256);                        var protectedData = Secrets.Protect(hash' entropy);                        var ms = new MemoryStream();                      ms.Write(entropy' 0' entropy.Length);                      ms.Write(protectedData' 0' protectedData.Length);                      ms.Position = 0;                        tree.Add(name' ms);                  }                  finally                  {                      Sodium.ZeroMemory(pHash' hash.Length);                      Sodium.ZeroMemory(pKey' key.Length);                  }              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,GetSecretKey,The following statement contains a magic number: const int numberOfBits = 256;
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,GetSecretKey,The following statement contains a magic number: var entropy = new byte[numberOfBits / 8];
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,IdleOperations,The following statement contains a magic number: try              {                  foreach (var db in DatabasesLandlord.DatabasesCache)                  {                      try                      {                          if (db.Value.Status != TaskStatus.RanToCompletion)                              continue;                            var database = db.Value.Result;                            if (DatabaseNeedsToRunIdleOperations(database))                              database.RunIdleOperations();                      }                        catch (Exception e)                      {                          if (Logger.IsInfoEnabled)                              Logger.Info("Error during idle operation run for " + db.Key' e);                      }                  }                    try                  {                      var maxTimeDatabaseCanBeIdle = Configuration.Databases.MaxIdleTime.AsTimeSpan;                        var databasesToCleanup = DatabasesLandlord.LastRecentlyUsed                          .Where(x => SystemTime.UtcNow - x.Value > maxTimeDatabaseCanBeIdle)                          .Select(x => x.Key)                          .ToArray();                        foreach (var db in databasesToCleanup)                      {                          if (DatabasesLandlord.DatabasesCache.TryGetValue(db' out Task<DocumentDatabase> resourceTask) &&                              resourceTask != null &&                              resourceTask.Status == TaskStatus.RanToCompletion &&                              resourceTask.Result.PeriodicBackupRunner != null &&                              resourceTask.Result.PeriodicBackupRunner.HasRunningBackups())                          {                              // there are running backups for this database                              continue;                          }                            // intentionally inside the loop' so we get better concurrency overall                          // since shutting down a database can take a while                          if (resourceTask == null ||                              resourceTask.Result.Configuration.Core.RunInMemory)                              continue;                          var idleDbInstance = resourceTask.Result;                          if(SystemTime.UtcNow - DatabasesLandlord.LastWork(idleDbInstance)  < maxTimeDatabaseCanBeIdle)                              continue;                            DatabasesLandlord.UnloadDirectly(db);                      }                    }                  catch (Exception e)                  {                      if (Logger.IsInfoEnabled)                          Logger.Info("Error during idle operations for the server"' e);                  }              }              finally              {                  try                  {                      _timer.Change(_frequencyToCheckForIdleDatabases' TimeSpan.FromDays(7));                  }                  catch (ObjectDisposedException)                  {                  }              }
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,DatabaseNeedsToRunIdleOperations,The following statement contains a magic number: return ((now - maxLastWork).TotalMinutes > 5) || ((now - database.LastIdleTime).TotalMinutes > 10);
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,DatabaseNeedsToRunIdleOperations,The following statement contains a magic number: return ((now - maxLastWork).TotalMinutes > 5) || ((now - database.LastIdleTime).TotalMinutes > 10);
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,GetTcpInfoAndCertificates,The following statement contains a magic number: if (tcpServerUrl.StartsWith("tcp://localhost.fiddler:"' StringComparison.OrdinalIgnoreCase))                  tcpServerUrl = tcpServerUrl.Remove(15' 8);
Magic Number,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,GetTcpInfoAndCertificates,The following statement contains a magic number: if (tcpServerUrl.StartsWith("tcp://localhost.fiddler:"' StringComparison.OrdinalIgnoreCase))                  tcpServerUrl = tcpServerUrl.Remove(15' 8);
Magic Number,Raven.Server.ServerWide,TempCryptoStream,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\TempCryptoStream.cs,TempCryptoStream,The following statement contains a magic number: _internalBuffer = new byte[4096];
Magic Number,Raven.Server.ServerWide.Commands,UpdateValueForDatabaseCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\UpdateValueForDatabaseCommand.cs,Execute,The following statement contains a magic number: using (Slice.From(context.Allocator' itemKey.ToLowerInvariant()' out Slice valueNameLowered))              {                  if (items.ReadByKey(valueNameLowered' out TableValueReader reader))                  {                      var ptr = reader.Read(2' out int size);                      itemBlittable = new BlittableJsonReaderObject(ptr' size' context);                  }                    itemBlittable = GetUpdatedValue(index' record' context' itemBlittable' state);                    // if returned null' means' there is nothing to update and we just wanted to delete the value                  if (itemBlittable == null)                  {                      items.DeleteByKey(valueNameLowered);                      result = GetResult();                      return;                  }                    // here we get the item key again' in case it was changed (a new entity' etc)                  itemKey = GetItemId();              }
Magic Number,Raven.Server.ServerWide.Commands.Subscriptions,DeleteSubscriptionCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\DeleteSubscriptionCommand.cs,Execute,The following statement contains a magic number: using (Slice.From(context.Allocator' itemKey.ToLowerInvariant()' out Slice valueNameLowered))              {                  if (items.ReadByKey(valueNameLowered' out TableValueReader tvr) == false)                  {                      return; // nothing to do                  }                    var ptr = tvr.Read(2' out int size);                  var doc = new BlittableJsonReaderObject(ptr' size' context);                    var subscriptionState = JsonDeserializationClient.SubscriptionState(doc);                    items.DeleteByKey(valueNameLowered);                    if (string.IsNullOrEmpty(subscriptionState.SubscriptionName) == false)                  {                      itemKey = SubscriptionState.GenerateSubscriptionItemKeyName(DatabaseName' subscriptionState.SubscriptionName);                      using (Slice.From(context.Allocator' itemKey.ToLowerInvariant()' out valueNameLowered))                      {                          items.DeleteByKey(valueNameLowered);                      }                  }              }
Magic Number,Raven.Server.ServerWide.Commands.Subscriptions,PutSubscriptionCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\PutSubscriptionCommand.cs,Execute,The following statement contains a magic number: using (Slice.From(context.Allocator' subscriptionItemName' out Slice valueName))              using (Slice.From(context.Allocator' subscriptionItemName.ToLowerInvariant()' out Slice valueNameLowered))              {                  if (items.ReadByKey(valueNameLowered' out TableValueReader tvr))                  {                      var ptr = tvr.Read(2' out int size);                      var doc = new BlittableJsonReaderObject(ptr' size' context);                        var existingSubscriptionState = JsonDeserializationClient.SubscriptionState(doc);                        if (SubscriptionId != existingSubscriptionState.SubscriptionId)                          throw new InvalidOperationException("A subscription could not be modified because the name '" + subscriptionItemName +                                                              "' is already in use in a subscription with different Id.");                        if (string.IsNullOrEmpty(InitialChangeVector) == false && InitialChangeVector == nameof(Constants.Documents.SubscriptionChangeVectorSpecialStates.DoNotChange))                      {                          InitialChangeVector = existingSubscriptionState.ChangeVectorForNextBatchStartingPoint;                      }                      else                      {                          AssertValidChangeVector();                      }                  }                  else                  {                      AssertValidChangeVector();                  }                    using (var receivedSubscriptionState = context.ReadObject(new SubscriptionState                  {                      Query = Query'                      ChangeVectorForNextBatchStartingPoint = InitialChangeVector'                      SubscriptionId = subscriptionId'                      SubscriptionName = SubscriptionName'                      LastBatchAckTime = null'                      Disabled = Disabled'                      MentorNode = MentorNode'                      LastClientConnectionTime = null                  }.ToJson()' SubscriptionName))                  {                      ClusterStateMachine.UpdateValue(subscriptionId' items' valueNameLowered' valueName' receivedSubscriptionState);                  }              }
Magic Number,Raven.Server.ServerWide.Commands.Subscriptions,ToggleSubscriptionStateCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\Subscriptions\ToggleSubscriptionStateCommand.cs,Execute,The following statement contains a magic number: using (Slice.From(context.Allocator' itemKey.ToLowerInvariant()' out Slice valueNameLowered))              using (Slice.From(context.Allocator' itemKey' out Slice valueName))              {                  if (items.ReadByKey(valueNameLowered' out TableValueReader tvr) == false)                  {                      throw new InvalidOperationException("Cannot find subscription " + index);                  }                    var ptr = tvr.Read(2' out int size);                  var doc = new BlittableJsonReaderObject(ptr' size' context);                    var subscriptionState = JsonDeserializationClient.SubscriptionState(doc);                  subscriptionState.Disabled = Disable;                  using (var obj = context.ReadObject(subscriptionState.ToJson()' "subscription"))                  {                      ClusterStateMachine.UpdateValue(index' items' valueNameLowered' valueName' obj);                  }              }
Magic Number,Raven.Server.ServerWide.Context,DocumentsContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsContextPool.cs,CreateContext,The following statement contains a magic number: if (sizeof(int) == IntPtr.Size || _database.Configuration.Storage.ForceUsing32BitsPager)                  return new DocumentsOperationContext(_database' 32 * 1024' 4 * 1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,DocumentsContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsContextPool.cs,CreateContext,The following statement contains a magic number: if (sizeof(int) == IntPtr.Size || _database.Configuration.Storage.ForceUsing32BitsPager)                  return new DocumentsOperationContext(_database' 32 * 1024' 4 * 1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,DocumentsContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsContextPool.cs,CreateContext,The following statement contains a magic number: if (sizeof(int) == IntPtr.Size || _database.Configuration.Storage.ForceUsing32BitsPager)                  return new DocumentsOperationContext(_database' 32 * 1024' 4 * 1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,DocumentsContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsContextPool.cs,CreateContext,The following statement contains a magic number: if (sizeof(int) == IntPtr.Size || _database.Configuration.Storage.ForceUsing32BitsPager)                  return new DocumentsOperationContext(_database' 32 * 1024' 4 * 1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,DocumentsContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsContextPool.cs,CreateContext,The following statement contains a magic number: return new DocumentsOperationContext(_database' 1024 * 1024' 16 * 1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,DocumentsContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsContextPool.cs,CreateContext,The following statement contains a magic number: return new DocumentsOperationContext(_database' 1024 * 1024' 16 * 1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,DocumentsContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsContextPool.cs,CreateContext,The following statement contains a magic number: return new DocumentsOperationContext(_database' 1024 * 1024' 16 * 1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,DocumentsContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsContextPool.cs,CreateContext,The following statement contains a magic number: return new DocumentsOperationContext(_database' 1024 * 1024' 16 * 1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,DocumentsOperationContext,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsOperationContext.cs,ShortTermSingleUse,The following statement contains a magic number: var shortTermSingleUse = new DocumentsOperationContext(documentDatabase' 4096' 1024' SharedMultipleUseFlag.None);
Magic Number,Raven.Server.ServerWide.Context,DocumentsOperationContext,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\DocumentsOperationContext.cs,ShortTermSingleUse,The following statement contains a magic number: var shortTermSingleUse = new DocumentsOperationContext(documentDatabase' 4096' 1024' SharedMultipleUseFlag.None);
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: if (_storageEnvironment.Options.RunningOn32Bits)              {                  initialSize = 4096;              }              else              {                  initialSize = 1024*1024;                    if (_mostlyThreadDedicatedWork != null)                  {                      // if this is a context pool dedicated for a thread (like for indexes)' we probably won't do a lot of                       // work on that outside of its thread' so let not allocate a lot of memory for that. We just need enough                      // there process simple stuff like IsStale' etc' so let us start small                      initialSize = _mostlyThreadDedicatedWork.Value ?                           16*1024*1024 : // the initial budget is 32 MB' so let us now blow through that all at once                          32*1024;                  }              }
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: if (_storageEnvironment.Options.RunningOn32Bits)              {                  initialSize = 4096;              }              else              {                  initialSize = 1024*1024;                    if (_mostlyThreadDedicatedWork != null)                  {                      // if this is a context pool dedicated for a thread (like for indexes)' we probably won't do a lot of                       // work on that outside of its thread' so let not allocate a lot of memory for that. We just need enough                      // there process simple stuff like IsStale' etc' so let us start small                      initialSize = _mostlyThreadDedicatedWork.Value ?                           16*1024*1024 : // the initial budget is 32 MB' so let us now blow through that all at once                          32*1024;                  }              }
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: if (_storageEnvironment.Options.RunningOn32Bits)              {                  initialSize = 4096;              }              else              {                  initialSize = 1024*1024;                    if (_mostlyThreadDedicatedWork != null)                  {                      // if this is a context pool dedicated for a thread (like for indexes)' we probably won't do a lot of                       // work on that outside of its thread' so let not allocate a lot of memory for that. We just need enough                      // there process simple stuff like IsStale' etc' so let us start small                      initialSize = _mostlyThreadDedicatedWork.Value ?                           16*1024*1024 : // the initial budget is 32 MB' so let us now blow through that all at once                          32*1024;                  }              }
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: if (_storageEnvironment.Options.RunningOn32Bits)              {                  initialSize = 4096;              }              else              {                  initialSize = 1024*1024;                    if (_mostlyThreadDedicatedWork != null)                  {                      // if this is a context pool dedicated for a thread (like for indexes)' we probably won't do a lot of                       // work on that outside of its thread' so let not allocate a lot of memory for that. We just need enough                      // there process simple stuff like IsStale' etc' so let us start small                      initialSize = _mostlyThreadDedicatedWork.Value ?                           16*1024*1024 : // the initial budget is 32 MB' so let us now blow through that all at once                          32*1024;                  }              }
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: if (_storageEnvironment.Options.RunningOn32Bits)              {                  initialSize = 4096;              }              else              {                  initialSize = 1024*1024;                    if (_mostlyThreadDedicatedWork != null)                  {                      // if this is a context pool dedicated for a thread (like for indexes)' we probably won't do a lot of                       // work on that outside of its thread' so let not allocate a lot of memory for that. We just need enough                      // there process simple stuff like IsStale' etc' so let us start small                      initialSize = _mostlyThreadDedicatedWork.Value ?                           16*1024*1024 : // the initial budget is 32 MB' so let us now blow through that all at once                          32*1024;                  }              }
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: if (_storageEnvironment.Options.RunningOn32Bits)              {                  initialSize = 4096;              }              else              {                  initialSize = 1024*1024;                    if (_mostlyThreadDedicatedWork != null)                  {                      // if this is a context pool dedicated for a thread (like for indexes)' we probably won't do a lot of                       // work on that outside of its thread' so let not allocate a lot of memory for that. We just need enough                      // there process simple stuff like IsStale' etc' so let us start small                      initialSize = _mostlyThreadDedicatedWork.Value ?                           16*1024*1024 : // the initial budget is 32 MB' so let us now blow through that all at once                          32*1024;                  }              }
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: if (_storageEnvironment.Options.RunningOn32Bits)              {                  initialSize = 4096;              }              else              {                  initialSize = 1024*1024;                    if (_mostlyThreadDedicatedWork != null)                  {                      // if this is a context pool dedicated for a thread (like for indexes)' we probably won't do a lot of                       // work on that outside of its thread' so let not allocate a lot of memory for that. We just need enough                      // there process simple stuff like IsStale' etc' so let us start small                      initialSize = _mostlyThreadDedicatedWork.Value ?                           16*1024*1024 : // the initial budget is 32 MB' so let us now blow through that all at once                          32*1024;                  }              }
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: if (_storageEnvironment.Options.RunningOn32Bits)              {                  initialSize = 4096;              }              else              {                  initialSize = 1024*1024;                    if (_mostlyThreadDedicatedWork != null)                  {                      // if this is a context pool dedicated for a thread (like for indexes)' we probably won't do a lot of                       // work on that outside of its thread' so let not allocate a lot of memory for that. We just need enough                      // there process simple stuff like IsStale' etc' so let us start small                      initialSize = _mostlyThreadDedicatedWork.Value ?                           16*1024*1024 : // the initial budget is 32 MB' so let us now blow through that all at once                          32*1024;                  }              }
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: return new TransactionOperationContext(_storageEnvironment' initialSize' 16*1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,TransactionContextPool,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionContextPool.cs,CreateContext,The following statement contains a magic number: return new TransactionOperationContext(_storageEnvironment' initialSize' 16*1024' LowMemoryFlag);
Magic Number,Raven.Server.ServerWide.Context,TransactionOperationContext<TTransaction>,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Context\TransactionOperationContext.cs,GetTransactionMarker,The following statement contains a magic number: if (value == 0)                  return 2;
Magic Number,Raven.Server.ServerWide.Maintenance,ClusterMaintenanceWorker,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceWorker.cs,Dispose,The following statement contains a magic number: try              {                  if (_collectingTask == null)                      return;                    if (_collectingTask.Wait(TimeSpan.FromSeconds(30)) == false)                  {                      _collectingTask.IgnoreUnobservedExceptions();                        throw new ObjectDisposedException($"Collecting report task on {_server.NodeTag} still running and can't be closed");                  }              }              finally              {                  _cts.Dispose();              }
Magic Number,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,AddToDecisionLog,The following statement contains a magic number: if (_decisionsLog.Count > 99)                  _decisionsLog.Take();
Magic Number,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,Dispose,The following statement contains a magic number: try              {                  if (_observe.Wait(TimeSpan.FromSeconds(30)) == false)                  {                      throw new ObjectDisposedException($"Cluster observer on node {_nodeTag} still running and can't be closed");                  }              }              finally              {                  _cts.Dispose();              }
Magic Number,Raven.Server.ServerWide.Memory,MemoryUsageGuard,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Memory\MemoryUsageGuard.cs,TryIncreasingMemoryUsageForThread,The following statement contains a magic number: using (var currentProcess = Process.GetCurrentProcess())              {                  // a lot of the memory that we use is actually from memory mapped files' as such' we can                  // rely on the OS to page it out (without needing to write' since it is read only in this case)                  // so we try to calculate how much such memory we can use with this assumption                   var mappedSharedMem = LowMemoryNotification.GetCurrentProcessMemoryMappedShared();                    currentUsage = new ProcessMemoryUsage(currentProcess.WorkingSet64'                      Math.Max(0' currentProcess.WorkingSet64 - mappedSharedMem.GetValue(SizeUnit.Bytes)));                    var memoryAssumedFreeOrCheapToFree = memoryInfoResult.AvailableMemory + mappedSharedMem;                    // there isn't enough available memory to try' we want to leave some out for other things                  if (memoryAssumedFreeOrCheapToFree <                       Size.Min(memoryInfoResult.TotalPhysicalMemory / 50' new Size(1' SizeUnit.Gigabytes)) )                  {                      if (logger.IsInfoEnabled)                      {                          logger.Info(                              $"{threadStats.Name} which is already using {currentlyAllocated}/{currentMaximumAllowedMemory} and the system has " +                              $"{memoryInfoResult.AvailableMemory}/{memoryInfoResult.TotalPhysicalMemory} free RAM. Also have ~{mappedSharedMem} in mmap " +                              "files that can be cleanly released' not enough to proceed in batch.");                      }                        return false;                  }                    // If there isn't enough here to double our current allocation' we won't allocate any more                  // we do this check in this way to prevent multiple indexes of hitting this at the                  // same time and each thinking that they have enough space                  if (memoryAssumedFreeOrCheapToFree < currentMaximumAllowedMemory)                  {                      // TODO: We probably need to make a note of this in log & expose in stats                      // TODO: to explain why we aren't increasing the memory in use                        if (logger.IsInfoEnabled)                      {                          logger.Info(                              $"{threadStats} which is already using {currentlyAllocated}/{currentMaximumAllowedMemory} and the system has" +                              $"{memoryInfoResult.AvailableMemory}/{memoryInfoResult.TotalPhysicalMemory} free RAM. Also have ~{mappedSharedMem} in mmap " +                              "files that can be cleanly released' not enough to proceed in batch.");                      }                      return false;                  }                    // even though we have twice as much memory as we have current allocated' we will                   // only increment by 16MB to avoid over allocation by multiple indexes. This way'                   // we'll check often as we go along this                  var oldBudget = currentMaximumAllowedMemory;                  currentMaximumAllowedMemory = currentlyAllocated + new Size(16' SizeUnit.Megabytes);                    if (logger.IsInfoEnabled)                  {                      logger.Info(                          $"Increasing memory budget for {threadStats.Name} which is using  {currentlyAllocated}/{oldBudget} and the system has" +                          $"{memoryInfoResult.AvailableMemory}/{memoryInfoResult.TotalPhysicalMemory} free RAM with {mappedSharedMem} in mmap " +                          $"files that can be cleanly released. Budget increased to {currentMaximumAllowedMemory}");                  }                    return true;              }
Magic Number,Raven.Server.ServerWide.Memory,MemoryUsageGuard,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Memory\MemoryUsageGuard.cs,TryIncreasingMemoryUsageForThread,The following statement contains a magic number: using (var currentProcess = Process.GetCurrentProcess())              {                  // a lot of the memory that we use is actually from memory mapped files' as such' we can                  // rely on the OS to page it out (without needing to write' since it is read only in this case)                  // so we try to calculate how much such memory we can use with this assumption                   var mappedSharedMem = LowMemoryNotification.GetCurrentProcessMemoryMappedShared();                    currentUsage = new ProcessMemoryUsage(currentProcess.WorkingSet64'                      Math.Max(0' currentProcess.WorkingSet64 - mappedSharedMem.GetValue(SizeUnit.Bytes)));                    var memoryAssumedFreeOrCheapToFree = memoryInfoResult.AvailableMemory + mappedSharedMem;                    // there isn't enough available memory to try' we want to leave some out for other things                  if (memoryAssumedFreeOrCheapToFree <                       Size.Min(memoryInfoResult.TotalPhysicalMemory / 50' new Size(1' SizeUnit.Gigabytes)) )                  {                      if (logger.IsInfoEnabled)                      {                          logger.Info(                              $"{threadStats.Name} which is already using {currentlyAllocated}/{currentMaximumAllowedMemory} and the system has " +                              $"{memoryInfoResult.AvailableMemory}/{memoryInfoResult.TotalPhysicalMemory} free RAM. Also have ~{mappedSharedMem} in mmap " +                              "files that can be cleanly released' not enough to proceed in batch.");                      }                        return false;                  }                    // If there isn't enough here to double our current allocation' we won't allocate any more                  // we do this check in this way to prevent multiple indexes of hitting this at the                  // same time and each thinking that they have enough space                  if (memoryAssumedFreeOrCheapToFree < currentMaximumAllowedMemory)                  {                      // TODO: We probably need to make a note of this in log & expose in stats                      // TODO: to explain why we aren't increasing the memory in use                        if (logger.IsInfoEnabled)                      {                          logger.Info(                              $"{threadStats} which is already using {currentlyAllocated}/{currentMaximumAllowedMemory} and the system has" +                              $"{memoryInfoResult.AvailableMemory}/{memoryInfoResult.TotalPhysicalMemory} free RAM. Also have ~{mappedSharedMem} in mmap " +                              "files that can be cleanly released' not enough to proceed in batch.");                      }                      return false;                  }                    // even though we have twice as much memory as we have current allocated' we will                   // only increment by 16MB to avoid over allocation by multiple indexes. This way'                   // we'll check often as we go along this                  var oldBudget = currentMaximumAllowedMemory;                  currentMaximumAllowedMemory = currentlyAllocated + new Size(16' SizeUnit.Megabytes);                    if (logger.IsInfoEnabled)                  {                      logger.Info(                          $"Increasing memory budget for {threadStats.Name} which is using  {currentlyAllocated}/{oldBudget} and the system has" +                          $"{memoryInfoResult.AvailableMemory}/{memoryInfoResult.TotalPhysicalMemory} free RAM with {mappedSharedMem} in mmap " +                          $"files that can be cleanly released. Budget increased to {currentMaximumAllowedMemory}");                  }                    return true;              }
Magic Number,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,Initialize,The following statement contains a magic number: buildVersion = 40;
Magic Number,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ParseValue,The following statement contains a magic number: if (s.StartsWith('\"') && s.EndsWith('\"'))                  return s.Substring(1' s.Length - 2);
Magic Number,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ParseValue,The following statement contains a magic number: if ((s.Length == 4 && s[0] == 't' || s.Length == 5 && s[0] == 'f') && bool.TryParse(s' out var b))              {                  return b;              }
Magic Number,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ParseValue,The following statement contains a magic number: if ((s.Length == 4 && s[0] == 't' || s.Length == 5 && s[0] == 'f') && bool.TryParse(s' out var b))              {                  return b;              }
Magic Number,Raven.Server.Smuggler.Documents,CsvStreamSource,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\CsvStreamSource.cs,ParseValue,The following statement contains a magic number: if (s.Length == 4 && s.Equals("null"))                  return null;
Magic Number,Raven.Server.Smuggler.Documents,DatabaseDocumentActions,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,DatabaseDocumentActions,The following statement contains a magic number: _enqueueThreshold = new Sparrow.Size(                      (sizeof(int) == IntPtr.Size || database.Configuration.Storage.ForceUsing32BitsPager) ? 2 : 32'                      SizeUnit.Megabytes);
Magic Number,Raven.Server.Smuggler.Documents,DatabaseDocumentActions,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,DatabaseDocumentActions,The following statement contains a magic number: _enqueueThreshold = new Sparrow.Size(                      (sizeof(int) == IntPtr.Size || database.Configuration.Storage.ForceUsing32BitsPager) ? 2 : 32'                      SizeUnit.Megabytes);
Magic Number,Raven.Server.Smuggler.Documents,DatabaseCmpXchgActions,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,WriteKeyValue,The following statement contains a magic number: const int batchSize = 1024;
Magic Number,Raven.Server.Smuggler.Documents,DatabaseKeyValueActions,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,WriteKeyValue,The following statement contains a magic number: const int batchSize = 1024;
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,SkipType,The following statement contains a magic number: void OnSkipped(long skipped)              {                  if (skipped % 10000 != 0)                      return;                    result.AddInfo($"Skipped {skipped:#'#;;0} {type.ToString().ToLowerInvariant()}");                  _onProgress.Invoke(result.Progress);              }
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,ProcessRevisionDocuments,The following statement contains a magic number: using (var actions = _destination.RevisionDocuments())              {                  foreach (var item in _source.GetRevisionDocuments(_options.Collections' actions))                  {                      _token.ThrowIfCancellationRequested();                      result.RevisionDocuments.ReadCount++;                        if (result.RevisionDocuments.ReadCount % 1000 == 0)                      {                          result.AddInfo($"Read {result.RevisionDocuments.ReadCount:#'#;;0} documents.");                          _onProgress.Invoke(result.Progress);                      }                        if (item.Document == null)                      {                          result.RevisionDocuments.ErroredCount++;                          continue;                      }                        Debug.Assert(item.Document.Id != null);                        item.Document.NonPersistentFlags |= NonPersistentDocumentFlags.FromSmuggler;                        actions.WriteDocument(item' result.RevisionDocuments);                        result.RevisionDocuments.LastEtag = item.Document.Etag;                  }              }
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,ProcessDocuments,The following statement contains a magic number: using (var actions = _destination.Documents())              {                  foreach (var item in _source.GetDocuments(_options.Collections' actions))                  {                      _token.ThrowIfCancellationRequested();                      result.Documents.ReadCount++;                        if (result.Documents.ReadCount % 1000 == 0)                      {                          var message = $"Read {result.Documents.ReadCount:#'#;;0} documents.";                          if (result.Documents.Attachments.ReadCount > 0)                              message += $" Read {result.Documents.Attachments.ReadCount:#'#;;0} attachments.";                          result.AddInfo(message);                          _onProgress.Invoke(result.Progress);                      }                        if (item.Document == null)                      {                          result.Documents.ErroredCount++;                          continue;                      }                        if (item.Document.Id == null)                          ThrowInvalidData();                        if (CanSkipDocument(item.Document' buildType))                      {                          SkipDocument(item' result);                          continue;                      }                        if (_options.IncludeExpired == false &&                           ExpirationStorage.HasExpired(item.Document.Data' _time.GetUtcNow()))                      {                          SkipDocument(item' result);                          continue;                      }                        if (_patcher != null)                      {                          item.Document = _patcher.Transform(item.Document' actions.GetContextForNewDocument());                          if (item.Document == null)                          {                              result.Documents.SkippedCount++;                              continue;                          }                      }                        // TODO: RavenDB-6931 - Make sure that patching cannot change the @attachments and @collection in metadata                        item.Document.NonPersistentFlags |= NonPersistentDocumentFlags.FromSmuggler;                        actions.WriteDocument(item' result.Documents);                        result.Documents.LastEtag = item.Document.Etag;                  }              }
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,ProcessTombstones,The following statement contains a magic number: using (var actions = _destination.Tombstones())              {                  foreach (var tombstone in _source.GetTombstones(_options.Collections' actions))                  {                      _token.ThrowIfCancellationRequested();                      result.Tombstones.ReadCount++;                        if (result.Tombstones.ReadCount % 1000 == 0)                      {                          var message = $"Read {result.Tombstones.ReadCount:#'#;;0} tombstones.";                          result.AddInfo(message);                          _onProgress.Invoke(result.Progress);                      }                        if (tombstone == null)                      {                          result.Tombstones.ErroredCount++;                          continue;                      }                        if (tombstone.LowerId == null)                          ThrowInvalidData();                        actions.WriteTombstone(tombstone' result.Tombstones);                        result.Tombstones.LastEtag = tombstone.Etag;                  }              }
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,ProcessConflicts,The following statement contains a magic number: using (var actions = _destination.Conflicts())              {                  foreach (var conflict in _source.GetConflicts(_options.Collections' actions))                  {                      _token.ThrowIfCancellationRequested();                      result.Conflicts.ReadCount++;                        if (result.Conflicts.ReadCount % 1000 == 0)                      {                          var message = $"Read {result.Conflicts.ReadCount:#'#;;0} conflicts.";                          result.AddInfo(message);                          _onProgress.Invoke(result.Progress);                      }                        if (conflict == null)                      {                          result.Conflicts.ErroredCount++;                          continue;                      }                        if (conflict.Id == null)                          ThrowInvalidData();                        actions.WriteConflict(conflict' result.Conflicts);                        result.Conflicts.LastEtag = conflict.Etag;                  }              }
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,CanSkipDocument,The following statement contains a magic number: if (document.Id.Size != 34 && document.Id.Size != 62 &&                  document.Id.Size != 27 && document.Id.Size != 19)                  return false;
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,CanSkipDocument,The following statement contains a magic number: if (document.Id.Size != 34 && document.Id.Size != 62 &&                  document.Id.Size != 27 && document.Id.Size != 19)                  return false;
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,CanSkipDocument,The following statement contains a magic number: if (document.Id.Size != 34 && document.Id.Size != 62 &&                  document.Id.Size != 27 && document.Id.Size != 19)                  return false;
Magic Number,Raven.Server.Smuggler.Documents,DatabaseSmuggler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseSmuggler.cs,CanSkipDocument,The following statement contains a magic number: if (document.Id.Size != 34 && document.Id.Size != 62 &&                  document.Id.Size != 27 && document.Id.Size != 19)                  return false;
Magic Number,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,BulkImport,The following statement contains a magic number: var tasks = new Task[Math.Max(1' ProcessorInfo.ProcessorCount / 2)];
Magic Number,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,BulkImport,The following statement contains a magic number: for (int i = 0; i < tasks.Length; i++)              {                  tasks[i] = Task.Run(async () =>                  {                      while (files.IsCompleted == false)                      {                          Func<Task<Stream>> getFile;                          try                          {                              getFile = files.Take();                          }                          catch (Exception)                          {                              //TODO : add logging' _silently_ skipping is a bad idea                              continue;                          }                            using (ContextPool.AllocateOperationContext(out DocumentsOperationContext context))                          using (var file = await getFile())                          using (var stream = new GZipStream(new BufferedStream(file' 128 * Voron.Global.Constants.Size.Kilobyte)' CompressionMode.Decompress))                          using (var source = new StreamSource(stream' context' Database))                          {                              var destination = new DatabaseDestination(Database);                                var smuggler = new DatabaseSmuggler(Database' source' destination' Database.Time);                                var result = smuggler.Execute();                              results.Enqueue(result);                          }                      }                  });              }
Magic Number,Raven.Server.Smuggler.Documents.Handlers,SmugglerHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Handlers\SmugglerHandler.cs,PostImport,The following statement contains a magic number: using (ContextPool.AllocateOperationContext(out DocumentsOperationContext context))              {                  var options = DatabaseSmugglerOptionsServerSide.Create(HttpContext' context);                    using (var stream = new GZipStream(new BufferedStream(await GetImportStream()' 128 * Voron.Global.Constants.Size.Kilobyte)' CompressionMode.Decompress))                  using (var token = CreateOperationToken())                  using (var source = new StreamSource(stream' context' Database))                  {                      var destination = new DatabaseDestination(Database);                        var smuggler = new DatabaseSmuggler(Database' source' destination' Database.Time' options' token: token.Token);                        var result = smuggler.Execute();                        WriteImportResult(context' result' ResponseBodyStream());                  }              }
Magic Number,Raven.Server.Smuggler.Documents.Processors,BuildVersion,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Processors\BuildVersion.cs,Type,The following statement contains a magic number: if(buildVersion == 40)                  return BuildVersionType.V4;
Magic Number,Raven.Server.Smuggler.Documents.Processors,BuildVersion,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Processors\BuildVersion.cs,Type,The following statement contains a magic number: if (buildVersion < 40000)                  return BuildVersionType.V3;
Magic Number,Raven.Server.Smuggler.Documents.Processors,BuildVersion,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Processors\BuildVersion.cs,Type,The following statement contains a magic number: if (buildVersion >= 40000 && buildVersion <= 49999 || buildVersion == 40 || buildVersion == 45)                  return BuildVersionType.V4;
Magic Number,Raven.Server.Smuggler.Documents.Processors,BuildVersion,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Processors\BuildVersion.cs,Type,The following statement contains a magic number: if (buildVersion >= 40000 && buildVersion <= 49999 || buildVersion == 40 || buildVersion == 45)                  return BuildVersionType.V4;
Magic Number,Raven.Server.Smuggler.Documents.Processors,BuildVersion,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Processors\BuildVersion.cs,Type,The following statement contains a magic number: if (buildVersion >= 40000 && buildVersion <= 49999 || buildVersion == 40 || buildVersion == 45)                  return BuildVersionType.V4;
Magic Number,Raven.Server.Smuggler.Documents.Processors,BuildVersion,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\Processors\BuildVersion.cs,Type,The following statement contains a magic number: if (buildVersion >= 40000 && buildVersion <= 49999 || buildVersion == 40 || buildVersion == 45)                  return BuildVersionType.V4;
Magic Number,Raven.Server.Smuggler.Migration,Importer,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Importer.cs,SaveLastState,The following statement contains a magic number: using (Database.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  while (retries++ < 15)                  {                      var operationState = await GetOperationState(DatabaseName' operationId' context);                      if (operationState == null)                          return;                        if (operationState.TryGet("Status"' out OperationStatus operationStatus) == false)                          return;                        if (operationStatus == OperationStatus.InProgress)                      {                          await Task.Delay(1000' CancelToken.Token);                          continue;                      }                        if (operationStatus == OperationStatus.Canceled || operationStatus == OperationStatus.Faulted)                      {                          throw new InvalidOperationException("Couldn't get last operation state because the " +                                                              $"operation state is {operationStatus.ToString()} " +                                                              "although the operation was completed successfully");                      }                        if (operationState.TryGet("Result"' out BlittableJsonReaderObject smugglerResultBlittable) == false)                          return;                        var smugglerResult = JsonDeserializationClient.SmugglerResult(smugglerResultBlittable);                      if (smugglerResult == null)                          return;                        var importInfo = new ImportInfo                      {                          LastEtag = smugglerResult.GetLastEtag()                      };                                        var importInfoBlittable = EntityToBlittable.ConvertEntityToBlittable(importInfo' DocumentConventions.Default' context);                      var cmd = new MergedPutCommand(importInfoBlittable' _migrationStateKey' null' Database);                      await Database.TxMerger.Enqueue(cmd);                      return;                  }              }
Magic Number,Raven.Server.Smuggler.Migration,Importer,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Importer.cs,SaveLastState,The following statement contains a magic number: using (Database.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  while (retries++ < 15)                  {                      var operationState = await GetOperationState(DatabaseName' operationId' context);                      if (operationState == null)                          return;                        if (operationState.TryGet("Status"' out OperationStatus operationStatus) == false)                          return;                        if (operationStatus == OperationStatus.InProgress)                      {                          await Task.Delay(1000' CancelToken.Token);                          continue;                      }                        if (operationStatus == OperationStatus.Canceled || operationStatus == OperationStatus.Faulted)                      {                          throw new InvalidOperationException("Couldn't get last operation state because the " +                                                              $"operation state is {operationStatus.ToString()} " +                                                              "although the operation was completed successfully");                      }                        if (operationState.TryGet("Result"' out BlittableJsonReaderObject smugglerResultBlittable) == false)                          return;                        var smugglerResult = JsonDeserializationClient.SmugglerResult(smugglerResultBlittable);                      if (smugglerResult == null)                          return;                        var importInfo = new ImportInfo                      {                          LastEtag = smugglerResult.GetLastEtag()                      };                                        var importInfoBlittable = EntityToBlittable.ConvertEntityToBlittable(importInfo' DocumentConventions.Default' context);                      var cmd = new MergedPutCommand(importInfoBlittable' _migrationStateKey' null' Database);                      await Database.TxMerger.Enqueue(cmd);                      return;                  }              }
Magic Number,Raven.Server.Smuggler.Migration,Migrator,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator.cs,GetBuildInfo,The following statement contains a magic number: using (var responseStream = await response.Content.ReadAsStreamAsync())              using (_serverStore.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  var buildInfo = await context.ReadForMemoryAsync(responseStream' "build-version-info");                  buildInfo.TryGet(nameof(BuildInfo.BuildVersion)' out int buildVersion);                  buildInfo.TryGet(nameof(BuildInfo.ProductVersion)' out string productVersion);                  buildInfo.TryGet(nameof(BuildInfo.FullVersion)' out string fullVersion);                    MajorVersion version;                  if (buildVersion == 40 || buildVersion > 40000)                  {                      version = MajorVersion.V4;                  }                  else if (buildVersion >= 35000)                  {                      version = MajorVersion.V35;                  }                  else if (buildVersion >= 20000)                  {                      version = MajorVersion.V2;                  }                  else if (buildVersion >= 3000)                  {                      version = MajorVersion.V30;                  }                  else if (productVersion.StartsWith("2.") || buildVersion >= 2000)                  {                      version = MajorVersion.V2;                  }                  else                  {                      version = MajorVersion.Unknown;                  }                    return new BuildInfo                  {                      ProductVersion = productVersion'                      BuildVersion = buildVersion'                      MajorVersion = version'                      FullVersion = fullVersion                  };              }
Magic Number,Raven.Server.Smuggler.Migration,Migrator,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator.cs,GetBuildInfo,The following statement contains a magic number: using (var responseStream = await response.Content.ReadAsStreamAsync())              using (_serverStore.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  var buildInfo = await context.ReadForMemoryAsync(responseStream' "build-version-info");                  buildInfo.TryGet(nameof(BuildInfo.BuildVersion)' out int buildVersion);                  buildInfo.TryGet(nameof(BuildInfo.ProductVersion)' out string productVersion);                  buildInfo.TryGet(nameof(BuildInfo.FullVersion)' out string fullVersion);                    MajorVersion version;                  if (buildVersion == 40 || buildVersion > 40000)                  {                      version = MajorVersion.V4;                  }                  else if (buildVersion >= 35000)                  {                      version = MajorVersion.V35;                  }                  else if (buildVersion >= 20000)                  {                      version = MajorVersion.V2;                  }                  else if (buildVersion >= 3000)                  {                      version = MajorVersion.V30;                  }                  else if (productVersion.StartsWith("2.") || buildVersion >= 2000)                  {                      version = MajorVersion.V2;                  }                  else                  {                      version = MajorVersion.Unknown;                  }                    return new BuildInfo                  {                      ProductVersion = productVersion'                      BuildVersion = buildVersion'                      MajorVersion = version'                      FullVersion = fullVersion                  };              }
Magic Number,Raven.Server.Smuggler.Migration,Migrator,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator.cs,GetBuildInfo,The following statement contains a magic number: using (var responseStream = await response.Content.ReadAsStreamAsync())              using (_serverStore.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  var buildInfo = await context.ReadForMemoryAsync(responseStream' "build-version-info");                  buildInfo.TryGet(nameof(BuildInfo.BuildVersion)' out int buildVersion);                  buildInfo.TryGet(nameof(BuildInfo.ProductVersion)' out string productVersion);                  buildInfo.TryGet(nameof(BuildInfo.FullVersion)' out string fullVersion);                    MajorVersion version;                  if (buildVersion == 40 || buildVersion > 40000)                  {                      version = MajorVersion.V4;                  }                  else if (buildVersion >= 35000)                  {                      version = MajorVersion.V35;                  }                  else if (buildVersion >= 20000)                  {                      version = MajorVersion.V2;                  }                  else if (buildVersion >= 3000)                  {                      version = MajorVersion.V30;                  }                  else if (productVersion.StartsWith("2.") || buildVersion >= 2000)                  {                      version = MajorVersion.V2;                  }                  else                  {                      version = MajorVersion.Unknown;                  }                    return new BuildInfo                  {                      ProductVersion = productVersion'                      BuildVersion = buildVersion'                      MajorVersion = version'                      FullVersion = fullVersion                  };              }
Magic Number,Raven.Server.Smuggler.Migration,Migrator,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator.cs,GetBuildInfo,The following statement contains a magic number: using (var responseStream = await response.Content.ReadAsStreamAsync())              using (_serverStore.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  var buildInfo = await context.ReadForMemoryAsync(responseStream' "build-version-info");                  buildInfo.TryGet(nameof(BuildInfo.BuildVersion)' out int buildVersion);                  buildInfo.TryGet(nameof(BuildInfo.ProductVersion)' out string productVersion);                  buildInfo.TryGet(nameof(BuildInfo.FullVersion)' out string fullVersion);                    MajorVersion version;                  if (buildVersion == 40 || buildVersion > 40000)                  {                      version = MajorVersion.V4;                  }                  else if (buildVersion >= 35000)                  {                      version = MajorVersion.V35;                  }                  else if (buildVersion >= 20000)                  {                      version = MajorVersion.V2;                  }                  else if (buildVersion >= 3000)                  {                      version = MajorVersion.V30;                  }                  else if (productVersion.StartsWith("2.") || buildVersion >= 2000)                  {                      version = MajorVersion.V2;                  }                  else                  {                      version = MajorVersion.Unknown;                  }                    return new BuildInfo                  {                      ProductVersion = productVersion'                      BuildVersion = buildVersion'                      MajorVersion = version'                      FullVersion = fullVersion                  };              }
Magic Number,Raven.Server.Smuggler.Migration,Migrator,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator.cs,GetBuildInfo,The following statement contains a magic number: using (var responseStream = await response.Content.ReadAsStreamAsync())              using (_serverStore.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  var buildInfo = await context.ReadForMemoryAsync(responseStream' "build-version-info");                  buildInfo.TryGet(nameof(BuildInfo.BuildVersion)' out int buildVersion);                  buildInfo.TryGet(nameof(BuildInfo.ProductVersion)' out string productVersion);                  buildInfo.TryGet(nameof(BuildInfo.FullVersion)' out string fullVersion);                    MajorVersion version;                  if (buildVersion == 40 || buildVersion > 40000)                  {                      version = MajorVersion.V4;                  }                  else if (buildVersion >= 35000)                  {                      version = MajorVersion.V35;                  }                  else if (buildVersion >= 20000)                  {                      version = MajorVersion.V2;                  }                  else if (buildVersion >= 3000)                  {                      version = MajorVersion.V30;                  }                  else if (productVersion.StartsWith("2.") || buildVersion >= 2000)                  {                      version = MajorVersion.V2;                  }                  else                  {                      version = MajorVersion.Unknown;                  }                    return new BuildInfo                  {                      ProductVersion = productVersion'                      BuildVersion = buildVersion'                      MajorVersion = version'                      FullVersion = fullVersion                  };              }
Magic Number,Raven.Server.Smuggler.Migration,Migrator,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator.cs,GetBuildInfo,The following statement contains a magic number: using (var responseStream = await response.Content.ReadAsStreamAsync())              using (_serverStore.ContextPool.AllocateOperationContext(out JsonOperationContext context))              {                  var buildInfo = await context.ReadForMemoryAsync(responseStream' "build-version-info");                  buildInfo.TryGet(nameof(BuildInfo.BuildVersion)' out int buildVersion);                  buildInfo.TryGet(nameof(BuildInfo.ProductVersion)' out string productVersion);                  buildInfo.TryGet(nameof(BuildInfo.FullVersion)' out string fullVersion);                    MajorVersion version;                  if (buildVersion == 40 || buildVersion > 40000)                  {                      version = MajorVersion.V4;                  }                  else if (buildVersion >= 35000)                  {                      version = MajorVersion.V35;                  }                  else if (buildVersion >= 20000)                  {                      version = MajorVersion.V2;                  }                  else if (buildVersion >= 3000)                  {                      version = MajorVersion.V30;                  }                  else if (productVersion.StartsWith("2.") || buildVersion >= 2000)                  {                      version = MajorVersion.V2;                  }                  else                  {                      version = MajorVersion.Unknown;                  }                    return new BuildInfo                  {                      ProductVersion = productVersion'                      BuildVersion = buildVersion'                      MajorVersion = version'                      FullVersion = fullVersion                  };              }
Magic Number,Raven.Server.Smuggler.Migration,Migrator_V3,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V3.cs,Execute,The following statement contains a magic number: var databaseMigrationOptions = new DatabaseMigrationOptions              {                  BatchSize = 1024'                  OperateOnTypes = types'                  //TODO: ExportDeletions = state != null'                  StartDocsEtag = state?.LastDocsEtag ?? LastEtagsInfo.EtagEmpty'                  StartDocsDeletionEtag = state?.LastDocDeleteEtag ?? LastEtagsInfo.EtagEmpty'                  StartAttachmentsEtag = state?.LastAttachmentsEtag ?? LastEtagsInfo.EtagEmpty'                  StartAttachmentsDeletionEtag = state?.LastAttachmentsDeleteEtag ?? LastEtagsInfo.EtagEmpty              };
Magic Number,Raven.Server.Smuggler.Migration,Migrator_V3,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V3.cs,SaveLastState,The following statement contains a magic number: using (Database.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  while (retries++ < 15)                  {                      var operationStatus = await GetOperationStatus(DatabaseName' operationId' context);                      if (operationStatus == null)                          return;                        if (operationStatus.TryGet("Completed"' out bool completed) == false)                          return;                        if (completed == false)                      {                          await Task.Delay(1000' CancelToken.Token);                          continue;                      }                        if (operationStatus.TryGet("OperationState"' out BlittableJsonReaderObject operationStateBlittable) == false)                      {                          // OperationState was added in the latest release of v3.5                          return;                      }                        var blittableCopy = context.ReadObject(operationStateBlittable' _migrationStateKey);                      var cmd = new MergedPutCommand(blittableCopy' _migrationStateKey' null' Database);                      await Database.TxMerger.Enqueue(cmd);                      return;                  }              }
Magic Number,Raven.Server.Smuggler.Migration,Migrator_V3,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Migration\Migrator_V3.cs,SaveLastState,The following statement contains a magic number: using (Database.ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  while (retries++ < 15)                  {                      var operationStatus = await GetOperationStatus(DatabaseName' operationId' context);                      if (operationStatus == null)                          return;                        if (operationStatus.TryGet("Completed"' out bool completed) == false)                          return;                        if (completed == false)                      {                          await Task.Delay(1000' CancelToken.Token);                          continue;                      }                        if (operationStatus.TryGet("OperationState"' out BlittableJsonReaderObject operationStateBlittable) == false)                      {                          // OperationState was added in the latest release of v3.5                          return;                      }                        var blittableCopy = context.ReadObject(operationStateBlittable' _migrationStateKey);                      var cmd = new MergedPutCommand(blittableCopy' _migrationStateKey' null' Database);                      await Database.TxMerger.Enqueue(cmd);                      return;                  }              }
Magic Number,Raven.Server.SqlMigration,SqlMigrationWriter,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationWriter.cs,FlushCommands,The following statement contains a magic number: OnDocumentsInserted?.Invoke((double) _time.ElapsedMilliseconds / 1000' SqlReader.RowsRead - _rowsRead' _command.ParsedCommands.Count - attachmentsCount' attachmentsCount);
Magic Number,Raven.Server.TrafficWatch,TrafficWatchConnection,C:\repos\ravendb_ravendb\src\Raven.Server\TrafficWatch\TrafficWatchConnection.cs,StartSendingNotifications,The following statement contains a magic number: try              {                  while (_cancellationTokenSource.IsCancellationRequested == false)                  {                      var result = await _manualResetEvent.WaitAsync(TimeSpan.FromMilliseconds(5000)).ConfigureAwait(false);                      if (_cancellationTokenSource.IsCancellationRequested)                          break;                        if (result == false)                      {                          await SendMessage(WebSocketHelper.Heartbeat).ConfigureAwait(false);                          continue;                      }                        _manualResetEvent.Reset();                        while (_msgs.TryDequeue(out TrafficWatchChange message))                      {                          if (_cancellationTokenSource.IsCancellationRequested)                              break;                            await SendMessage(ToByteArraySegment(message)).ConfigureAwait(false);                      }                  }              }              catch (Exception e)              {                  if (_logger.IsInfoEnabled)                      _logger.Info("Error when handling web socket connection"' e);                  _cancellationTokenSource.Cancel();              }              finally              {                  TrafficWatchManager.Disconnect(this);                  try                  {                      await _websocket.CloseAsync(WebSocketCloseStatus.NormalClosure' "NORNAL_CLOSE"' _cancellationTokenSource?.Token ?? CancellationToken.None);                  }                  catch                  {                      // ignore                  }              }
Magic Number,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedClientCertificate,The following statement contains a magic number: return CreateSelfSignedCertificateBasedOnPrivateKey(                  commonNameValue'                  readCertificate.SubjectDN'                  (certificateHolder.PrivateKey.Key' readCertificate.GetPublicKey())'                  true'                  false'                  5'                  out certBytes);
Magic Number,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedCertificateBasedOnPrivateKey,The following statement contains a magic number: const int keyStrength = 2048;
Magic Number,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateSelfSignedCertificateBasedOnPrivateKey,The following statement contains a magic number: DateTime notBefore = DateTime.UtcNow.Date.AddDays(-7);
Magic Number,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateCertificateAuthorityCertificate,The following statement contains a magic number: const int keyStrength = 2048;
Magic Number,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateCertificateAuthorityCertificate,The following statement contains a magic number: DateTime notBefore = DateTime.UtcNow.Date.AddDays(-7);
Magic Number,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,CreateCertificateAuthorityCertificate,The following statement contains a magic number: DateTime notAfter = notBefore.AddYears(2);
Magic Number,Raven.Server.Utils,CertificateUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CertificateUtils.cs,GetSeededSecureRandom,The following statement contains a magic number: var buffer = new byte[32];
Magic Number,Raven.Server.Utils,ChangeVectorUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ChangeVectorUtils.cs,NumberOfDigits,The following statement contains a magic number: do              {                  count++;                  etag /= 10;              } while (etag != 0);
Magic Number,Raven.Server.Utils,ChangeVectorUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ChangeVectorUtils.cs,ParseToLong,The following statement contains a magic number: for (int i = 1; i < len; i++)              {                  num *= 10;                  num += s[start + i] - '0';              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,CalculateWindowsCpuUsage,The following statement contains a magic number: if (sysTotal > 0)              {                  machineCpuUsage = (sysTotal - systemIdleDiff) * 100.00 / sysTotal;                    var processTotal =                      windowsInfo.ProcessProcessorTime.Ticks -                      _previousWindowsInfo.ProcessProcessorTime.Ticks;                  processCpuUsage = (processTotal * 100.0) / sysTotal;                  processCpuUsage = Math.Min(100' processCpuUsage);              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,CalculateWindowsCpuUsage,The following statement contains a magic number: if (sysTotal > 0)              {                  machineCpuUsage = (sysTotal - systemIdleDiff) * 100.00 / sysTotal;                    var processTotal =                      windowsInfo.ProcessProcessorTime.Ticks -                      _previousWindowsInfo.ProcessProcessorTime.Ticks;                  processCpuUsage = (processTotal * 100.0) / sysTotal;                  processCpuUsage = Math.Min(100' processCpuUsage);              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,CalculateWindowsCpuUsage,The following statement contains a magic number: if (sysTotal > 0)              {                  machineCpuUsage = (sysTotal - systemIdleDiff) * 100.00 / sysTotal;                    var processTotal =                      windowsInfo.ProcessProcessorTime.Ticks -                      _previousWindowsInfo.ProcessProcessorTime.Ticks;                  processCpuUsage = (processTotal * 100.0) / sysTotal;                  processCpuUsage = Math.Min(100' processCpuUsage);              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,CalculateLinuxCpuUsage,The following statement contains a magic number: if (linuxInfo.TotalUserTime >= _previousLinuxInfo.TotalUserTime &&                  linuxInfo.TotalUserLowTime >= _previousLinuxInfo.TotalUserLowTime &&                  linuxInfo.TotalSystemTime >= _previousLinuxInfo.TotalSystemTime &&                  linuxInfo.TotalIdleTime >= _previousLinuxInfo.TotalIdleTime)              {                  var userTimeDiff = linuxInfo.TotalUserTime - _previousLinuxInfo.TotalUserTime;                  var userLowTimeDiff = linuxInfo.TotalUserLowTime - _previousLinuxInfo.TotalUserLowTime;                  var systemTimeDiff = linuxInfo.TotalSystemTime - _previousLinuxInfo.TotalSystemTime;                  var idleTimeDiff = linuxInfo.TotalIdleTime - _previousLinuxInfo.TotalIdleTime;                    var totalUsed = userTimeDiff + userLowTimeDiff + systemTimeDiff;                  if (totalUsed + idleTimeDiff > 0)                  {                      machineCpuUsage = (totalUsed * 100.0) / (totalUsed + idleTimeDiff);                  }                  else                  {                      machineCpuUsage = 0;                  }              }              else if (_lastCpuInfo != null)              {                  // overflow                  machineCpuUsage = _lastCpuInfo.Value.MachineCpuUsage;              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,CalculateLinuxCpuUsage,The following statement contains a magic number: if (linuxInfo.Time > _previousLinuxInfo.Time &&                  linuxInfo.LastSystemCpu >= _previousLinuxInfo.LastSystemCpu &&                  linuxInfo.LastUserCpu >= _previousLinuxInfo.LastUserCpu)              {                  var lastSystemCpuDiff = linuxInfo.LastSystemCpu - _previousLinuxInfo.LastSystemCpu;                  var lastUserCpuDiff = linuxInfo.LastUserCpu - _previousLinuxInfo.LastUserCpu;                  var totalCpuTime = lastSystemCpuDiff + lastUserCpuDiff;                  processCpuUsage = (totalCpuTime * 100.0 / (linuxInfo.Time - _previousLinuxInfo.Time)) / ProcessorInfo.ProcessorCount;              }              else if (_lastCpuInfo != null)              {                  // overflow                  processCpuUsage = _lastCpuInfo.Value.ProcessCpuUsage;              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,CalculateMacOsCpuUsage,The following statement contains a magic number: if (totalTicksSinceLastTime > 0)              {                  machineCpuUsage = (1.0d - (double)idleTicksSinceLastTime / totalTicksSinceLastTime) * 100;              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,CalculateMacOsCpuUsage,The following statement contains a magic number: if (timeDelta > 0)              {                  processCpuUsage = (systemTimeDelta * 100.0) / timeDelta / ProcessorInfo.ProcessorCount;              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,GetTime,The following statement contains a magic number: return ((ulong)fileTime.dwHighDateTime << 32) | (uint)fileTime.dwLowDateTime;
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,GetLinuxInfo,The following statement contains a magic number: foreach (var line in lines)              {                  if (line.StartsWith("cpu"' StringComparison.OrdinalIgnoreCase) == false)                      continue;                    var items = System.Text.RegularExpressions.Regex.Split(line' @"\s+").Where(s => s != string.Empty).ToArray();                  if (items.Length == 0)                      continue;                    var timeSample = new TimeSample();                    var time = Syscall.times(ref timeSample);                  if (time == -1)                  {                      if (Logger.IsInfoEnabled)                          Logger.Info("Got overflow time using the times system call " + Marshal.GetLastWin32Error());                      return null;                  }                    return new LinuxInfo                  {                      TotalUserTime = ulong.Parse(items[1])'                      TotalUserLowTime = ulong.Parse(items[2])'                      TotalSystemTime = ulong.Parse(items[3])'                      TotalIdleTime = ulong.Parse(items[4])'                      Time = time'                      LastSystemCpu = timeSample.tms_stime'                      LastUserCpu = timeSample.tms_utime'                  };              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,GetLinuxInfo,The following statement contains a magic number: foreach (var line in lines)              {                  if (line.StartsWith("cpu"' StringComparison.OrdinalIgnoreCase) == false)                      continue;                    var items = System.Text.RegularExpressions.Regex.Split(line' @"\s+").Where(s => s != string.Empty).ToArray();                  if (items.Length == 0)                      continue;                    var timeSample = new TimeSample();                    var time = Syscall.times(ref timeSample);                  if (time == -1)                  {                      if (Logger.IsInfoEnabled)                          Logger.Info("Got overflow time using the times system call " + Marshal.GetLastWin32Error());                      return null;                  }                    return new LinuxInfo                  {                      TotalUserTime = ulong.Parse(items[1])'                      TotalUserLowTime = ulong.Parse(items[2])'                      TotalSystemTime = ulong.Parse(items[3])'                      TotalIdleTime = ulong.Parse(items[4])'                      Time = time'                      LastSystemCpu = timeSample.tms_stime'                      LastUserCpu = timeSample.tms_utime'                  };              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,GetLinuxInfo,The following statement contains a magic number: foreach (var line in lines)              {                  if (line.StartsWith("cpu"' StringComparison.OrdinalIgnoreCase) == false)                      continue;                    var items = System.Text.RegularExpressions.Regex.Split(line' @"\s+").Where(s => s != string.Empty).ToArray();                  if (items.Length == 0)                      continue;                    var timeSample = new TimeSample();                    var time = Syscall.times(ref timeSample);                  if (time == -1)                  {                      if (Logger.IsInfoEnabled)                          Logger.Info("Got overflow time using the times system call " + Marshal.GetLastWin32Error());                      return null;                  }                    return new LinuxInfo                  {                      TotalUserTime = ulong.Parse(items[1])'                      TotalUserLowTime = ulong.Parse(items[2])'                      TotalSystemTime = ulong.Parse(items[3])'                      TotalIdleTime = ulong.Parse(items[4])'                      Time = time'                      LastSystemCpu = timeSample.tms_stime'                      LastUserCpu = timeSample.tms_utime'                  };              }
Magic Number,Raven.Server.Utils,CpuUsage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\CpuUsage.cs,GetMacInfo,The following statement contains a magic number: if (result == size)              {                  dateTimeNanoTicks = (ulong)DateTime.UtcNow.Ticks * 100;                  userTime = info.ptinfo.pti_total_user;                  systemTime = info.ptinfo.pti_total_system;              }
Magic Number,Raven.Server.Utils,DebuggerAttachedTimeout,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\DebuggerAttachedTimeout.cs,OutgoingReplication,The following statement contains a magic number: timespan *= 10;
Magic Number,Raven.Server.Utils,IncludeUtil,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IncludeUtil.cs,GetDocIdFromInclude,The following statement contains a magic number: if (HasSuffixSeparator(includePath' out var indexOfSuffixStart))              {                  addition = includePath.Subsegment(indexOfSuffixStart + 1);                    if (!addition.Value[addition.Value.Length - 1].Equals(']') ||                      ((addition.Value.Length >= 4) &&                       !addition.Value.Subsegment(0' 4).Equals(SuffixStart)))                      return;                  pathSegment = includePath.Subsegment(0' indexOfSuffixStart);                  _valueHandler = HandleSuffixValue;              }              else if (indexOfPrefixStart != -1)              {                  addition = includePath.Subsegment(indexOfPrefixStart + 1);                  if (!includePath[includePath.Length - 1].Equals(')'))                      return;                  pathSegment = includePath.Subsegment(0' indexOfPrefixStart);                  _valueHandler = HandlePrefixValue;              }              else              {                  pathSegment = includePath;              }
Magic Number,Raven.Server.Utils,IncludeUtil,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IncludeUtil.cs,GetDocIdFromInclude,The following statement contains a magic number: if (HasSuffixSeparator(includePath' out var indexOfSuffixStart))              {                  addition = includePath.Subsegment(indexOfSuffixStart + 1);                    if (!addition.Value[addition.Value.Length - 1].Equals(']') ||                      ((addition.Value.Length >= 4) &&                       !addition.Value.Subsegment(0' 4).Equals(SuffixStart)))                      return;                  pathSegment = includePath.Subsegment(0' indexOfSuffixStart);                  _valueHandler = HandleSuffixValue;              }              else if (indexOfPrefixStart != -1)              {                  addition = includePath.Subsegment(indexOfPrefixStart + 1);                  if (!includePath[includePath.Length - 1].Equals(')'))                      return;                  pathSegment = includePath.Subsegment(0' indexOfPrefixStart);                  _valueHandler = HandlePrefixValue;              }              else              {                  pathSegment = includePath;              }
Magic Number,Raven.Server.Utils,IncludeUtil,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IncludeUtil.cs,HasSuffixSeparator,The following statement contains a magic number: if (includePath.Length >= indexOfPrefixStart + BlittableJsonTraverser.CollectionAndPropertySeparators.Length)              {                  if (includePath[indexOfPrefixStart] == BlittableJsonTraverser.CollectionAndPropertySeparators[0] &&                      includePath[indexOfPrefixStart + 1] == BlittableJsonTraverser.CollectionAndPropertySeparators[1] &&                      includePath[indexOfPrefixStart + 2] == BlittableJsonTraverser.CollectionAndPropertySeparators[2])                  {                       // []. means collection                        return false;                  }              }
Magic Number,Raven.Server.Utils,IncludeUtil,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IncludeUtil.cs,HasSuffixSeparator,The following statement contains a magic number: if (includePath.Length >= indexOfPrefixStart + BlittableJsonTraverser.CollectionAndPropertySeparators.Length)              {                  if (includePath[indexOfPrefixStart] == BlittableJsonTraverser.CollectionAndPropertySeparators[0] &&                      includePath[indexOfPrefixStart + 1] == BlittableJsonTraverser.CollectionAndPropertySeparators[1] &&                      includePath[indexOfPrefixStart + 2] == BlittableJsonTraverser.CollectionAndPropertySeparators[2])                  {                       // []. means collection                        return false;                  }              }
Magic Number,Raven.Server.Utils,IOExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IOExtensions.cs,MoveDirectory,The following statement contains a magic number: for (var i = 0; i < Retries; i++)              {                  try                  {                      SetDirectoryAttributes(src' FileAttributes.Normal);                      SetDirectoryAttributes(dst' FileAttributes.Normal);                        Directory.Move(src' dst);                      return;                  }                  catch (Exception)                  {                      if (i == Retries - 1)                          throw;                        GC.Collect();                      GC.WaitForPendingFinalizers();                        Thread.Sleep(100);                  }              }
Magic Number,Raven.Server.Utils,IOExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\IOExtensions.cs,TryHandlingError,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Raven.Server.Utils,MetricsExtentions,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\MetricCounters.cs,SetMinimalMeterData,The following statement contains a magic number: obj[name + "Rate"] = Math.Round(self.OneMinuteRate' 2);
Magic Number,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,OpenAdminConsolePipe,The following statement contains a magic number: var pipe = new NamedPipeServerStream(pipeName' PipeDirection.InOut' 1' PipeTransmissionMode.Byte'                  PipeOptions.Asynchronous' 1024' 1024);
Magic Number,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,OpenAdminConsolePipe,The following statement contains a magic number: var pipe = new NamedPipeServerStream(pipeName' PipeDirection.InOut' 1' PipeTransmissionMode.Byte'                  PipeOptions.Asynchronous' 1024' 1024);
Magic Number,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,OpenLogStreamPipe,The following statement contains a magic number: var pipe = new NamedPipeServerStream(pipeName' PipeDirection.InOut' 1' PipeTransmissionMode.Byte'                  PipeOptions.Asynchronous' 1024' 1024);
Magic Number,Raven.Server.Utils,Pipes,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Pipes.cs,OpenLogStreamPipe,The following statement contains a magic number: var pipe = new NamedPipeServerStream(pipeName' PipeDirection.InOut' 1' PipeTransmissionMode.Byte'                  PipeOptions.Asynchronous' 1024' 1024);
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsUnsecuredAccessAllowedForIPv4Address,The following statement contains a magic number: return (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.Local) && octets[0] == 127)                  || (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PrivateNetwork) &&                           (octets[0] == 10                           || (octets[0] == 192 && octets[1] == 168)                          || (octets[0] == 172 && octets[1] >= 16 && octets[1] <= 31)))                  || AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PublicNetwork);
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsUnsecuredAccessAllowedForIPv4Address,The following statement contains a magic number: return (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.Local) && octets[0] == 127)                  || (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PrivateNetwork) &&                           (octets[0] == 10                           || (octets[0] == 192 && octets[1] == 168)                          || (octets[0] == 172 && octets[1] >= 16 && octets[1] <= 31)))                  || AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PublicNetwork);
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsUnsecuredAccessAllowedForIPv4Address,The following statement contains a magic number: return (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.Local) && octets[0] == 127)                  || (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PrivateNetwork) &&                           (octets[0] == 10                           || (octets[0] == 192 && octets[1] == 168)                          || (octets[0] == 172 && octets[1] >= 16 && octets[1] <= 31)))                  || AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PublicNetwork);
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsUnsecuredAccessAllowedForIPv4Address,The following statement contains a magic number: return (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.Local) && octets[0] == 127)                  || (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PrivateNetwork) &&                           (octets[0] == 10                           || (octets[0] == 192 && octets[1] == 168)                          || (octets[0] == 172 && octets[1] >= 16 && octets[1] <= 31)))                  || AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PublicNetwork);
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsUnsecuredAccessAllowedForIPv4Address,The following statement contains a magic number: return (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.Local) && octets[0] == 127)                  || (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PrivateNetwork) &&                           (octets[0] == 10                           || (octets[0] == 192 && octets[1] == 168)                          || (octets[0] == 172 && octets[1] >= 16 && octets[1] <= 31)))                  || AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PublicNetwork);
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsUnsecuredAccessAllowedForIPv4Address,The following statement contains a magic number: return (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.Local) && octets[0] == 127)                  || (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PrivateNetwork) &&                           (octets[0] == 10                           || (octets[0] == 192 && octets[1] == 168)                          || (octets[0] == 172 && octets[1] >= 16 && octets[1] <= 31)))                  || AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PublicNetwork);
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsUnsecuredAccessAllowedForIPv4Address,The following statement contains a magic number: return (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.Local) && octets[0] == 127)                  || (AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PrivateNetwork) &&                           (octets[0] == 10                           || (octets[0] == 192 && octets[1] == 168)                          || (octets[0] == 172 && octets[1] >= 16 && octets[1] <= 31)))                  || AddressRangeIncludes(addressRange' UnsecuredAccessAddressRange.PublicNetwork);
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsLoopbackIpv6,The following statement contains a magic number: return arr[15] == 0x01;
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils,SecurityUtils,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\SecurityUtils.cs,IsPrivateIpv6,The following statement contains a magic number: return arr[0] == 0xFC // fc00::/7 - https://en.wikipedia.org/wiki/Unique_local_address (similar to IPv4 10.0.0.0/8' 172.16.0.0/12 and 192.168.0.0/16)                     || ((arr[10] == 0xFF && arr[11] == 0xFF) &&                           ((arr[12] == 192 && arr[13] == 168)                              || (arr[12] == 172 && arr[13] >= 16 && arr[13] <= 31)                              || arr[12] == 10));
Magic Number,Raven.Server.Utils.Cli,CommandLineSwitches,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\CommandLineSwitches.cs,Validate,The following statement contains a magic number: if (ServiceName.Length > 256)                  throw new CommandParsingException(_app' "Service name must have maximum length of 256 characters.");
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandHelpPrompt,The following statement contains a magic number: foreach (var cmd in commandDescription)              {                  WriteText("\t" + cmd[0]' ConsoleColor.Yellow' cli' newLine: false);                  WriteText(new string(' '' 25 - cmd[0].Length) + cmd[1]' ConsoleColor.DarkYellow' cli);              }
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandGc,The following statement contains a magic number: genNum = args == null || args.Count == 0 ? 2 : Convert.ToInt32(args.First());
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandGc,The following statement contains a magic number: switch (genNum)              {                  case 0:                      GC.Collect(0);                      break;                  case 1:                      GC.Collect(1);                      break;                  case 2:                      GC.Collect(GC.MaxGeneration);                      break;                  default:                      WriteError("Invalid argument passed to GC. Can be 0' 1 or 2"' cli);                      return false;              }
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,GetInfoText,The following statement contains a magic number: return $" Build {ServerVersion.Build}' Version {ServerVersion.Version}' SemVer {ServerVersion.FullVersion}' Commit {ServerVersion.CommitHash}" +                    Environment.NewLine +                    $" PID {Process.GetCurrentProcess().Id}' {IntPtr.Size * 8} bits' {ProcessorInfo.ProcessorCount} Cores' Arch: {RuntimeInformation.OSArchitecture}" +                    Environment.NewLine +                    $" {memoryInfo.TotalPhysicalMemory} Physical Memory' {memoryInfo.AvailableMemory} Available Memory" +                    Environment.NewLine +                    $" {RuntimeSettings.Describe()}";
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandScript,The following statement contains a magic number: if (args.Count < 1 || args.Count > 2)              {                  WriteError("Invalid number of arguments passed to script"' cli);                  return false;              }
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandScript,The following statement contains a magic number: switch (args[0].ToLower())              {                  case "database":                      if (args.Count != 2)                      {                          WriteError("Invalid number of arguments passed to script - missing database name"' cli);                          return false;                      }                      database = cli._server.ServerStore.DatabasesLandlord.TryGetOrCreateResourceStore(args[1]).Result;                      if (database == null)                      {                          WriteError($"Cannot find database named '{args[1]}'"' cli);                          return false;                      }                      break;                  case "server":                      break;                  default:                      WriteError($"Invalid arguments '{args[0]}' passed to script"' cli);                      return false;              }
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandHelp,The following statement contains a magic number: foreach (var cmd in commandDescription)              {                  WriteText("\t" + cmd[0]' ConsoleColor.Yellow' cli' newLine: false);                  WriteText(new string(' '' 41 - cmd[0].Length) + cmd[1]' ConsoleColor.DarkYellow' cli);              }
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandHelp,The following statement contains a magic number: if (cli._experimental)              {                  msg.Append(Environment.NewLine + "Experimental Commands (WARNING: Use with care!):" + Environment.NewLine);                  foreach (var cmd in commandExperimentalDescription)                  {                      WriteText("\t" + cmd[0]' ConsoleColor.Yellow' cli' newLine: false);                      WriteText(new string(' '' 29 - cmd[0].Length) + cmd[1]' ConsoleColor.DarkYellow' cli);                  }                  WriteText(""' TextColor' cli);              }
Magic Number,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,StartCli,The following statement contains a magic number: while (true)              {                  PrintCliHeader(this);                  var line = ReadLine(this);                  _writer.Flush();                    if (line == null)                  {                      if (_consoleColoring == false)                      {                          // for some reason remote pipe couldn't ReadLine                          WriteText("End of standard input detected. Remote console might not support input"' ErrorColor' this);                          // simulate logout:                          line = "logout";                      }                      else                      {                          Thread.Sleep(75); //waiting for Ctrl+C                           if (ctrlCPressed)                              break;                          WriteText("End of standard input detected' switching to server mode..."' WarningColor' this);                            Program.RunAsNonInteractive();                          return false;                      }                  }                    var parsedLine = new ParsedLine { LineState = LineState.Begin };                    if (ParseLine(line' parsedLine) == false)                  {                      WriteError(parsedLine.ErrorMsg' this);                      continue;                  }                    if (parsedLine.LineState == LineState.Empty)                      continue;                    var lastRc = true;                  foreach (var parsedCommand in parsedLine.ParsedCommands)                  {                      if (lastRc == false)                      {                          if (parsedCommand.PrevConcatAction == ConcatAction.And)                          {                              WriteWarning($"Warning: Will not execute command `{parsedCommand.Command}` as previous command return non-successful return code"' this);                              break;                          }                          WriteWarning($"Warning: Will execute command `{parsedCommand.Command}` after previous command return non-successful return code"' this);                      }                        if (_actions.ContainsKey(parsedCommand.Command) == false)                      {                          WriteError($"CLI Internal Error (missing definition for the command: {parsedCommand.Command})"' this);                          lastRc = false;                          continue;                      }                        var cmd = _actions[parsedCommand.Command];                        try                      {                          if (cmd.Experimental)                          {                              if (_experimental == false)                              {                                  WriteError($"{parsedCommand.Command} is experimental' and can be executed only if expermintal option set to on"' this);                                  lastRc = false;                                  continue;                              }                              WriteText(""' TextColor' this);                              WriteText("Are you sure you want to run experimental command : " + parsedCommand.Command + " ? [y/N] "' WarningColor' this' newLine: false);                                var k = ReadKey(this);                              WriteText(""' TextColor' this);                                  if (char.ToLower(k).Equals('y') == false)                              {                                  lastRc = false;                                  continue;                              }                          }                          lastRc = cmd.DelegateFync.Invoke(parsedCommand.Args' this);                            if (parsedCommand.Command == Command.Prompt && lastRc)                              _promptArgs = parsedCommand.Args;                          else if (parsedCommand.Command == Command.Experimental)                          {                              _experimental = lastRc;                              lastRc = true;                          }                      }                      catch (Exception ex)                      {                          WriteError(ex.ToString()' this);                          break;                      }                      if (lastRc)                      {                          if (parsedCommand.Command == Command.ResetServer)                          {                              if (Program.IsRunningNonInteractive || _writer == Console.Out)                              {                                  if (_consoleColoring == false)                                  {                                      const string str = "Restarting Server";                                      PrintBothToConsoleAndRemotePipe(str' this' Delimiter.RestartServer);                                  }                                  return true;                              }                                WriteText("Server is not running as Service. Restarting from a remote connection is not allowed." + Environment.NewLine +                                        "Please restart the server from its main console" + Environment.NewLine' WarningColor' this);                          }                          if (parsedCommand.Command == Command.Shutdown)                          {                              if (Program.IsRunningNonInteractive || _writer == Console.Out)                              {                                  if (_consoleColoring == false)                                  {                                      const string str = "Shutting down the server";                                      PrintBothToConsoleAndRemotePipe(str' this' Delimiter.Shutdown);                                  }                                  return false;                              }                                WriteText("Server is not running as Service. Shutting down from a remote connection is not allowed." + Environment.NewLine +                                        "Please shutdown the server from its main console" + Environment.NewLine' WarningColor' this);                          }                          if (parsedCommand.Command == Command.Logout)                          {                              break;                          }                      }                      else                      {                          if (parsedCommand.Command == Command.Shutdown ||                              parsedCommand.Command == Command.ResetServer)                              lastRc = true; // if answered "No" for the above command - don't print ERROR                      }                  }                    if (lastRc == false)                  {                      WriteError("Command Failed"' this);                  }              }
Magic Number,Raven.Server.Utils.Cli,WelcomeMessage,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\WelcomeMessage.cs,Print,The following statement contains a magic number: ConsoleWriteLineWithColor(ConsoleColor.Yellow' " Build {0}' Version {1}' SemVer {2}' Commit {3}\r\n PID {4}' {5} bits' {6} Cores' Phys Mem {7}' Arch: {8}"'                  ServerVersion.Build' ServerVersion.Version' ServerVersion.FullVersion' ServerVersion.CommitHash' Process.GetCurrentProcess().Id'                  IntPtr.Size * 8' ProcessorInfo.ProcessorCount' meminfo.TotalPhysicalMemory' RuntimeInformation.OSArchitecture);
Magic Number,Raven.Server.Utils.Metrics,MeterMetric,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Metrics\MeterMetric.cs,Tick,The following statement contains a magic number: _m15Rate[index % (60 * 15)] = OneSecondRate;
Magic Number,Raven.Server.Utils.Metrics,MeterMetric,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Metrics\MeterMetric.cs,Tick,The following statement contains a magic number: _m15Rate[index % (60 * 15)] = OneSecondRate;
Magic Number,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,WriteCertificateAsPem,The following statement contains a magic number: using (var writer = new StreamWriter(s' Encoding.ASCII' 1024' leaveOpen: true))              {                  var pw = new PemWriter(writer);                  pw.WriteObject(entry.Certificate);                    object privateKey;                  if (exportPassword != null)                  {                      privateKey = new MiscPemGenerator(                              key.Key'                              "AES-128-CBC"'                              exportPassword.ToCharArray()'                               CertificateUtils.GetSeededSecureRandom())                          .Generate();                  }                  else                  {                      privateKey = key.Key;                  }                  pw.WriteObject(privateKey);                    writer.Flush();              }
Magic Number,Raven.Server.Web.Authentication,AdminCertificatesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Authentication\AdminCertificatesHandler.cs,ReplaceClusterCert,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext ctx))              using (var certificateJson = ctx.ReadForDisk(RequestBodyStream()' "replace-server-cert"))              {                  try                  {                      var certificate = JsonDeserializationServer.CertificateDefinition(certificateJson);                        if (string.IsNullOrWhiteSpace(certificate.Name))                          throw new ArgumentException($"{nameof(certificate.Name)} is a required field in the certificate definition.");                        if (string.IsNullOrWhiteSpace(certificate.Certificate))                          throw new ArgumentException($"{nameof(certificate.Certificate)} is a required field in the certificate definition.");                        if (IsClusterAdmin() == false)                          throw new InvalidOperationException($"Cannot replace the server certificate with '{certificate.Name}'. Only a ClusterAdmin can do this.");                        byte[] certBytes;                      try                      {                          certBytes = Convert.FromBase64String(certificate.Certificate);                      }                      catch (Exception e)                      {                          throw new ArgumentException($"Unable to parse the {nameof(certificate.Certificate)} property' expected a Base64 value"' e);                      }                        X509Certificate2 newCertificate;                      try                      {                          newCertificate = string.IsNullOrEmpty(certificate.Password)                              ? new X509Certificate2(certBytes)                              : new X509Certificate2(certBytes' certificate.Password);                      }                      catch (Exception e)                      {                          throw new InvalidOperationException("Failed to load the new certificate."' e);                      }                        var timeoutTask = TimeoutManager.WaitFor(TimeSpan.FromSeconds(60)' ServerStore.ServerShutdown);                          var replicationTask = Server.StartCertificateReplicationAsync(newCertificate);                        await Task.WhenAny(replicationTask' timeoutTask);                      if (replicationTask.IsCompleted == false)                          throw new TimeoutException("Timeout when trying to replace the server certificate.");                  }                  catch (Exception e)                  {                      throw new InvalidOperationException("Failed to replace the server certificate."' e);                  }              }
Magic Number,Raven.Server.Web,RequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\RequestHandler.cs,GetStringFromHeaders,The following statement contains a magic number: if (headers[0].Length < 2)                  return headers[0];
Magic Number,Raven.Server.Web,RequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\RequestHandler.cs,GetStringFromHeaders,The following statement contains a magic number: string raw = headers[0][0] == '\"'                  ? headers[0].Substring(1' headers[0].Length - 2)                  : headers[0];
Magic Number,Raven.Server.Web,RequestHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\RequestHandler.cs,GetLongFromHeaders,The following statement contains a magic number: string raw = headers[0][0] == '\"'                  ? headers[0].Substring(1' headers[0].Length - 2)                  : headers[0];
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,WaitForExecutionOnRelevantNodes,The following statement contains a magic number: var timeoutTask = TimeoutManager.WaitFor(TimeSpan.FromMilliseconds(10000));
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,RestoreDatabase,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  var restoreConfiguration = await context.ReadForMemoryAsync(RequestBodyStream()' "database-restore");                  var restoreConfigurationJson = JsonDeserializationCluster.RestoreBackupConfiguration(restoreConfiguration);                    var databaseName = restoreConfigurationJson.DatabaseName;                  if (string.IsNullOrWhiteSpace(databaseName))                      throw new ArgumentException("Database name can't be null or empty");                    if (ResourceNameValidator.IsValidResourceName(databaseName' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false)                      throw new BadRequestException(errorMessage);                    using (context.OpenReadTransaction())                  {                      if (ServerStore.Cluster.ReadDatabase(context' databaseName) != null)                          throw new ArgumentException($"Cannot restore data to an existing database named {databaseName}");                        var clusterTopology = ServerStore.GetClusterTopology(context);                        if (string.IsNullOrWhiteSpace(restoreConfigurationJson.EncryptionKey) == false)                      {                          var key = Convert.FromBase64String(restoreConfigurationJson.EncryptionKey);                          if (key.Length != 256 / 8)                              throw new InvalidOperationException($"The size of the key must be 256 bits' but was {key.Length * 8} bits.");                            var isEncrypted = string.IsNullOrWhiteSpace(restoreConfigurationJson.EncryptionKey) == false;                          if (isEncrypted && NotUsingHttps(clusterTopology.GetUrlFromTag(ServerStore.NodeTag)))                              throw new InvalidOperationException("Cannot restore an encrypted database to a node which doesn't support SSL!");                      }                  }                    var operationId = ServerStore.Operations.GetNextOperationId();                  var cancelToken = new OperationCancelToken(ServerStore.ServerShutdown);                  var restoreBackupTask = new RestoreBackupTask(                      ServerStore'                      restoreConfigurationJson'                      ServerStore.NodeTag'                      cancelToken);    #pragma warning disable 4014                  ServerStore.Operations.AddOperation(  #pragma warning restore 4014                      null'                      $"Database restore: {databaseName}"'                      Documents.Operations.Operations.OperationType.DatabaseRestore'                      taskFactory: onProgress => Task.Run(async () => await restoreBackupTask.Execute(onProgress)' cancelToken.Token)'                      id: operationId' token: cancelToken);                    using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))                  {                      writer.WriteOperationId(context' operationId);                  }              }
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,RestoreDatabase,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  var restoreConfiguration = await context.ReadForMemoryAsync(RequestBodyStream()' "database-restore");                  var restoreConfigurationJson = JsonDeserializationCluster.RestoreBackupConfiguration(restoreConfiguration);                    var databaseName = restoreConfigurationJson.DatabaseName;                  if (string.IsNullOrWhiteSpace(databaseName))                      throw new ArgumentException("Database name can't be null or empty");                    if (ResourceNameValidator.IsValidResourceName(databaseName' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false)                      throw new BadRequestException(errorMessage);                    using (context.OpenReadTransaction())                  {                      if (ServerStore.Cluster.ReadDatabase(context' databaseName) != null)                          throw new ArgumentException($"Cannot restore data to an existing database named {databaseName}");                        var clusterTopology = ServerStore.GetClusterTopology(context);                        if (string.IsNullOrWhiteSpace(restoreConfigurationJson.EncryptionKey) == false)                      {                          var key = Convert.FromBase64String(restoreConfigurationJson.EncryptionKey);                          if (key.Length != 256 / 8)                              throw new InvalidOperationException($"The size of the key must be 256 bits' but was {key.Length * 8} bits.");                            var isEncrypted = string.IsNullOrWhiteSpace(restoreConfigurationJson.EncryptionKey) == false;                          if (isEncrypted && NotUsingHttps(clusterTopology.GetUrlFromTag(ServerStore.NodeTag)))                              throw new InvalidOperationException("Cannot restore an encrypted database to a node which doesn't support SSL!");                      }                  }                    var operationId = ServerStore.Operations.GetNextOperationId();                  var cancelToken = new OperationCancelToken(ServerStore.ServerShutdown);                  var restoreBackupTask = new RestoreBackupTask(                      ServerStore'                      restoreConfigurationJson'                      ServerStore.NodeTag'                      cancelToken);    #pragma warning disable 4014                  ServerStore.Operations.AddOperation(  #pragma warning restore 4014                      null'                      $"Database restore: {databaseName}"'                      Documents.Operations.Operations.OperationType.DatabaseRestore'                      taskFactory: onProgress => Task.Run(async () => await restoreBackupTask.Execute(onProgress)' cancelToken.Token)'                      id: operationId' token: cancelToken);                    using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))                  {                      writer.WriteOperationId(context' operationId);                  }              }
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,RestoreDatabase,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  var restoreConfiguration = await context.ReadForMemoryAsync(RequestBodyStream()' "database-restore");                  var restoreConfigurationJson = JsonDeserializationCluster.RestoreBackupConfiguration(restoreConfiguration);                    var databaseName = restoreConfigurationJson.DatabaseName;                  if (string.IsNullOrWhiteSpace(databaseName))                      throw new ArgumentException("Database name can't be null or empty");                    if (ResourceNameValidator.IsValidResourceName(databaseName' ServerStore.Configuration.Core.DataDirectory.FullPath' out string errorMessage) == false)                      throw new BadRequestException(errorMessage);                    using (context.OpenReadTransaction())                  {                      if (ServerStore.Cluster.ReadDatabase(context' databaseName) != null)                          throw new ArgumentException($"Cannot restore data to an existing database named {databaseName}");                        var clusterTopology = ServerStore.GetClusterTopology(context);                        if (string.IsNullOrWhiteSpace(restoreConfigurationJson.EncryptionKey) == false)                      {                          var key = Convert.FromBase64String(restoreConfigurationJson.EncryptionKey);                          if (key.Length != 256 / 8)                              throw new InvalidOperationException($"The size of the key must be 256 bits' but was {key.Length * 8} bits.");                            var isEncrypted = string.IsNullOrWhiteSpace(restoreConfigurationJson.EncryptionKey) == false;                          if (isEncrypted && NotUsingHttps(clusterTopology.GetUrlFromTag(ServerStore.NodeTag)))                              throw new InvalidOperationException("Cannot restore an encrypted database to a node which doesn't support SSL!");                      }                  }                    var operationId = ServerStore.Operations.GetNextOperationId();                  var cancelToken = new OperationCancelToken(ServerStore.ServerShutdown);                  var restoreBackupTask = new RestoreBackupTask(                      ServerStore'                      restoreConfigurationJson'                      ServerStore.NodeTag'                      cancelToken);    #pragma warning disable 4014                  ServerStore.Operations.AddOperation(  #pragma warning restore 4014                      null'                      $"Database restore: {databaseName}"'                      Documents.Operations.Operations.OperationType.DatabaseRestore'                      taskFactory: onProgress => Task.Run(async () => await restoreBackupTask.Execute(onProgress)' cancelToken.Token)'                      id: operationId' token: cancelToken);                    using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))                  {                      writer.WriteOperationId(context' operationId);                  }              }
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,Delete,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  var json = await context.ReadForMemoryAsync(RequestBodyStream()' "docs");                  var parameters = JsonDeserializationServer.Parameters.DeleteDatabasesParameters(json);                    if (parameters.FromNodes != null && parameters.FromNodes.Length > 0)                  {                      using (context.OpenReadTransaction())                      {                          foreach (var databaseName in parameters.DatabaseNames)                          {                              var record = ServerStore.Cluster.ReadDatabase(context' databaseName);                              if (record == null)                                  continue;                                foreach (var node in parameters.FromNodes)                              {                                  if (record.Topology.RelevantFor(node) == false)                                  {                                      throw new InvalidOperationException($"Database '{databaseName}' doesn't reside on node '{node}' so it can't be deleted from it");                                  }                                  deletedDatabases.Add(node);                                  record.Topology.RemoveFromTopology(node);                              }                                if (record.Topology.Count == 0)                                  waitOnRecordDeletion.Add(databaseName);                          }                      }                  }                    long index = -1;                  foreach (var name in parameters.DatabaseNames)                  {                      var (newIndex' _) = await ServerStore.DeleteDatabaseAsync(name' parameters.HardDelete' parameters.FromNodes);                      index = newIndex;                  }                  await ServerStore.Cluster.WaitForIndexNotification(index);                    var timeToWaitForConfirmation = parameters.TimeToWaitForConfirmation ?? TimeSpan.FromSeconds(15);                    var sp = Stopwatch.StartNew();                  int databaseIndex = 0;                  while (waitOnRecordDeletion.Count > databaseIndex)                  {                      var databaseName = waitOnRecordDeletion[databaseIndex];                      using (context.OpenReadTransaction())                      {                          var record = ServerStore.Cluster.ReadDatabase(context' databaseName);                          if (record == null)                          {                              waitOnRecordDeletion.RemoveAt(databaseIndex);                              continue;                          }                      }                      // we'll now wait for the _next_ operation in the cluster                      // since deletion involve multiple operations in the cluster                      // we'll now wait for the next command to be applied and check                      // whatever that removed the db in question                      index++;                      var remaining = timeToWaitForConfirmation - sp.Elapsed;                      try                      {                          if (remaining < TimeSpan.Zero)                          {                              databaseIndex++;                              continue; // we are done waiting' but still want to locally check the rest of the dbs                          }                            await ServerStore.Cluster.WaitForIndexNotification(index' remaining);                      }                      catch (TimeoutException)                      {                          databaseIndex++;                      }                  }                    using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))                  {                      context.Write(writer' new DynamicJsonValue                      {                          [nameof(DeleteDatabaseResult.RaftCommandIndex)] = index'                          [nameof(DeleteDatabaseResult.PendingDeletes)] = new DynamicJsonArray(deletedDatabases)                      });                  }              }
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CompactDatabase,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  var compactSettingsJson = context.ReadForDisk(RequestBodyStream()' string.Empty);                    var compactSettings = JsonDeserializationServer.CompactSettings(compactSettingsJson);                                    if (string.IsNullOrEmpty(compactSettings.DatabaseName))                      throw new InvalidOperationException($"{nameof(compactSettings.DatabaseName)} is a required field when compacting a database.");                    if (compactSettings.Documents == false && compactSettings.Indexes.Length == 0)                      throw new InvalidOperationException($"{nameof(compactSettings.Documents)} is false in compact settings and no indexes were supplied. Nothing to compact.");                    using (context.OpenReadTransaction())                  {                      var record = ServerStore.Cluster.ReadDatabase(context' compactSettings.DatabaseName);                      if (record == null)                          throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName}' it doesn't exist.");                      if (record.Topology.RelevantFor(ServerStore.NodeTag) == false)                          throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName} on node {ServerStore.NodeTag}' because it doesn't reside on this node.");                  }                    var database = ServerStore.DatabasesLandlord.TryGetOrCreateResourceStore(compactSettings.DatabaseName).Result;                                   var token = new OperationCancelToken(ServerStore.ServerShutdown);                  var compactDatabaseTask = new CompactDatabaseTask(                      ServerStore'                      compactSettings.DatabaseName'                      token.Token);                    var operationId = ServerStore.Operations.GetNextOperationId();                    ServerStore.Operations.AddOperation(                      null'                      "Compacting database: " + compactSettings.DatabaseName'                      Documents.Operations.Operations.OperationType.DatabaseCompact'                      taskFactory: onProgress => Task.Run(async () =>                      {                          using (token)                          {                              var before = CalculateStorageSizeInBytes(compactSettings.DatabaseName).Result / 1024 / 1024;                              var overallResult = new CompactionResult(compactSettings.DatabaseName);                                                            // first fill in data                               foreach (var indexName in compactSettings.Indexes)                              {                                  var indexCompactionResult = new CompactionResult(indexName);                                  overallResult.IndexesResults.Add(indexName' indexCompactionResult);                              }                                                            // then do actual compaction                              foreach (var indexName in compactSettings.Indexes)                              {                                  var index = database.IndexStore.GetIndex(indexName);                                  var indexCompactionResult = overallResult.IndexesResults[indexName];                                  index.Compact(onProgress' (CompactionResult) indexCompactionResult);                                  indexCompactionResult.Processed = true;                              }                                if (!compactSettings.Documents)                              {                                  overallResult.Skipped = true;                                  overallResult.Processed = true;                                  return overallResult;                                 }                                await compactDatabaseTask.Execute(onProgress' overallResult);                              overallResult.Processed = true;                                                            overallResult.SizeAfterCompactionInMb = CalculateStorageSizeInBytes(compactSettings.DatabaseName).Result / 1024 / 1024;                              overallResult.SizeBeforeCompactionInMb = before;                                return (IOperationResult)overallResult;                          }                      }' token.Token)'                      id: operationId' token: token);                    using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))                  {                      writer.WriteOperationId(context' operationId);                  }              }
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CompactDatabase,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  var compactSettingsJson = context.ReadForDisk(RequestBodyStream()' string.Empty);                    var compactSettings = JsonDeserializationServer.CompactSettings(compactSettingsJson);                                    if (string.IsNullOrEmpty(compactSettings.DatabaseName))                      throw new InvalidOperationException($"{nameof(compactSettings.DatabaseName)} is a required field when compacting a database.");                    if (compactSettings.Documents == false && compactSettings.Indexes.Length == 0)                      throw new InvalidOperationException($"{nameof(compactSettings.Documents)} is false in compact settings and no indexes were supplied. Nothing to compact.");                    using (context.OpenReadTransaction())                  {                      var record = ServerStore.Cluster.ReadDatabase(context' compactSettings.DatabaseName);                      if (record == null)                          throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName}' it doesn't exist.");                      if (record.Topology.RelevantFor(ServerStore.NodeTag) == false)                          throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName} on node {ServerStore.NodeTag}' because it doesn't reside on this node.");                  }                    var database = ServerStore.DatabasesLandlord.TryGetOrCreateResourceStore(compactSettings.DatabaseName).Result;                                   var token = new OperationCancelToken(ServerStore.ServerShutdown);                  var compactDatabaseTask = new CompactDatabaseTask(                      ServerStore'                      compactSettings.DatabaseName'                      token.Token);                    var operationId = ServerStore.Operations.GetNextOperationId();                    ServerStore.Operations.AddOperation(                      null'                      "Compacting database: " + compactSettings.DatabaseName'                      Documents.Operations.Operations.OperationType.DatabaseCompact'                      taskFactory: onProgress => Task.Run(async () =>                      {                          using (token)                          {                              var before = CalculateStorageSizeInBytes(compactSettings.DatabaseName).Result / 1024 / 1024;                              var overallResult = new CompactionResult(compactSettings.DatabaseName);                                                            // first fill in data                               foreach (var indexName in compactSettings.Indexes)                              {                                  var indexCompactionResult = new CompactionResult(indexName);                                  overallResult.IndexesResults.Add(indexName' indexCompactionResult);                              }                                                            // then do actual compaction                              foreach (var indexName in compactSettings.Indexes)                              {                                  var index = database.IndexStore.GetIndex(indexName);                                  var indexCompactionResult = overallResult.IndexesResults[indexName];                                  index.Compact(onProgress' (CompactionResult) indexCompactionResult);                                  indexCompactionResult.Processed = true;                              }                                if (!compactSettings.Documents)                              {                                  overallResult.Skipped = true;                                  overallResult.Processed = true;                                  return overallResult;                                 }                                await compactDatabaseTask.Execute(onProgress' overallResult);                              overallResult.Processed = true;                                                            overallResult.SizeAfterCompactionInMb = CalculateStorageSizeInBytes(compactSettings.DatabaseName).Result / 1024 / 1024;                              overallResult.SizeBeforeCompactionInMb = before;                                return (IOperationResult)overallResult;                          }                      }' token.Token)'                      id: operationId' token: token);                    using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))                  {                      writer.WriteOperationId(context' operationId);                  }              }
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CompactDatabase,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  var compactSettingsJson = context.ReadForDisk(RequestBodyStream()' string.Empty);                    var compactSettings = JsonDeserializationServer.CompactSettings(compactSettingsJson);                                    if (string.IsNullOrEmpty(compactSettings.DatabaseName))                      throw new InvalidOperationException($"{nameof(compactSettings.DatabaseName)} is a required field when compacting a database.");                    if (compactSettings.Documents == false && compactSettings.Indexes.Length == 0)                      throw new InvalidOperationException($"{nameof(compactSettings.Documents)} is false in compact settings and no indexes were supplied. Nothing to compact.");                    using (context.OpenReadTransaction())                  {                      var record = ServerStore.Cluster.ReadDatabase(context' compactSettings.DatabaseName);                      if (record == null)                          throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName}' it doesn't exist.");                      if (record.Topology.RelevantFor(ServerStore.NodeTag) == false)                          throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName} on node {ServerStore.NodeTag}' because it doesn't reside on this node.");                  }                    var database = ServerStore.DatabasesLandlord.TryGetOrCreateResourceStore(compactSettings.DatabaseName).Result;                                   var token = new OperationCancelToken(ServerStore.ServerShutdown);                  var compactDatabaseTask = new CompactDatabaseTask(                      ServerStore'                      compactSettings.DatabaseName'                      token.Token);                    var operationId = ServerStore.Operations.GetNextOperationId();                    ServerStore.Operations.AddOperation(                      null'                      "Compacting database: " + compactSettings.DatabaseName'                      Documents.Operations.Operations.OperationType.DatabaseCompact'                      taskFactory: onProgress => Task.Run(async () =>                      {                          using (token)                          {                              var before = CalculateStorageSizeInBytes(compactSettings.DatabaseName).Result / 1024 / 1024;                              var overallResult = new CompactionResult(compactSettings.DatabaseName);                                                            // first fill in data                               foreach (var indexName in compactSettings.Indexes)                              {                                  var indexCompactionResult = new CompactionResult(indexName);                                  overallResult.IndexesResults.Add(indexName' indexCompactionResult);                              }                                                            // then do actual compaction                              foreach (var indexName in compactSettings.Indexes)                              {                                  var index = database.IndexStore.GetIndex(indexName);                                  var indexCompactionResult = overallResult.IndexesResults[indexName];                                  index.Compact(onProgress' (CompactionResult) indexCompactionResult);                                  indexCompactionResult.Processed = true;                              }                                if (!compactSettings.Documents)                              {                                  overallResult.Skipped = true;                                  overallResult.Processed = true;                                  return overallResult;                                 }                                await compactDatabaseTask.Execute(onProgress' overallResult);                              overallResult.Processed = true;                                                            overallResult.SizeAfterCompactionInMb = CalculateStorageSizeInBytes(compactSettings.DatabaseName).Result / 1024 / 1024;                              overallResult.SizeBeforeCompactionInMb = before;                                return (IOperationResult)overallResult;                          }                      }' token.Token)'                      id: operationId' token: token);                    using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))                  {                      writer.WriteOperationId(context' operationId);                  }              }
Magic Number,Raven.Server.Web.System,AdminDatabasesHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\AdminDatabasesHandler.cs,CompactDatabase,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              {                  var compactSettingsJson = context.ReadForDisk(RequestBodyStream()' string.Empty);                    var compactSettings = JsonDeserializationServer.CompactSettings(compactSettingsJson);                                    if (string.IsNullOrEmpty(compactSettings.DatabaseName))                      throw new InvalidOperationException($"{nameof(compactSettings.DatabaseName)} is a required field when compacting a database.");                    if (compactSettings.Documents == false && compactSettings.Indexes.Length == 0)                      throw new InvalidOperationException($"{nameof(compactSettings.Documents)} is false in compact settings and no indexes were supplied. Nothing to compact.");                    using (context.OpenReadTransaction())                  {                      var record = ServerStore.Cluster.ReadDatabase(context' compactSettings.DatabaseName);                      if (record == null)                          throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName}' it doesn't exist.");                      if (record.Topology.RelevantFor(ServerStore.NodeTag) == false)                          throw new InvalidOperationException($"Cannot compact database {compactSettings.DatabaseName} on node {ServerStore.NodeTag}' because it doesn't reside on this node.");                  }                    var database = ServerStore.DatabasesLandlord.TryGetOrCreateResourceStore(compactSettings.DatabaseName).Result;                                   var token = new OperationCancelToken(ServerStore.ServerShutdown);                  var compactDatabaseTask = new CompactDatabaseTask(                      ServerStore'                      compactSettings.DatabaseName'                      token.Token);                    var operationId = ServerStore.Operations.GetNextOperationId();                    ServerStore.Operations.AddOperation(                      null'                      "Compacting database: " + compactSettings.DatabaseName'                      Documents.Operations.Operations.OperationType.DatabaseCompact'                      taskFactory: onProgress => Task.Run(async () =>                      {                          using (token)                          {                              var before = CalculateStorageSizeInBytes(compactSettings.DatabaseName).Result / 1024 / 1024;                              var overallResult = new CompactionResult(compactSettings.DatabaseName);                                                            // first fill in data                               foreach (var indexName in compactSettings.Indexes)                              {                                  var indexCompactionResult = new CompactionResult(indexName);                                  overallResult.IndexesResults.Add(indexName' indexCompactionResult);                              }                                                            // then do actual compaction                              foreach (var indexName in compactSettings.Indexes)                              {                                  var index = database.IndexStore.GetIndex(indexName);                                  var indexCompactionResult = overallResult.IndexesResults[indexName];                                  index.Compact(onProgress' (CompactionResult) indexCompactionResult);                                  indexCompactionResult.Processed = true;                              }                                if (!compactSettings.Documents)                              {                                  overallResult.Skipped = true;                                  overallResult.Processed = true;                                  return overallResult;                                 }                                await compactDatabaseTask.Execute(onProgress' overallResult);                              overallResult.Processed = true;                                                            overallResult.SizeAfterCompactionInMb = CalculateStorageSizeInBytes(compactSettings.DatabaseName).Result / 1024 / 1024;                              overallResult.SizeBeforeCompactionInMb = before;                                return (IOperationResult)overallResult;                          }                      }' token.Token)'                      id: operationId' token: token);                    using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))                  {                      writer.WriteOperationId(context' operationId);                  }              }
Magic Number,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,GetIps,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))              {                  writer.WriteStartObject();                  writer.WritePropertyName("MachineName");                  writer.WriteString(Environment.MachineName);                  writer.WriteComma();                  writer.WritePropertyName("NetworkInterfaces");                  writer.WriteStartArray();                  var first = true;                  foreach (var netInterface in NetworkInterface.GetAllNetworkInterfaces())                  {                      var ips = netInterface.GetIPProperties().UnicastAddresses                          .Where(x =>                          {                              // filter 169.254.xxx.xxx out' they are not meaningful for binding                              if (x.Address.AddressFamily != AddressFamily.InterNetwork)                                  return false;                              var addressBytes = x.Address.GetAddressBytes();                              return addressBytes[0] != 169 || addressBytes[1] != 254;                          })                          .Select(addr => addr.Address.ToString())                          .ToList();                          if (first == false)                          writer.WriteComma();                      first = false;                        writer.WriteStartObject();                      writer.WritePropertyName("Name");                      writer.WriteString(netInterface.Name);                      writer.WriteComma();                      writer.WritePropertyName("Description");                      writer.WriteString(netInterface.Description);                      writer.WriteComma();                      writer.WriteArray("Addresses"' ips);                      writer.WriteEndObject();                  }                  writer.WriteEndArray();                  writer.WriteEndObject();              }
Magic Number,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,GetIps,The following statement contains a magic number: using (ServerStore.ContextPool.AllocateOperationContext(out TransactionOperationContext context))              using (var writer = new BlittableJsonTextWriter(context' ResponseBodyStream()))              {                  writer.WriteStartObject();                  writer.WritePropertyName("MachineName");                  writer.WriteString(Environment.MachineName);                  writer.WriteComma();                  writer.WritePropertyName("NetworkInterfaces");                  writer.WriteStartArray();                  var first = true;                  foreach (var netInterface in NetworkInterface.GetAllNetworkInterfaces())                  {                      var ips = netInterface.GetIPProperties().UnicastAddresses                          .Where(x =>                          {                              // filter 169.254.xxx.xxx out' they are not meaningful for binding                              if (x.Address.AddressFamily != AddressFamily.InterNetwork)                                  return false;                              var addressBytes = x.Address.GetAddressBytes();                              return addressBytes[0] != 169 || addressBytes[1] != 254;                          })                          .Select(addr => addr.Address.ToString())                          .ToList();                          if (first == false)                          writer.WriteComma();                      first = false;                        writer.WriteStartObject();                      writer.WritePropertyName("Name");                      writer.WriteString(netInterface.Name);                      writer.WriteComma();                      writer.WritePropertyName("Description");                      writer.WriteString(netInterface.Description);                      writer.WriteComma();                      writer.WriteArray("Addresses"' ips);                      writer.WriteEndObject();                  }                  writer.WriteEndArray();                  writer.WriteEndObject();              }
Magic Number,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,SetupFinish,The following statement contains a magic number: Task.Run(async () =>              {                  // we want to give the studio enough time to actually                  // get a valid response from the server before we reset                  await Task.Delay(250);                    Program.ResetServerMre.Set();                  Program.ShutdownServerMre.Set();              });
Magic Number,Raven.Server.Web.System,SetupHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\SetupHandler.cs,IpAddressToUrl,The following statement contains a magic number: if (port != 80)                  url += ":" + port;
Magic Number,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,ParseETag,The following statement contains a magic number: if (clientETagParts?.Length != 3)              {                  hierarchyTag = "Unknown";                  fileVersion = -1;                  return false;              }
Magic Number,Raven.Server.Web.System,StudioHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\StudioHandler.cs,ParseETag,The following statement contains a magic number: if (long.TryParse(clientETagParts[2]' NumberStyles.Integer' null' out fileVersion) == false)                  return false;
Missing Default,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadPropertyNameInMetadataUnlikely,The following switch statement is missing a default case: switch (CreateLazyStringValueFromParserState(state))                          {                              case LegacyHasRevisionsDocumentState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                                  break;                              case LegacyRevisionState:                                  NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                                  break;                          }
Missing Default,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadWithStateUnlikely,The following switch statement is missing a default case: switch (_state)              {                  case State.None:                      break;                  case State.IgnoreProperty:                      if (reader.Read() == false)                          return false;                        if (state.CurrentTokenType == JsonParserToken.StartArray ||                          state.CurrentTokenType == JsonParserToken.StartObject)                          ThrowInvalidMetadataProperty(state);                      break;                  case State.IgnoreArray:                      if (_verifyStartArray)                      {                          if (reader.Read() == false)                              return false;                            _verifyStartArray = false;                            if (state.CurrentTokenType != JsonParserToken.StartArray)                              ThrowInvalidReplicationHistoryType(state);                      }                      while (state.CurrentTokenType != JsonParserToken.EndArray)                      {                          if (reader.Read() == false)                              return false;                      }                      break;                  case State.IgnoreRevisionStatusProperty:                      if (reader.Read() == false)                          return false;                        if (state.CurrentTokenType != JsonParserToken.String &&                          state.CurrentTokenType != JsonParserToken.Integer)                          ThrowInvalidEtagType(state);                        switch (CreateLazyStringValueFromParserState(state))                      {                          case LegacyHasRevisionsDocumentState:                              NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                              break;                          case LegacyRevisionState:                              NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                              break;                      }                      break;                  case State.ReadingId:                      if (reader.Read() == false)                          return false;                        if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Id' state);                      Id = CreateLazyStringValueFromParserState(state);                      break;                  case State.ReadingFlags:                      if (reader.Read() == false)                          return false;                        if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.Flags' state);                      Flags = ReadFlags(state);                      break;                  case State.ReadingChangeVector:                      if (reader.Read() == false)                          return false;                        if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString(Constants.Documents.Metadata.ChangeVector' state);                      ChangeVector = CreateLazyStringValueFromParserState(state);                        break;                  case State.ReadingFirstEtagOfLegacyRevision:                      if (reader.Read() == false)                          return false;                        if (state.CurrentTokenType != JsonParserToken.String)                          ThrowExpectedFieldTypeOfString("@etag"' state);                      _firstEtagOfLegacyRevision = CreateLazyStringValueFromParserState(state);                      ChangeVector = ChangeVectorUtils.NewChangeVector("RV"' ++_legacyRevisionsCount' new Guid(_firstEtagOfLegacyRevision).ToBase64Unpadded());                        break;              }
Missing Default,Raven.Server.Documents,BlittableMetadataModifier,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\BlittableMetadataModifier.cs,AboutToReadWithStateUnlikely,The following switch statement is missing a default case: switch (CreateLazyStringValueFromParserState(state))                      {                          case LegacyHasRevisionsDocumentState:                              NonPersistentFlags |= NonPersistentDocumentFlags.LegacyHasRevisions;                              break;                          case LegacyRevisionState:                              NonPersistentFlags |= NonPersistentDocumentFlags.LegacyRevision;                              break;                      }
Missing Default,Raven.Server.Documents.Handlers,MergedBatchCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchHandler.cs,Execute,The following switch statement is missing a default case: switch (cmd.Type)                      {                          case CommandType.PUT:                          {                              var putResult = Database.DocumentsStorage.Put(context' cmd.Id' cmd.ChangeVector' cmd.Document);                              context.DocumentDatabase.HugeDocuments.AddIfDocIsHuge(cmd.Id' cmd.Document.Size);                              LastChangeVector = putResult.ChangeVector;                              ModifiedCollections?.Add(putResult.Collection.Name);                                // Make sure all the metadata fields are always been add                              var putReply = new DynamicJsonValue                              {                                  ["Type"] = nameof(CommandType.PUT)'                                  [Constants.Documents.Metadata.Id] = putResult.Id'                                  [Constants.Documents.Metadata.Collection] = putResult.Collection.Name'                                  [Constants.Documents.Metadata.ChangeVector] = putResult.ChangeVector'                                  [Constants.Documents.Metadata.LastModified] = putResult.LastModified                              };                                if (putResult.Flags != DocumentFlags.None)                                  putReply[Constants.Documents.Metadata.Flags] = putResult.Flags;                                Reply.Add(putReply);                          }                              break;                          case CommandType.PATCH:                              cmd.PatchCommand.Execute(context);                                var patchResult = cmd.PatchCommand.PatchResult;                              if (patchResult.ModifiedDocument != null)                                  context.DocumentDatabase.HugeDocuments.AddIfDocIsHuge(cmd.Id' patchResult.ModifiedDocument.Size);                                if (patchResult.ChangeVector != null)                                  LastChangeVector = patchResult.ChangeVector;                                if (patchResult.Collection != null)                                  ModifiedCollections?.Add(patchResult.Collection);                                Reply.Add(new DynamicJsonValue                              {                                  [nameof(BatchRequestParser.CommandData.Id)] = cmd.Id'                                  [nameof(BatchRequestParser.CommandData.ChangeVector)] = patchResult.ChangeVector'                                  [nameof(BatchRequestParser.CommandData.Type)] = nameof(CommandType.PATCH)'                                  ["PatchStatus"] = patchResult.Status.ToString()'                                  ["Debug"] = patchResult.Debug                              });                              break;                          case CommandType.DELETE:                              if (cmd.IdPrefixed == false)                              {                                  var deleted = Database.DocumentsStorage.Delete(context' cmd.Id' cmd.ChangeVector);                                    if (deleted != null)                                  {                                      LastTombstoneEtag = deleted.Value.Etag;                                      ModifiedCollections?.Add(deleted.Value.Collection.Name);                                  }                                    Reply.Add(new DynamicJsonValue                                  {                                      [nameof(BatchRequestParser.CommandData.Id)] = cmd.Id'                                      [nameof(BatchRequestParser.CommandData.Type)] = nameof(CommandType.DELETE)'                                      ["Deleted"] = deleted != null                                  });                              }                              else                              {                                  var deleteResults = Database.DocumentsStorage.DeleteDocumentsStartingWith(context' cmd.Id);                                    for (var j = 0; j < deleteResults.Count; j++)                                  {                                      LastChangeVector = deleteResults[j].ChangeVector;                                      ModifiedCollections?.Add(deleteResults[j].Collection.Name);                                  }                                    Reply.Add(new DynamicJsonValue                                  {                                      [nameof(BatchRequestParser.CommandData.Id)] = cmd.Id'                                      [nameof(BatchRequestParser.CommandData.Type)] = nameof(CommandType.DELETE)'                                      ["Deleted"] = deleteResults.Count > 0                                  });                              }                              break;                          case CommandType.AttachmentPUT:                              var attachmentStream = AttachmentStreams.Dequeue();                              using (var stream = attachmentStream.Stream)                              {                                  var attachmentPutResult = Database.DocumentsStorage.AttachmentsStorage.PutAttachment(context' cmd.Id' cmd.Name'                                      cmd.ContentType' attachmentStream.Hash' cmd.ChangeVector' stream' updateDocument: false);                                  LastChangeVector = attachmentPutResult.ChangeVector;                                    if (_documentsToUpdateAfterAttachmentChange == null)                                      _documentsToUpdateAfterAttachmentChange = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                  _documentsToUpdateAfterAttachmentChange.Add(cmd.Id);                                    Reply.Add(new DynamicJsonValue                                  {                                      [nameof(BatchRequestParser.CommandData.Id)] = attachmentPutResult.DocumentId'                                      [nameof(BatchRequestParser.CommandData.Type)] = nameof(CommandType.AttachmentPUT)'                                      [nameof(BatchRequestParser.CommandData.Name)] = attachmentPutResult.Name'                                      [nameof(BatchRequestParser.CommandData.ChangeVector)] = attachmentPutResult.ChangeVector'                                      [nameof(AttachmentDetails.Hash)] = attachmentPutResult.Hash'                                      [nameof(BatchRequestParser.CommandData.ContentType)] = attachmentPutResult.ContentType'                                      [nameof(AttachmentDetails.Size)] = attachmentPutResult.Size                                  });                              }                                break;                          case CommandType.AttachmentDELETE:                              Database.DocumentsStorage.AttachmentsStorage.DeleteAttachment(context' cmd.Id' cmd.Name' cmd.ChangeVector' updateDocument: false);                                if (_documentsToUpdateAfterAttachmentChange == null)                                  _documentsToUpdateAfterAttachmentChange = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                              _documentsToUpdateAfterAttachmentChange.Add(cmd.Id);                                Reply.Add(new DynamicJsonValue                              {                                  ["Type"] = nameof(CommandType.AttachmentDELETE)'                                  [Constants.Documents.Metadata.Id] = cmd.Id'                                  ["Name"] = cmd.Name                              });                                break;                      }
Missing Default,Raven.Server.Documents.Handlers,BatchRequestParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\BatchRequestParser.cs,ReadSingleCommand,The following switch statement is missing a default case: switch (commandData.Type)              {                  case CommandType.None:                      ThrowInvalidType();                      break;                  case CommandType.PUT:                      if (commandData.Document == null)                          ThrowMissingDocumentProperty();                      break;                  case CommandType.PATCH:                      if (commandData.Patch == null)                          ThrowMissingPatchProperty();                      break;                  case CommandType.AttachmentPUT:                      if (commandData.Name == null)                          ThrowMissingNameProperty();                      break;              }
Missing Default,Raven.Server.Documents.Handlers,IndexHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\IndexHandler.cs,Source,The following switch statement is missing a default case: switch (index.Type)              {                  case IndexType.Map:                      var staticMapIndex = (MapIndex)index;                      source = staticMapIndex._compiled.Source;                      break;                  case IndexType.MapReduce:                      var staticMapReduceIndex = (MapReduceIndex)index;                      source = staticMapReduceIndex._compiled.Source;                      break;              }
Missing Default,Raven.Server.Documents.Handlers,SubscriptionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SubscriptionsHandler.cs,Try,The following switch statement is missing a default case: switch (changeVectorSpecialValue)                      {                          case Constants.Documents.SubscriptionChangeVectorSpecialStates.BeginningOfTime:                          case Constants.Documents.SubscriptionChangeVectorSpecialStates.DoNotChange:                              state.ChangeVectorForNextBatchStartingPoint = null;                              break;                          case Constants.Documents.SubscriptionChangeVectorSpecialStates.LastDocument:                              state.ChangeVectorForNextBatchStartingPoint = Database.DocumentsStorage.GetLastDocumentChangeVector(context' collection);                              break;                      }
Missing Default,Raven.Server.Documents.Handlers,SubscriptionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Handlers\SubscriptionsHandler.cs,Create,The following switch statement is missing a default case: switch (changeVectorSpecialValue)                      {                          case Constants.Documents.SubscriptionChangeVectorSpecialStates.BeginningOfTime:                                                        options.ChangeVector = null;                              break;                          case Constants.Documents.SubscriptionChangeVectorSpecialStates.LastDocument:                              options.ChangeVector = Database.DocumentsStorage.GetLastDocumentChangeVector(context' collection);                              break;                      }
Missing Default,Raven.Server.Documents.Indexes,CollectionOfBloomFilters,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\CollectionOfBloomFilters.cs,Load,The following switch statement is missing a default case: switch (mode)                  {                      case Mode.X64:                          filter = new BloomFilter64(i' tree' writeable: false' allocator: indexContext.Allocator);                          break;                      case Mode.X86:                          filter = new BloomFilter32(i' tree' writeable: false' allocator: indexContext.Allocator);                          break;                  }
Missing Default,Raven.Server.Documents.Indexes,LiveIndexingPerformanceCollector,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\LiveIndexingPerformanceCollector.cs,OnIndexChange,The following switch statement is missing a default case: switch (change.Type)              {                  case IndexChangeTypes.IndexRemoved:                      _perIndexStats.TryRemove(change.Name' out indexAndPerformanceStats);                      return;                  case IndexChangeTypes.Renamed:                      var indexRenameChange = change as IndexRenameChange;                      Debug.Assert(indexRenameChange != null);                      _perIndexStats.TryRemove(indexRenameChange.OldIndexName' out indexAndPerformanceStats);                      break;              }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                  {                      case Mode.SingleValue:                          _singleValueHash = Hashing.XXHash64.Calculate(lsv.Buffer' (ulong)lsv.Size);                          break;                      case Mode.MultipleValues:                          CopyToBuffer(lsv.Buffer' lsv.Size);                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                      {                          case Mode.SingleValue:                              _singleValueHash = Hashing.XXHash64.Calculate(str.Content.Ptr' (ulong)str.Size);                              break;                          case Mode.MultipleValues:                              CopyToBuffer(str.Content.Ptr' str.Size);                              break;                      }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                  {                      case Mode.SingleValue:                          _singleValueHash = Hashing.XXHash64.Calculate(lcsv.Buffer' (ulong)lcsv.CompressedSize);                          break;                      case Mode.MultipleValues:                          CopyToBuffer(lcsv.Buffer' lcsv.CompressedSize);                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                  {                      case Mode.SingleValue:                          unchecked                          {                              _singleValueHash = (ulong)l;                          }                          break;                      case Mode.MultipleValues:                          CopyToBuffer((byte*)&l' sizeof(long));                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                  {                      case Mode.SingleValue:                          _singleValueHash = Hashing.XXHash64.Calculate((byte*)&d' sizeof(decimal));                          break;                      case Mode.MultipleValues:                          CopyToBuffer((byte*)&d' sizeof(decimal));                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                  {                      case Mode.SingleValue:                          _singleValueHash = (ulong)num;                          break;                      case Mode.MultipleValues:                          CopyToBuffer((byte*)&num' sizeof(int));                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                  {                      case Mode.SingleValue:                          _singleValueHash = b ? 0 : 1UL;                          break;                      case Mode.MultipleValues:                          CopyToBuffer((byte*)&b' sizeof(bool));                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                  {                      case Mode.SingleValue:                          _singleValueHash = (ulong)dbl;                          break;                      case Mode.MultipleValues:                          CopyToBuffer((byte*)&d' sizeof(double));                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.MapReduce,ReduceKeyProcessor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\ReduceKeyProcessor.cs,Process,The following switch statement is missing a default case: switch (_mode)                  {                      case Mode.SingleValue:                          _singleValueHash = (ulong)t;                          break;                      case Mode.MultipleValues:                          CopyToBuffer((byte*)&t' sizeof(long));                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.MapReduce.Auto,AutoMapReduceIndex,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\MapReduce\Auto\AutoMapReduceIndex.cs,GetFieldValue,The following switch statement is missing a default case: switch (BlittableNumber.Parse(item' out double doubleValue' out long longValue))                              {                                  case NumberParseResult.Double:                                      total += (decimal)doubleValue;                                      break;                                  case NumberParseResult.Long:                                      total += longValue;                                      break;                              }
Missing Default,Raven.Server.Documents.Indexes.Persistence.Lucene.Documents,LuceneDocumentConverterBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\Documents\LuceneDocumentConverterBase.cs,GetOrCreateNumericField,The following switch statement is missing a default case: switch (BlittableNumber.Parse(value' out double doubleValue' out long longValue))              {                  case NumberParseResult.Double:                      yield return numericFieldDouble.SetDoubleValue(doubleValue);                      yield return numericFieldLong.SetLongValue((long)doubleValue);                      break;                  case NumberParseResult.Long:                      yield return numericFieldDouble.SetDoubleValue(longValue);                      yield return numericFieldLong.SetLongValue(longValue);                      break;              }
Missing Default,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexOperationBase,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexOperationBase.cs,CreateAnalyzer,The following switch statement is missing a default case: switch (field.Value.Indexing)                  {                      case FieldIndexing.Exact:                          if (keywordAnalyzer == null)                              keywordAnalyzer = new KeywordAnalyzer();                            perFieldAnalyzerWrapper.AddAnalyzer(fieldName' keywordAnalyzer);                          break;                      case FieldIndexing.Search:                          var analyzer = GetAnalyzer(fieldName' field.Value' forQuerying);                          if (analyzer != null)                          {                              perFieldAnalyzerWrapper.AddAnalyzer(fieldName' analyzer);                              continue;                          }                          AddStandardAnalyzer(fieldName);                            break;                  }
Missing Default,Raven.Server.Documents.Indexes.Persistence.Lucene,IndexReadOperation,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Persistence\Lucene\IndexReadOperation.cs,GetSort,The following switch statement is missing a default case: switch (field.OrderingType)                  {                      case OrderByFieldType.AlphaNumeric:                          var anSort = new AlphaNumericComparatorSource();                          sort.Add(new SortField(fieldName' anSort' field.Ascending == false));                          continue;                      case OrderByFieldType.Long:                          sortOptions = SortField.LONG;                          fieldName = fieldName + Constants.Documents.Indexing.Fields.RangeFieldSuffixLong;                          break;                      case OrderByFieldType.Double:                          sortOptions = SortField.DOUBLE;                          fieldName = fieldName + Constants.Documents.Indexing.Fields.RangeFieldSuffixDouble;                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,DynamicInvocationExpressionsRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\DynamicInvocationExpressionsRewriter.cs,VisitInvocationExpression,The following switch statement is missing a default case: switch (expression)              {                  case "Enumerable.Range":                      return HandleEnumerableRange(node);              }
Missing Default,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,DynamicInvocationExpressionsRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\DynamicInvocationExpressionsRewriter.cs,HandleEnumerableRange,The following switch statement is missing a default case: switch (parentMethod)              {                  case "Select":                  case "Enumerable.ToDictionary":                      return SyntaxFactory.ParseExpression($"{node}.Cast<dynamic>()");              }
Missing Default,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,DynamicLambdaExpressionsRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\DynamicLambdaExpressionsRewriter.cs,HandleMethod,The following switch statement is missing a default case: switch (method)              {                  case "Select":                  case "ToDictionary":                  case "GroupBy":                  case "OrderBy":                  case "OrderByDescending":                  case "Recurse":                      return Visit(ModifyLambdaForSelect(node' invocation));                  case "SelectMany":                      return ModifyLambdaForSelectMany(node' invocation);                  case "Sum":                  case "Average":                      return Visit(ModifyLambdaForNumerics(node));                  case "Max":                  case "Min":                      return Visit(ModifyLambdaForMinMax(node));                  case "Any":                  case "All":                  case "First":                  case "FirstOrDefault":                  case "Last":                  case "LastOfDefault":                  case "Single":                  case "Where":                  case "Count":                  case "SingleOrDefault":                      return Visit(ModifyLambdaForBools(node));              }
Missing Default,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,MethodDetectorRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\MethodDetectorRewriter.cs,VisitInvocationExpression,The following switch statement is missing a default case: switch (expression)              {                  case "this.LoadDocument":                  case "LoadDocument":                      Methods.HasLoadDocument = true;                      break;                  case "this.TransformWith":                  case "TransformWith":                      Methods.HasTransformWith = true;                      break;                  case "this.Include":                  case "Include":                      Methods.HasInclude = true;                      break;                  case "results.GroupBy":                      Methods.HasGroupBy = true;                      break;                  case "this.CreateField":                  case "CreateField":                      Methods.HasCreateField = true;                      break;              }
Missing Default,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,MethodDetectorRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\MethodDetectorRewriter.cs,VisitInvocationExpression,The following switch statement is missing a default case: switch (memberAccessExpression.Name.Identifier.Text)                  {                      case "Boost":                          Methods.HasBoost = true;                          break;                  }
Missing Default,Raven.Server.Documents.Indexes.Static.Roslyn.Rewriters,SpatialFieldRewriter,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Roslyn\Rewriters\SpatialFieldRewriter.cs,VisitInvocationExpression,The following switch statement is missing a default case: switch (expression)              {                  case "this.CreateSpatialField":                  case "CreateSpatialField":                      var parent = GetAnonymousObjectMemberDeclaratorSyntax(node);                      var name = parent.NameEquals.Name.Identifier.Text;                        var identifier = SyntaxFactory.Literal(name);                      var variable = SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' identifier);                        var arguments = node.ArgumentList.Arguments.Insert(0' SyntaxFactory.Argument(variable));                      return node.WithArgumentList(SyntaxFactory.ArgumentList(arguments));              }
Missing Default,Raven.Server.Documents.Indexes.Static.Spatial,SpatialField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Indexes\Static\Spatial\SpatialField.cs,CreateStrategy,The following switch statement is missing a default case: switch (opt.Strategy)              {                  case SpatialSearchStrategy.GeohashPrefixTree:                      return new RecursivePrefixTreeStrategyThatSupportsWithin(new GeohashPrefixTree(context' opt.MaxTreeLevel)' fieldName);                  case SpatialSearchStrategy.QuadPrefixTree:                      return new RecursivePrefixTreeStrategyThatSupportsWithin(new QuadPrefixTree(context' opt.MaxTreeLevel)' fieldName);                  case SpatialSearchStrategy.BoundingBox:                      return new BBoxStrategyThatSupportsAllShapes(context' fieldName);              }
Missing Default,Raven.Server.Documents.Operations,Operations,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Operations\Operations.cs,AddOperation,The following switch statement is missing a default case: switch (operationType)                      {                          case OperationType.DatabaseExport:                          case OperationType.DatabaseImport:                              shouldPersist = true;                              break;                      }
Missing Default,Raven.Server.Documents.Queries,RetrieveDocumentIdsVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\CollectionQueryEnumerable.cs,VisitFieldToken,The following switch statement is missing a default case: switch (methodType)                          {                              case MethodType.Id:                                  if (value is ValueExpression ve)                                  {                                      var id = QueryBuilder.GetValue(_query' _metadata' parameters' ve);                                        Debug.Assert(id.Type == ValueTokenType.String);                                        AddId(id.Value.ToString());                                  }                                  else if (_metadata.FillIds != null)                                  {                                      AddId(_metadata.FillIds.EvaluateSingleMethod(_resultsRetriever' null).ToString());                                  }                                  break;                          }
Missing Default,Raven.Server.Documents.Queries,IndexQueryServerSide,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\IndexQueryServerSide.cs,Create,The following switch statement is missing a default case: switch (item.Key)                      {                          case "query":                              continue;                          case RequestHandler.StartParameter:                          case RequestHandler.PageSizeParameter:                              break;                          case "waitForNonStaleResults":                              result.WaitForNonStaleResults = bool.Parse(item.Value[0]);                              break;                          case "waitForNonStaleResultsTimeoutInMs":                              result.WaitForNonStaleResultsTimeout = TimeSpan.FromMilliseconds(long.Parse(item.Value[0]));                              break;                          case "skipDuplicateChecking":                              result.SkipDuplicateChecking = bool.Parse(item.Value[0]);                              break;                              // TODO: HighlightedFields' HighlighterPreTags' HighlighterPostTags' HighlighterKeyName' ExplainScores                              // TODO: ShowTimings and spatial stuff                              // TODO: We also need to make sure that we aren't using headers                      }
Missing Default,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToLuceneQuery,The following switch statement is missing a default case: switch (where.Operator)                                      {                                          case OperatorType.Equal:                                              return LuceneQueryHelper.Equal(luceneFieldName' termType' valueAsString' exact);                                          case OperatorType.NotEqual:                                              return LuceneQueryHelper.NotEqual(luceneFieldName' termType' valueAsString' exact);                                          case OperatorType.LessThan:                                              return LuceneQueryHelper.LessThan(luceneFieldName' termType' valueAsString' exact);                                          case OperatorType.GreaterThan:                                              return LuceneQueryHelper.GreaterThan(luceneFieldName' termType' valueAsString' exact);                                          case OperatorType.LessThanEqual:                                              return LuceneQueryHelper.LessThanOrEqual(luceneFieldName' termType' valueAsString' exact);                                          case OperatorType.GreaterThanEqual:                                              return LuceneQueryHelper.GreaterThanOrEqual(luceneFieldName' termType' valueAsString' exact);                                      }
Missing Default,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToLuceneQuery,The following switch statement is missing a default case: switch (where.Operator)                                      {                                          case OperatorType.Equal:                                              return LuceneQueryHelper.Equal(luceneFieldName' termType' valueAsLong);                                          case OperatorType.NotEqual:                                              return LuceneQueryHelper.NotEqual(luceneFieldName' termType' valueAsLong);                                          case OperatorType.LessThan:                                              return LuceneQueryHelper.LessThan(luceneFieldName' termType' valueAsLong);                                          case OperatorType.GreaterThan:                                              return LuceneQueryHelper.GreaterThan(luceneFieldName' termType' valueAsLong);                                          case OperatorType.LessThanEqual:                                              return LuceneQueryHelper.LessThanOrEqual(luceneFieldName' termType' valueAsLong);                                          case OperatorType.GreaterThanEqual:                                              return LuceneQueryHelper.GreaterThanOrEqual(luceneFieldName' termType' valueAsLong);                                      }
Missing Default,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,ToLuceneQuery,The following switch statement is missing a default case: switch (where.Operator)                                      {                                          case OperatorType.Equal:                                              return LuceneQueryHelper.Equal(luceneFieldName' termType' valueAsDouble);                                          case OperatorType.NotEqual:                                              return LuceneQueryHelper.NotEqual(luceneFieldName' termType' valueAsDouble);                                          case OperatorType.LessThan:                                              return LuceneQueryHelper.LessThan(luceneFieldName' termType' valueAsDouble);                                          case OperatorType.GreaterThan:                                              return LuceneQueryHelper.GreaterThan(luceneFieldName' termType' valueAsDouble);                                          case OperatorType.LessThanEqual:                                              return LuceneQueryHelper.LessThanOrEqual(luceneFieldName' termType' valueAsDouble);                                          case OperatorType.GreaterThanEqual:                                              return LuceneQueryHelper.GreaterThanOrEqual(luceneFieldName' termType' valueAsDouble);                                      }
Missing Default,Raven.Server.Documents.Queries,QueryBuilder,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryBuilder.cs,Unescape,The following switch statement is missing a default case: switch (ch)                  {                      case '*':                      case '?':                      case '+':                      case '-':                      case '&':                      case '|':                      case '!':                      case '(':                      case ')':                      case '{':                      case '}':                      case '[':                      case ']':                      case '^':                      case '"':                      case '~':                      case ':':                      case '\\':                          {                              if (buffer == null)                              {                                  // allocate builder with headroom                                  buffer = new StringBuilder(length * 2);                              }                              // append any leading substring                              buffer.Append(term' start' i - start - 1);                              buffer.Append(ch);                              start = i + 1;                              break;                          }                  }
Missing Default,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,Build,The following switch statement is missing a default case: switch (methodType)                      {                          case MethodType.Id:                          case MethodType.CmpXchg:                          case MethodType.Count:                          case MethodType.Sum:                          case MethodType.Spatial_Point:                          case MethodType.Spatial_Wkt:                          case MethodType.Spatial_Circle:                              ThrowInvalidMethod(parameters' me);                              break;                      }
Missing Default,Raven.Server.Documents.Queries,QueryMetadata,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,GetSelectField,The following switch statement is missing a default case: switch (aggregation)                  {                      case AggregationOperation.Count:                          if (IsGroupBy == false)                              ThrowInvalidAggregationMethod(parameters' methodName);                          fieldName = QueryFieldName.Count;                          break;                      case AggregationOperation.Sum:                          if (IsGroupBy == false)                              ThrowInvalidAggregationMethod(parameters' methodName);                          if (me.Arguments == null)                          {                              ThrowMissingFieldNameArgumentOfSumMethod(QueryText' parameters);                              return null; // never hit                          }                          if (me.Arguments.Count != 1)                              ThrowIncorrectNumberOfArgumentsOfSumMethod(me.Arguments.Count' QueryText' parameters);                            fieldName = GetIndexFieldName(ExtractFieldNameFromFirstArgument(me.Arguments' "sum"' parameters)' parameters);                          break;                  }
Missing Default,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitBooleanMethod,The following switch statement is missing a default case: switch (methodType)                      {                          case MethodType.CmpXchg: // WHERE cmpxchg([<Func> | <Value>]) = <Value>                              if (!(rightSide is ValueExpression val))                              {                                  throw new ArgumentException("Right side of the cmpxchg expression must be value type.");                              }                              if (me.Arguments == null || me.Arguments.Count != 1)                              {                                  throw new ArgumentException("The cmpxchg expression must have exaclty one argument");                              }                              _metadata.CmpXchgMethod = new ExpressionEvaluator(_metadata' operatorType' me' val' parameters);                              break;                          case MethodType.Id:// WHERE id() = [<Func> | <Value>]                              if (rightSide is MethodExpression meRight)                              {                                  _metadata.FillIds = new SingleMethodEvaluator(_metadata' meRight' parameters);                                  _metadata.AddWhereField(QueryFieldName.DocumentId' parameters' exact: _insideExact > 0' operatorType: operatorType);                              }                              else                              {                                  if (rightSide is FieldExpression rfe)                                      _metadata.AddWhereField(new QueryFieldName(rfe.FieldValue' rfe.IsQuoted)' parameters' exact: _insideExact > 0' operatorType: operatorType);                                  _metadata.AddWhereField(QueryFieldName.DocumentId' parameters' exact: _insideExact > 0' operatorType: operatorType);                              }                              break;                          case MethodType.Sum:                          case MethodType.Count:                              VisitFieldToken(leftSide' rightSide' parameters' null);                              break;                      }
Missing Default,Raven.Server.Documents.Queries,FillWhereFieldsAndParametersVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\QueryMetadata.cs,VisitFieldToken,The following switch statement is missing a default case: switch (methodType)                      {                          case MethodType.Id:                              _metadata.AddWhereField(QueryFieldName.DocumentId' parameters' exact: _insideExact > 0' operatorType: operatorType);                              break;                          case MethodType.Count:                              _metadata.AddWhereField(QueryFieldName.Count' parameters' exact: _insideExact > 0);                              break;                          case MethodType.Sum:                              if (me.Arguments != null && me.Arguments[0] is FieldExpression f)                                  VisitFieldToken(f' value' parameters' operatorType);                              break;                      }
Missing Default,Raven.Server.Documents.Queries,SelectField,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\SelectField.cs,CreateValue,The following switch statement is missing a default case: switch (type)              {                  case AST.ValueTokenType.Long:                      finalVal = QueryBuilder.ParseInt64WithSeparators(val);                      break;                  case AST.ValueTokenType.Double:                      finalVal = double.Parse(val' CultureInfo.InvariantCulture);                      break;                  case AST.ValueTokenType.True:                      finalVal = true;                      break;                  case AST.ValueTokenType.False:                      finalVal = false;                      break;                  case AST.ValueTokenType.Null:                      finalVal = null;                      break;              }
Missing Default,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,VisitCompoundWhereExpression,The following switch statement is missing a default case: switch (where.Operator)              {                  case OperatorType.And:                  case OperatorType.AndNot:                      _sb.Append(" && ");                      break;                  case OperatorType.OrNot:                  case OperatorType.Or:                      _sb.Append(" || ");                      break;              }
Missing Default,Raven.Server.Documents.Queries.AST,JavascriptCodeQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\JavascriptCodeQueryVisitor.cs,VisitSimpleWhereExpression,The following switch statement is missing a default case: switch (expr.Operator)              {                  case OperatorType.Equal:                      _sb.Append(" === ");                      break;                  case OperatorType.NotEqual:                      _sb.Append(" !== ");                      break;                  case OperatorType.LessThan:                      _sb.Append(" < ");                      break;                  case OperatorType.GreaterThan:                      _sb.Append(" > ");                      break;                  case OperatorType.LessThanEqual:                      _sb.Append(" <= ");                      break;                  case OperatorType.GreaterThanEqual:                      _sb.Append(" >= ");                      break;              }
Missing Default,Raven.Server.Documents.Queries.AST,StringQueryVisitor,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\AST\StringQueryVisitor.cs,VisitOrderBy,The following switch statement is missing a default case: switch (orderBy[i].FieldType)                  {                      case OrderByFieldType.String:                          _sb.Append(" AS string");                          break;                      case OrderByFieldType.Long:                          _sb.Append(" AS long");                          break;                      case OrderByFieldType.Double:                          _sb.Append(" AS double");                          break;                      case OrderByFieldType.AlphaNumeric:                          _sb.Append(" AS alphanumeric");                          break;                  }
Missing Default,Raven.Server.Documents.Queries.Dynamic,DynamicQueryMapping,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryMapping.cs,ExtendMappingBasedOn,The following switch statement is missing a default case: switch (definitionOfExistingIndex)              {                  case AutoMapIndexDefinition def:                      Update(MapFields' def.MapFields);                      break;                  case AutoMapReduceIndexDefinition def:                      Update(MapFields' def.MapFields);                      Update(GroupByFields' def.GroupByFields);                      break;              }
Missing Default,Raven.Server.Documents.Queries.Dynamic,DynamicQueryRunner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Dynamic\DynamicQueryRunner.cs,TryMatchExistingIndexToQuery,The following switch statement is missing a default case: switch (matchResult.MatchType)              {                  case DynamicQueryMatchType.Complete:                      index = _indexStore.GetIndex(matchResult.IndexName);                      return true;                  case DynamicQueryMatchType.Partial:                      // At this point' we found an index that has some fields we need and                      // isn't incompatible with anything else we're asking for                      // We need to clone that other index                       // We need to add all our requested indexes information to our cloned index                      // We can then use our new index instead                        var currentIndex = _indexStore.GetIndex(matchResult.IndexName);                        if (map.SupersededIndexes == null)                          map.SupersededIndexes = new List<Index>();                        map.SupersededIndexes.Add(currentIndex);                        map.ExtendMappingBasedOn((AutoIndexDefinitionBase)currentIndex.Definition);                        break;              }
Missing Default,Raven.Server.Documents.Queries.Facets,FacetedQueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Facets\FacetedQueryParser.cs,ProcessFacet,The following switch statement is missing a default case: switch (kvp.Key)                  {                      case FacetAggregation.Max:                          value.Max = true;                          break;                      case FacetAggregation.Min:                          value.Min = true;                          break;                      case FacetAggregation.Average:                          value.Average = true;                          break;                      case FacetAggregation.Sum:                          value.Sum = true;                          break;                  }
Missing Default,Raven.Server.Documents.Queries.MoreLikeThis,MoreLikeThis,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\MoreLikeThis\MoreLikeThis.cs,ProcessTerms,The following switch statement is missing a default case: switch (token & BlittableJsonReaderBase.TypesMask)              {                  case BlittableJsonToken.String:                      var str = (LazyStringValue)value;                      AddTermFrequencies(new StringReader(str)' words' name);                      return;                  case BlittableJsonToken.CompressedString:                      var cstr = (LazyCompressedStringValue)value;                      AddTermFrequencies(new StringReader(cstr)' words' name);                      return;                  case BlittableJsonToken.Integer:                      AddTermFrequencies(new StringReader(((long)value).ToString())' words' name);                      return;                  case BlittableJsonToken.LazyNumber:                      AddTermFrequencies(new StringReader(((LazyNumberValue)value).ToString(CultureInfo.InvariantCulture))' words' name);                      return;                  case BlittableJsonToken.Boolean:                      AddTermFrequencies(new StringReader(((bool)value).ToString())' words' name);                      return;                  case BlittableJsonToken.StartArray:                      var array = (BlittableJsonReaderArray)value;                      for (var j = 0; j < array.Length; j++)                      {                          var tuple = array.GetValueTokenTupleByIndex(j);                          ProcessTerms(tuple.Item2' name' tuple.Item1' words);                      }                      return;                  case BlittableJsonToken.EmbeddedBlittable:                  case BlittableJsonToken.StartObject:                      RetrieveTerms((BlittableJsonReaderObject)value' words);                      return;              }
Missing Default,Raven.Server.Documents.Queries.Parser,QueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryParser.cs,OrderBy,The following switch statement is missing a default case: switch (asMatch)                      {                          case "string":                              type = OrderByFieldType.String;                              break;                          case "long":                              type = OrderByFieldType.Long;                              break;                          case "double":                              type = OrderByFieldType.Double;                              break;                          case "alphaNumeric":                              type = OrderByFieldType.AlphaNumeric;                              break;                      }
Missing Default,Raven.Server.Documents.Queries.Parser,QueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryParser.cs,Binary,The following switch statement is missing a default case: switch (type)                  {                      case OperatorType.And:                      case OperatorType.AndNot:                          if (right is BinaryExpression rightOp)                          {                              switch (rightOp.Operator)                              {                                  case OperatorType.AndNot:                                  case OperatorType.OrNot:                                  case OperatorType.Or:                                  case OperatorType.And:                                        rightOp.Left = new BinaryExpression(op' rightOp.Left' type);                                      op = right;                                      return true;                              }                          }                          break;                  }
Missing Default,Raven.Server.Documents.Queries.Parser,QueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryParser.cs,Binary,The following switch statement is missing a default case: switch (rightOp.Operator)                              {                                  case OperatorType.AndNot:                                  case OperatorType.OrNot:                                  case OperatorType.Or:                                  case OperatorType.And:                                        rightOp.Left = new BinaryExpression(op' rightOp.Left' type);                                      op = right;                                      return true;                              }
Missing Default,Raven.Server.Documents.Queries.Parser,QueryParser,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryParser.cs,Field,The following switch statement is missing a default case: switch (Scanner.TryNumber())                      {                          case NumberToken.Long:                              if (Scanner.TryScan(']') == false)                                  ThrowParseException("Expected to find closing ]");                              parts.Add(new StringSegment(Scanner.Input' Scanner.TokenStart' Scanner.TokenLength));                              break;                            case null:                              if (Scanner.TryScan(']') == false)                                  ThrowParseException("Expected to find closing ]");                              parts.Add("[]");                                break;                          case NumberToken.Double:                              ThrowParseException("Array indexer must be integer' but got double");                              break;                      }
Missing Default,Raven.Server.Documents.Queries.Parser,QueryScanner,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Queries\Parser\QueryScanner.cs,FunctionBody,The following switch statement is missing a default case: switch (_q[_pos])                  {                      case '"':                      case '\'':                          if (String(out _) == false)                              goto Failed;                          // we are now positioned at the _next_character' but we'll increment it                          // need to go back to stay in the same place :-)                          _pos--;                          break;                      case '{':                          nested++;                          break;                      case '}':                          if (--nested == 0)                          {                              _pos += 1;                              TokenStart = original;                              TokenLength = _pos - original;                              return true;                          }                          break;                  }
Missing Default,Raven.Server.Documents.Replication,OutgoingReplicationHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Documents\Replication\OutgoingReplicationHandler.cs,ReadHeaderResponseAndThrowIfUnAuthorized,The following switch statement is missing a default case: switch (headerResponse.Status)                  {                      case TcpConnectionStatus.Ok:                          break;                      case TcpConnectionStatus.AuthorizationFailed:                          throw new UnauthorizedAccessException($"{Destination.FromString()} replied with failure {headerResponse.Message}");                      case TcpConnectionStatus.TcpVersionMismatch:                          throw new InvalidOperationException($"{Destination.FromString()} replied with failure {headerResponse.Message}");                  }
Missing Default,Raven.Server.Extensions,ExpressionExtensions,C:\repos\ravendb_ravendb\src\Raven.Server\Extensions\ExpressionExtensions.cs,ToProperty,The following switch statement is missing a default case: switch (unaryExpression.NodeType)                  {                      case ExpressionType.Convert:                      case ExpressionType.ConvertChecked:                          expression = unaryExpression.Operand;                          break;                  }
Missing Default,Raven.Server.Rachis,Leader,C:\repos\ravendb_ravendb\src\Raven.Server\Rachis\Leader.cs,Run,The following switch statement is missing a default case: switch (WaitHandle.WaitAny(handles' _engine.ElectionTimeout))                      {                          case 0: // new entry                              _newEntry.Reset();                              // release any waiting ambassadors to send immediately                              TaskExecutor.CompleteAndReplace(ref _newEntriesArrived);                              if (_voters.Count == 0)                                  goto case 1;                              break;                          case 1: // voter responded                              _voterResponded.Reset();                              OnVoterConfirmation();                              break;                          case 2: // promotable updated                              _promotableUpdated.Reset();                              CheckPromotables();                              break;                          case WaitHandle.WaitTimeout:                              break;                          case 3: // shutdown requested                              if (_engine.Log.IsInfoEnabled && _voters.Count != 0)                              {                                  _engine.Log.Info($"Leader {_engine.Tag}: shutting down");                              }                              return;                      }
Missing Default,Raven.Server.Routing,RequestRouter,C:\repos\ravendb_ravendb\src\Raven.Server\Routing\RequestRouter.cs,TryAuthorize,The following switch statement is missing a default case: switch (authenticationStatus)                          {                              case null:                              case RavenServer.AuthenticationStatus.NoCertificateProvided:                              case RavenServer.AuthenticationStatus.Expired:                              case RavenServer.AuthenticationStatus.NotYetValid:                              case RavenServer.AuthenticationStatus.None:                              case RavenServer.AuthenticationStatus.UnfamiliarCertificate:                                  UnlikelyFailAuthorization(context' database?.Name' feature);                                  return false;                          }
Missing Default,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,Apply,The following switch statement is missing a default case: switch (type)                  {                      case nameof(AddOrUpdateCompareExchangeBatchCommand):                          if (cmd.TryGet(nameof(AddOrUpdateCompareExchangeBatchCommand.Commands)' out BlittableJsonReaderArray commands) == false)                          {                              throw new InvalidDataException($"'{nameof(AddOrUpdateCompareExchangeBatchCommand.Commands)}' is missing in '{nameof(AddOrUpdateCompareExchangeBatchCommand)}'.");                          }                          foreach (BlittableJsonReaderObject command in commands)                          {                              Apply(context' command' index' leader' serverStore);                          }                          break;                      //The reason we have a separate case for removing node from database is because we must                       //actually delete the database before we notify about changes to the record otherwise we                       //don't know that it was us who needed to delete the database.                      case nameof(RemoveNodeFromDatabaseCommand):                          RemoveNodeFromDatabase(context' cmd' index' leader);                          break;                      case nameof(RemoveNodeFromClusterCommand):                          RemoveNodeFromCluster(context' cmd' index' leader);                          break;                      case nameof(DeleteValueCommand):                      case nameof(DeactivateLicenseCommand):                      case nameof(DeleteCertificateFromClusterCommand):                          DeleteValue(context' type' cmd' index' leader);                          break;                      case nameof(DeleteMultipleValuesCommand):                      case nameof(DeleteCertificateCollectionFromClusterCommand):                          DeleteMultipleValues(context' type' cmd' index' leader);                          break;                      case nameof(IncrementClusterIdentityCommand):                          if (ValidatePropertyExistence(cmd' nameof(IncrementClusterIdentityCommand)' nameof(IncrementClusterIdentityCommand.Prefix)' out errorMessage) == false)                          {                              NotifyLeaderAboutError(index' leader' new InvalidDataException(errorMessage));                              return;                          }                            SetValueForTypedDatabaseCommand(context' type' cmd' index' leader' out object result);                          leader?.SetStateOf(index' result);                          break;                      case nameof(IncrementClusterIdentitiesBatchCommand):                          if (ValidatePropertyExistence(cmd' nameof(IncrementClusterIdentitiesBatchCommand)' nameof(IncrementClusterIdentitiesBatchCommand.DatabaseName)' out errorMessage) == false)                          {                              NotifyLeaderAboutError(index' leader' new InvalidDataException(errorMessage));                              return;                          }                            SetValueForTypedDatabaseCommand(context' type' cmd' index' leader' out result);                          leader?.SetStateOf(index' result);                          break;                      case nameof(UpdateClusterIdentityCommand):                          if (ValidatePropertyExistence(cmd' nameof(UpdateClusterIdentityCommand)' nameof(UpdateClusterIdentityCommand.Identities)' out errorMessage) == false)                          {                              NotifyLeaderAboutError(index' leader' new InvalidDataException(errorMessage));                              return;                          }                            SetValueForTypedDatabaseCommand(context' type' cmd' index' leader' out result);                          leader?.SetStateOf(index' result);                          break;                      case nameof(PutIndexCommand):                      case nameof(PutAutoIndexCommand):                      case nameof(DeleteIndexCommand):                      case nameof(SetIndexLockCommand):                      case nameof(SetIndexPriorityCommand):                      case nameof(EditRevisionsConfigurationCommand):                      case nameof(UpdatePeriodicBackupCommand):                      case nameof(EditExpirationCommand):                      case nameof(ModifyConflictSolverCommand):                      case nameof(UpdateTopologyCommand):                      case nameof(DeleteDatabaseCommand):                      case nameof(UpdateExternalReplicationCommand):                      case nameof(PromoteDatabaseNodeCommand):                      case nameof(ToggleTaskStateCommand):                      case nameof(AddRavenEtlCommand):                      case nameof(AddSqlEtlCommand):                      case nameof(UpdateRavenEtlCommand):                      case nameof(UpdateSqlEtlCommand):                      case nameof(DeleteOngoingTaskCommand):                      case nameof(PutRavenConnectionString):                      case nameof(PutSqlConnectionString):                      case nameof(RemoveRavenConnectionString):                      case nameof(RemoveSqlConnectionString):                          UpdateDatabase(context' type' cmd' index' leader' serverStore);                          break;                      case nameof(UpdatePeriodicBackupStatusCommand):                      case nameof(AcknowledgeSubscriptionBatchCommand):                      case nameof(PutSubscriptionCommand):                      case nameof(DeleteSubscriptionCommand):                      case nameof(UpdateEtlProcessStateCommand):                      case nameof(ToggleSubscriptionStateCommand):                      case nameof(UpdateSubscriptionClientConnectionTime):                      case nameof(UpdateSnmpDatabaseIndexesMappingCommand):                      case nameof(RemoveEtlProcessStateCommand):                          SetValueForTypedDatabaseCommand(context' type' cmd' index' leader' out _);                          break;                      case nameof(AddOrUpdateCompareExchangeCommand):                      case nameof(RemoveCompareExchangeCommand):                          CompareExchange(context' type' cmd' index' out var removeItem);                          leader?.SetStateOf(index' removeItem);                          break;                       case nameof(InstallUpdatedServerCertificateCommand):                           InstallUpdatedServerCertificate(context' cmd' index);                           break;                       case nameof(RecheckStatusOfServerCertificateCommand):                           NotifyValueChanged(context'type' index);// just need to notify listeners                           break;                       case nameof(ConfirmReceiptServerCertificateCommand):                           ConfirmReceiptServerCertificate(context' cmd' index);                           break;                      case nameof(UpdateSnmpDatabasesMappingCommand):                          UpdateValue<List<string>>(context' type' cmd' index' leader);                          break;                      case nameof(PutLicenseCommand):                          PutValue<License>(context' type' cmd' index' leader);                          break;                      case nameof(PutLicenseLimitsCommand):                          PutValue<LicenseLimits>(context' type' cmd' index' leader);                          break;                      case nameof(PutCertificateCommand):                          PutValue<CertificateDefinition>(context' type' cmd' index' leader);                          // Once the certificate is in the cluster' no need to keep it locally so we delete it.                          if (cmd.TryGet(nameof(PutCertificateCommand.Name)' out string key))                              DeleteLocalState(context' key);                          break;                      case nameof(PutClientConfigurationCommand):                          PutValue<ClientConfiguration>(context' type' cmd' index' leader);                          break;                      case nameof(AddDatabaseCommand):                          AddDatabase(context' cmd' index' leader);                          break;                  }
Missing Default,Raven.Server.ServerWide,ClusterStateMachine,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ClusterStateMachine.cs,ConnectToPeer,The following switch statement is missing a default case: switch (reply.Status)                          {                              case TcpConnectionStatus.Ok:                                  break;                              case TcpConnectionStatus.AuthorizationFailed:                                  throw new AuthorizationException($"Unable to access  {url} because {reply.Message}");                              case TcpConnectionStatus.TcpVersionMismatch:                                  throw new InvalidOperationException($"Unable to access  {url} because {reply.Message}");                          }
Missing Default,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,GetNodesStatuses,The following switch statement is missing a default case: switch (CurrentRachisState)              {                  case RachisState.Leader:                      nodesStatuses = _engine.CurrentLeader?.GetStatus();                        break;                  case RachisState.Candidate:                      nodesStatuses = _engine.Candidate?.GetStatus();                        break;                  case RachisState.Follower:                      var leaderTag = _engine.LeaderTag;                      if (leaderTag != null)                      {                          nodesStatuses = new Dictionary<string' NodeStatus>                          {                              [leaderTag] = new NodeStatus { Connected = true }                          };                      }                      break;              }
Missing Default,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,OnDatabaseChanged,The following switch statement is missing a default case: switch (t.Type)              {                  case nameof(DeleteDatabaseCommand):                      NotificationCenter.Add(DatabaseChanged.Create(t.DatabaseName' DatabaseChangeType.Delete));                      break;                  case nameof(AddDatabaseCommand):                      NotificationCenter.Add(DatabaseChanged.Create(t.DatabaseName' DatabaseChangeType.Put));                      break;                  case nameof(UpdateTopologyCommand):                      NotificationCenter.Add(DatabaseChanged.Create(t.DatabaseName' DatabaseChangeType.Update));                      break;                  case nameof(RemoveNodeFromDatabaseCommand):                      NotificationCenter.Add(DatabaseChanged.Create(t.DatabaseName' DatabaseChangeType.RemoveNode));                      break;              }
Missing Default,Raven.Server.ServerWide,ServerStore,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\ServerStore.cs,OnValueChanged,The following switch statement is missing a default case: switch (t.Type)              {                  case nameof(RecheckStatusOfServerCertificateCommand):                  case nameof(ConfirmReceiptServerCertificateCommand):                      using (ContextPool.AllocateOperationContext(out TransactionOperationContext context))                      using (context.OpenReadTransaction())                      {                          var cert = Cluster.GetItem(context' "server/cert");                          if (cert == null)                              return; // was already processed?                          if (cert.TryGet("Confirmations"' out int confirmations) == false)                              throw new InvalidOperationException("Expected to get confirmations count");                            if (GetClusterTopology(context).AllNodes.Count > confirmations)                          {                              if (Server.Certificate?.Certificate != null &&                                  (Server.Certificate.Certificate.NotAfter - DateTime.Now).TotalDays > 3)                                  return; // we still have time for all the nodes to update themselves                                                         }                                                    if (cert.TryGet("Certificate"' out string certBase64) == false ||                               cert.TryGet("Thumbprint"' out string certThumbprint) == false)                              throw new InvalidOperationException("Invalid server cert value' expected to get Certificate and Thumbprint properties");                            if (certThumbprint == Server.Certificate?.Certificate?.Thumbprint)                              return;// already replaced it' nothing to do                                                    // and now we have to replace the cert...                          if (string.IsNullOrEmpty(Configuration.Security.CertificatePath))                          {                              NotificationCenter.Add(AlertRaised.Create(                                  null'                                  "Unable to refresh server certificate"'                                   "Cluster wanted to install updated server certificate' but no path has been configured"'                                   AlertType.ClusterTopologyWarning'                                   NotificationSeverity.Error'                                  "Cluster.Certificate.Install.Error"));                              return;                          }                                                  var bytesToSave = Convert.FromBase64String(certBase64);                          var newClusterCertificate = new X509Certificate2(bytesToSave'(string)null' X509KeyStorageFlags.Exportable);                                                    if(Logger.IsOperationsEnabled)                              Logger.Operations($"Replacing the certificate used by the server to: {newClusterCertificate.FriendlyName} - {newClusterCertificate.Thumbprint}");                                                                              if (string.IsNullOrEmpty(Configuration.Security.CertificatePassword) == false)                          {                              bytesToSave = newClusterCertificate.Export(X509ContentType.Pkcs12' Configuration.Security.CertificatePassword);                          }                            using (var certStream = File.Create(Path.Combine(AppContext.BaseDirectory' Configuration.Security.CertificatePath)))                          {                              certStream.Write(bytesToSave' 0' bytesToSave.Length);                              certStream.Flush(true);                          }                                                    Server.SetCertificate(newClusterCertificate' bytesToSave' Configuration.Security.CertificatePassword);                                                }                      break;                  case nameof(InstallUpdatedServerCertificateCommand):                      using (ContextPool.AllocateOperationContext(out TransactionOperationContext context))                      using (context.OpenReadTransaction())                      {                          var cert = Cluster.GetItem(context' "server/cert");                          if (cert == null)                              return; // was already processed?                          if (cert.TryGet("Thumbprint"' out string certThumbprint) == false)                              throw new InvalidOperationException("Invalid server cert value' expected to get Thumbprint property");                            if(cert.TryGet("Certificate"' out string base64Cert) == false)                              throw new InvalidOperationException("Invalid server cert value' expected to get Certificate property");                            var certificate = new X509Certificate2(Convert.FromBase64String(base64Cert));                            var now = DateTime.UtcNow;                          if (certificate.NotBefore.ToUniversalTime() > now)                          {                              if (Logger.IsOperationsEnabled)                              {                                  Logger.Operations($"Unable to confirm certificate update because the NotBefore property is set " +                                                    $"to {certificate.NotBefore.ToUniversalTime():O} and now it is {now:O}. Will try again later");                              }                              return;                          }                            // we got it' now let us let the leader know about it                          SendToLeaderAsync(new ConfirmReceiptServerCertificateCommand(certThumbprint));                      }                      break;                  case nameof(PutClientConfigurationCommand):                      LastClientConfigurationIndex = t.Index;                      break;                  case nameof(PutLicenseCommand):                  case nameof(DeactivateLicenseCommand):                      InvokeLicenseChanged();                      break;                  case nameof(PutLicenseLimitsCommand):                      LicenseLimitsChanged?.Invoke(null' null);                      using (ContextPool.AllocateOperationContext(out TransactionOperationContext context))                      using (context.OpenReadTransaction())                      {                          OnTopologyChanged(null' GetClusterTopology(context));                      }                      break;              }
Missing Default,Raven.Server.ServerWide.Commands,DeleteOngoingTaskCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\DeleteOngoingTaskCommand.cs,UpdateDatabaseRecord,The following switch statement is missing a default case: switch (TaskType)              {                  case OngoingTaskType.Replication:                      var replicationTask = record.ExternalReplications?.Find(x => x.TaskId == TaskId);                      if (replicationTask != null)                      {                          record.ExternalReplications.Remove(replicationTask);                      }                                    break;                    case OngoingTaskType.Backup:                      record.DeletePeriodicBackupConfiguration(TaskId);                      return TaskId.ToString();                    case OngoingTaskType.SqlEtl:                      var sqlEtl = record.SqlEtls?.Find(x => x.TaskId == TaskId);                      if (sqlEtl != null)                      {                          record.SqlEtls.Remove(sqlEtl);                      }                      break;                    case OngoingTaskType.RavenEtl:                      var ravenEtl = record.RavenEtls?.Find(x => x.TaskId == TaskId);                      if (ravenEtl != null)                      {                          record.RavenEtls.Remove(ravenEtl);                      }                      break;              }
Missing Default,Raven.Server.ServerWide.Commands,ToggleTaskStateCommand,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Commands\ToggleTaskStateCommand.cs,UpdateDatabaseRecord,The following switch statement is missing a default case: switch (TaskType)              {                  case OngoingTaskType.Replication:                        var watcher = record?.ExternalReplications.Find(x => x.TaskId == TaskId);                      if (watcher != null)                      {                          watcher.Disabled = Disable;                      }                      break;                    case OngoingTaskType.Backup:                        var backup = record?.PeriodicBackups?.Find(x => x.TaskId == TaskId);                      if (backup != null)                      {                          backup.Disabled = Disable;                      }                      break;                    case OngoingTaskType.SqlEtl:                        var sqlEtl = record?.SqlEtls?.Find(x => x.TaskId == TaskId);                      if (sqlEtl != null)                      {                          sqlEtl.Disabled = Disable;                      }                      break;                    case OngoingTaskType.RavenEtl:                        var ravenEtl = record?.RavenEtls?.Find(x => x.TaskId == TaskId);                      if (ravenEtl != null)                      {                          ravenEtl.Disabled = Disable;                      }                      break;              }
Missing Default,Raven.Server.ServerWide.Maintenance,ClusterNode,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterMaintenanceSupervisor.cs,ConnectToClientNodeAsync,The following switch statement is missing a default case: switch (headerResponse.Status)                          {                              case TcpConnectionStatus.Ok:                                  break;                              case TcpConnectionStatus.AuthorizationFailed:                                  throw new UnauthorizedAccessException(                                      $"Node with ClusterTag = {ClusterTag} replied to initial handshake with authorization failure {headerResponse.Message}");                              case TcpConnectionStatus.TcpVersionMismatch:                                  throw new InvalidOperationException($"Node with ClusterTag = {ClusterTag} replied to initial handshake with mismatching tcp version {headerResponse.Message}");                          }
Missing Default,Raven.Server.ServerWide.Maintenance,ClusterObserver,C:\repos\ravendb_ravendb\src\Raven.Server\ServerWide\Maintenance\ClusterObserver.cs,UpdateDatabaseTopology,The following switch statement is missing a default case: switch (health)                  {                      case DatabaseHealth.Bad:                          if (topology.DynamicNodesDistribution == false)                              continue;                            if (goodMembers < topology.ReplicationFactor &&                              TryFindFitNode(rehab' dbName' topology' clusterTopology' current' out var node))                          {                              if (_server.LicenseManager.CanDynamicallyDistributeNodes(out _) == false)                                  continue;                                topology.Promotables.Add(node);                              topology.DemotionReasons[node] = $"Maintain the replication factor and create new replica instead of node {rehab}";                              topology.PromotablesStatus[node] = DatabasePromotionStatus.WaitingForFirstPromotion;                              return $"The rehab node {rehab} was too long in rehabilitation' create node {node} to replace it";                          }                            if (topology.PromotablesStatus.TryGetValue(rehab' out var status) == false || status != DatabasePromotionStatus.NotResponding)                          {                              // was already online' but now we lost the connection again                              if (TryMoveToRehab(dbName' topology' current' rehab))                              {                                  return $"Node {rehab} is currently not responding";                              }                          }                            break;                      case DatabaseHealth.Good:                            if (pendingDelete.Contains(rehab) && topology.PromotablesStatus.ContainsKey(rehab) == false)                          {                              // already tried to promote' so we just ignore and continue                              continue;                          }                            if (TryGetMentorNode(dbName' topology' clusterTopology' rehab' out var mentorNode) == false)                              continue;                            var tryPromote = TryPromote(dbName' topology' current' previous' mentorNode' rehab);                          if (tryPromote.Promote)                          {                              if (_logger.IsOperationsEnabled)                              {                                  _logger.Operations($"The database {dbName} on {rehab} is reachable and up to date' so we promote it back to member.");                              }                                                            topology.Members.Add(rehab);                              topology.Rehabs.Remove(rehab);                              RemoveOtherNodesIfNeeded(dbName' record' clusterTopology' current' ref deletions);                              return $"Node {rehab} was recovered from rehabilitation and promoted back to member";                          }                          if (tryPromote.UpdateTopologyReason != null)                          {                              shouldUpdateTopologyStatus = true;                              updateTopologyStatusReason.AppendLine(tryPromote.UpdateTopologyReason);                          }                          break;                  }
Missing Default,Raven.Server.Smuggler.Documents,MergedBatchPutCommand,C:\repos\ravendb_ravendb\src\Raven.Server\Smuggler\Documents\DatabaseDestination.cs,Execute,The following switch statement is missing a default case: switch (tombstone.Type)                              {                                  case DocumentTombstone.TombstoneType.Document:                                      _database.DocumentsStorage.Delete(context' key' tombstone.LowerId' null' null' changeVector' new CollectionName(tombstone.Collection));                                      break;                                  case DocumentTombstone.TombstoneType.Attachment:                                      _database.DocumentsStorage.AttachmentsStorage.DeleteAttachmentDirect(context' key' false' "$fromReplication"' null' changeVector);                                      break;                                  case DocumentTombstone.TombstoneType.Revision:                                      _database.DocumentsStorage.RevisionsStorage.DeleteRevision(context' key' tombstone.Collection' changeVector);                                      break;                              }
Missing Default,Raven.Server.SqlMigration,SqlMigrationDocument,C:\repos\ravendb_ravendb\src\Raven.Server\SqlMigration\SqlMigrationDocument.cs,Set,The following switch statement is missing a default case: switch (value)              {                  case null:                  case DBNull _:                      this[key] = null;                      return;                  case string str:                      if (trimStrings)                          this[key] = str.Trim();                      else                          this[key] = str;                      return;                  case byte[] byteArray:                      this[key] = System.Convert.ToBase64String(byteArray);                      return;                  case Guid guid:                      this[key] = guid.ToString();                      return;              }
Missing Default,Raven.Server.Utils,ChunkedMmapStream,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\ChunkedMmapStream.cs,Seek,The following switch statement is missing a default case: switch (origin)              {                  case SeekOrigin.Begin:                      Position = offset;                      break;                    case SeekOrigin.Current:                      Position += offset;                      break;                    case SeekOrigin.End:                      Position = Length + offset;                      break;              }
Missing Default,Raven.Server.Utils,UrlUtil,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\UrlUtil.cs,IsZeros,The following switch statement is missing a default case: switch (hostName)              {                  case "::":                  case "::0":                  case "0.0.0.0":                      return true;              }
Missing Default,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandTimer,The following switch statement is missing a default case: switch (args.First())              {                  case "on":                      cli._server.ServerStore.Engine.Timeout.Disable = false;                      WriteText("Timer enabled"' TextColor' cli);                      break;                  case "off":                      cli._server.ServerStore.Engine.Timeout.Disable = true;                      WriteText("Timer disabled"' TextColor' cli);                      break;                  case "fire":                      cli._server.ServerStore.Engine.Timeout.ExecuteTimeoutBehavior();                      WriteText("Timer fired"' TextColor' cli);                      break;              }
Missing Default,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,CommandLog,The following switch statement is missing a default case: switch (args.First())              {                  case "on":                      LoggingSource.Instance.EnableConsoleLogging();                      LoggingSource.Instance.SetupLogMode(LogMode.Information' cli._server.Configuration.Logs.Path.FullPath);                      WriteText("Logging set to ON"' ConsoleColor.Green' cli);                      break;                  case "off":                      LoggingSource.Instance.DisableConsoleLogging();                      LoggingSource.Instance.SetupLogMode(LogMode.None' cli._server.Configuration.Logs.Path.FullPath);                      WriteText("Logging set to OFF"' ConsoleColor.DarkGreen' cli);                      break;                  case "http-off":                      WriteText("Setting HTTP logging OFF"' ConsoleColor.DarkGreen' cli);                      RavenServerStartup.SkipHttpLogging = true;                      goto case "on";                  case "http-on":                      WriteText("Setting HTTP logging ON"' ConsoleColor.Green' cli);                      RavenServerStartup.SkipHttpLogging = false;                      goto case "on";              }
Missing Default,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,Start,The following switch statement is missing a default case: switch (line)                      {                          case "shutdown":                          case "q":                              return false;                          case "reset":                              return true;                          case "log":                              LoggingSource.Instance.EnableConsoleLogging();                              LoggingSource.Instance.SetupLogMode(LogMode.Information' _server.Configuration.Logs.Path.FullPath);                              break;                          case "logoff":                              LoggingSource.Instance.DisableConsoleLogging();                              LoggingSource.Instance.SetupLogMode(LogMode.None' _server.Configuration.Logs.Path.FullPath);                              break;                          case "h":                          case "help":                              WriteText("Available commands: shutdown' reset' log' logoff"' TextColor' this);                              break;                      }
Missing Default,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,GetCommand,The following switch statement is missing a default case: switch (txt)              {                  case "q":                      cmd = Command.Shutdown;                      break;                  case "h":                      cmd = Command.Help;                      break;                  case "cls":                      cmd = Command.Clear;                      break;              }
Missing Default,Raven.Server.Utils.Cli,RavenCli,C:\repos\ravendb_ravendb\src\Raven.Server\Utils\Cli\RavenCli.cs,ParseLine,The following switch statement is missing a default case: switch (words[0])                          {                              case "&&":                              case "||":                                  if (_actions[parsedLine.ParsedCommands.Last().Command].NumOfArgs != 0)                                  {                                      parsedLine.ErrorMsg = $"Missing argument(s) after command : {parsedLine.ParsedCommands.Last().Command}";                                      return false;                                  }                                  break;                          }
Missing Default,Raven.Server.Web.Studio,StudioCollectionFieldsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionFieldsHandler.cs,GetFieldType,The following switch statement is missing a default case: switch (arrayType)                          {                              case FieldType.Object:                                  return FieldType.ArrayObject;                              case FieldType.Array:                                  return FieldType.ArrayArray;                              case FieldType.String:                                  return FieldType.ArrayString;                              case FieldType.Number:                                  return FieldType.ArrayNumber;                              case FieldType.Boolean:                                  return FieldType.ArrayBoolean;                          }
Missing Default,Raven.Server.Web.Studio,StudioCollectionFieldsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionFieldsHandler.cs,FetchFieldsForCollection,The following switch statement is missing a default case: switch (token)                              {                                  case BlittableJsonToken.StartObject:                                      FetchFields((BlittableJsonReaderObject)prop.Value' fields' _buffers);                                      break;                                  case BlittableJsonToken.StartArray:                                      var array = (BlittableJsonReaderArray)prop.Value;                                      for (int j = 0; j < Math.Min(array.Length' MaxArrayItemsToFetch); j++)                                      {                                          var item = array[i];                                          if (item is BlittableJsonReaderObject itemObject)                                              FetchFields(itemObject' fields' _buffers);                                      }                                      break;                              }
Missing Default,Raven.Server.Web.Studio,StudioCollectionsHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\Studio\StudioCollectionsHandler.cs,WriteDocument,The following switch statement is missing a default case: switch (strategy)                      {                          case ValueWriteStrategy.Passthrough:                              writer.WritePropertyName(prop.Name);                              writer.WriteValue(prop.Token & BlittableJsonReaderBase.TypesMask' prop.Value);                              break;                          case ValueWriteStrategy.SubstituteWithArrayStub:                              arraysStubs.Add(prop.Name);                              break;                          case ValueWriteStrategy.SubstituteWithObjectStub:                              objectsStubs.Add(prop.Name);                              break;                          case ValueWriteStrategy.Trim:                              writer.WritePropertyName(prop.Name);                              WriteTrimmedValue(writer' prop.Token & BlittableJsonReaderBase.TypesMask' prop.Value);                              trimmedValue.Add(prop.Name);                              break;                      }
Missing Default,Raven.Server.Web.System,DeleteOngoingTaskAction,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\OngoingTasksHandler.cs,DeleteOngoingTaskAction,The following switch statement is missing a default case: switch (type)                  {                      case OngoingTaskType.RavenEtl:                      case OngoingTaskType.SqlEtl:                          DatabaseRecord record;                            using (context.Transaction == null ? context.OpenReadTransaction() : null)                          {                              record = _serverStore.Cluster.ReadDatabase(context' database.Name);                          }                            if (type == OngoingTaskType.RavenEtl)                          {                              var ravenEtl = record.RavenEtls?.Find(x => x.TaskId == id);                              if (ravenEtl != null)                                  _deletingEtl = (ravenEtl.Name' ravenEtl.Transforms.Where(x => string.IsNullOrEmpty(x.Name) == false).Select(x => x.Name).ToList());                          }                          else                          {                              var sqlEtl = record.SqlEtls?.Find(x => x.TaskId == id);                              if (sqlEtl != null)                                  _deletingEtl = (sqlEtl.Name' sqlEtl.Transforms.Where(x => string.IsNullOrEmpty(x.Name) == false).Select(x => x.Name).ToList());                          }                          break;                  }
Missing Default,Raven.Server.Web.System,TestConnectionHandler,C:\repos\ravendb_ravendb\src\Raven.Server\Web\System\TestConnectionHandler.cs,ConnectToClientNodeAsync,The following switch statement is missing a default case: switch (headerResponse.Status)                          {                              case TcpConnectionStatus.Ok:                                  result["Success"] = true;                                  break;                              case TcpConnectionStatus.AuthorizationFailed:                                  result["Success"] = false;                                  result["Error"] = $"Connection to {tcpConnectionInfo.Url} failed because of authorization failure: {headerResponse.Message}";                                  break;                              case TcpConnectionStatus.TcpVersionMismatch:                                  result["Success"] = false;                                  result["Error"] = $"Connection to {tcpConnectionInfo.Url} failed because of mismatching tcp version {headerResponse.Message}";                                  break;                          }
