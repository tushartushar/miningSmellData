Implementation smell,Namespace,Class,File,Method,Description
Long Method,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The method has 117 lines of code.
Complex Method,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,Cyclomatic complexity of the method is 11
Long Parameter List,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,CreateLoadOnAllDatabases,The method has 5 parameters. Parameters: numberOfDatabases' store' timeToSpin' minTimeBetweenIntervals' sampleProduct
Long Parameter List,StressTests.Sparrow,QueuedTaskScheduler,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Sparrow\DisposeOnceTests.cs,QueuedTaskScheduler,The method has 8 parameters. Parameters: threadCount' threadName' useForegroundThreads' threadPriority' threadApartmentState' threadMaxStackSize' threadInit' threadFinally
Long Statement,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The length of the statement  "                                    await store.Operations.ForDatabase(db).SendAsync(new PutCompareExchangeValueOperation<User>($"usernames/{Interlocked.Increment(ref count)}"' new User()' 0)); " is 157.
Long Statement,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The length of the statement  "                                        session.Advanced.ClusterTransaction.CreateCompareExchangeValue($"usernames/{Interlocked.Increment(ref count)}"' new User()); " is 124.
Long Statement,StressTests.Core.Expiration,ExpirationStressTest,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Core\Expiration\ExpirationStressTest.cs,CanAddALotOfEntitiesWithSameExpiry_ThenReadItBeforeItExpires_ButWillNotBeAbleToReadItAfterExpiry,The length of the statement  "                await expiration.CanAddALotOfEntitiesWithSameExpiry_ThenReadItBeforeItExpires_ButWillNotBeAbleToReadItAfterExpiry(count); " is 121.
Long Statement,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,RunTest,The length of the statement  "                Console.WriteLine($"Results came from cache {_totalQueryUsedCachedResults} times out of {_totalQueryCount} total queries."); " is 124.
Long Statement,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,StartAsyncQueryTask,The length of the statement  "                            session.Query<Product>().Statistics(out queryStat).Customize(x => x.NoCaching()).Where(p => p.PricePerUnit > 1).Take(25).ToList(); " is 130.
Long Statement,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,StartAsyncQueryTask,The length of the statement  "                                _reportedAvarageQueryTime = onePart * (_totalQueryCount - _totalQueryUsedCachedResults) * _reportedAvarageQueryTime + queryStat.DurationInMs * onePart; " is 151.
Long Statement,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The length of the statement  "                var serverWideConfiguration = await store.Maintenance.Server.SendAsync(new GetServerWideBackupConfigurationOperation(result.Name)); " is 131.
Long Statement,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,CountOfBackupStatus,The length of the statement  "                using (var store = new DocumentStore { Urls = new[] { server.WebUrl }' Conventions = { DisableTopologyUpdates = true }' Database = _databaseName }.Initialize()) " is 160.
Long Statement,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn32Bit,The length of the statement  "                var worker = store.Subscriptions.GetSubscriptionWorker<Order>(new Raven.Client.Documents.Subscriptions.SubscriptionWorkerOptions(subsId) " is 136.
Long Statement,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn32Bit,The length of the statement  "            var adminCert = RegisterClientCertificate(certificates' new Dictionary<string' DatabaseAccess>()' SecurityClearance.ClusterAdmin); " is 130.
Long Statement,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn32Bit,The length of the statement  "                var worker = store.Subscriptions.GetSubscriptionWorker<Order>(new Raven.Client.Documents.Subscriptions.SubscriptionWorkerOptions(subsId) " is 136.
Long Statement,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn64Bit,The length of the statement  "                var worker = store.Subscriptions.GetSubscriptionWorker<Order>(new Raven.Client.Documents.Subscriptions.SubscriptionWorkerOptions(subsId) " is 136.
Long Statement,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn64Bit,The length of the statement  "            var adminCert = RegisterClientCertificate(certificates' new Dictionary<string' DatabaseAccess>()' SecurityClearance.ClusterAdmin); " is 130.
Long Statement,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn64Bit,The length of the statement  "                var worker = store.Subscriptions.GetSubscriptionWorker<Order>(new Raven.Client.Documents.Subscriptions.SubscriptionWorkerOptions(subsId) " is 136.
Long Statement,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,LZ4TestAbove2GB,The length of the statement  "                        var compressedLenTask = Task.Factory.StartNew(() => LZ4.Encode64LongBuffer(inputBuffer' outputBuffer' inputSize' outputBufferSize)' cts.Token); " is 143.
Long Statement,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,LZ4TestAbove2GB,The length of the statement  "                        var totalOutputSizeTask = Task.Factory.StartNew(() => LZ4.Decode64LongBuffers(outputBuffer' compressedLen' checkedBuffer' inputSize' true)' cts.Token); " is 151.
Long Statement,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CreateScratchFile,The length of the statement  "            var filename = Path.Combine(RavenTestHelper.NewDataPath(nameof(HugeTransactions)' 0' forceCreateDir: true)' $"TestBigCompression-{scratchName}"); " is 145.
Long Statement,StressTests.Voron.Issues,RavenDB_7667,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\Issues\RavenDB_7667.cs,IndexTreeNeedsToReturnPageToAllocatorInsteadOfFreeSpaceHandling,The length of the statement  "                store.Operations.Send(new DeleteByQueryOperation(new IndexQuery() { Query = "FROM Users" })).WaitForCompletion(TimeSpan.FromMinutes(5)); " is 136.
Empty Catch Block,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The method has an empty catch block.
Empty Catch Block,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The method has an empty catch block.
Empty Catch Block,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,StartAsyncQueryTask,The method has an empty catch block.
Empty Catch Block,StressTests.Sparrow,QueuedTaskScheduler,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Sparrow\DisposeOnceTests.cs,ThreadBasedDispatchLoop,The method has an empty catch block.
Empty Catch Block,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The method has an empty catch block.
Magic Number,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The following statement contains a magic number: var numberOfNodes = 7;
Magic Number,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The following statement contains a magic number: var t = Task.Run(async () =>                      {                          var nodeNum = random.Next(0' numberOfNodes);                          using (var store = GetDocumentStore(new Options                          {                              Server = cluster.Nodes[nodeNum]'                              CreateDatabase = false                          }))                          {                              for (int j = 0; j < 10; j++)                              {                                  try                                  {                                      await store.Operations.ForDatabase(db).SendAsync(new PutCompareExchangeValueOperation<User>($"usernames/{Interlocked.Increment(ref count)}"' new User()' 0));                                        using (var session = store.OpenAsyncSession(db))                                      {                                          session.Advanced.SetTransactionMode(TransactionMode.ClusterWide);                                          session.Advanced.ClusterTransaction.CreateCompareExchangeValue($"usernames/{Interlocked.Increment(ref count)}"' new User());                                          await session.StoreAsync(new User());                                          await session.SaveChangesAsync();                                      }                                  }                                  catch                                  {                                      //                                  }                              }                          }                      });
Magic Number,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The following statement contains a magic number: i < 100
Magic Number,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The following statement contains a magic number: var attempts = 3 * numberOfNodes;
Magic Number,StressTests.Cluster,ClusterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Cluster\ClusterStressTests.cs,ParallelClusterTransactions,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(3) * numberOfNodes);
Magic Number,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,CanHandleMultipleDatabasesOnWrite,The following statement contains a magic number: RunTest(numberOfDatabases: 25);
Magic Number,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,CanHandleMultipleDatabasesOnWrite32,The following statement contains a magic number: RunTest(numberOfDatabases: 10);
Magic Number,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,RunTest,The following statement contains a magic number: var timeToSpin = TimeSpan.FromMinutes(5);
Magic Number,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,RunTest,The following statement contains a magic number: var minTimeBetweenIntervals = 500;
Magic Number,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,StartAsyncQueryTask,The following statement contains a magic number: Task.Run(() =>              {                  var sw = new Stopwatch();                  while (true)                  {                      var dbNum = rand.Next(numberOfDatabases);                        try                      {                          using (var session = store.OpenSession(DbNumToDbName[dbNum]))                          {                              QueryStatistics queryStat;                              sw.Restart();                              session.Query<Product>().Statistics(out queryStat).Customize(x => x.NoCaching()).Where(p => p.PricePerUnit > 1).Take(25).ToList();                              var realQueryTime = sw.ElapsedMilliseconds;                              //this is for no overflow                              var onePart = (double)1 / (_totalQueryCount + 1);                              _avarageQueryTime = onePart * _totalQueryCount * _avarageQueryTime + realQueryTime * onePart;                                  if (_maxQueryTime < realQueryTime)                              {                                  _maxQueryTime = realQueryTime;                              }                              //Not sure if reported result is worth anything...                              onePart = (double)1 / (_totalQueryCount - _totalQueryUsedCachedResults + 1);                              if (queryStat.DurationInMs > 0)                              {                                  _reportedAvarageQueryTime = onePart * (_totalQueryCount - _totalQueryUsedCachedResults) * _reportedAvarageQueryTime + queryStat.DurationInMs * onePart;                                  if (_reportedMaxQueryTime < queryStat.DurationInMs)                                  {                                      _reportedMaxQueryTime = queryStat.DurationInMs;                                  }                              }                              else                              {                                  _totalQueryUsedCachedResults++;                              }                                _totalQueryCount++;                          }                        }                      catch (ObjectDisposedException)                      {                      }                  }              }' cts.Token);
Magic Number,StressTests,Databases,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Databases.cs,CreateDatabases,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: const int clusterSize = 3;
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: var leader = await CreateRaftClusterAndGetLeader(3' false'                  customSettings: new Dictionary<string' string>()                  {                      [RavenConfiguration.GetKey(x => x.Cluster.MoveToRehabGraceTime)] = "1"'                      [RavenConfiguration.GetKey(x => x.Cluster.AddReplicaTimeout)] = "1"'                      [RavenConfiguration.GetKey(x => x.Cluster.ElectionTimeout)] = "300"'                      [RavenConfiguration.GetKey(x => x.Cluster.StabilizationTime)] = "1"'                      [RavenConfiguration.GetKey(x => x.Databases.MaxIdleTime)] = "10"'                      [RavenConfiguration.GetKey(x => x.Databases.FrequencyToCheckForIdle)] = "3"'                      [RavenConfiguration.GetKey(x => x.Core.RunInMemory)] = "false"                  });
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: var nextNow = now + TimeSpan.FromSeconds(300);
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: now < nextNow && GetIdleCount() < 3
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: Assert.Equal(3' GetIdleCount());
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: Assert.Equal(3' GetIdleCount());
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: var idleCount = WaitForCount(_reasonableWaitTime' 2' GetIdleCount);
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: Assert.Equal(2' idleCount);
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: var count = WaitForCount(_reasonableWaitTime' 3' CountOfBackupStatus);
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,ServerWideBackupShouldNotWakeupIdleDatabases,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,StressTests.Issues,RavenDB_13987,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-13987.cs,WaitForCount,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,StressTests.Issues,RavenDB_5763,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB-5763.cs,Should_not_throw_timeout_and_out_of_memory,The following statement contains a magic number: Parallel.For(0' 3' RavenTestHelper.DefaultParallelOptions' i =>              {                  using (var store = new ReplicationTombstoneTests(Output))                  {                      store.Two_tombstones_should_replicate_in_master_master().Wait();                  }              });
Magic Number,StressTests.Issues,RavenDB_13528,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13528.cs,Can_write_more_than_4GB_to_journal_file,The following statement contains a magic number: long _4Kb = 4L * Constants.Size.Kilobyte;
Magic Number,StressTests.Issues,RavenDB_13528,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13528.cs,Can_write_more_than_4GB_to_journal_file,The following statement contains a magic number: var writer = Env.Options.CreateJournalWriter(10' size);
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn32Bit,The following statement contains a magic number: var str = string.Join(string.Empty' Enumerable.Range(0' 1600).Select(x => x.ToString()).ToArray());
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn32Bit,The following statement contains a magic number: i < 747 * 10
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn32Bit,The following statement contains a magic number: i < 747 * 10
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn32Bit,The following statement contains a magic number: Assert.All(batchLengths' x => Assert.Equal(747' x));
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn32Bit,The following statement contains a magic number: var str = string.Join(string.Empty' Enumerable.Range(0' 1600).Select(x => x.ToString()).ToArray());
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn32Bit,The following statement contains a magic number: var buffer = new byte[32];
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn32Bit,The following statement contains a magic number: i < 300 * 10
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn32Bit,The following statement contains a magic number: i < 300 * 10
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn32Bit,The following statement contains a magic number: Assert.All(batchLengths' x => Assert.True(Math.Abs(295 - x) < 10));
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn32Bit,The following statement contains a magic number: Assert.All(batchLengths' x => Assert.True(Math.Abs(295 - x) < 10));
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn64Bit,The following statement contains a magic number: var str = string.Join(string.Empty' Enumerable.Range(0' 1600).Select(x => x.ToString()).ToArray());
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn64Bit,The following statement contains a magic number: i < 5970 * 3
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn64Bit,The following statement contains a magic number: i < 5970 * 3
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactIn64Bit,The following statement contains a magic number: Assert.All(batchLengths' x => Assert.Equal(5970' x));
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn64Bit,The following statement contains a magic number: var str = string.Join(string.Empty' Enumerable.Range(0' 1600).Select(x => x.ToString()).ToArray());
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn64Bit,The following statement contains a magic number: var buffer = new byte[32];
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn64Bit,The following statement contains a magic number: i < 2424 * 3
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn64Bit,The following statement contains a magic number: i < 2424 * 3
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn64Bit,The following statement contains a magic number: Assert.All(batchLengths' x => Assert.True(Math.Abs(2425 - x) < 10));
Magic Number,StressTests.Issues,RavenDB_13861,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Issues\RavenDB_13861.cs,BatchMemorySizeLimitationShouldBeExactInEncryptedModeIn64Bit,The following statement contains a magic number: Assert.All(batchLengths' x => Assert.True(Math.Abs(2425 - x) < 10));
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: var nextNow = now + TimeSpan.FromSeconds(60);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: now < nextNow && server.ServerStore.IdleDatabases.Count < 2
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Assert.Equal(2' server.ServerStore.IdleDatabases.Count);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: docs != replicatedDocs && count < 20
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: nextNow = DateTime.Now + TimeSpan.FromMinutes(5);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: count % 10 == 0
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: nextNow = DateTime.Now + TimeSpan.FromSeconds(15);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: nextNow = DateTime.Now + TimeSpan.FromMinutes(10);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: now < nextNow && server.ServerStore.IdleDatabases.Count < 2
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Assert.Equal(2' server.ServerStore.IdleDatabases.Count);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: nextNow = DateTime.Now + TimeSpan.FromMinutes(2);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: nextNow = DateTime.Now + TimeSpan.FromMinutes(10);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: count % 10 == 0
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: nextNow = DateTime.Now + TimeSpan.FromSeconds(15);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests.cs,TwoWayExternalReplicationShouldNotLoadIdleDatabase,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests_NoDispose,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests_NoDispose.cs,ExternalReplicationShouldWorkWithSmallTimeoutStress,The following statement contains a magic number: Parallel.For(0' 3' RavenTestHelper.DefaultParallelOptions' _ =>                  {                      using (var test = new ExternalReplicationTests(Output))                      {                          test.ExternalReplicationShouldWorkWithSmallTimeoutStress(20000).Wait();                      }                  });
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests_NoDispose,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests_NoDispose.cs,ExternalReplicationShouldWorkWithSmallTimeoutStress,The following statement contains a magic number: Parallel.For(0' 3' RavenTestHelper.DefaultParallelOptions' _ =>                  {                      using (var test = new ExternalReplicationTests(Output))                      {                          test.ExternalReplicationShouldWorkWithSmallTimeoutStress(20000).Wait();                      }                  });
Magic Number,StressTests.Server.Replication,ExternalReplicationStressTests_NoDispose,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Server\Replication\ExternalReplicationStressTests_NoDispose.cs,ExternalReplicationShouldWorkWithSmallTimeoutStress,The following statement contains a magic number: i < 10
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: new Random(240130173).NextBytes(value);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[0] = 11;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[HalfGb - 1] = 22;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[(HalfGb / 3) * 2] = 33;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[(HalfGb / 3) * 2] = 33;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[(HalfGb / 3) * 2] = 33;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[HalfGb / 2] = 44;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[HalfGb / 2] = 44;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[HalfGb / 3] = 55;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: value[HalfGb / 3] = 55;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,CanWriteBigTransactions,The following statement contains a magic number: i < transactionSizeInGb * 2
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' 0' 11);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' (int)HalfGb - 1' 22);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' ((int)HalfGb / 3) * 2' 33);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' ((int)HalfGb / 3) * 2' 33);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' ((int)HalfGb / 3) * 2' 33);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' (int)HalfGb / 2' 44);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' (int)HalfGb / 2' 44);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' (int)HalfGb / 3' 55);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: VerifyData(singleByte' reader' (int)HalfGb / 3' 55);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,ValidateTree,The following statement contains a magic number: i < transactionSizeInGb * 2
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,LZ4TestAbove2GB,The following statement contains a magic number: long gb = 1024 * 1024 * 1024;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,LZ4TestAbove2GB,The following statement contains a magic number: long gb = 1024 * 1024 * 1024;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,LZ4TestAbove2GB,The following statement contains a magic number: long gb = 1024 * 1024 * 1024;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,LZ4TestAbove2GB,The following statement contains a magic number: long inputSize = 3L * gb;
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,LZ4TestAbove2GB,The following statement contains a magic number: var random = new Random(123);
Magic Number,StressTests.Voron,HugeTransactions,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\HugeTransactions.cs,LZ4TestAbove2GB,The following statement contains a magic number: (*(byte*)((long)inputBuffer + p)) = Convert.ToByte(random.Next(0' 255));
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,Configure,The following statement contains a magic number: options.MaxScratchBufferSize *= 2;
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: const int numberOfWriteThreads = 10;
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: const int numberOfReadThreads = 10;
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: const int numberOfTrees = 2;
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: var taskWorkTime = TimeSpan.FromSeconds(60);
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: var writeParallelTask = Task.Factory.StartNew(                  () =>                  {                      Parallel.For(                          0'                          numberOfWriteThreads'                          RavenTestHelper.DefaultParallelOptions'                          i =>                          {                              var random = new Random(i ^ 1337);                              var dataSize = random.Next(100' 100);                              var buffer = new byte[dataSize];                              random.NextBytes(buffer);                                while (writeTime.Elapsed < taskWorkTime && (readParallelTask == null || readParallelTask.Exception == null))                              {                                  var tIndex = random.Next(0' numberOfTrees - 1);                                  var treeName = trees[tIndex];                                    using (var tx = Env.WriteTransaction(timeout: TimeSpan.FromMinutes(5)))                                  {                                      var tree = tx.CreateTree(treeName);                                      tree.Add("testdocuments/" + random.Next(0' 100000)' new MemoryStream(buffer));                                      tx.Commit();                                  }                                }                          });                  }'                  TaskCreationOptions.LongRunning);
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: var writeParallelTask = Task.Factory.StartNew(                  () =>                  {                      Parallel.For(                          0'                          numberOfWriteThreads'                          RavenTestHelper.DefaultParallelOptions'                          i =>                          {                              var random = new Random(i ^ 1337);                              var dataSize = random.Next(100' 100);                              var buffer = new byte[dataSize];                              random.NextBytes(buffer);                                while (writeTime.Elapsed < taskWorkTime && (readParallelTask == null || readParallelTask.Exception == null))                              {                                  var tIndex = random.Next(0' numberOfTrees - 1);                                  var treeName = trees[tIndex];                                    using (var tx = Env.WriteTransaction(timeout: TimeSpan.FromMinutes(5)))                                  {                                      var tree = tx.CreateTree(treeName);                                      tree.Add("testdocuments/" + random.Next(0' 100000)' new MemoryStream(buffer));                                      tx.Commit();                                  }                                }                          });                  }'                  TaskCreationOptions.LongRunning);
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: var writeParallelTask = Task.Factory.StartNew(                  () =>                  {                      Parallel.For(                          0'                          numberOfWriteThreads'                          RavenTestHelper.DefaultParallelOptions'                          i =>                          {                              var random = new Random(i ^ 1337);                              var dataSize = random.Next(100' 100);                              var buffer = new byte[dataSize];                              random.NextBytes(buffer);                                while (writeTime.Elapsed < taskWorkTime && (readParallelTask == null || readParallelTask.Exception == null))                              {                                  var tIndex = random.Next(0' numberOfTrees - 1);                                  var treeName = trees[tIndex];                                    using (var tx = Env.WriteTransaction(timeout: TimeSpan.FromMinutes(5)))                                  {                                      var tree = tx.CreateTree(treeName);                                      tree.Add("testdocuments/" + random.Next(0' 100000)' new MemoryStream(buffer));                                      tx.Commit();                                  }                                }                          });                  }'                  TaskCreationOptions.LongRunning);
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: var writeParallelTask = Task.Factory.StartNew(                  () =>                  {                      Parallel.For(                          0'                          numberOfWriteThreads'                          RavenTestHelper.DefaultParallelOptions'                          i =>                          {                              var random = new Random(i ^ 1337);                              var dataSize = random.Next(100' 100);                              var buffer = new byte[dataSize];                              random.NextBytes(buffer);                                while (writeTime.Elapsed < taskWorkTime && (readParallelTask == null || readParallelTask.Exception == null))                              {                                  var tIndex = random.Next(0' numberOfTrees - 1);                                  var treeName = trees[tIndex];                                    using (var tx = Env.WriteTransaction(timeout: TimeSpan.FromMinutes(5)))                                  {                                      var tree = tx.CreateTree(treeName);                                      tree.Add("testdocuments/" + random.Next(0' 100000)' new MemoryStream(buffer));                                      tx.Commit();                                  }                                }                          });                  }'                  TaskCreationOptions.LongRunning);
Magic Number,StressTests.Voron,InvalidReleasesOfScratchPages,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\InvalidReleasesOfScratchPages.cs,ParallelWritesInBatchesAndReadsByUsingTreeIterator,The following statement contains a magic number: var writeParallelTask = Task.Factory.StartNew(                  () =>                  {                      Parallel.For(                          0'                          numberOfWriteThreads'                          RavenTestHelper.DefaultParallelOptions'                          i =>                          {                              var random = new Random(i ^ 1337);                              var dataSize = random.Next(100' 100);                              var buffer = new byte[dataSize];                              random.NextBytes(buffer);                                while (writeTime.Elapsed < taskWorkTime && (readParallelTask == null || readParallelTask.Exception == null))                              {                                  var tIndex = random.Next(0' numberOfTrees - 1);                                  var treeName = trees[tIndex];                                    using (var tx = Env.WriteTransaction(timeout: TimeSpan.FromMinutes(5)))                                  {                                      var tree = tx.CreateTree(treeName);                                      tree.Add("testdocuments/" + random.Next(0' 100000)' new MemoryStream(buffer));                                      tx.Commit();                                  }                                }                          });                  }'                  TaskCreationOptions.LongRunning);
Magic Number,StressTests.Voron,PageSplitterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\PageSplitterStressTests.cs,PageSplitterShouldCalculateSeparatorKeyCorrectly,The following statement contains a magic number: var testBuffer = new byte[79];
Magic Number,StressTests.Voron,PageSplitterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\PageSplitterStressTests.cs,PageSplitterShouldCalculateSeparatorKeyCorrectly2,The following statement contains a magic number: storageEnvironmentOptions.MaxScratchBufferSize *=2;
Magic Number,StressTests.Voron,PageSplitterStressTests,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\PageSplitterStressTests.cs,PageSplitterShouldCalculateSeparatorKeyCorrectly2,The following statement contains a magic number: var testBuffer = new byte[69];
Magic Number,StressTests.Voron.Issues,RavenDB_7667,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\Issues\RavenDB_7667.cs,IndexTreeNeedsToReturnPageToAllocatorInsteadOfFreeSpaceHandling,The following statement contains a magic number: const int documentsCount = 150000;
Magic Number,StressTests.Voron.Issues,RavenDB_7667,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\Issues\RavenDB_7667.cs,IndexTreeNeedsToReturnPageToAllocatorInsteadOfFreeSpaceHandling,The following statement contains a magic number: bulkInsert.Store(new User                          {                              FirstName = RandomString(30)'                              LastName = RandomString(30)'                              Phone = RandomString(30)                          });
Magic Number,StressTests.Voron.Issues,RavenDB_7667,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\Issues\RavenDB_7667.cs,IndexTreeNeedsToReturnPageToAllocatorInsteadOfFreeSpaceHandling,The following statement contains a magic number: bulkInsert.Store(new User                          {                              FirstName = RandomString(30)'                              LastName = RandomString(30)'                              Phone = RandomString(30)                          });
Magic Number,StressTests.Voron.Issues,RavenDB_7667,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\Issues\RavenDB_7667.cs,IndexTreeNeedsToReturnPageToAllocatorInsteadOfFreeSpaceHandling,The following statement contains a magic number: bulkInsert.Store(new User                          {                              FirstName = RandomString(30)'                              LastName = RandomString(30)'                              Phone = RandomString(30)                          });
Magic Number,StressTests.Voron.Issues,RavenDB_7667,C:\research\architectureSmells\repos\ravendb_ravendb\test\StressTests\Voron\Issues\RavenDB_7667.cs,IndexTreeNeedsToReturnPageToAllocatorInsteadOfFreeSpaceHandling,The following statement contains a magic number: store.Operations.Send(new DeleteByQueryOperation(new IndexQuery() { Query = "FROM Users" })).WaitForCompletion(TimeSpan.FromMinutes(5));
