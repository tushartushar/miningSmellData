Implementation smell,Namespace,Class,File,Method,Description
Long Method,Raven.Traffic,TrafficRec,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRec.cs,ReplayRequests,The method has 140 lines of code.
Complex Method,NDesk.Options,Option,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 12
Complex Method,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,NDesk.Options,ActionOption,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,ActionOption,The method has 5 parameters. Parameters: prototype' category' description' count' action
Long Parameter List,Raven.Traffic,TrafficRec,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRec.cs,WriteRequestsFromQueueToFile,The method has 5 parameters. Parameters: messages' filePath' isCompressed' printOutput' mre
Long Parameter List,Raven.Traffic,TrafficWatchObserver,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficWatchObserver.cs,TrafficWatchObserver,The method has 5 parameters. Parameters: store' databaseName' mre' timeout' onRequestReceived
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,CheckCategory,The length of the statement  "            else if (p.Category.HasFlag(currentCategory) || currentCategory.HasFlag(p.Category) || p.Category == OptionCategory.None) " is 121.
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,CheckCategory,The length of the statement  "                OnWarning(string.Format("Cannot use options from different category. Current category: '{0}'. Invalid option: '{1}' from category '{2}'. Using option from different category might cause unpredictable actions."' category' f + n' p.Category)); " is 241.
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,WriteOptionDescriptions,The length of the statement  "                if (currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None) " is 186.
Long Statement,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,InitOptionsSetObject,The length of the statement  "            options.Add("compressed"' OptionCategory.TrafficRecordReplay' "Work with compressed json outpu/input"' x => { config.IsCompressed = true; }); " is 141.
Long Statement,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,InitOptionsSetObject,The length of the statement  "            options.Add("noOutput"' OptionCategory.TrafficRecordReplay' "Suppress console progress output"' value => config.PrintOutput = false); " is 133.
Long Statement,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,InitOptionsSetObject,The length of the statement  "            options.Add("timeout:"' OptionCategory.TrafficRecordReplay' "The timeout to use for requests(seconds)"' s => config.Timeout = TimeSpan.FromSeconds(int.Parse(s))); " is 162.
Long Statement,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,InitOptionsSetObject,The length of the statement  "            options.Add("u|user|username:"' OptionCategory.TrafficRecordReplay' "The username to use when the database requires the client to authenticate."' value => GetCredentials(config.ConnectionString).UserName = value); " is 213.
Long Statement,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,InitOptionsSetObject,The length of the statement  "            options.Add("p|pass|password:"' OptionCategory.TrafficRecordReplay' "The password to use when the database requires the client to authenticate."' value => GetCredentials(config.ConnectionString).Password = value); " is 213.
Long Statement,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,InitOptionsSetObject,The length of the statement  "            options.Add("domain:"' OptionCategory.TrafficRecordReplay' "The domain to use when the database requires the client to authenticate."' value => GetCredentials(config.ConnectionString).Domain = value); " is 200.
Long Statement,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,InitOptionsSetObject,The length of the statement  "            options.Add("key|api-key|apikey:"' OptionCategory.TrafficRecordReplay' "The API-key to use' when using OAuth."' value => config.ApiKey = value); " is 144.
Long Statement,Raven.Traffic,TrafficRec,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRec.cs,ReplayRequests,The length of the statement  "                        var subArray = Regex.Split(trafficLog.CustomInfo.Replace("\r"' string.Empty)' postLineSeparatorRegex).Where(x => !String.IsNullOrEmpty(x)).Select(x => " is 150.
Long Statement,Raven.Traffic,TrafficRec,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRec.cs,ValidateUrlString,The length of the statement  "            return (trafficUrlPart.StartsWith("/") || trafficUrlPart.StartsWith("\\")) && ValidateUrlFirstPathSegment(trafficUrlPart.Substring(1' trafficUrlPart.Length - 1)) " is 161.
Long Statement,Raven.Traffic,TrafficWatchObserver,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficWatchObserver.cs,GetTrafficWatchRequest,The length of the statement  "                    store.Url + "//databases//" + databaseName + "/traffic-watch/events?" + "singleUseAuthToken=" + GetAuthToken() + "&id=" + Guid.NewGuid()' " is 137.
Complex Conditional,NDesk.Options,Option,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,Option,The conditional expression  "Array.IndexOf(names' "<>") >= 0 &&                      ((names.Length == 1 && this.type != OptionValueType.None) ||                       (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                      Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,WriteOptionDescriptions,The conditional expression  "currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None"  is complex.
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' category' description' 2' v => action(v[0]' v[1]));
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (var key in results.Keys)              {                  if (currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None)                      continue;                    var options = results[key];                  if (options.Count == 0)                      continue;                    o.WriteLine();                  o.WriteLine("----------------------------------------------");                  o.WriteLine(GetDescription(key));                  o.WriteLine("----------------------------------------------");                  o.WriteLine();                    foreach (Option p in options)                  {                      int written = 0;                      if (!WriteOptionPrototype(o' p' ref written))                          continue;                        if (written < OptionWidth)                          o.Write(new string(' '' OptionWidth - written));                      else                      {                          o.WriteLine();                          o.Write(new string(' '' OptionWidth));                      }                        List<string> lines = GetLines(localizer(GetDescription(p.Description)));                      o.WriteLine(lines[0]);                      string prefix = new string(' '' OptionWidth + 2);                      for (int i = 1; i < lines.Count; ++i)                      {                          o.Write(prefix);                          o.WriteLine(lines[i]);                      }                  }              }
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,ProcessArgs,The following statement contains a magic number: if (args.Length < 4)              {                  config = null;                  return TrafficArgsProcessStatus.NoArguments;              }
Magic Number,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,ProcessArgs,The following statement contains a magic number: config.ConnectionString.DefaultDatabase = args[2];
Magic Number,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,ProcessArgs,The following statement contains a magic number: config.ResourceName = args[2];
Magic Number,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,ProcessArgs,The following statement contains a magic number: config.RecordFilePath = args[3];
Magic Number,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,ProcessArgs,The following statement contains a magic number: if (config.AmountConstraint.HasValue == false && config.DurationConstraint.HasValue == false)              {                  config.AmountConstraint = 1000;                  config.DurationConstraint = TimeSpan.FromSeconds(60);              }
Magic Number,TrafficRecorder,TrafficToolConfiguration,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRecorderConfiguration.cs,ProcessArgs,The following statement contains a magic number: if (config.AmountConstraint.HasValue == false && config.DurationConstraint.HasValue == false)              {                  config.AmountConstraint = 1000;                  config.DurationConstraint = TimeSpan.FromSeconds(60);              }
Magic Number,Raven.Traffic,TrafficRec,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRec.cs,ReplayRequests,The following statement contains a magic number: using (var stream = File.Open(config.RecordFilePath' FileMode.Open))              {                  if (config.IsCompressed)                  {                      finalStream = new GZipStream(stream' CompressionMode.Decompress' leaveOpen: true);                  }                  else                  {                      finalStream = stream;                  }                  var trafficLogs =                      JsonSerializer.Create().Deserialize<LogHttpRequestStatsParams[]>(new JsonTextReader(new StreamReader(finalStream)));                    ConcurrentQueue<string> queue = null;                  var cts = new CancellationTokenSource();                  var ct = cts.Token;                  Task outputTask = null;                  if (config.PrintOutput)                  {                        queue = new ConcurrentQueue<string>();                      outputTask = Task.Run(() =>                      {                          while (!ct.IsCancellationRequested || queue.Count != 0)                          {                              string message;                              if (queue.TryDequeue(out message))                              {                                  Console.WriteLine(message);                              }                              else                              {                                  Thread.Sleep(10);                              }                          }                      });                  }                                        const string postLineSeparatorRegex = "\\t\\d: databases\\/[\\w\\.]+";                  const string endOfPostLineString = "\t\t\tQuery:";                  const string uriCleanRegex = "http://[\\w\\.]+(:\\d*)?(\\/databases\\/[\\w\\.]+)?";                    Parallel.ForEach(trafficLogs' new ParallelOptions                  {                      MaxDegreeOfParallelism = Environment.ProcessorCount                  }' trafficLog =>                  {                      var sp = Stopwatch.StartNew();                      GetRequest[] requestsArray = null;                        var uriString = Regex.Replace(trafficLog.RequestUri' uriCleanRegex' string.Empty);                      string trafficUrlPart;                      string trafficQueryPart;                      trafficUrlPart = ExtractUrlAndQuery(uriString' out trafficQueryPart);                        var curCount = Interlocked.Increment(ref requestsCounter);                      if (ValidateUrlString(trafficUrlPart))                      {                          Interlocked.Increment(ref skippedRequestsCounter);                          if (queue != null)                          {                              queue.Enqueue(string.Format("{0} out of {1}' skipped whole message"'                                  curCount' trafficLogs.Length));                          }                          return;                      }                      Interlocked.Increment(ref totalCountOfLogicRequests);                      if (trafficLog.HttpMethod.Equals("get"' StringComparison.CurrentCultureIgnoreCase))                      {                          requestsArray = new[]                          {                              new GetRequest                              {                                  Url = trafficUrlPart'                                  Query = trafficQueryPart                              }                          };                      }                      else if (trafficLog.CustomInfo != null)                      {                          var subArray = Regex.Split(trafficLog.CustomInfo.Replace("\r"' string.Empty)' postLineSeparatorRegex).Where(x => !String.IsNullOrEmpty(x)).Select(x =>                          {                              var endOfPostLastIndex = x.IndexOf(endOfPostLineString);                              if (endOfPostLastIndex < 0)                                  return x;                              return x.Remove(endOfPostLastIndex);                          }).ToArray();                          requestsArray =                              subArray.Select(customInfoLine =>                              {                                    trafficUrlPart = ExtractUrlAndQuery(customInfoLine' out trafficQueryPart);                                    if (ValidateUrlString(trafficUrlPart))                                  {                                      if (queue != null)                                      {                                          queue.Enqueue(string.Format("{0} out of {1}' skipped inner message"'                                              curCount' trafficLogs.Length));                                      }                                      return null;                                  }                                    return new GetRequest                                  {                                      Url = trafficUrlPart'                                      Query = trafficQueryPart'                                  };                              }).Where(x => x != null).ToArray();                      }                      Interlocked.Add(ref totalCountOfLogicRequests' requestsArray.Length);                      try                      {                          store.DatabaseCommands.MultiGet(requestsArray);                          if (queue != null)                          {                              queue.Enqueue(string.Format("{0} out of {1}' took {2} ms. Total Time: {3} ms"'                                  curCount' trafficLogs.Length' sp.ElapsedMilliseconds' totalSp.ElapsedMilliseconds));                          }                      }                      catch (Exception)                      {                          Interlocked.Increment(ref skippedRequestsCounter);                          if (queue != null)                          {                              queue.Enqueue(string.Format("{0} out of {1}' failed"'                                  curCount' trafficLogs.Length' sp.ElapsedMilliseconds' totalSp.ElapsedMilliseconds));                          }                      }                  });                    if (outputTask != null)                  {                      cts.Cancel();                      outputTask.Wait();                  }              }
Magic Number,Raven.Traffic,TrafficRec,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRec.cs,WriteRequestsFromQueueToFile,The following statement contains a magic number: using (var stream = File.Create(filePath))              {                  Stream finalStream = stream;                  if (isCompressed)                      finalStream = new GZipStream(stream' CompressionMode.Compress' leaveOpen: true);                    using (var streamWriter = new StreamWriter(finalStream))                  {                      var jsonWriter = new JsonTextWriter(streamWriter)                      {                          Formatting = Formatting.Indented                      };                      jsonWriter.WriteStartArray();                                            while (messages.TryDequeue(out notification) || mre.WaitOne(0) == false)                      {                          if (notification == null)                          {                              Thread.Sleep(100);                              continue;                          }                          requestsCounter++;                          if (printOutput)                          {                              Console.WriteLine("Request #{0} Stored"' requestsCounter);                          }                          notification.WriteTo(jsonWriter);                      }                      jsonWriter.WriteEndArray();                      streamWriter.Flush();                  }                    if (isCompressed)                      finalStream.Dispose();              }
Magic Number,Raven.Traffic,TrafficWatchObserver,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficWatchObserver.cs,TrafficWatchObserver,The following statement contains a magic number: if (timeout != TimeSpan.MinValue && mre.WaitOne(0) == false)              {                  timeoutTimer = new Timer(x =>                  {                      if (SystemTime.UtcNow - _lastHeartbeat > timeout)                      {                          Console.WriteLine("Timeout Reached");                          mre.Set();                          return;                      }                      timeoutTimer.Change(timeout' TimeSpan.FromDays(7));                    }' null' timeout' TimeSpan.FromDays(7));              }
Magic Number,Raven.Traffic,TrafficWatchObserver,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficWatchObserver.cs,TrafficWatchObserver,The following statement contains a magic number: if (timeout != TimeSpan.MinValue && mre.WaitOne(0) == false)              {                  timeoutTimer = new Timer(x =>                  {                      if (SystemTime.UtcNow - _lastHeartbeat > timeout)                      {                          Console.WriteLine("Timeout Reached");                          mre.Set();                          return;                      }                      timeoutTimer.Change(timeout' TimeSpan.FromDays(7));                    }' null' timeout' TimeSpan.FromDays(7));              }
Missing Default,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
Missing Default,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\raven.server\frommono\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description[i])                  {                      case ' ':                      case '\t':                      case '\v':                      case '-':                      case ''':                      case '.':                      case ';':                          sep = i;                          break;                      case '\n':                          return i;                  }
Missing Default,TrafficRecorder,Program,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\Program.cs,Main,The following switch statement is missing a default case: switch (parseStatus)              {                  case TrafficToolConfiguration.TrafficArgsProcessStatus.InvalidMode:                      PrintUsage();                      break;                  case TrafficToolConfiguration.TrafficArgsProcessStatus.NoArguments:                      PrintUsage();                      break;                  case TrafficToolConfiguration.TrafficArgsProcessStatus.NotEnoughArguments:                      Console.ForegroundColor = ConsoleColor.Red;                      Console.WriteLine("Illegal arguments amount' see usage instructions:");                      Console.ForegroundColor = ConsoleColor.White;                      break;                  case TrafficToolConfiguration.TrafficArgsProcessStatus.ValidConfig:                      IDocumentStore store;                      try                      {                          store = new DocumentStore                          {                              Url = config.ConnectionString.Url'                              DefaultDatabase = config.ResourceName'                              Credentials = config.ConnectionString.Credentials'                          }.Initialize();                      }                      catch (Exception e)                      {                          Console.WriteLine("Could not connect to server. Exception: {0}"'e);                          return;                      }                        using (store)                      {                          try                          {                              store.DatabaseCommands.GetStatistics();                          }                          catch (Exception)                          {                              Console.WriteLine("Database does not exist");                              return;                          }                          new TrafficRec(store' config).ExecuteTrafficCommand();                      }                      break;              }
Missing Default,Raven.Traffic,TrafficRec,C:\repos\ravendb_ravendb\ToMigrate\Tools\Raven.Traffic\TrafficRec.cs,ExecuteTrafficCommand,The following switch statement is missing a default case: switch (config.Mode)              {                  case TrafficToolConfiguration.TrafficToolMode.Record:                      RecordRequests(config' store);                      break;                  case TrafficToolConfiguration.TrafficToolMode.Replay:                      ReplayRequests(config' store);                      break;              }
