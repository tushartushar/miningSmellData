Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NDesk.Options,Option,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 12
Complex Method,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,Raven.Backup,AbstractBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\AbstractBackupOperation.cs,WaitForBackup,Cyclomatic complexity of the method is 8
Long Parameter List,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,NDesk.Options,ActionOption,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,ActionOption,The method has 5 parameters. Parameters: prototype' category' description' count' action
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,CheckCategory,The length of the statement  "            else if (p.Category.HasFlag(currentCategory) || currentCategory.HasFlag(p.Category) || p.Category == OptionCategory.None) " is 121.
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,CheckCategory,The length of the statement  "                OnWarning(string.Format("Cannot use options from different category. Current category: '{0}'. Invalid option: '{1}' from category '{2}'. Using option from different category might cause unpredictable actions."' category' f + n' p.Category)); " is 241.
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionDescriptions,The length of the statement  "                if (currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None) " is 186.
Long Statement,Raven.Backup,FilesystemBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\FilesystemBackupOperation.cs,InitBackup,The length of the statement  "                store = new FilesStore { Url = serverHostname' DefaultFileSystem = parameters.Filesystem' ApiKey = parameters.ApiKey' Credentials = parameters.Credentials }; " is 157.
Long Statement,Raven.Backup,FilesystemBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\FilesystemBackupOperation.cs,CreateRequest,The length of the statement  "                new OperationCredentials(parameters.ApiKey' parameters.Credentials)' store.Conventions' timeout: parameters.Timeout.HasValue ? TimeSpan.FromMilliseconds(parameters.Timeout.Value) : (TimeSpan?)null)); " is 199.
Long Statement,Raven.Backup,FilesystemBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\FilesystemBackupOperation.cs,GetStatusDoc,The length of the statement  "                var backupStatus = AsyncHelpers.RunSync(() => store.AsyncFilesCommands.Configuration.GetKeyAsync<BackupStatus>(BackupStatus.RavenBackupStatusDocumentKey)); " is 155.
Long Statement,Raven.Backup,DatabaseBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\DatabaseBackupOperation.cs,InitBackup,The length of the statement  "                store = new DocumentStore { Url = serverHostname' DefaultDatabase = parameters.Database' ApiKey = parameters.ApiKey' Credentials = parameters.Credentials }; " is 156.
Long Statement,Raven.Backup,DatabaseBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\DatabaseBackupOperation.cs,CreateRequest,The length of the statement  "            if (string.IsNullOrWhiteSpace(parameters.Database) == false && !parameters.Database.Equals(Constants.SystemDatabase' StringComparison.OrdinalIgnoreCase)) " is 153.
Long Statement,Raven.Backup,DatabaseBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\DatabaseBackupOperation.cs,CreateRequest,The length of the statement  "            return store.JsonRequestFactory.CreateHttpJsonRequest(new CreateHttpJsonRequestParams(null' uriString' method' new OperationCredentials(parameters.ApiKey' parameters.Credentials)' store.Conventions' timeout: parameters.Timeout.HasValue ? TimeSpan.FromMilliseconds(parameters.Timeout.Value) : (TimeSpan?)null)); " is 310.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("nowait"' OptionCategory.None' "Return immediately without waiting for a response from the server"' _ => op.NoWait = true); " is 137.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("readkey"' OptionCategory.None' "Specifying this flag will make the utility wait for key press before exiting."' _ => doReadKeyOnExit = true); " is 156.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("d|database:"' OptionCategory.RestoreDatabase' "The database to operate on. If no specified' the operations will be on the default database unless filesystem option is set."' value => op.Database = value); " is 219.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("f|filesystem:"' OptionCategory.RestoreFileSystem' "The filesystem to operate on."' value => op.Filesystem = value); " is 130.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("u|user|username:"' OptionCategory.None' "The username to use when the database requires the client to authenticate."' value => op.Credentials.UserName = value); " is 175.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("p|pass|password:"' OptionCategory.None' "The password to use when the database requires the client to authenticate."' value => op.Credentials.Password = value); " is 175.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("domain:"' OptionCategory.None' "The domain to use when the database requires the client to authenticate."' value => op.Credentials.Domain = value); " is 162.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("key|api-key|apikey:"' OptionCategory.None' "The API-key to use' when using OAuth."' value => op.ApiKey = value); " is 127.
Long Statement,Raven.Backup,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\Program.cs,Initialize,The length of the statement  "            optionSet.Add("incremental"' OptionCategory.None' "When specified' the backup process will be incremental when done to a folder where a previous backup lies. If dest is an empty folder' or it does not exist' a full backup will be created. For incremental backups to work' the configuration option Raven/Esent/CircularLog must be set to false for Esent storage or option Raven/Voron/AllowIncrementalBackups must be set to true for Voron."' _ => op.Incremental = true); " is 467.
Complex Conditional,NDesk.Options,Option,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,Option,The conditional expression  "Array.IndexOf(names' "<>") >= 0 &&                      ((names.Length == 1 && this.type != OptionValueType.None) ||                       (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                      Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionDescriptions,The conditional expression  "currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None"  is complex.
Empty Catch Block,Raven.Backup,FilesystemBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\FilesystemBackupOperation.cs,InitBackup,The method has an empty catch block.
Empty Catch Block,Raven.Backup,DatabaseBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\DatabaseBackupOperation.cs,InitBackup,The method has an empty catch block.
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' category' description' 2' v => action(v[0]' v[1]));
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (var key in results.Keys)              {                  if (currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None)                      continue;                    var options = results[key];                  if (options.Count == 0)                      continue;                    o.WriteLine();                  o.WriteLine("----------------------------------------------");                  o.WriteLine(GetDescription(key));                  o.WriteLine("----------------------------------------------");                  o.WriteLine();                    foreach (Option p in options)                  {                      int written = 0;                      if (!WriteOptionPrototype(o' p' ref written))                          continue;                        if (written < OptionWidth)                          o.Write(new string(' '' OptionWidth - written));                      else                      {                          o.WriteLine();                          o.Write(new string(' '' OptionWidth));                      }                        List<string> lines = GetLines(localizer(GetDescription(p.Description)));                      o.WriteLine(lines[0]);                      string prefix = new string(' '' OptionWidth + 2);                      for (int i = 1; i < lines.Count; ++i)                      {                          o.Write(prefix);                          o.WriteLine(lines[i]);                      }                  }              }
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,Raven.Backup,AbstractBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\AbstractBackupOperation.cs,WaitForBackup,The following statement contains a magic number: while (status == null)              {                  Thread.Sleep(100); // Allow the server to process the request                  status = GetStatusDoc();              }
Magic Number,Raven.Backup,AbstractBackupOperation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Backup\AbstractBackupOperation.cs,WaitForBackup,The following statement contains a magic number: while (status.IsRunning)              {                  // Write out the messages as we poll for them' don't wait until the end' this allows "live" updates                  foreach (var msg in status.Messages)                  {                      if (messagesSeenSoFar.Add(msg))                      {                          Console.WriteLine("[{0}] {1}"' msg.Timestamp' msg.Message);                      }                  }                    Thread.Sleep(1000);                  status = GetStatusDoc();              }
Missing Default,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
Missing Default,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description[i])                  {                      case ' ':                      case '\t':                      case '\v':                      case '-':                      case ''':                      case '.':                      case ';':                          sep = i;                          break;                      case '\n':                          return i;                  }
