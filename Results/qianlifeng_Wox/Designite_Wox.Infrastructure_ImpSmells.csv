Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Wox.Infrastructure.Exception,ExceptionFormatter,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Exception\ExceptionFormatter.cs,CreateExceptionReport,Cyclomatic complexity of the method is 8
Complex Method,Wox.Infrastructure.Hotkey,HotkeyModel,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Hotkey\HotkeyModel.cs,Parse,Cyclomatic complexity of the method is 8
Long Parameter List,Wox.Infrastructure.Hotkey,HotkeyModel,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Hotkey\HotkeyModel.cs,HotkeyModel,The method has 5 parameters. Parameters: alt' shift' win' ctrl' key
Long Parameter List,Wox.Infrastructure.Image,ImageLoader,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Image\ImageLoader.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbFileInfo' uFlags
Long Statement,Wox.Infrastructure,FuzzyMatcher,C:\repos\qianlifeng_Wox\Wox.Infrastructure\FuzzyMatcher.cs,CalScore,The length of the statement  "            //a match is scored more if the characters in the patterns are closer to each other' while the score is lower if they are more spread out " is 137.
Complex Conditional,Wox.Infrastructure.Hotkey,GlobalHotkey,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Hotkey\GlobalHotkey.cs,LowLevelKeyboardProc,The conditional expression  "wParam.ToUInt32() == (int)KeyEvent.WM_KEYDOWN ||                      wParam.ToUInt32() == (int)KeyEvent.WM_KEYUP ||                      wParam.ToUInt32() == (int)KeyEvent.WM_SYSKEYDOWN ||                      wParam.ToUInt32() == (int)KeyEvent.WM_SYSKEYUP"  is complex.
Empty Catch Block,Wox.Infrastructure.Hotkey,HotkeyModel,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Hotkey\HotkeyModel.cs,Parse,The method has an empty catch block.
Magic Number,Wox.Infrastructure.Exception,ExceptionFormatter,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Exception\ExceptionFormatter.cs,CreateExceptionReport,The following statement contains a magic number: foreach (var ass in AppDomain.CurrentDomain.GetAssemblies().OrderBy(o => o.GlobalAssemblyCache ? 50 : 0))              {                  sb.Append("* ");                  sb.Append(ass.FullName);                  sb.Append(" (");                    if (ass.IsDynamic)                  {                      sb.Append("dynamic assembly doesn't has location");                  }                  else if (string.IsNullOrEmpty(ass.Location))                  {                      sb.Append("location is null or empty");                                        }                  else                  {                  sb.Append(ass.Location);                                        }                  sb.AppendLine(")");              }
Magic Number,Wox.Infrastructure.Exception,ExceptionFormatter,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Exception\ExceptionFormatter.cs,GetFrameworkVersionFromRegistry,The following statement contains a magic number: try              {                  var result = new List<string>();                  using (RegistryKey ndpKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\"))                  {                      foreach (string versionKeyName in ndpKey.GetSubKeyNames())                      {                          if (versionKeyName.StartsWith("v"))                          {                              RegistryKey versionKey = ndpKey.OpenSubKey(versionKeyName);                              string name = (string)versionKey.GetValue("Version"' "");                              string sp = versionKey.GetValue("SP"' "").ToString();                              string install = versionKey.GetValue("Install"' "").ToString();                              if (install != "")                                  if (sp != "" && install == "1")                                      result.Add(string.Format("{0} {1} SP{2}"' versionKeyName' name' sp));                                  else                                      result.Add(string.Format("{0} {1}"' versionKeyName' name));                                if (name != "")                              {                                  continue;                              }                              foreach (string subKeyName in versionKey.GetSubKeyNames())                              {                                  RegistryKey subKey = versionKey.OpenSubKey(subKeyName);                                  name = (string)subKey.GetValue("Version"' "");                                  if (name != "")                                      sp = subKey.GetValue("SP"' "").ToString();                                  install = subKey.GetValue("Install"' "").ToString();                                  if (install != "")                                  {                                      if (sp != "" && install == "1")                                          result.Add(string.Format("{0} {1} {2} SP{3}"' versionKeyName' subKeyName' name' sp));                                      else if (install == "1")                                          result.Add(string.Format("{0} {1} {2}"' versionKeyName' subKeyName' name));                                  }                                }                            }                      }                  }                  using (RegistryKey ndpKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\"))                  {                      int releaseKey = (int)ndpKey.GetValue("Release");                      {                          if (releaseKey == 378389)                              result.Add("v4.5");                            if (releaseKey == 378675)                              result.Add("v4.5.1 installed with Windows 8.1");                            if (releaseKey == 378758)                              result.Add("4.5.1 installed on Windows 8' Windows 7 SP1' or Windows Vista SP2");                      }                  }                  return result;              }              catch (System.Exception e)              {                  return new List<string>();              }
Magic Number,Wox.Infrastructure.Exception,ExceptionFormatter,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Exception\ExceptionFormatter.cs,GetFrameworkVersionFromRegistry,The following statement contains a magic number: try              {                  var result = new List<string>();                  using (RegistryKey ndpKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\"))                  {                      foreach (string versionKeyName in ndpKey.GetSubKeyNames())                      {                          if (versionKeyName.StartsWith("v"))                          {                              RegistryKey versionKey = ndpKey.OpenSubKey(versionKeyName);                              string name = (string)versionKey.GetValue("Version"' "");                              string sp = versionKey.GetValue("SP"' "").ToString();                              string install = versionKey.GetValue("Install"' "").ToString();                              if (install != "")                                  if (sp != "" && install == "1")                                      result.Add(string.Format("{0} {1} SP{2}"' versionKeyName' name' sp));                                  else                                      result.Add(string.Format("{0} {1}"' versionKeyName' name));                                if (name != "")                              {                                  continue;                              }                              foreach (string subKeyName in versionKey.GetSubKeyNames())                              {                                  RegistryKey subKey = versionKey.OpenSubKey(subKeyName);                                  name = (string)subKey.GetValue("Version"' "");                                  if (name != "")                                      sp = subKey.GetValue("SP"' "").ToString();                                  install = subKey.GetValue("Install"' "").ToString();                                  if (install != "")                                  {                                      if (sp != "" && install == "1")                                          result.Add(string.Format("{0} {1} {2} SP{3}"' versionKeyName' subKeyName' name' sp));                                      else if (install == "1")                                          result.Add(string.Format("{0} {1} {2}"' versionKeyName' subKeyName' name));                                  }                                }                            }                      }                  }                  using (RegistryKey ndpKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\"))                  {                      int releaseKey = (int)ndpKey.GetValue("Release");                      {                          if (releaseKey == 378389)                              result.Add("v4.5");                            if (releaseKey == 378675)                              result.Add("v4.5.1 installed with Windows 8.1");                            if (releaseKey == 378758)                              result.Add("4.5.1 installed on Windows 8' Windows 7 SP1' or Windows Vista SP2");                      }                  }                  return result;              }              catch (System.Exception e)              {                  return new List<string>();              }
Magic Number,Wox.Infrastructure.Exception,ExceptionFormatter,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Exception\ExceptionFormatter.cs,GetFrameworkVersionFromRegistry,The following statement contains a magic number: try              {                  var result = new List<string>();                  using (RegistryKey ndpKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\"))                  {                      foreach (string versionKeyName in ndpKey.GetSubKeyNames())                      {                          if (versionKeyName.StartsWith("v"))                          {                              RegistryKey versionKey = ndpKey.OpenSubKey(versionKeyName);                              string name = (string)versionKey.GetValue("Version"' "");                              string sp = versionKey.GetValue("SP"' "").ToString();                              string install = versionKey.GetValue("Install"' "").ToString();                              if (install != "")                                  if (sp != "" && install == "1")                                      result.Add(string.Format("{0} {1} SP{2}"' versionKeyName' name' sp));                                  else                                      result.Add(string.Format("{0} {1}"' versionKeyName' name));                                if (name != "")                              {                                  continue;                              }                              foreach (string subKeyName in versionKey.GetSubKeyNames())                              {                                  RegistryKey subKey = versionKey.OpenSubKey(subKeyName);                                  name = (string)subKey.GetValue("Version"' "");                                  if (name != "")                                      sp = subKey.GetValue("SP"' "").ToString();                                  install = subKey.GetValue("Install"' "").ToString();                                  if (install != "")                                  {                                      if (sp != "" && install == "1")                                          result.Add(string.Format("{0} {1} {2} SP{3}"' versionKeyName' subKeyName' name' sp));                                      else if (install == "1")                                          result.Add(string.Format("{0} {1} {2}"' versionKeyName' subKeyName' name));                                  }                                }                            }                      }                  }                  using (RegistryKey ndpKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\"))                  {                      int releaseKey = (int)ndpKey.GetValue("Release");                      {                          if (releaseKey == 378389)                              result.Add("v4.5");                            if (releaseKey == 378675)                              result.Add("v4.5.1 installed with Windows 8.1");                            if (releaseKey == 378758)                              result.Add("4.5.1 installed on Windows 8' Windows 7 SP1' or Windows Vista SP2");                      }                  }                  return result;              }              catch (System.Exception e)              {                  return new List<string>();              }
Magic Number,Wox.Infrastructure,FuzzyMatcher,C:\repos\qianlifeng_Wox\Wox.Infrastructure\FuzzyMatcher.cs,CalScore,The following statement contains a magic number: var score = 100 * (query.Length + 1) / ((1 + firstIndex) + (matchLen + 1));
Magic Number,Wox.Infrastructure,FuzzyMatcher,C:\repos\qianlifeng_Wox\Wox.Infrastructure\FuzzyMatcher.cs,CalScore,The following statement contains a magic number: if (str.Length - query.Length < 5)                  score = score + 20;              else if (str.Length - query.Length < 10)                  score = score + 10;
Magic Number,Wox.Infrastructure,FuzzyMatcher,C:\repos\qianlifeng_Wox\Wox.Infrastructure\FuzzyMatcher.cs,CalScore,The following statement contains a magic number: if (str.Length - query.Length < 5)                  score = score + 20;              else if (str.Length - query.Length < 10)                  score = score + 10;
Magic Number,Wox.Infrastructure,FuzzyMatcher,C:\repos\qianlifeng_Wox\Wox.Infrastructure\FuzzyMatcher.cs,CalScore,The following statement contains a magic number: if (str.Length - query.Length < 5)                  score = score + 20;              else if (str.Length - query.Length < 10)                  score = score + 10;
Magic Number,Wox.Infrastructure,FuzzyMatcher,C:\repos\qianlifeng_Wox\Wox.Infrastructure\FuzzyMatcher.cs,CalScore,The following statement contains a magic number: if (str.Length - query.Length < 5)                  score = score + 20;              else if (str.Length - query.Length < 10)                  score = score + 10;
Magic Number,Wox.Infrastructure.Hotkey,HotkeyModel,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Hotkey\HotkeyModel.cs,ToString,The following statement contains a magic number: if (CharKey != Key.None)              {                  text += specialSymbolDictionary.ContainsKey(CharKey)                      ? specialSymbolDictionary[CharKey]                      : CharKey.ToString();              }              else if (!string.IsNullOrEmpty(text))              {                  text = text.Remove(text.Length - 3);              }
Magic Number,Wox.Infrastructure.Logger,Log,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Logger\Log.cs,FormatValid,The following statement contains a magic number: var valid = parts.Length == 3 && !string.IsNullOrWhiteSpace(parts[1]) && !string.IsNullOrWhiteSpace(parts[2]);
Magic Number,Wox.Infrastructure.Logger,Log,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Logger\Log.cs,FormatValid,The following statement contains a magic number: var valid = parts.Length == 3 && !string.IsNullOrWhiteSpace(parts[1]) && !string.IsNullOrWhiteSpace(parts[2]);
Magic Number,Wox.Infrastructure.Logger,Log,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Logger\Log.cs,Error,The following statement contains a magic number: if (FormatValid(message))              {                  var parts = message.Split('|');                  var prefix = parts[1];                  var unprefixed = parts[2];                  var logger = LogManager.GetLogger(prefix);                    System.Diagnostics.Debug.WriteLine($"ERROR|{message}");                  logger.Error(unprefixed);              }              else              {                  LogFaultyFormat(message);              }
Magic Number,Wox.Infrastructure.Logger,Log,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Logger\Log.cs,Debug,The following statement contains a magic number: if (FormatValid(message))              {                  var parts = message.Split('|');                  var prefix = parts[1];                  var unprefixed = parts[2];                  var logger = LogManager.GetLogger(prefix);                    System.Diagnostics.Debug.WriteLine($"DEBUG|{message}");                  logger.Debug(unprefixed);              }              else              {                  LogFaultyFormat(message);              }
Magic Number,Wox.Infrastructure.Logger,Log,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Logger\Log.cs,Info,The following statement contains a magic number: if (FormatValid(message))              {                  var parts = message.Split('|');                  var prefix = parts[1];                  var unprefixed = parts[2];                  var logger = LogManager.GetLogger(prefix);                    System.Diagnostics.Debug.WriteLine($"INFO|{message}");                  logger.Info(unprefixed);              }              else              {                  LogFaultyFormat(message);              }
Magic Number,Wox.Infrastructure.Logger,Log,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Logger\Log.cs,Warn,The following statement contains a magic number: if (FormatValid(message))              {                  var parts = message.Split('|');                  var prefix = parts[1];                  var unprefixed = parts[2];                  var logger = LogManager.GetLogger(prefix);                    System.Diagnostics.Debug.WriteLine($"WARN|{message}");                  logger.Warn(unprefixed);              }              else              {                  LogFaultyFormat(message);              }
Magic Number,Wox.Infrastructure.Http,Http,C:\repos\qianlifeng_Wox\Wox.Infrastructure\Http\Http.cs,Get,The following statement contains a magic number: request.Timeout = 1000;
