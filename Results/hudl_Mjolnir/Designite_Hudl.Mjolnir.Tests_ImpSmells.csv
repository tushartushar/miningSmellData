Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,CreateMockBreakerConfig,The method has 5 parameters. Parameters: minimumOperations' thresholdPercentage' trippedDurationMillis' forceTripped' forceFixed
Long Parameter List,Hudl.Mjolnir.Tests,IS3Client,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Example.cs,UploadFile,The method has 5 parameters. Parameters: bucketName' localFile' key' contentType' statContentType
Long Parameter List,Hudl.Mjolnir.Tests,S3Client,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Example.cs,UploadFile,The method has 5 parameters. Parameters: bucketName' localFile' key' contentType' statContentType
Long Parameter List,Hudl.Mjolnir.Tests,S3UploadFileCommand,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Example.cs,S3UploadFileCommand,The method has 6 parameters. Parameters: client' bucketName' localFile' key' contentType' statContentType
Long Identifier,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetMinimumOperations_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs10,The length of the parameter expectedDefaultMinimumOperations is 32.
Long Identifier,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetThresholdPercentage_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs50,The length of the parameter expectedDefaultThresholdPercentage is 34.
Long Identifier,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetTrippedDurationMillis_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs10000,The length of the parameter expectedDefaultTrippedDurationMillis is 36.
Long Identifier,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetSnapshotTtlMillis_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs1000,The length of the parameter expectedDefaultSnapshotTtlMillis is 32.
Long Statement,Hudl.Mjolnir.Tests.Breaker,CircuitBreakerFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\CircuitBreakerFactoryTests.cs,GetCircuitBreaker_ReturnsSameObjectForSameKey,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<FailurePercentageCircuitBreaker>()).Returns(new DefaultMjolnirLog<FailurePercentageCircuitBreaker>()); " is 140.
Long Statement,Hudl.Mjolnir.Tests.Breaker,CircuitBreakerFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\CircuitBreakerFactoryTests.cs,GetCircuitBreaker_ReturnsSameObjectForSameKey,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<ResettingNumbersBucket>()).Returns(new DefaultMjolnirLog<ResettingNumbersBucket>()); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Breaker,CircuitBreakerFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\CircuitBreakerFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForOneBulkhead,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<FailurePercentageCircuitBreaker>()).Returns(new DefaultMjolnirLog<FailurePercentageCircuitBreaker>()); " is 140.
Long Statement,Hudl.Mjolnir.Tests.Breaker,CircuitBreakerFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\CircuitBreakerFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForOneBulkhead,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<ResettingNumbersBucket>()).Returns(new DefaultMjolnirLog<ResettingNumbersBucket>()); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Breaker,CircuitBreakerFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\CircuitBreakerFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForOneBulkhead,The length of the statement  "            mockMetricEvents.Verify(m => m.BreakerGauge(It.IsAny<string>()' It.IsAny<long>()' It.IsAny<long>()' It.IsAny<int>()' It.IsAny<int>()' It.IsAny<bool>()' It.IsAny<bool>()' It.IsAny<bool>()' It.IsAny<long>()' It.IsAny<long>())' Times.Never); " is 238.
Long Statement,Hudl.Mjolnir.Tests.Breaker,CircuitBreakerFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\CircuitBreakerFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForOneBulkhead,The length of the statement  "            mockMetricEvents.Verify(m => m.BreakerGauge(key' expectedMinimumOperations' expectedWindowMillis' expectedThresholdPercent' expectedTrippedDurationMillis' expectedForceTripped' expectedForceFixed' false' 0' 0)); " is 211.
Long Statement,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ImmediatelyAfterTrippingButStartedBeforeTripped_DoesntImmediatelyFix,The length of the statement  "            var breaker = new FailurePercentageCircuitBreaker(AnyKey' manualClock' mockMetrics.Object' mockEvents.Object' mockConfig.Object' new DefaultMjolnirLogFactory()); " is 161.
Long Statement,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ForLongRunningSingleTest_FixesBreaker,The length of the statement  "            var breaker = new FailurePercentageCircuitBreaker(AnyKey' manualClock' mockMetrics.Object' mockEvents.Object' mockConfig.Object' new DefaultMjolnirLogFactory()); " is 161.
Long Statement,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceTripped_Rejects,The length of the statement  "            var breaker = new FailurePercentageCircuitBreaker(AnyKey' manualClock' mockMetrics.Object' mockEvents.Object' mockConfig.Object' new DefaultMjolnirLogFactory()); " is 161.
Long Statement,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceFixed_Allows,The length of the statement  "            var breaker = new FailurePercentageCircuitBreaker(AnyKey' manualClock' mockMetrics.Object' mockEvents.Object' mockConfig.Object' new DefaultMjolnirLogFactory()); " is 161.
Long Statement,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenBothForcePropertiesSet_Rejects,The length of the statement  "            var breaker = new FailurePercentageCircuitBreaker(AnyKey' manualClock' mockMetrics.Object' mockEvents.Object' mockConfig.Object' new DefaultMjolnirLogFactory()); " is 161.
Long Statement,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceFixedButBreakerWouldNormallyTrip_SilentlyTripsTheBreaker,The length of the statement  "            var breaker = new FailurePercentageCircuitBreaker(AnyKey' manualClock' mockMetrics.Object' mockEvents.Object' mockConfig.Object' new DefaultMjolnirLogFactory()); " is 161.
Long Statement,Hudl.Mjolnir.Tests.Breaker,TripTest,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,Run,The length of the statement  "                var breaker = new FailurePercentageCircuitBreaker(GroupKey.Named("Test")' mockMetrics.Object' new IgnoringMetricEvents()' config.Object' new DefaultMjolnirLogFactory()); " is 169.
Long Statement,Hudl.Mjolnir.Tests.Breaker,BreakerBuilder,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,Create,The length of the statement  "            var config = FailurePercentageCircuitBreakerTests.CreateMockBreakerConfig(_minimumOperations' _failurePercent' _waitMillis); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Breaker,BreakerBuilder,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,Create,The length of the statement  "            return new FailurePercentageCircuitBreaker(GroupKey.Named(_key)' _clock' _mockMetrics.Object' _metricEvents' config.Object' new DefaultMjolnirLogFactory()); " is 156.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForOneBulkhead,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForOneBulkhead,The length of the statement  "            mockMetricEvents.Verify(m => m.BulkheadGauge(key' "semaphore"' expectedMaxConcurrent' It.IsAny<int>())' Times.AtLeastOnce); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForMultipleBulkheads,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForMultipleBulkheads,The length of the statement  "            mockMetricEvents.Verify(m => m.BulkheadGauge(key1' "semaphore"' expectedMaxConcurrent1' It.IsAny<int>())' Times.AtLeastOnce); " is 125.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForMultipleBulkheads,The length of the statement  "            mockMetricEvents.Verify(m => m.BulkheadGauge(key2' "semaphore"' expectedMaxConcurrent2' It.IsAny<int>())' Times.AtLeastOnce); " is 125.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,GetBulkhead_ReturnsSameBulkheadForKey,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,GetBulkhead_ReturnsNewBulkheadWhenConfigChanges,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,GetBulkhead_WhenInitializingBulkheadAndMaxConcurrentConfigIsInvalid_Throws,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,GetBulkhead_WhenInitializingBulkheadAndMaxConcurrentConfigIsInvalid_AndThenConfigChangedToValidValue_CreatesBulkhead,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,Construct_ThrowsIfNullMetricEvents,The length of the statement  "            var exception = Assert.Throws<ArgumentNullException>(() => new SemaphoreBulkheadHolder(key' null' mockConfig' mockLogFactory.Object)); " is 134.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,Construct_ThrowsIfNullConfig,The length of the statement  "            var exception = Assert.Throws<ArgumentNullException>(() => new SemaphoreBulkheadHolder(key' mockMetricEvents.Object' null' mockLogFactory.Object)); " is 147.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,Construct_ThrowsIfNullLogFactory,The length of the statement  "            var exception = Assert.Throws<ArgumentNullException>(() => new SemaphoreBulkheadHolder(key' mockMetricEvents.Object' mockConfig' null)); " is 136.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,Construct_SetsInitialBulkhead,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,Construct_WhenMaxConcurrentConfigIsInvalid_DoesSomething,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,Construct_WhenMaxConcurrentConfigIsInvalid_DoesSomething,The length of the statement  "            var exception = Assert.Throws<ArgumentOutOfRangeException>(() => new SemaphoreBulkheadHolder(groupKey' mockMetricEvents.Object' mockConfig' mockLogFactory.Object)); " is 164.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,UpdateMaxConcurrent_IgnoresInvalidValues,The length of the statement  "            mockLog.Verify(m => m.Error($"Semaphore bulkhead config for key {key.Name} changed to an invalid limit of {invalidMaxConcurrent}' the bulkhead will not be changed")' Times.Once); " is 178.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,UpdateMaxConcurrent_ReplacesBulkhead,The length of the statement  "            mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new DefaultMjolnirLog<SemaphoreBulkheadHolder>()); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadTests.cs,Constructor_ThrowsIfMaxConcurrentNegative,The length of the statement  "            var exception = Assert.Throws<ArgumentOutOfRangeException>(() => new SemaphoreBulkhead(AnyGroupKey' invalidMaxConcurrent)); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Clock,ClockTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Clock\ClockTests.cs,UtcSystemClock_GetMillisecondTimestamp_IsCloseToUtcNow,The length of the statement  "            Assert.True(difference < epsilonMillis' "UtcSystemClock difference (" + difference + ") exceeded epsilon (" + epsilonMillis + ")"); " is 131.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBreakerAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BreakerInvokerTests.cs,WhenRejected_FiresBreakerRejectedMetricEvent,The length of the statement  "                var invoker = new BreakerInvoker(mockCircuitBreakerFactory.Object' mockMetricEvents.Object' mockBreakerExceptionHandler.Object); " is 128.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBreakerAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BreakerInvokerTests.cs,WhenRejected_FiresBreakerRejectedMetricEvent,The length of the statement  "                await Assert.ThrowsAsync<CircuitBreakerRejectedException>(() => invoker.ExecuteWithBreakerAsync(command' CancellationToken.None)); " is 130.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBreakerAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BreakerInvokerTests.cs,WhenSuccessful_FiresBreakerSuccessCountMetricEvent,The length of the statement  "                var invoker = new BreakerInvoker(mockCircuitBreakerFactory.Object' mockMetricEvents.Object' mockBreakerExceptionHandler.Object); " is 128.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBreakerAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BreakerInvokerTests.cs,WhenSuccessful_FiresBreakerSuccessCountMetricEvent,The length of the statement  "                await Assert.ThrowsAsync<ExpectedTestException>(() => invoker.ExecuteWithBreakerAsync(command' CancellationToken.None)); " is 120.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBreakerAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BreakerInvokerTests.cs,WhenFailed_FiresBreakerFailureCountMetricEvent,The length of the statement  "                var invoker = new BreakerInvoker(mockCircuitBreakerFactory.Object' mockMetricEvents.Object' mockBreakerExceptionHandler.Object); " is 128.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBreaker,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BreakerInvokerTests.cs,WhenRejected_FiresBreakerRejectedMetricEvent,The length of the statement  "                var invoker = new BreakerInvoker(mockCircuitBreakerFactory.Object' mockMetricEvents.Object' mockBreakerExceptionHandler.Object); " is 128.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBreaker,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BreakerInvokerTests.cs,WhenSuccessful_FiresBreakerSuccessCountMetricEvent,The length of the statement  "                var invoker = new BreakerInvoker(mockCircuitBreakerFactory.Object' mockMetricEvents.Object' mockBreakerExceptionHandler.Object); " is 128.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBreaker,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BreakerInvokerTests.cs,WhenFailed_FiresBreakerFailureCountMetricEvent,The length of the statement  "                var invoker = new BreakerInvoker(mockCircuitBreakerFactory.Object' mockMetricEvents.Object' mockBreakerExceptionHandler.Object); " is 128.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The length of the statement  "                var mockMetricEvents = new Mock<IMetricEvents>(); // Non-Strict: we aren't testing metric events here' let's keep the test simpler. " is 131.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The length of the statement  "                mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new Mock<IMjolnirLog<SemaphoreBulkheadHolder>>().Object); " is 131.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The length of the statement  "                var breakerInvoker = new BreakerInvoker(mockCircuitBreakerFactory.Object' mockMetricEvents.Object' mockBreakerExceptionHandler.Object); " is 135.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,FiresMetricEventWhenRejected,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,FiresMetricEventWhenRejected,The length of the statement  "                await Assert.ThrowsAsync<BulkheadRejectedException>(() => invoker.ExecuteWithBulkheadAsync(command' CancellationToken.None)); " is 125.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,FiresMetricEventWhenEnteringAndLeavingBulkheadAndCommandSucceeds,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,FiresMetricEventWhenEnteringAndLeavingBulkheadAndCommandFails,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,FiresMetricEventWhenEnteringAndLeavingBulkheadAndCommandFails,The length of the statement  "                await Assert.ThrowsAsync<ExpectedTestException>(() => invoker.ExecuteWithBulkheadAsync(command' CancellationToken.None)); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,SetsExecutionTimeOnCommandWhenInvokedWithoutBreakerAndCommandSucceeds,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,SetsExecutionTimeOnCommandWhenInvokedWithoutBreakerAndCommandFails,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,SetsExecutionTimeOnCommandWhenInvokedWithoutBreakerAndCommandFails,The length of the statement  "                await Assert.ThrowsAsync<ExpectedTestException>(() => invoker.ExecuteWithBulkheadAsync(command' CancellationToken.None)); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntSetExecutionTimeOnCommandWhenInvokedWithBreakerAndCommandSucceeds,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntSetExecutionTimeOnCommandWhenInvokedWithBreakerAndCommandFails,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntSetExecutionTimeOnCommandWhenInvokedWithBreakerAndCommandFails,The length of the statement  "                await Assert.ThrowsAsync<ExpectedTestException>(() => invoker.ExecuteWithBulkheadAsync(command' CancellationToken.None)); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The length of the statement  "                var mockMetricEvents = new Mock<IMetricEvents>(); // Non-Strict: we aren't testing metric events here' let's keep the test simpler. " is 131.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The length of the statement  "                mockLogFactory.Setup(m => m.CreateLog<SemaphoreBulkheadHolder>()).Returns(new Mock<IMjolnirLog<SemaphoreBulkheadHolder>>().Object); " is 131.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The length of the statement  "                var breakerInvoker = new BreakerInvoker(mockCircuitBreakerFactory.Object' mockMetricEvents.Object' mockBreakerExceptionHandler.Object); " is 135.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,FiresMetricEventWhenRejected,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,FiresMetricEventWhenEnteringAndLeavingBulkheadAndCommandSucceeds,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,FiresMetricEventWhenEnteringAndLeavingBulkheadAndCommandFails,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,SetsExecutionTimeOnCommandWhenInvokedWithoutBreakerAndCommandSucceeds,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,SetsExecutionTimeOnCommandWhenInvokedWithoutBreakerAndCommandFails,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntSetExecutionTimeOnCommandWhenInvokedWithBreakerAndCommandSucceeds,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntSetExecutionTimeOnCommandWhenInvokedWithBreakerAndCommandFails,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' mockConfig); " is 126.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntThrowRejectionException_When_BulkheadInMetricsMode,The length of the statement  "                    BulkheadConfigurations = new Dictionary<string' BulkheadConfiguration> { { key' new BulkheadConfiguration { MetricsOnly = true } } } " is 132.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntThrowRejectionException_When_BulkheadInMetricsMode,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' config); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntThrowRejectionException_When_GlobalBulkheadInMetricsMode,The length of the statement  "                    BulkheadConfigurations = new Dictionary<string' BulkheadConfiguration> { { key' new BulkheadConfiguration { MetricsOnly = false } } } " is 133.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,DoesntThrowRejectionException_When_GlobalBulkheadInMetricsMode,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' config); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsMetricsEvents_When_GlobalBulkheadInMetricsMode,The length of the statement  "                    BulkheadConfigurations = new Dictionary<string' BulkheadConfiguration> { { key' new BulkheadConfiguration { MetricsOnly = false } } } " is 133.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsMetricsEvents_When_GlobalBulkheadInMetricsMode,The length of the statement  "                var invoker = new BulkheadInvoker(mockBreakerInvoker.Object' mockBulkheadFactory.Object' mockMetricEvents.Object' config); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsMetricsEvents_When_GlobalBulkheadInMetricsMode,The length of the statement  "                mockMetricEvents.Verify(i => i.RejectedByBulkhead(key' $"{key}.{nameof(ConfigurableKeyAsyncCommand).Replace("Command"' "")}")' Times.Once); " is 139.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsMetricsEvents_When_GlobalBulkheadInMetricsMode,The length of the statement  "                mockMetricEvents.Verify(i => i.EnterBulkhead(key' $"{key}.{nameof(ConfigurableKeyAsyncCommand).Replace("Command"' "")}")' Times.Never); " is 135.
Long Statement,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsMetricsEvents_When_GlobalBulkheadInMetricsMode,The length of the statement  "                mockMetricEvents.Verify(i => i.LeaveBulkhead(key' $"{key}.{nameof(ConfigurableKeyAsyncCommand).Replace("Command"' "")}")' Times.Never); " is 135.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,WhenMjolnirIsDisabled_ExecutesCommandWithoutProtections,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsResult,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Returns(Task.FromResult(expectedResultValue)); " is 145.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsResult,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsResult,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "RanToCompletion"' "throw")); " is 129.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Throws,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Throws,The length of the statement  "                var exception = await Assert.ThrowsAsync<OperationCanceledException>(() => invoker.InvokeThrowAsync(command' expiredToken)); " is 124.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Throws,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Canceled"' "throw")); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,TimeoutBeforeExecution_Throws,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,TimeoutBeforeExecution_Throws,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "TimedOut"' "throw")); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnored_InvokesRegardlessOfInvocationToken,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Returns(Task.FromResult(true)); " is 130.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnored_InvokesRegardlessOfInvocationToken,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnored_InvokesRegardlessOfInvocationTimeout,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Returns(Task.FromResult(true)); " is 130.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnored_InvokesRegardlessOfInvocationTimeout,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnoredAndExecutionFaulted_MarksTimeoutIgnoredOnExceptionData,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 125.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnoredAndExecutionFaulted_MarksTimeoutIgnoredOnExceptionData,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Throws,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 125.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Throws,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Throws,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Faulted"' "throw")); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_Throws,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 125.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_Throws,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_Throws,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Rejected"' "throw")); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,WhenMjolnirIsDisabled_ExecutesCommandWithoutProtections,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsWrappedResult,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Returns(Task.FromResult(expectedResultValue)); " is 145.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsWrappedResult,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsWrappedResult,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "RanToCompletion"' "return")); " is 130.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Returns,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Returns,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Canceled"' "return")); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,TimeoutBeforeExecution_Returns,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,TimeoutBeforeExecution_Returns,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "TimedOut"' "return")); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_FailureModeReturn_Returns,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 125.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_FailureModeReturn_Returns,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_FailureModeReturn_Returns,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Faulted"' "return")); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_FailureModeReturn_Returns,The length of the statement  "                Assert.Equal((int)command.DetermineTimeout(mockConfig).TotalMilliseconds' result.Exception.Data["MjolnirTimeoutMillis"]); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The length of the statement  "                mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkheadAsync(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 125.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The length of the statement  "                var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The length of the statement  "                mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Rejected"' "return")); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The length of the statement  "                Assert.Equal((int)command.DetermineTimeout(mockConfig).TotalMilliseconds' result.Exception.Data["MjolnirTimeoutMillis"]); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,WhenMjolnirIsDisabled_ExecutesCommandWithoutProtections,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsResult,The length of the statement  "            mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkhead(command' It.IsAny<CancellationToken>())).Returns(expectedResultValue); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsResult,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsResult,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "RanToCompletion"' "throw")); " is 129.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Throws,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Throws,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Canceled"' "throw")); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,TimeoutBeforeExecution_Throws,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,TimeoutBeforeExecution_Throws,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "TimedOut"' "throw")); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnored_InvokesRegardlessOfInvocationToken,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnoredAndExecutionFaulted_MarksTimeoutIgnoredOnExceptionData,The length of the statement  "            mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkhead(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 120.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnoredAndExecutionFaulted_MarksTimeoutIgnoredOnExceptionData,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Throws,The length of the statement  "            mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkhead(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 120.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Throws,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Throws,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Faulted"' "throw")); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_Throws,The length of the statement  "            mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkhead(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 120.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_Throws,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_Throws,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Rejected"' "throw")); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,WhenMjolnirIsDisabled_ExecutesCommandWithoutProtections,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsWrappedResult,The length of the statement  "            mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkhead(command' It.IsAny<CancellationToken>())).Returns(expectedResultValue); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsWrappedResult,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsWrappedResult,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "RanToCompletion"' "return")); " is 130.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Returns,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionCanceled_Returns,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Canceled"' "return")); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,TimeoutBeforeExecution_Returns,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,TimeoutBeforeExecution_Returns,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "TimedOut"' "return")); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnored_InvokesRegardlessOfInvocationTimeout,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Returns,The length of the statement  "            mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkhead(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 120.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Returns,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Returns,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Faulted"' "return")); " is 122.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Returns,The length of the statement  "            Assert.Equal((int)command.DetermineTimeout(mockConfig).TotalMilliseconds' result.Exception.Data["MjolnirTimeoutMillis"]); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The length of the statement  "            mockBulkheadInvoker.Setup(m => m.ExecuteWithBulkhead(command' It.IsAny<CancellationToken>())).Throws(expectedException); " is 120.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The length of the statement  "            var invoker = new CommandInvoker(mockConfig' new DefaultMjolnirLogFactory()' mockMetricEvents.Object' mockBreakerExceptionHandler.Object' mockBulkheadInvoker.Object); " is 166.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The length of the statement  "            mockMetricEvents.Verify(m => m.CommandInvoked(command.Name' It.IsAny<double>()' It.IsAny<double>()' "Rejected"' "return")); " is 123.
Long Statement,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The length of the statement  "            Assert.Equal((int)command.DetermineTimeout(mockConfig).TotalMilliseconds' result.Exception.Data["MjolnirTimeoutMillis"]); " is 121.
Long Statement,Hudl.Mjolnir.Tests.Configuration.Helpers,ExampleJsonConfigProvider,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\Helpers\ExampleJsonConfigProvider.cs,GetCurrentDirectory,The length of the statement  "                currentDirectory.Substring(0' currentDirectory.LastIndexOf("bin" + Path.DirectorySeparatorChar' StringComparison.Ordinal)); " is 123.
Empty Catch Block,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,GetBulkhead_WhenInitializingBulkheadAndMaxConcurrentConfigIsInvalid_AndThenConfigChangedToValidValue_CreatesBulkhead,The method has an empty catch block.
Magic Number,Hudl.Mjolnir.Tests.Breaker,CircuitBreakerFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\CircuitBreakerFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForOneBulkhead,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromMilliseconds(1500));
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetMinimumOperations_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs10,The following statement contains a magic number: const long expectedDefaultMinimumOperations = 10;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetMinimumOperations_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs10,The following statement contains a magic number: const int expectedConfigValue = 10;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetWindowMillis_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs30000,The following statement contains a magic number: const long expectedDefaultWindowMillis = 30000;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetThresholdPercentage_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs50,The following statement contains a magic number: const int expectedDefaultThresholdPercentage = 50;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetTrippedDurationMillis_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs10000,The following statement contains a magic number: const long expectedDefaultTrippedDurationMillis = 10000;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerConfigTests.cs,GetSnapshotTtlMillis_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs1000,The following statement contains a magic number: const long expectedDefaultSnapshotTtlMillis = 1000;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,Construct_BreakerIsntTripped,The following statement contains a magic number: var breaker = new BreakerBuilder(10' 50).Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,Construct_BreakerIsntTripped,The following statement contains a magic number: var breaker = new BreakerBuilder(10' 50).Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_WhenNotTripped_DoesntResetMetrics,The following statement contains a magic number: var breaker = new BreakerBuilder(10' 50).WithMockMetrics(mockMetrics).Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_WhenNotTripped_DoesntResetMetrics,The following statement contains a magic number: var breaker = new BreakerBuilder(10' 50).WithMockMetrics(mockMetrics).Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_WhenTrippedAndAfterWaitDuration_ResetsMetrics,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(1' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_WhenTrippedAndAfterWaitDuration_ResetsMetrics,The following statement contains a magic number: var breaker = new BreakerBuilder(1' 50)                  .WithMockMetrics(mockMetrics)                  .WithWaitMillis(10000)                  .WithClock(clock)                  .Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_WhenTrippedAndAfterWaitDuration_ResetsMetrics,The following statement contains a magic number: var breaker = new BreakerBuilder(1' 50)                  .WithMockMetrics(mockMetrics)                  .WithWaitMillis(10000)                  .WithClock(clock)                  .Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_WhenTrippedAndAfterWaitDuration_ResetsMetrics,The following statement contains a magic number: clock.AddMilliseconds(11000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ImmediatelyAfterTrippingButStartedBeforeTripped_DoesntImmediatelyFix,The following statement contains a magic number: mockMetrics.Setup(m => m.GetSnapshot()).Returns(new MetricsSnapshot(2' 100));
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ImmediatelyAfterTrippingButStartedBeforeTripped_DoesntImmediatelyFix,The following statement contains a magic number: mockMetrics.Setup(m => m.GetSnapshot()).Returns(new MetricsSnapshot(2' 100));
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ImmediatelyAfterTrippingButStartedBeforeTripped_DoesntImmediatelyFix,The following statement contains a magic number: mockConfig.SetupSequence(m => m.GetMinimumOperations(It.IsAny<GroupKey>()))                  .Returns(5) // First access should be > 1 so that the breaker doesn't trip.                  .Returns(1);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ImmediatelyAfterTrippingButStartedBeforeTripped_DoesntImmediatelyFix,The following statement contains a magic number: mockConfig.Setup(m => m.GetTrippedDurationMillis(It.IsAny<GroupKey>())).Returns(30000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ImmediatelyAfterTrippingButStartedBeforeTripped_DoesntImmediatelyFix,The following statement contains a magic number: breaker.MarkSuccess(100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ForLongRunningSingleTest_FixesBreaker,The following statement contains a magic number: mockMetrics.Setup(m => m.GetSnapshot()).Returns(new MetricsSnapshot(2' 100));
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ForLongRunningSingleTest_FixesBreaker,The following statement contains a magic number: mockMetrics.Setup(m => m.GetSnapshot()).Returns(new MetricsSnapshot(2' 100));
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ForLongRunningSingleTest_FixesBreaker,The following statement contains a magic number: const long trippedDurationMillis = 30000;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ForLongRunningSingleTest_FixesBreaker,The following statement contains a magic number: manualClock.AddMilliseconds(trippedDurationMillis + 10);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ForLongRunningSingleTest_FixesBreaker,The following statement contains a magic number: manualClock.AddMilliseconds(trippedDurationMillis * 2);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,MarkSuccess_ForLongRunningSingleTest_FixesBreaker,The following statement contains a magic number: breaker.MarkSuccess(trippedDurationMillis * 2);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceTripped_Rejects,The following statement contains a magic number: mockConfig.Setup(m => m.GetTrippedDurationMillis(It.IsAny<GroupKey>())).Returns(30000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceFixed_Allows,The following statement contains a magic number: mockConfig.Setup(m => m.GetTrippedDurationMillis(It.IsAny<GroupKey>())).Returns(30000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenBothForcePropertiesSet_Rejects,The following statement contains a magic number: mockConfig.Setup(m => m.GetTrippedDurationMillis(It.IsAny<GroupKey>())).Returns(30000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceFixedButBreakerWouldNormallyTrip_SilentlyTripsTheBreaker,The following statement contains a magic number: mockMetrics.Setup(m => m.GetSnapshot()).Returns(new MetricsSnapshot(2' 50));
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceFixedButBreakerWouldNormallyTrip_SilentlyTripsTheBreaker,The following statement contains a magic number: mockMetrics.Setup(m => m.GetSnapshot()).Returns(new MetricsSnapshot(2' 50));
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceFixedButBreakerWouldNormallyTrip_SilentlyTripsTheBreaker,The following statement contains a magic number: mockConfig.Setup(m => m.GetThresholdPercentage(It.IsAny<GroupKey>())).Returns(25);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenPropertiesForceFixedButBreakerWouldNormallyTrip_SilentlyTripsTheBreaker,The following statement contains a magic number: mockConfig.Setup(m => m.GetTrippedDurationMillis(It.IsAny<GroupKey>())).Returns(30000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterTrippedAndWithinWaitPeriod_Rejects,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterTrippedAndWithinWaitPeriod_Rejects,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterTrippedAndWithinWaitPeriod_Rejects,The following statement contains a magic number: var breaker = new BreakerBuilder(1' 1) // Trip at 1 op' 1% failing.                  .WithMockMetrics(mockMetrics)                  .WithWaitMillis(10000)                  .WithClock(clock)                  .Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterTrippedAndWithinWaitPeriod_Rejects,The following statement contains a magic number: clock.AddMilliseconds(5000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterTrippedAndAfterWaitPeriod_SendsSingleTestAndRejectsOthers,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterTrippedAndAfterWaitPeriod_SendsSingleTestAndRejectsOthers,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterTrippedAndAfterWaitPeriod_SendsSingleTestAndRejectsOthers,The following statement contains a magic number: var breaker = new BreakerBuilder(1' 1) // Trip at 1 op' 1% failing.                  .WithMockMetrics(mockMetrics)                  .WithWaitMillis(10000)                  .WithClock(clock)                  .Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterTrippedAndAfterWaitPeriod_SendsSingleTestAndRejectsOthers,The following statement contains a magic number: clock.AddMilliseconds(11000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterSuccessfulSingleTest_FixesBreaker,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterSuccessfulSingleTest_FixesBreaker,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterSuccessfulSingleTest_FixesBreaker,The following statement contains a magic number: var breaker = new BreakerBuilder(1' 1) // Trip at 1 op' 1% failing.                  .WithMockMetrics(mockMetrics)                  .WithWaitMillis(10000)                  .WithClock(clock)                  .Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterSuccessfulSingleTest_FixesBreaker,The following statement contains a magic number: clock.AddMilliseconds(11000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterSuccessfulSingleTest_FixesBreaker,The following statement contains a magic number: clock.AddMilliseconds(500);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: var breaker = new BreakerBuilder(1' 1) // Trip at 1 op' 1% failing.                  .WithMockMetrics(mockMetrics)                  .WithWaitMillis(10000)                  .WithClock(clock)                  .Create();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: clock.AddMilliseconds(11000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: clock.AddMilliseconds(6000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: clock.AddMilliseconds(5000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: clock.AddMilliseconds(6000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: clock.AddMilliseconds(5000);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AfterFailedSingleTest_KeepsBreakerTrippedAndSendsAnotherTestAfterAnotherDuration,The following statement contains a magic number: clock.AddMilliseconds(500);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextSuccess_FixesBreakerOnSuccess,The following statement contains a magic number: const long durationMillis = 10000;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextSuccess_FixesBreakerOnSuccess,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextSuccess_FixesBreakerOnSuccess,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextSuccess_FixesBreakerOnSuccess,The following statement contains a magic number: clock.AddMilliseconds(durationMillis * 5);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextFailure_KeepsBreakerTripped,The following statement contains a magic number: const long durationMillis = 10000;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextFailure_KeepsBreakerTripped,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextFailure_KeepsBreakerTripped,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextFailure_KeepsBreakerTripped,The following statement contains a magic number: clock.AddMilliseconds(durationMillis * 5);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_MultipleDurationsBetweenFailureAndNextFailure_KeepsBreakerTripped,The following statement contains a magic number: clock.AddMilliseconds(durationMillis * 5);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenAlreadyTripped_DoesntReTripBreaker,The following statement contains a magic number: const long durationMillis = 10000;
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenAlreadyTripped_DoesntReTripBreaker,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_WhenAlreadyTripped_DoesntReTripBreaker,The following statement contains a magic number: var mockMetrics = CreateMockMetricsWithSnapshot(10' 100);
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalEqualThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 50).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalEqualThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 50).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalEqualThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 50).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalEqualThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 50).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalAboveThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 25).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalAboveThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 25).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalAboveThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 25).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_BelowTotalAboveThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(3' 25).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalEqualThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 50).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalEqualThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 50).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalEqualThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 50).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalEqualThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 50).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalAboveThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 25).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalAboveThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 25).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalAboveThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 25).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_EqualTotalAboveThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(2' 25).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalBelowThreshold_AllowsAndDoesntTrip,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 75).ShouldTrip(false).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalEqualThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 50).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalEqualThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 50).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalEqualThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 50).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalAboveThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 25).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalAboveThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 25).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,FailurePercentageCircuitBreakerTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,IsAllowing_AboveTotalAboveThreshold_RejectsAndTrips,The following statement contains a magic number: TripTest.WithMetricsAt(2' 50).WithBreakerAt(1' 25).ShouldTrip(true).Run();
Magic Number,Hudl.Mjolnir.Tests.Breaker,TripTest,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Breaker\FailurePercentageCircuitBreakerTests.cs,Run,The following statement contains a magic number: var config = CreateMockBreakerConfig(_breakerTotal' _breakerPercent' 30000);
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadConfigTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadConfigTests.cs,GetMaxConcurrent_UsesDefaultValueIfNoSpecificValueOrDefaultValueConfigured_DefaultIs10,The following statement contains a magic number: const int expectedDefaultMaxConcurrent = 10;
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForOneBulkhead,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromMilliseconds(1500));
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForMultipleBulkheads,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromMilliseconds(1500));
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,Construct_InitializesConfigGauge_GaugeFiresForMultipleBulkheads,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromMilliseconds(1500));
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,GetBulkhead_ReturnsNewBulkheadWhenConfigChanges,The following statement contains a magic number: const int initialExpectedCount = 5;
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,GetBulkhead_ReturnsNewBulkheadWhenConfigChanges,The following statement contains a magic number: const int newExpectedCount = 6;
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,GetBulkhead_ReturnsNewBulkheadWhenConfigChanges,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,MultiThreadedInitialization_DoesNotThrow,The following statement contains a magic number: const int validMaxConcurrent = 10;
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,BulkheadFactoryTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\BulkheadFactoryTests.cs,MultiThreadedInitialization_DoesNotThrow,The following statement contains a magic number: i < 50000000
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,UpdateMaxConcurrent_ReplacesBulkhead,The following statement contains a magic number: const int initialExpectedCount = 5;
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadHolderTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadHolderTests.cs,UpdateMaxConcurrent_ReplacesBulkhead,The following statement contains a magic number: const int newExpectedCount = 6;
Magic Number,Hudl.Mjolnir.Tests.Bulkhead,SemaphoreBulkheadTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Bulkhead\SemaphoreBulkheadTests.cs,CountAvailable_IncreasesOnTryEnterAndDecreasesOnRelease,The following statement contains a magic number: const int maxConcurrent = 10;
Magic Number,Hudl.Mjolnir.Tests.Clock,ClockTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Clock\ClockTests.cs,UtcSystemClock_GetMillisecondTimestamp_IsCloseToUtcNow,The following statement contains a magic number: const long epsilonMillis = 10;
Magic Number,Hudl.Mjolnir.Tests.Clock,ClockTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Clock\ClockTests.cs,ManualTestClock_GetMillisecondTimestamp_DoesntAdvanceAutomatically,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Hudl.Mjolnir.Tests.Clock,ClockTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Clock\ClockTests.cs,ManualTestClock_GetMillisecondTimestamp_UpdatesAfterAddingMillis,The following statement contains a magic number: clock.AddMilliseconds(20);
Magic Number,Hudl.Mjolnir.Tests.Clock,ClockTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Clock\ClockTests.cs,ManualTestClock_GetMillisecondTimestamp_UpdatesAfterAddingMillis,The following statement contains a magic number: Assert.Equal(20' clock.GetMillisecondTimestamp());
Magic Number,Hudl.Mjolnir.Tests.Clock,ClockTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Clock\ClockTests.cs,ManualTestClock_AddMilliseconds_DisallowsNegatives,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => clock.AddMilliseconds(-10));
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,InvocationTimeoutNegative_FallsBackToConfiguredTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(2)'                      invocationMs: -1'                      configuredMs: 2'                      constructorMs: ValidTimeoutMillis);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,InvocationTimeoutNegative_FallsBackToConfiguredTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(2)'                      invocationMs: -1'                      configuredMs: 2'                      constructorMs: ValidTimeoutMillis);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,InvocationTimeoutNull_FallsBackToConfiguredTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(2)'                      invocationMs: null'                      configuredMs: 2'                      constructorMs: ValidTimeoutMillis);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,InvocationTimeoutNull_FallsBackToConfiguredTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(2)'                      invocationMs: null'                      configuredMs: 2'                      constructorMs: ValidTimeoutMillis);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_ConfiguredTimeoutNegative_FallsBackToConstructorTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(3)'                      invocationMs: null'                      configuredMs: -1'                      constructorMs: 3);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_ConfiguredTimeoutNegative_FallsBackToConstructorTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(3)'                      invocationMs: null'                      configuredMs: -1'                      constructorMs: 3);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_ConfiguredTimeoutZero_FallsBackToConstructorTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(3)'                      invocationMs: null'                      configuredMs: 0'                      constructorMs: 3);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_ConfiguredTimeoutZero_FallsBackToConstructorTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(3)'                      invocationMs: null'                      configuredMs: 0'                      constructorMs: 3);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_ConfiguredTimeoutPositive_UsesConfiguredTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(2)'                      invocationMs: null'                      configuredMs: 2'                      constructorMs: ValidTimeoutMillis);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_ConfiguredTimeoutPositive_UsesConfiguredTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(2)'                      invocationMs: null'                      configuredMs: 2'                      constructorMs: ValidTimeoutMillis);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_NoConfiguredTimeout_UsesConstructorTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(3)'                      invocationMs: null'                      configuredMs: 0' // 0 = not configured                      constructorMs: 3);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_NoConfiguredTimeout_UsesConstructorTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(3)'                      invocationMs: null'                      configuredMs: 0' // 0 = not configured                      constructorMs: 3);
Magic Number,Hudl.Mjolnir.Tests.Command,DetermineTimeout,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BaseCommandTests.cs,NoInvocationTimeout_NoConfiguredTimeout_NoConstructorTimeout_UsesDefaultTimeout,The following statement contains a magic number: TestTimeouts(                      expected: TimeSpan.FromMilliseconds(2000)'                      invocationMs: null'                      configuredMs: 0' // 0 = not configured                      constructorMs: null);
Magic Number,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The following statement contains a magic number: const int initialMaxConcurrent = 10;
Magic Number,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkheadAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The following statement contains a magic number: const int newMaxConcurrent = 15;
Magic Number,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The following statement contains a magic number: const int initialMaxConcurrent = 10;
Magic Number,Hudl.Mjolnir.Tests.Command,ExecuteWithBulkhead,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\BulkheadInvokerTests.cs,CallsTryEnterAndReleaseOnTheSameBulkheadDuringConfigChange,The following statement contains a magic number: const int newMaxConcurrent = 15;
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsResult,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration                  {                      IsEnabled = true'                      IgnoreTimeouts = false'                      CommandConfigurations = new Dictionary<string' CommandConfiguration>                      {                          {                              "NoOpAsync"'                              new CommandConfiguration                              {                                  Timeout = 10000                              }                          }                      }                  };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Throws,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration                  {                      IsEnabled = true'                      IgnoreTimeouts = false'                      CommandConfigurations = new Dictionary<string' CommandConfiguration>                      {                          {                              "NoOpAsync"'                              new CommandConfiguration                              {                                  Timeout = 10000                              }                          }                      }                  };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeThrowAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_Throws,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration                  {                      IsEnabled = true'                      IgnoreTimeouts = false'                      CommandConfigurations = new Dictionary<string' CommandConfiguration>                      {                          {                              "NoOpAsync"'                              new CommandConfiguration                              {                                  Timeout = 10000                              }                          }                      }                  };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,WhenMjolnirIsDisabled_ExecutesCommandWithoutProtections,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration                  {                      IsEnabled = false'                      IgnoreTimeouts = false'                      CommandConfigurations = new Dictionary<string' CommandConfiguration>                      {                          {                              "NoOpAsync"'                              new CommandConfiguration                              {                                  Timeout = 10000                              }                          }                      }                  };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsWrappedResult,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration                  {                      IsEnabled = true'                      IgnoreTimeouts = false'                      CommandConfigurations = new Dictionary<string' CommandConfiguration>                      {                          {                              "NoOpAsync"'                              new CommandConfiguration                              {                                  Timeout = 10000                              }                          }                      }                  };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_FailureModeReturn_Returns,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration                  {                      IsEnabled = true'                      IgnoreTimeouts = false'                      CommandConfigurations = new Dictionary<string' CommandConfiguration>                      {                          {                              "NoOpAsync"'                              new CommandConfiguration                              {                                  Timeout = 10000                              }                          }                      }                  };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturnAsync,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration                  {                      IsEnabled = true'                      IgnoreTimeouts = false'                      CommandConfigurations = new Dictionary<string' CommandConfiguration>                      {                          {                              "NoOpAsync"'                              new CommandConfiguration                              {                                  Timeout = 10000                              }                          }                      }                  };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsResult,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration              {                  IsEnabled = true'                  IgnoreTimeouts = false'                  CommandConfigurations = new Dictionary<string' CommandConfiguration>                  {                      {                          "NoOpAsync"'                          new CommandConfiguration                          {                              Timeout = 10000                          }                      }                  }              };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Throws,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration              {                  IsEnabled = true'                  IgnoreTimeouts = false'                  CommandConfigurations = new Dictionary<string' CommandConfiguration>                  {                      {                          "NoOpAsync"'                          new CommandConfiguration                          {                              Timeout = 10000                          }                      }                  }              };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeThrow,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_Throws,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration              {                  IsEnabled = true'                  IgnoreTimeouts = false'                  CommandConfigurations = new Dictionary<string' CommandConfiguration>                  {                      {                          "NoOpAsync"'                          new CommandConfiguration                          {                              Timeout = 10000                          }                      }                  }              };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,WhenMjolnirIsDisabled_ExecutesCommandWithoutProtections,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration              {                  IsEnabled = false'                  IgnoreTimeouts = false'                  CommandConfigurations = new Dictionary<string' CommandConfiguration>                  {                      {                          "TokenCapturing"'                          new CommandConfiguration                          {                              Timeout = 10000                          }                      }                  }              };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecuteSuccessful_ReturnsWrappedResult,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration              {                  IsEnabled = true'                  IgnoreTimeouts = false'                  CommandConfigurations = new Dictionary<string' CommandConfiguration>                  {                      {                          "test.NoOp"'                          new CommandConfiguration                          {                              Timeout = 10000                          }                      }                  }              };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,CancellationIgnored_InvokesRegardlessOfInvocationTimeout,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration              {                  IsEnabled = true'                  IgnoreTimeouts = true'                  CommandConfigurations = new Dictionary<string' CommandConfiguration>                  {                      {                          "test.NoOp"'                          new CommandConfiguration                          {                              Timeout = 10000                          }                      }                  }              };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionFaulted_Returns,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration              {                  IsEnabled = true'                  IgnoreTimeouts = false'                  CommandConfigurations = new Dictionary<string' CommandConfiguration>                  {                      {                          "test.NoOp"'                          new CommandConfiguration                          {                              Timeout = 10000                          }                      }                  }              };
Magic Number,Hudl.Mjolnir.Tests.Command,InvokeReturn,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Command\CommandInvokerTests.cs,ExecutionRejected_FailureModeReturn_Returns,The following statement contains a magic number: var mockConfig = new MjolnirConfiguration              {                  IsEnabled = true'                  IgnoreTimeouts = false'                  CommandConfigurations = new Dictionary<string' CommandConfiguration>                  {                      {                          "test.NoOp"'                          new CommandConfiguration                          {                              Timeout = 10000                          }                      }                  }              };
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,LoadBulkheadDictionary_LoadsCorrectValue,The following statement contains a magic number: Assert.Equal(5' mjolnirConfiguration.GetBulkheadConfiguration("TestGroupKey").MaxConcurrent);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,AfterConfigurationSubscription_OnConfigReloadWeAreBeingNotified,The following statement contains a magic number: var configProvider = new ExampleJsonConfigProvider(TimeSpan.FromMilliseconds(50));
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,AfterConfigurationSubscription_OnConfigReloadWeAreBeingNotified,The following statement contains a magic number: var signalled = onNextWaitHandle.WaitOne(5000);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(1000' mjolnirConfiguration.DefaultCommandConfiguration.Timeout);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(1000' mjolnirConfiguration.DefaultCommandConfiguration.Timeout);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(1050' mjolnirConfiguration.CommandConfigurations["TestKey"].Timeout);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(1030' mjolnirConfiguration.CommandConfigurations["TestKey2"].Timeout);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(10' mjolnirConfiguration.DefaultBulkheadConfiguration.MaxConcurrent);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(5' mjolnirConfiguration.BulkheadConfigurations["TestGroupKey"].MaxConcurrent);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(1000' mjolnirConfiguration.DefaultBreakerConfiguration.WindowMillis);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(10' mjolnirConfiguration.DefaultBreakerConfiguration.MinimumOperations);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(50' mjolnirConfiguration.DefaultBreakerConfiguration.ThresholdPercentage);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(1000' mjolnirConfiguration.DefaultBreakerConfiguration.TrippedDurationMillis);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(1000' mjolnirConfiguration.BreakerConfigurations["TestKey"].WindowMillis);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(10' mjolnirConfiguration.BreakerConfigurations["TestKey"].MinimumOperations);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(50' mjolnirConfiguration.BreakerConfigurations["TestKey"].ThresholdPercentage);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(1000' mjolnirConfiguration.BreakerConfigurations["TestKey"].TrippedDurationMillis);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(500' mjolnirConfiguration.BreakerConfigurations["TestKey2"].WindowMillis);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(5' mjolnirConfiguration.BreakerConfigurations["TestKey2"].MinimumOperations);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(500' mjolnirConfiguration.BreakerConfigurations["TestKey2"].ThresholdPercentage);
Magic Number,Hudl.Mjolnir.Tests.Configuration,MjolnirConfigurationTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Configuration\MjolnirConfigurationTests.cs,TestJsonFile_DoesNotHaveTypos,The following statement contains a magic number: Assert.Equal(2000' mjolnirConfiguration.BreakerConfigurations["TestKey2"].TrippedDurationMillis);
Magic Number,Hudl.Mjolnir.Tests.Events,GaugeLogMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Events\GaugeLogMetricsTests.cs,RejectionsLoggedInGaugeCorrectly,The following statement contains a magic number: gaugeLogMetrics.BulkheadGauge("test"' "test"' 2' 0);
Magic Number,Hudl.Mjolnir.Tests.Events,GaugeLogMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Events\GaugeLogMetricsTests.cs,RejectionsLoggedInGaugeCorrectly,The following statement contains a magic number: gaugeLogMetrics.BulkheadGauge("test"' "test"' 2' 0);
Magic Number,Hudl.Mjolnir.Tests.Events,GaugeLogMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Events\GaugeLogMetricsTests.cs,RejectionsLoggedInGaugeCorrectly,The following statement contains a magic number: mockLogger.Verify(i => i.Debug(It.Is<string>(s => logMessageCheck(s' 3)))' Times.Once);
Magic Number,Hudl.Mjolnir.Tests,Example,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Example.cs,Test,The following statement contains a magic number: var result3 = invoker.InvokeThrow(command3' 1000);
Magic Number,Hudl.Mjolnir.Tests.Helper,Rand,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Helper\RandomGenerator.cs,Long,The following statement contains a magic number: byte[] buffer = new byte[8];
Magic Number,Hudl.Mjolnir.Tests.Helper,Rand,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Helper\RandomGenerator.cs,Decimal,The following statement contains a magic number: byte scale = (byte)ThreadSafeRandom.Next(29);
Magic Number,Hudl.Mjolnir.Tests.Helper,Rand,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Helper\RandomGenerator.cs,Decimal,The following statement contains a magic number: bool sign = ThreadSafeRandom.Next(2) == 1;
Magic Number,Hudl.Mjolnir.Tests.Helper,Rand,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Helper\RandomGenerator.cs,Bool,The following statement contains a magic number: return ThreadSafeRandom.Next(2) == 0;
Magic Number,Hudl.Mjolnir.Tests.Metrics,InterlockingLongCounterTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\InterlockingLongCounterTests.cs,Stress_Increment_RetainsAccuracy,The following statement contains a magic number: const int iterations = 100000;
Magic Number,Hudl.Mjolnir.Tests.Metrics,ResettingNumbersBucketTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\ResettingNumbersBucketTests.cs,Increment_AfterPeriodExceeded_ResetsBeforeIncrementing,The following statement contains a magic number: const long periodMillis = 1000;
Magic Number,Hudl.Mjolnir.Tests.Metrics,ResettingNumbersBucketTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\ResettingNumbersBucketTests.cs,CreateBucket,The following statement contains a magic number: mockConfig.Setup(m => m.GetWindowMillis(It.IsAny<GroupKey>())).Returns(10000);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,MarkCommandSuccess_BeforeFirstSnapshot_GetsIncludedInSnapshot,The following statement contains a magic number: mockConfig.Setup(m => m.GetWindowMillis(key)).Returns(30000);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,MarkCommandSuccess_BeforeFirstSnapshot_GetsIncludedInSnapshot,The following statement contains a magic number: mockConfig.Setup(m => m.GetSnapshotTtlMillis(key)).Returns(1000);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,MarkCommandFailure_BeforeFirstSnapshot_GetsIncludedInSnapshot,The following statement contains a magic number: mockConfig.Setup(m => m.GetWindowMillis(key)).Returns(30000);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,MarkCommandFailure_BeforeFirstSnapshot_GetsIncludedInSnapshot,The following statement contains a magic number: mockConfig.Setup(m => m.GetSnapshotTtlMillis(key)).Returns(1000);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,MarkCommandFailure_BeforeFirstSnapshot_GetsIncludedInSnapshot,The following statement contains a magic number: Assert.Equal(100' snapshot.ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(2' SnapshotFor(1' 1).Total);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(100' SnapshotFor(0' 1).ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(50' SnapshotFor(1' 1).ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(99' SnapshotFor(1' 99).ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(99' SnapshotFor(1' 99).ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(1' SnapshotFor(99' 1).ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(50' SnapshotFor(499' 501).ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(50' SnapshotFor(499' 501).ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_VariousPercentageTests,The following statement contains a magic number: Assert.Equal(50' SnapshotFor(499' 501).ErrorPercentage);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_WithinCachePeriod_ReturnsPreviousSnapshot,The following statement contains a magic number: mockConfig.Setup(m => m.GetWindowMillis(key)).Returns(10000);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_WithinCachePeriod_ReturnsPreviousSnapshot,The following statement contains a magic number: mockConfig.Setup(m => m.GetSnapshotTtlMillis(key)).Returns(1000);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_WithinCachePeriod_ReturnsPreviousSnapshot,The following statement contains a magic number: clock.AddMilliseconds(500);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_WithinCachePeriod_ReturnsPreviousSnapshot,The following statement contains a magic number: clock.AddMilliseconds(1000);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,GetSnapshot_WithinCachePeriod_ReturnsPreviousSnapshot,The following statement contains a magic number: Assert.Equal(2' metrics.GetSnapshot().Total);
Magic Number,Hudl.Mjolnir.Tests.Metrics,StandardCommandMetricsTests,D:\research\architectureSmells\repos\hudl_Mjolnir\tests\unit\Hudl.Mjolnir.Tests\Metrics\StandardCommandMetricsTests.cs,SnapshotFor,The following statement contains a magic number: mockConfig.Setup(m => m.GetWindowMillis(key)).Returns(10000);
