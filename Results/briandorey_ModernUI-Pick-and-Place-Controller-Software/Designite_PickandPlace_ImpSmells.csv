Implementation smell,Namespace,Class,File,Method,Description
Long Method,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The method has 135 lines of code.
Long Method,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The method has 130 lines of code.
Complex Method,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,Cyclomatic complexity of the method is 10
Complex Method,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,Cyclomatic complexity of the method is 12
Complex Method,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,Cyclomatic complexity of the method is 8
Long Parameter List,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveSingleFeed,The method has 7 parameters.
Long Parameter List,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,GetDRO,The method has 6 parameters.
Long Parameter List,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,Interpreter_Interpreter_CoordMotionStraightFeed,The method has 6 parameters.
Long Parameter List,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,Interpreter_Interpreter_CoordMotionArcFeed,The method has 14 parameters.
Long Parameter List,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,CoordMotion_CoordMotionStraightFeed,The method has 6 parameters.
Long Parameter List,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,CoordMotion_CoordMotionArcFeed,The method has 14 parameters.
Long Parameter List,PickandPlace.Pages,ManualControl,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\ManualControl.xaml.cs,RunToPoint,The method has 7 parameters.
Long Statement,PickandPlace,CameraWindow,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\CameraWindow.xaml.cs,ProcessFrame,The length of the statement  "		frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointshor' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1); " is 167.
Long Statement,PickandPlace,CameraWindow,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\CameraWindow.xaml.cs,ProcessFrame,The length of the statement  "		frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointsver' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1); " is 167.
Long Statement,PickandPlace,BitmapSourceConvert,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\CameraWindow.xaml.cs,ToBitmapSource,The length of the statement  "		BitmapSource bs = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap (ptr' IntPtr.Zero' Int32Rect.Empty' System.Windows.Media.Imaging.BitmapSizeOptions.FromEmptyOptions ()); " is 183.
Long Statement,PickandPlace,Components,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Components.cs,POPComponentsTable,The length of the statement  "	FileStream finschema = new FileStream (System.IO.Path.GetDirectoryName (Application.ExecutablePath) + "/datafiles/components.xsd"' FileMode.Open' FileAccess.Read' FileShare.Read); " is 179.
Long Statement,PickandPlace,Components,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Components.cs,POPComponentsTable,The length of the statement  "	FileStream findata = new FileStream (System.IO.Path.GetDirectoryName (Application.ExecutablePath) + "/datafiles/components.xml"' FileMode.Open' FileAccess.Read' FileShare.ReadWrite); " is 182.
Long Statement,PickandPlace,Components,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Components.cs,SaveDataSet,The length of the statement  "	System.IO.StreamWriter xmlSW = new System.IO.StreamWriter (System.IO.Path.GetDirectoryName (Application.ExecutablePath) + "/datafiles/components.xml"); " is 151.
Long Statement,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The length of the statement  "			for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) { " is 210.
Long Statement,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The length of the statement  "		triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1); " is 139.
Long Statement,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The length of the statement  "		triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1); " is 139.
Long Statement,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The length of the statement  "		frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1); " is 122.
Long Statement,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The length of the statement  "		frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1); " is 122.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveSingleFeed,The length of the statement  "	//Debug.WriteLine("(X:" + x.ToString() + ")(Y:" + y.ToString() + ")(Z:" + z.ToString() + ")(A:" + a.ToString() + ")(B:" + b.ToString() + ")(C:" + c.ToString()); " is 160.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,Interpreter_Interpreter_CoordMotionStraightFeed,The length of the statement  "	Debug.WriteLine ("Interpreter CoordMotion Straight Feed::  {0} | {1} | {2} | {3} | {4} | {5}"' DesiredFeedRate_in_per_sec' x' y' z' sequence_number' ID); " is 153.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,Interpreter_Interpreter_CoordMotionArcFeed,The length of the statement  "	Debug.WriteLine ("Interpreter CoordMotion Arc Feed::  {0} | {1} | {2} | {3} | {4} | {5} | {6} | {7} | {8} | {9} | {10} | {11} | {12}"' ZeroLenAsFullCircles' DesiredFeedRate_in_per_sec' plane' first_end' second_end' first_axis' second_axis' rotation' axis_end_point' first_start' second_start' axis_start_point' sequence_number' ID); " is 332.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,Interpreter_InterpreterCompleted,The length of the statement  "	Debug.WriteLine (String.Format ("Interpreter Completed::  {0} | {1} | {2} | {3}"' status' lineno' sequence_number' err)); " is 121.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,AddHandlers,The length of the statement  "	_Controller.CoordMotion.CoordMotionStraightTraverse += new KMotion_dotNet.KM_CoordMotionStraightTraverseHandler (CoordMotion_CoordMotionStraightTranverse); " is 155.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,AddHandlers,The length of the statement  "	_Controller.CoordMotion.CoordMotionArcFeed += new KMotion_dotNet.KM_CoordMotionArcFeedHandler (CoordMotion_CoordMotionArcFeed); " is 127.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,AddHandlers,The length of the statement  "	_Controller.CoordMotion.CoordMotionStraightFeed += new KMotion_dotNet.KM_CoordMotionStraightFeedHandler (CoordMotion_CoordMotionStraightFeed); " is 142.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,AddHandlers,The length of the statement  "	_Controller.CoordMotion.Interpreter.InterpreterStatusUpdated += new KMotion_dotNet.KM_Interpreter.KM_GCodeInterpreterStatusHandler (Interpreter_InterpreterStatusUpdated); " is 170.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,AddHandlers,The length of the statement  "	_Controller.CoordMotion.Interpreter.InterpreterCompleted += new KMotion_dotNet.KM_Interpreter.KM_GCodeInterpreterCompleteHandler (Interpreter_InterpreterCompleted); " is 164.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,AddHandlers,The length of the statement  "	_Controller.CoordMotion.Interpreter.InterpreterUserCallbackRequested += new KMotion_dotNet.KM_Interpreter.KM_GCodeInterpreterUserCallbackHandler (Interpreter_InterpreterUserCallbackRequested); " is 192.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,AddHandlers,The length of the statement  "	_Controller.CoordMotion.Interpreter.InterpreterUserMCodeCallbackRequested += new KMotion_dotNet.KM_Interpreter.KM_GCodeInterpreterUserMcodeCallbackHandler (Interpreter_InterpreterUserMCodeCallbackRequested); " is 207.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,CoordMotion_CoordMotionStraightFeed,The length of the statement  "	Debug.WriteLine ("CoordMotion Straight Feed::  {0} | {1} | {2} | {3} | {4} | {5}"' DesiredFeedRate_in_per_sec' x' y' z' sequence_number' ID); " is 141.
Long Statement,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,CoordMotion_CoordMotionArcFeed,The length of the statement  "	Debug.WriteLine ("CoordMotion Arc Feed::  {0} | {1} | {2} | {3} | {4} | {5} | {6} | {7} | {8} | {9} | {10} | {11} | {12}"' ZeroLenAsFullCircles' DesiredFeedRate_in_per_sec' plane' first_end' second_end' first_axis' second_axis' rotation' axis_end_point' first_start' second_start' axis_start_point' sequence_number' ID); " is 320.
Long Statement,PickandPlace.Pages,BoardDesigner,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardDesigner.xaml.cs,bt_addrow_Click,The length of the statement  "		string ComponentName = txt_ComName.Text + " - " + comp.GetComponentValue (dd_ComponentSelect.SelectedValue.ToString ()); " is 120.
Long Statement,PickandPlace.Pages,BoardDesigner,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardDesigner.xaml.cs,bt_addrow_Click,The length of the statement  "		dscomponents.Tables ["Components"].Rows.Add (ComponentCode' ComponentName' PlacementX' PlacementY' PlacementRotate' PlacementNozzle' true); " is 139.
Magic Number,PickandPlace,App,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\App.xaml.cs,App_Startup,The following statement contains a magic number: usbController.RunBoardInit (false' 250' 250);  
Magic Number,PickandPlace,App,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\App.xaml.cs,App_Startup,The following statement contains a magic number: usbController.RunBoardInit (false' 250' 250);  
Magic Number,PickandPlace,CameraWindow,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\CameraWindow.xaml.cs,CameraWindow,The following statement contains a magic number: timer.Interval = new TimeSpan (0' 0' 0' 0' 40);  
Magic Number,PickandPlace,CameraWindow,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\CameraWindow.xaml.cs,ProcessFrame,The following statement contains a magic number: if (frame != null) {  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointshor' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointsver' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1);  }  
Magic Number,PickandPlace,CameraWindow,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\CameraWindow.xaml.cs,ProcessFrame,The following statement contains a magic number: if (frame != null) {  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointshor' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointsver' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1);  }  
Magic Number,PickandPlace,CameraWindow,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\CameraWindow.xaml.cs,ProcessFrame,The following statement contains a magic number: if (frame != null) {  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointshor' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointsver' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1);  }  
Magic Number,PickandPlace,CameraWindow,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\CameraWindow.xaml.cs,ProcessFrame,The following statement contains a magic number: if (frame != null) {  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointshor' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' System.Drawing.Point> (linepointsver' System.Drawing.Point.Round)' false' new Bgr (System.Drawing.Color.AntiqueWhite)' 1);  }  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (0' 30.6' 8.720' 3.2' "M90100"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (0' 30.6' 8.720' 3.2' "M90100"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (0' 30.6' 8.720' 3.2' "M90100"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (1' 50.53' 8.745' 3.0' "M90101"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (1' 50.53' 8.745' 3.0' "M90101"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (1' 50.53' 8.745' 3.0' "M90101"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (2' 70.6' 8.571' 3.2' "M90102"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (2' 70.6' 8.571' 3.2' "M90102"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (2' 70.6' 8.571' 3.2' "M90102"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (2' 70.6' 8.571' 3.2' "M90102"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (3' 90.4' 8.9' 2.3' "M90103"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (3' 90.4' 8.9' 2.3' "M90103"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (3' 90.4' 8.9' 2.3' "M90103"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (3' 90.4' 8.9' 2.3' "M90103"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (4' 110.35' 8.83' 2.8' "M90104"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (4' 110.35' 8.83' 2.8' "M90104"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (4' 110.35' 8.83' 2.8' "M90104"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (4' 110.35' 8.83' 2.8' "M90104"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (5' 130.7' 8.758' 2.6' "M90105"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (5' 130.7' 8.758' 2.6' "M90105"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (5' 130.7' 8.758' 2.6' "M90105"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (5' 130.7' 8.758' 2.6' "M90105"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (6' 150.33' 8.53' 2.6' "M90106"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (6' 150.33' 8.53' 2.6' "M90106"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (6' 150.33' 8.53' 2.6' "M90106"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (6' 150.33' 8.53' 2.6' "M90106"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (7' 170.0' 8.667' 3.2' "M90107"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (7' 170.0' 8.667' 3.2' "M90107"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (7' 170.0' 8.667' 3.2' "M90107"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (7' 170.0' 8.667' 3.2' "M90107"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (8' 189.76' 8.47' 3.2' "M90108"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (8' 189.76' 8.47' 3.2' "M90108"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (8' 189.76' 8.47' 3.2' "M90108"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (8' 189.76' 8.47' 3.2' "M90108"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (9' 209.75' 8.049' 3.2' "M90109"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (9' 209.75' 8.049' 3.2' "M90109"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (9' 209.75' 8.049' 3.2' "M90109"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (9' 209.75' 8.049' 3.2' "M90109"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (10' 229.63' 7.975' 3.2' "M90110"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (10' 229.63' 7.975' 3.2' "M90110"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (10' 229.63' 7.975' 3.2' "M90110"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (10' 229.63' 7.975' 3.2' "M90110"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (11' 249.5' 8.00' 3.2' "M90111"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (11' 249.5' 8.00' 3.2' "M90111"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (11' 249.5' 8.00' 3.2' "M90111"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (11' 249.5' 8.00' 3.2' "M90111"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (12' 269.39' 7.826' 3.2' "M90112"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (12' 269.39' 7.826' 3.2' "M90112"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (12' 269.39' 7.826' 3.2' "M90112"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (12' 269.39' 7.826' 3.2' "M90112"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (13' 289.17' 7.751' 3.2' "M90113"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (13' 289.17' 7.751' 3.2' "M90113"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (13' 289.17' 7.751' 3.2' "M90113"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (13' 289.17' 7.751' 3.2' "M90113"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (14' 309.17' 7.677' 3.2' "M90114"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (14' 309.17' 7.677' 3.2' "M90114"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (14' 309.17' 7.677' 3.2' "M90114"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (14' 309.17' 7.677' 3.2' "M90114"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (15' 328.77' 7.602' 3.2' "M90115"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (15' 328.77' 7.602' 3.2' "M90115"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (15' 328.77' 7.602' 3.2' "M90115"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (15' 328.77' 7.602' 3.2' "M90115"' false);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (21' 16.77' 386.21' 7.7' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (21' 16.77' 386.21' 7.7' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (21' 16.77' 386.21' 7.7' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (21' 16.77' 386.21' 7.7' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (22' 44.2' 385.99' 7.7' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (22' 44.2' 385.99' 7.7' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (22' 44.2' 385.99' 7.7' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (22' 44.2' 385.99' 7.7' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (23' 72.7' 386.21' 8.1' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (23' 72.7' 386.21' 8.1' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (23' 72.7' 386.21' 8.1' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (23' 72.7' 386.21' 8.1' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (24' 100.75' 386.21' 7.6' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (24' 100.75' 386.21' 7.6' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (24' 100.75' 386.21' 7.6' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (24' 100.75' 386.21' 7.6' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (25' 128.035' 385.808' 7.9' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (25' 128.035' 385.808' 7.9' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (25' 128.035' 385.808' 7.9' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (25' 128.035' 385.808' 7.9' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (26' 156.3' 385.85' 8.3' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (26' 156.3' 385.85' 8.3' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (26' 156.3' 385.85' 8.3' ""' true);  
Magic Number,PickandPlace,DataComponentFeeders,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\DataComponentFeeders.cs,POPFeedersTable,The following statement contains a magic number: dtfeeder.Rows.Add (26' 156.3' 385.85' 8.3' ""' true);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (totalrows > 0) {  	/* Components table columns                     ComponentCode                     ComponentName                     PlacementX                     PlacementY                     PlacementRotate                     PlacementNozzle                                    * component list                  * ComponentCode                  * ComponentValue                  * Package                  *                   * PlacementHeight                  * FeederHeight                  * FeederX                  * FeederY                  * VerifywithCamera                  * TapeFeeder                                                     * */double pcbHeight = double.Parse (dsData.Tables ["BoardInfo"].Rows [0] [1].ToString ());  	double feedrate = 20000;  	double feederPosX = 0;  	double feederPosY = 0;  	double feederPosZ = 0;  	double placePosX = 0;  	double placePosY = 0;  	//double placePosZ = 0;  	// double placePosA = 0;  	// double placePosRotateZ = 0;  	// double placePosRotateB = 0;  	double ComponentRotation = 0;  	double PlacementHeight = 0;  	int PlacementNozzle = 1;  	bool TapeFeeder = false;  	while (currentrow < totalrows) {  		if (backgroundWorkerBuildPCB.CancellationPending) {  			e.Cancel = true;  			dv.Dispose ();  			break;  		}  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  		feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  		PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  		TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  		placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  		placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  		ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  		PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  		if (currentrow == 0) {  			SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			while (!usbController.getFeederReadyStatus ()) {  				Thread.Sleep (10);  			}  			Thread.Sleep (50);  			// use picker 1  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  			Thread.Sleep (200);  			// go down and turn on suction  			usbController.setVAC1 (true);  			Thread.Sleep (150);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		else {  			// use picker 2  			while (usbController.CheckChipMotorRunning ()) {  				Thread.Sleep (10);  			}  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  			Thread.Sleep (200);  			usbController.setVAC2 (true);  			Thread.Sleep (300);  			kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  		}  		// send picker to pick next item  		if (currentrow >= 0 && (currentrow + 1) < totalrows) {  			Thread.Sleep (100);  			Thread.Sleep (100);  			SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  			// send feeder to position  		}  		// rotate head  		//SetResultsLabelText("Placing Component");  		if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  			Thread.Sleep (200);  			usbController.setVAC1 (false);  			Thread.Sleep (50);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		}  		else {  			// use picker 2  CalcXwithNeedleSpacing  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  			// go down and turn off suction  			Thread.Sleep (300);  			usbController.setVAC2 (false);  			Thread.Sleep (200);  			kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		}  		currentrow++;  	}  }  else {  	MessageBox.Show ("Board file not loaded");  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (currentrow < totalrows) {  	if (backgroundWorkerBuildPCB.CancellationPending) {  		e.Cancel = true;  		dv.Dispose ();  		break;  	}  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	feederPosX = CalcXLocation (comp.GetFeederX (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosY = CalcYLocation (comp.GetFeederY (dv [currentrow] ["ComponentCode"].ToString ())' PlacementNozzle);  	feederPosZ = comp.GetFeederHeight (dv [currentrow] ["ComponentCode"].ToString ());  	PlacementHeight = comp.GetPlacementHeight (dv [currentrow] ["ComponentCode"].ToString ()) - pcbHeight;  	TapeFeeder = comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ());  	placePosX = CalcXLocation (double.Parse (dv [currentrow] ["PlacementX"].ToString ())' PlacementNozzle);  	placePosY = CalcYLocation (double.Parse (dv [currentrow] ["PlacementY"].ToString ())' PlacementNozzle);  	ComponentRotation = double.Parse (dv [currentrow] ["PlacementRotate"].ToString ());  	PlacementNozzle = int.Parse (dv [currentrow] ["PlacementNozzle"].ToString ());  	if (currentrow == 0) {  		SetFeederOutputs (comp.GetFeederID (dv [currentrow] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		while (!usbController.getFeederReadyStatus ()) {  			Thread.Sleep (10);  		}  		Thread.Sleep (50);  		// use picker 1  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  		Thread.Sleep (200);  		// go down and turn on suction  		usbController.setVAC1 (true);  		Thread.Sleep (150);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	else {  		// use picker 2  		while (usbController.CheckChipMotorRunning ()) {  			Thread.Sleep (10);  		}  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  		Thread.Sleep (200);  		usbController.setVAC2 (true);  		Thread.Sleep (300);  		kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  	}  	// send picker to pick next item  	if (currentrow >= 0 && (currentrow + 1) < totalrows) {  		Thread.Sleep (100);  		Thread.Sleep (100);  		SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  		// send feeder to position  	}  	// rotate head  	//SetResultsLabelText("Placing Component");  	if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  		Thread.Sleep (200);  		usbController.setVAC1 (false);  		Thread.Sleep (50);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	}  	else {  		// use picker 2  CalcXwithNeedleSpacing  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  		// go down and turn off suction  		Thread.Sleep (300);  		usbController.setVAC2 (false);  		Thread.Sleep (200);  		kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	}  	currentrow++;  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	while (!usbController.getFeederReadyStatus ()) {  		Thread.Sleep (10);  	}  	Thread.Sleep (50);  	// use picker 1  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  	Thread.Sleep (200);  	// go down and turn on suction  	usbController.setVAC1 (true);  	Thread.Sleep (150);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  else {  	// use picker 2  	while (usbController.CheckChipMotorRunning ()) {  		Thread.Sleep (10);  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  	Thread.Sleep (200);  	usbController.setVAC2 (true);  	Thread.Sleep (300);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	while (!usbController.getFeederReadyStatus ()) {  		Thread.Sleep (10);  	}  	Thread.Sleep (50);  	// use picker 1  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  	Thread.Sleep (200);  	// go down and turn on suction  	usbController.setVAC1 (true);  	Thread.Sleep (150);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  else {  	// use picker 2  	while (usbController.CheckChipMotorRunning ()) {  		Thread.Sleep (10);  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  	Thread.Sleep (200);  	usbController.setVAC2 (true);  	Thread.Sleep (300);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	while (!usbController.getFeederReadyStatus ()) {  		Thread.Sleep (10);  	}  	Thread.Sleep (50);  	// use picker 1  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  	Thread.Sleep (200);  	// go down and turn on suction  	usbController.setVAC1 (true);  	Thread.Sleep (150);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  else {  	// use picker 2  	while (usbController.CheckChipMotorRunning ()) {  		Thread.Sleep (10);  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  	Thread.Sleep (200);  	usbController.setVAC2 (true);  	Thread.Sleep (300);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	while (!usbController.getFeederReadyStatus ()) {  		Thread.Sleep (10);  	}  	Thread.Sleep (50);  	// use picker 1  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  	Thread.Sleep (200);  	// go down and turn on suction  	usbController.setVAC1 (true);  	Thread.Sleep (150);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  else {  	// use picker 2  	while (usbController.CheckChipMotorRunning ()) {  		Thread.Sleep (10);  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  	Thread.Sleep (200);  	usbController.setVAC2 (true);  	Thread.Sleep (300);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	while (!usbController.getFeederReadyStatus ()) {  		Thread.Sleep (10);  	}  	Thread.Sleep (50);  	// use picker 1  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  	Thread.Sleep (200);  	// go down and turn on suction  	usbController.setVAC1 (true);  	Thread.Sleep (150);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  else {  	// use picker 2  	while (usbController.CheckChipMotorRunning ()) {  		Thread.Sleep (10);  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  	Thread.Sleep (200);  	usbController.setVAC2 (true);  	Thread.Sleep (300);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	while (!usbController.getFeederReadyStatus ()) {  		Thread.Sleep (10);  	}  	Thread.Sleep (50);  	// use picker 1  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  	Thread.Sleep (200);  	// go down and turn on suction  	usbController.setVAC1 (true);  	Thread.Sleep (150);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  else {  	// use picker 2  	while (usbController.CheckChipMotorRunning ()) {  		Thread.Sleep (10);  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  	Thread.Sleep (200);  	usbController.setVAC2 (true);  	Thread.Sleep (300);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	while (!usbController.getFeederReadyStatus ()) {  		Thread.Sleep (10);  	}  	Thread.Sleep (50);  	// use picker 1  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' feederPosZ' ClearHeight' 0' 0);  	Thread.Sleep (200);  	// go down and turn on suction  	usbController.setVAC1 (true);  	Thread.Sleep (150);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  else {  	// use picker 2  	while (usbController.CheckChipMotorRunning ()) {  		Thread.Sleep (10);  	}  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' feederPosZ' 0' 0);  	Thread.Sleep (200);  	usbController.setVAC2 (true);  	Thread.Sleep (300);  	kf.MoveSingleFeed (feedrate' feederPosX' feederPosY' ClearHeight' ClearHeight' 0' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (!usbController.getFeederReadyStatus ()) {  	Thread.Sleep (10);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (150);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: while (usbController.CheckChipMotorRunning ()) {  	Thread.Sleep (10);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (currentrow >= 0 && (currentrow + 1) < totalrows) {  	Thread.Sleep (100);  	Thread.Sleep (100);  	SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  	// send feeder to position  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (currentrow >= 0 && (currentrow + 1) < totalrows) {  	Thread.Sleep (100);  	Thread.Sleep (100);  	SetFeederOutputs (comp.GetFeederID (dv [currentrow + 1] ["ComponentCode"].ToString ()));  	// send feeder to position  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  	Thread.Sleep (200);  	usbController.setVAC1 (false);  	Thread.Sleep (50);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  }  else {  	// use picker 2  CalcXwithNeedleSpacing  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  	// go down and turn off suction  	Thread.Sleep (300);  	usbController.setVAC2 (false);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  	Thread.Sleep (200);  	usbController.setVAC1 (false);  	Thread.Sleep (50);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  }  else {  	// use picker 2  CalcXwithNeedleSpacing  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  	// go down and turn off suction  	Thread.Sleep (300);  	usbController.setVAC2 (false);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  	Thread.Sleep (200);  	usbController.setVAC1 (false);  	Thread.Sleep (50);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  }  else {  	// use picker 2  CalcXwithNeedleSpacing  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  	// go down and turn off suction  	Thread.Sleep (300);  	usbController.setVAC2 (false);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  	Thread.Sleep (200);  	usbController.setVAC1 (false);  	Thread.Sleep (50);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  }  else {  	// use picker 2  CalcXwithNeedleSpacing  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  	// go down and turn off suction  	Thread.Sleep (300);  	usbController.setVAC2 (false);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: if (comp.GetComponentTapeFeeder (dv [currentrow] ["ComponentCode"].ToString ())) {  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' PlacementHeight' ClearHeight' 0' ComponentRotation);  	Thread.Sleep (200);  	usbController.setVAC1 (false);  	Thread.Sleep (50);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' 0' ComponentRotation);  }  else {  	// use picker 2  CalcXwithNeedleSpacing  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' PlacementHeight' ComponentRotation' 0);  	// go down and turn off suction  	Thread.Sleep (300);  	usbController.setVAC2 (false);  	Thread.Sleep (200);  	kf.MoveSingleFeed (feedrate' placePosX' placePosY' ClearHeight' ClearHeight' ComponentRotation' 0);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,SetFeederOutputs,The following statement contains a magic number: if (feedercommand == 98) {  	// command set' now toggle interupt pin  	usbController.setResetFeeder ();  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,SetFeederOutputs,The following statement contains a magic number: if (feedercommand >= 20 && feedercommand < 30) {  	usbController.RunVibrationMotor (MotorRunLoop);  }  
Magic Number,PickandPlace,PCBBuilder,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\PCBBuilder.cs,SetFeederOutputs,The following statement contains a magic number: if (feedercommand >= 20 && feedercommand < 30) {  	usbController.RunVibrationMotor (MotorRunLoop);  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: foreach (DataRow row in dsData.Tables ["Components"].Rows) {  	Rectangle rect = new Rectangle ();  	double placex = double.Parse (row ["PlacementX"].ToString ()) - 20;  	double placey = double.Parse (row ["PlacementY"].ToString ()) - 80;  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 4;  		rect.Height = 8;  	}  	else {  		rect.Width = 8;  		rect.Height = 4;  	}  	if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  		if (row ["PlacementRotate"].ToString ().Equals ("0")) {  			rect.Width = 16;  			rect.Height = 8;  			placex = placex - 0.5;  			placey = placey - 1;  		}  		else {  			rect.Width = 8;  			rect.Height = 16;  			placex = placex - 1;  			placey = placey - 0.5;  		}  	}  	rect.Fill = new SolidColorBrush (Colors.Black);  	myCanvas.Children.Add (rect);  	Canvas.SetTop (rect' (placex * 7));  	Canvas.SetLeft (rect' (placey * 7));  	// = 1;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 4;  	rect.Height = 8;  }  else {  	rect.Width = 8;  	rect.Height = 4;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 4;  	rect.Height = 8;  }  else {  	rect.Width = 8;  	rect.Height = 4;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 4;  	rect.Height = 8;  }  else {  	rect.Width = 8;  	rect.Height = 4;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 4;  	rect.Height = 8;  }  else {  	rect.Width = 8;  	rect.Height = 4;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: rect.Width = 4;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: rect.Height = 8;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: rect.Width = 8;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: rect.Height = 4;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 16;  		rect.Height = 8;  		placex = placex - 0.5;  		placey = placey - 1;  	}  	else {  		rect.Width = 8;  		rect.Height = 16;  		placex = placex - 1;  		placey = placey - 0.5;  	}  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 16;  		rect.Height = 8;  		placex = placex - 0.5;  		placey = placey - 1;  	}  	else {  		rect.Width = 8;  		rect.Height = 16;  		placex = placex - 1;  		placey = placey - 0.5;  	}  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 16;  		rect.Height = 8;  		placex = placex - 0.5;  		placey = placey - 1;  	}  	else {  		rect.Width = 8;  		rect.Height = 16;  		placex = placex - 1;  		placey = placey - 0.5;  	}  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 16;  		rect.Height = 8;  		placex = placex - 0.5;  		placey = placey - 1;  	}  	else {  		rect.Width = 8;  		rect.Height = 16;  		placex = placex - 1;  		placey = placey - 0.5;  	}  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 16;  		rect.Height = 8;  		placex = placex - 0.5;  		placey = placey - 1;  	}  	else {  		rect.Width = 8;  		rect.Height = 16;  		placex = placex - 1;  		placey = placey - 0.5;  	}  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementNozzle"].ToString ().Equals ("2")) {  	if (row ["PlacementRotate"].ToString ().Equals ("0")) {  		rect.Width = 16;  		rect.Height = 8;  		placex = placex - 0.5;  		placey = placey - 1;  	}  	else {  		rect.Width = 8;  		rect.Height = 16;  		placex = placex - 1;  		placey = placey - 0.5;  	}  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 16;  	rect.Height = 8;  	placex = placex - 0.5;  	placey = placey - 1;  }  else {  	rect.Width = 8;  	rect.Height = 16;  	placex = placex - 1;  	placey = placey - 0.5;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 16;  	rect.Height = 8;  	placex = placex - 0.5;  	placey = placey - 1;  }  else {  	rect.Width = 8;  	rect.Height = 16;  	placex = placex - 1;  	placey = placey - 0.5;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 16;  	rect.Height = 8;  	placex = placex - 0.5;  	placey = placey - 1;  }  else {  	rect.Width = 8;  	rect.Height = 16;  	placex = placex - 1;  	placey = placey - 0.5;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 16;  	rect.Height = 8;  	placex = placex - 0.5;  	placey = placey - 1;  }  else {  	rect.Width = 8;  	rect.Height = 16;  	placex = placex - 1;  	placey = placey - 0.5;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 16;  	rect.Height = 8;  	placex = placex - 0.5;  	placey = placey - 1;  }  else {  	rect.Width = 8;  	rect.Height = 16;  	placex = placex - 1;  	placey = placey - 0.5;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: if (row ["PlacementRotate"].ToString ().Equals ("0")) {  	rect.Width = 16;  	rect.Height = 8;  	placex = placex - 0.5;  	placey = placey - 1;  }  else {  	rect.Width = 8;  	rect.Height = 16;  	placex = placex - 1;  	placey = placey - 0.5;  }  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: rect.Width = 16;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: rect.Height = 8;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: placex = placex - 0.5;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: rect.Width = 8;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: rect.Height = 16;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: placey = placey - 0.5;  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: Canvas.SetTop (rect' (placex * 7));  
Magic Number,PickandPlace,pcbvisualiser,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\pcbvisualiser.xaml.cs,MakePCB,The following statement contains a magic number: Canvas.SetLeft (rect' (placey * 7));  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,getDeviceStatus,The following statement contains a magic number: outputBuffer [2] = 0x01;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,getFeederReadyStatus,The following statement contains a magic number: outputBuffer [2] = 0x02;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setGotoFeeder,The following statement contains a magic number: outputBuffer [2] = 0x03;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setGotoFeeder,The following statement contains a magic number: outputBuffer [3] = inval;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setGotoFeederWithoutPick,The following statement contains a magic number: outputBuffer [2] = 0x08;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setGotoFeederWithoutPick,The following statement contains a magic number: outputBuffer [3] = inval;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setIOPort,The following statement contains a magic number: outputBuffer [2] = 0x07;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setIOPort,The following statement contains a magic number: outputBuffer [3] = b0;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setIOPort,The following statement contains a magic number: outputBuffer [4] = b1;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setPickerUp,The following statement contains a magic number: outputBuffer [2] = 0x04;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setResetFeeder,The following statement contains a magic number: outputBuffer [2] = 0x05;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setPickerDown,The following statement contains a magic number: outputBuffer [2] = 0x06;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,Vac1AirPulseSub,The following statement contains a magic number: while (n < AirPulseLength) {  	Thread.Sleep (10);  	n++;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,Vac1AirPulseSub,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,Vac2AirPulseSub,The following statement contains a magic number: while (n < AirPulseLength) {  	Thread.Sleep (10);  	n++;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,Vac2AirPulseSub,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC1Old,The following statement contains a magic number: outputBuffer [2] = 0x01;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC1Old,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC1Old,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC1Old,The following statement contains a magic number: outputBuffer [3] = 0x01;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC1Old,The following statement contains a magic number: outputBuffer [3] = 0x00;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC2Old,The following statement contains a magic number: outputBuffer [2] = 0x02;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC2Old,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC2Old,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC2Old,The following statement contains a magic number: outputBuffer [3] = 0x01;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVAC2Old,The following statement contains a magic number: outputBuffer [3] = 0x00;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunVibrationMotorSub,The following statement contains a magic number: while (n < MotorRunLoop) {  	Thread.Sleep (100);  	n++;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunVibrationMotorSub,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVibrationMotor,The following statement contains a magic number: outputBuffer [2] = 0x03;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVibrationMotor,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVibrationMotor,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVibrationMotor,The following statement contains a magic number: outputBuffer [3] = 0x01;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setVibrationMotor,The following statement contains a magic number: outputBuffer [3] = 0x00;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,getVac1Status,The following statement contains a magic number: outputBuffer [2] = 0x04;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,getVac2Status,The following statement contains a magic number: outputBuffer [2] = 0x05;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,getVibrationStatus,The following statement contains a magic number: outputBuffer [2] = 0x06;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setBaseCameraLED,The following statement contains a magic number: outputBuffer [2] = 0x01;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setBaseCameraLED,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setBaseCameraLED,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setBaseCameraLED,The following statement contains a magic number: outputBuffer [3] = 0x01;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setBaseCameraLED,The following statement contains a magic number: outputBuffer [3] = 0x00;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setHeadCameraLED,The following statement contains a magic number: outputBuffer [2] = 0x03;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setHeadCameraLED,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setHeadCameraLED,The following statement contains a magic number: if (inval) {  	outputBuffer [3] = 0x01;  }  else {  	outputBuffer [3] = 0x00;  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setHeadCameraLED,The following statement contains a magic number: outputBuffer [3] = 0x01;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setHeadCameraLED,The following statement contains a magic number: outputBuffer [3] = 0x00;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setBaseCameraPWM,The following statement contains a magic number: outputBuffer [2] = 0x02;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setBaseCameraPWM,The following statement contains a magic number: outputBuffer [3] = inval;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setHeadCameraPWM,The following statement contains a magic number: outputBuffer [2] = 0x04;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,setHeadCameraPWM,The following statement contains a magic number: outputBuffer [3] = inval;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,getBaseCameraLEDStatus,The following statement contains a magic number: outputBuffer [2] = 0x05;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,getHeadCameraLEDStatus,The following statement contains a magic number: outputBuffer [2] = 0x06;  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: setVibrationMotorSpeed (250);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: if (fulltest) {  	setResetFeeder ();  	Thread.Sleep (200);  	setVibrationMotor (true);  	Thread.Sleep (500);  	setVibrationMotor (false);  	setVibrationMotorSpeed (250);  	Thread.Sleep (100);  	setHeadCameraLED (true);  	Thread.Sleep (100);  	setHeadCameraLED (false);  	Thread.Sleep (100);  	setBaseCameraLED (true);  	Thread.Sleep (100);  	setBaseCameraLED (false);  	Thread.Sleep (100);  	//setVAC1(true);  	Thread.Sleep (100);  	//setVAC1(false);  	Thread.Sleep (100);  	//setVAC2(true);  	Thread.Sleep (100);  	//setVAC2(false);  }  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: setVibrationMotorSpeed (250);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,usbDevice,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\usbDevice.cs,RunBoardInit,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,StartCamera,The following statement contains a magic number: capture.SetCaptureProperty (Emgu.CV.CvEnum.CAP_PROP.CV_CAP_PROP_BRIGHTNESS' 33);  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,StartCamera,The following statement contains a magic number: capture.SetCaptureProperty (Emgu.CV.CvEnum.CAP_PROP.CV_CAP_PROP_CONTRAST' 54);  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,StartCamera,The following statement contains a magic number: capture.SetCaptureProperty (Emgu.CV.CvEnum.CAP_PROP.CV_CAP_PROP_EXPOSURE' -7);  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetVideoData,The following statement contains a magic number: while (!CameraHasData || cappturecounter <= 20) {  	GetCameraXY (picturebox1' picturebox2);  	cappturecounter++;  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (frame != null) {  	Image<Gray' Byte> gray = frame.Convert<Gray' Byte> ();  	double cannyThreshold = 180.0;  	double cannyThresholdLinking = 120.0;  	Image<Gray' Byte> cannyEdges = gray.Canny (cannyThreshold' cannyThresholdLinking);  	List<Triangle2DF> triangleList = new List<Triangle2DF> ();  	List<MCvBox2D> boxList = new List<MCvBox2D> ();  	//a box is a rotated rectangle  	using (MemStorage storage = new MemStorage ())  		//allocate storage for contour approximation  		for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  			Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  			if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  			 {  				if (currentContour.Total == 4)//The contour has 4 vertices.  				 {  					// determine if all the angles in the contour are within [80' 100] degree  					bool isRectangle = true;  					Point[] pts = currentContour.ToArray ();  					LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  					for (int i = 0; i < edges.Length; i++) {  						double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  						if (angle < 80 || angle > 100) {  							isRectangle = false;  							break;  						}  					}  					if (isRectangle)  						boxList.Add (currentContour.GetMinAreaRect ());  				}  			}  		}  	Image<Bgr' Byte> triangleRectangleImage = frame.CopyBlank ();  	foreach (Triangle2DF triangle in triangleList)  		triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  	foreach (MCvBox2D box in boxList) {  		/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  		triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  	}  	// add cross hairs to image  	int totalwidth = frame.Width;  	int totalheight = frame.Height;  	PointF[] linepointshor = new PointF[] {  		new PointF (0' totalheight / 2)'  		new PointF (totalwidth' totalheight / 2)  	};  	PointF[] linepointsver = new PointF[] {  		new PointF (totalwidth / 2' 0)'  		new PointF (totalwidth / 2' totalheight)  	};  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	triangleRectangleImage.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox2.Image = triangleRectangleImage.ToBitmap ();  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointshor' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	frame.DrawPolyline (Array.ConvertAll<PointF' Point> (linepointsver' Point.Round)' false' new Bgr (Color.AntiqueWhite)' 1);  	picturebox1.Image = frame.ToBitmap ();  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: using (MemStorage storage = new MemStorage ())  	//allocate storage for contour approximation  	for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  		Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  		if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  		 {  			if (currentContour.Total == 4)//The contour has 4 vertices.  			 {  				// determine if all the angles in the contour are within [80' 100] degree  				bool isRectangle = true;  				Point[] pts = currentContour.ToArray ();  				LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  				for (int i = 0; i < edges.Length; i++) {  					double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  					if (angle < 80 || angle > 100) {  						isRectangle = false;  						break;  					}  				}  				if (isRectangle)  					boxList.Add (currentContour.GetMinAreaRect ());  			}  		}  	}  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: using (MemStorage storage = new MemStorage ())  	//allocate storage for contour approximation  	for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  		Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  		if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  		 {  			if (currentContour.Total == 4)//The contour has 4 vertices.  			 {  				// determine if all the angles in the contour are within [80' 100] degree  				bool isRectangle = true;  				Point[] pts = currentContour.ToArray ();  				LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  				for (int i = 0; i < edges.Length; i++) {  					double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  					if (angle < 80 || angle > 100) {  						isRectangle = false;  						break;  					}  				}  				if (isRectangle)  					boxList.Add (currentContour.GetMinAreaRect ());  			}  		}  	}  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: using (MemStorage storage = new MemStorage ())  	//allocate storage for contour approximation  	for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  		Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  		if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  		 {  			if (currentContour.Total == 4)//The contour has 4 vertices.  			 {  				// determine if all the angles in the contour are within [80' 100] degree  				bool isRectangle = true;  				Point[] pts = currentContour.ToArray ();  				LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  				for (int i = 0; i < edges.Length; i++) {  					double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  					if (angle < 80 || angle > 100) {  						isRectangle = false;  						break;  					}  				}  				if (isRectangle)  					boxList.Add (currentContour.GetMinAreaRect ());  			}  		}  	}  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: using (MemStorage storage = new MemStorage ())  	//allocate storage for contour approximation  	for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  		Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  		if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  		 {  			if (currentContour.Total == 4)//The contour has 4 vertices.  			 {  				// determine if all the angles in the contour are within [80' 100] degree  				bool isRectangle = true;  				Point[] pts = currentContour.ToArray ();  				LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  				for (int i = 0; i < edges.Length; i++) {  					double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  					if (angle < 80 || angle > 100) {  						isRectangle = false;  						break;  					}  				}  				if (isRectangle)  					boxList.Add (currentContour.GetMinAreaRect ());  			}  		}  	}  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: using (MemStorage storage = new MemStorage ())  	//allocate storage for contour approximation  	for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  		Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  		if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  		 {  			if (currentContour.Total == 4)//The contour has 4 vertices.  			 {  				// determine if all the angles in the contour are within [80' 100] degree  				bool isRectangle = true;  				Point[] pts = currentContour.ToArray ();  				LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  				for (int i = 0; i < edges.Length; i++) {  					double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  					if (angle < 80 || angle > 100) {  						isRectangle = false;  						break;  					}  				}  				if (isRectangle)  					boxList.Add (currentContour.GetMinAreaRect ());  			}  		}  	}  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: using (MemStorage storage = new MemStorage ())  	//allocate storage for contour approximation  	for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  		Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  		if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  		 {  			if (currentContour.Total == 4)//The contour has 4 vertices.  			 {  				// determine if all the angles in the contour are within [80' 100] degree  				bool isRectangle = true;  				Point[] pts = currentContour.ToArray ();  				LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  				for (int i = 0; i < edges.Length; i++) {  					double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  					if (angle < 80 || angle > 100) {  						isRectangle = false;  						break;  					}  				}  				if (isRectangle)  					boxList.Add (currentContour.GetMinAreaRect ());  			}  		}  	}  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  	Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  	if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  	 {  		if (currentContour.Total == 4)//The contour has 4 vertices.  		 {  			// determine if all the angles in the contour are within [80' 100] degree  			bool isRectangle = true;  			Point[] pts = currentContour.ToArray ();  			LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  			for (int i = 0; i < edges.Length; i++) {  				double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  				if (angle < 80 || angle > 100) {  					isRectangle = false;  					break;  				}  			}  			if (isRectangle)  				boxList.Add (currentContour.GetMinAreaRect ());  		}  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  	Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  	if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  	 {  		if (currentContour.Total == 4)//The contour has 4 vertices.  		 {  			// determine if all the angles in the contour are within [80' 100] degree  			bool isRectangle = true;  			Point[] pts = currentContour.ToArray ();  			LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  			for (int i = 0; i < edges.Length; i++) {  				double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  				if (angle < 80 || angle > 100) {  					isRectangle = false;  					break;  				}  			}  			if (isRectangle)  				boxList.Add (currentContour.GetMinAreaRect ());  		}  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  	Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  	if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  	 {  		if (currentContour.Total == 4)//The contour has 4 vertices.  		 {  			// determine if all the angles in the contour are within [80' 100] degree  			bool isRectangle = true;  			Point[] pts = currentContour.ToArray ();  			LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  			for (int i = 0; i < edges.Length; i++) {  				double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  				if (angle < 80 || angle > 100) {  					isRectangle = false;  					break;  				}  			}  			if (isRectangle)  				boxList.Add (currentContour.GetMinAreaRect ());  		}  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  	Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  	if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  	 {  		if (currentContour.Total == 4)//The contour has 4 vertices.  		 {  			// determine if all the angles in the contour are within [80' 100] degree  			bool isRectangle = true;  			Point[] pts = currentContour.ToArray ();  			LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  			for (int i = 0; i < edges.Length; i++) {  				double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  				if (angle < 80 || angle > 100) {  					isRectangle = false;  					break;  				}  			}  			if (isRectangle)  				boxList.Add (currentContour.GetMinAreaRect ());  		}  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  	Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  	if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  	 {  		if (currentContour.Total == 4)//The contour has 4 vertices.  		 {  			// determine if all the angles in the contour are within [80' 100] degree  			bool isRectangle = true;  			Point[] pts = currentContour.ToArray ();  			LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  			for (int i = 0; i < edges.Length; i++) {  				double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  				if (angle < 80 || angle > 100) {  					isRectangle = false;  					break;  				}  			}  			if (isRectangle)  				boxList.Add (currentContour.GetMinAreaRect ());  		}  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: for (Contour<Point> contours = cannyEdges.FindContours (Emgu.CV.CvEnum.CHAIN_APPROX_METHOD.CV_CHAIN_APPROX_SIMPLE' Emgu.CV.CvEnum.RETR_TYPE.CV_RETR_LIST' storage); contours != null; contours = contours.HNext) {  	Contour<Point> currentContour = contours.ApproxPoly (contours.Perimeter * 0.05' storage);  	if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250  	 {  		if (currentContour.Total == 4)//The contour has 4 vertices.  		 {  			// determine if all the angles in the contour are within [80' 100] degree  			bool isRectangle = true;  			Point[] pts = currentContour.ToArray ();  			LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  			for (int i = 0; i < edges.Length; i++) {  				double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  				if (angle < 80 || angle > 100) {  					isRectangle = false;  					break;  				}  			}  			if (isRectangle)  				boxList.Add (currentContour.GetMinAreaRect ());  		}  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250   {  	if (currentContour.Total == 4)//The contour has 4 vertices.  	 {  		// determine if all the angles in the contour are within [80' 100] degree  		bool isRectangle = true;  		Point[] pts = currentContour.ToArray ();  		LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  		for (int i = 0; i < edges.Length; i++) {  			double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  			if (angle < 80 || angle > 100) {  				isRectangle = false;  				break;  			}  		}  		if (isRectangle)  			boxList.Add (currentContour.GetMinAreaRect ());  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250   {  	if (currentContour.Total == 4)//The contour has 4 vertices.  	 {  		// determine if all the angles in the contour are within [80' 100] degree  		bool isRectangle = true;  		Point[] pts = currentContour.ToArray ();  		LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  		for (int i = 0; i < edges.Length; i++) {  			double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  			if (angle < 80 || angle > 100) {  				isRectangle = false;  				break;  			}  		}  		if (isRectangle)  			boxList.Add (currentContour.GetMinAreaRect ());  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250   {  	if (currentContour.Total == 4)//The contour has 4 vertices.  	 {  		// determine if all the angles in the contour are within [80' 100] degree  		bool isRectangle = true;  		Point[] pts = currentContour.ToArray ();  		LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  		for (int i = 0; i < edges.Length; i++) {  			double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  			if (angle < 80 || angle > 100) {  				isRectangle = false;  				break;  			}  		}  		if (isRectangle)  			boxList.Add (currentContour.GetMinAreaRect ());  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250   {  	if (currentContour.Total == 4)//The contour has 4 vertices.  	 {  		// determine if all the angles in the contour are within [80' 100] degree  		bool isRectangle = true;  		Point[] pts = currentContour.ToArray ();  		LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  		for (int i = 0; i < edges.Length; i++) {  			double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  			if (angle < 80 || angle > 100) {  				isRectangle = false;  				break;  			}  		}  		if (isRectangle)  			boxList.Add (currentContour.GetMinAreaRect ());  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (currentContour.Area > 400 && currentContour.Area < 20000)//only consider contours with area greater than 250   {  	if (currentContour.Total == 4)//The contour has 4 vertices.  	 {  		// determine if all the angles in the contour are within [80' 100] degree  		bool isRectangle = true;  		Point[] pts = currentContour.ToArray ();  		LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  		for (int i = 0; i < edges.Length; i++) {  			double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  			if (angle < 80 || angle > 100) {  				isRectangle = false;  				break;  			}  		}  		if (isRectangle)  			boxList.Add (currentContour.GetMinAreaRect ());  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (currentContour.Total == 4)//The contour has 4 vertices.   {  	// determine if all the angles in the contour are within [80' 100] degree  	bool isRectangle = true;  	Point[] pts = currentContour.ToArray ();  	LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  	for (int i = 0; i < edges.Length; i++) {  		double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  		if (angle < 80 || angle > 100) {  			isRectangle = false;  			break;  		}  	}  	if (isRectangle)  		boxList.Add (currentContour.GetMinAreaRect ());  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (currentContour.Total == 4)//The contour has 4 vertices.   {  	// determine if all the angles in the contour are within [80' 100] degree  	bool isRectangle = true;  	Point[] pts = currentContour.ToArray ();  	LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  	for (int i = 0; i < edges.Length; i++) {  		double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  		if (angle < 80 || angle > 100) {  			isRectangle = false;  			break;  		}  	}  	if (isRectangle)  		boxList.Add (currentContour.GetMinAreaRect ());  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (currentContour.Total == 4)//The contour has 4 vertices.   {  	// determine if all the angles in the contour are within [80' 100] degree  	bool isRectangle = true;  	Point[] pts = currentContour.ToArray ();  	LineSegment2D[] edges = PointCollection.PolyLine (pts' true);  	for (int i = 0; i < edges.Length; i++) {  		double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  		if (angle < 80 || angle > 100) {  			isRectangle = false;  			break;  		}  	}  	if (isRectangle)  		boxList.Add (currentContour.GetMinAreaRect ());  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: for (int i = 0; i < edges.Length; i++) {  	double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  	if (angle < 80 || angle > 100) {  		isRectangle = false;  		break;  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: for (int i = 0; i < edges.Length; i++) {  	double angle = Math.Abs (edges [(i + 1) % edges.Length].GetExteriorAngleDegree (edges [i]));  	if (angle < 80 || angle > 100) {  		isRectangle = false;  		break;  	}  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (angle < 80 || angle > 100) {  	isRectangle = false;  	break;  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: if (angle < 80 || angle > 100) {  	isRectangle = false;  	break;  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: foreach (Triangle2DF triangle in triangleList)  	triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: triangleRectangleImage.Draw (triangle' new Bgr (Color.DarkBlue)' 2);  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: foreach (MCvBox2D box in boxList) {  	/*                     frm.SetText(frm.Controls["textBoxImageY"]' box.center.Y.ToString());                     frm.SetText(frm.Controls["textBoxDeg"]' box.angle.ToString());                     frm.SetText(frm.Controls["textBoxImageX"]' box.center.X.ToString());                      * */CameraHasData = true;  	triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  }  
Magic Number,PickandPlace,VideoProcessing,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\VideoProcessing.cs,GetCameraXY,The following statement contains a magic number: triangleRectangleImage.Draw (box' new Bgr (Color.DarkOrange)' 2);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _XAxis.CPU = 1000;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _YAxis.CPU = 1000;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _ZAxis.CPU = 1000;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _AAxis.CPU = 1000;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _BAxis.CPU = 1000;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _CAxis.CPU = 1000;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _ZAxis.HomingParams.DefaultThread = 5;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _ZAxis.HomingParams.HomeFastVel = 300;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _ZAxis.HomingParams.HomeSlowVel = 70;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _ZAxis.HomingParams.HomeLimitBit = 21;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _ZAxis.HomingParams.StatusBit = 21;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _AAxis.HomingParams.DefaultThread = 2;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _AAxis.HomingParams.HomeFastVel = 300;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _AAxis.HomingParams.HomeSlowVel = 70;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _AAxis.HomingParams.HomeLimitBit = 23;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _AAxis.HomingParams.SequencePriority = 2;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _AAxis.HomingParams.StatusBit = 23;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _XAxis.HomingParams.DefaultThread = 3;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _XAxis.HomingParams.HomeFastVel = 250;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _XAxis.HomingParams.HomeSlowVel = 80;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _XAxis.HomingParams.HomeLimitBit = 19;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _XAxis.HomingParams.SequencePriority = 3;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _XAxis.HomingParams.StatusBit = 19;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _YAxis.HomingParams.DefaultThread = 4;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _YAxis.HomingParams.HomeFastVel = 800;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _YAxis.HomingParams.HomeSlowVel = 70;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _YAxis.HomingParams.HomeLimitBit = 25;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _YAxis.HomingParams.SequencePriority = 4;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _YAxis.HomingParams.StatusBit = 25;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _Controller.CoordMotion.MotionParams.CountsPerInchX = 171.405629;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _Controller.CoordMotion.MotionParams.CountsPerInchY = 416.3108547;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _Controller.CoordMotion.MotionParams.CountsPerInchZ = 342.245989;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _Controller.CoordMotion.MotionParams.CountsPerInchA = 342.245989;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _Controller.CoordMotion.MotionParams.CountsPerInchB = 8.88888;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _Controller.CoordMotion.MotionParams.CountsPerInchC = 8.88888;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _Controller.CoordMotion.MotionParams.MaxAccelZ = 2e+006;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevicesettings,The following statement contains a magic number: _Controller.CoordMotion.MotionParams.MaxVelZ = 20000;  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevice,The following statement contains a magic number: _ZAxis = new KMotion_dotNet.KM_Axis (_Controller' 2' "z");  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevice,The following statement contains a magic number: _AAxis = new KMotion_dotNet.KM_Axis (_Controller' 3' "a");  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevice,The following statement contains a magic number: _BAxis = new KMotion_dotNet.KM_Axis (_Controller' 4' "b");  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,initdevice,The following statement contains a magic number: _CAxis = new KMotion_dotNet.KM_Axis (_Controller' 5' "c");  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: _ZAxis.Jog (3);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: _AAxis.Jog (3);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: while (!_ZAxis.MotionComplete ()) {  	Thread.Sleep (50);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: while (!_AAxis.MotionComplete ()) {  	Thread.Sleep (50);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: while (!_XAxis.MotionComplete ()) {  	Thread.Sleep (50);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: while (!_YAxis.MotionComplete ()) {  	Thread.Sleep (50);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,RunHomeAll,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,SetPickerHome,The following statement contains a magic number: _ZAxis.SetCurrentPosition (38.0);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,SetPickerHome,The following statement contains a magic number: _AAxis.SetCurrentPosition (38.0);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveXAxis,The following statement contains a magic number: while (!_XAxis.MotionComplete ()) {  	Thread.Sleep (10);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveXAxis,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveYAxis,The following statement contains a magic number: while (!_YAxis.MotionComplete ()) {  	Thread.Sleep (10);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveYAxis,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveZAxis,The following statement contains a magic number: while (!_ZAxis.MotionComplete ()) {  	Thread.Sleep (10);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveZAxis,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveAAxis,The following statement contains a magic number: while (!_AAxis.MotionComplete ()) {  	Thread.Sleep (10);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveAAxis,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveBAxis,The following statement contains a magic number: while (!_BAxis.MotionComplete ()) {  	Thread.Sleep (10);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveBAxis,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveCAxis,The following statement contains a magic number: while (!_CAxis.MotionComplete ()) {  	Thread.Sleep (10);  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveCAxis,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: for (int i = 0; i < array.Length; i++) {  	speed = array [i' 0];  	if (!array [i' 1].Equals (currentX)) {  		currentX = array [i' 1];  	}  	if (!array [i' 2].Equals (currentY)) {  		currentY = array [i' 2];  	}  	if (!array [i' 3].Equals (currentZ)) {  		currentZ = array [i' 3];  	}  	if (!array [i' 4].Equals (currentA)) {  		currentA = array [i' 4];  	}  	if (!array [i' 5].Equals (currentB)) {  		currentB = array [i' 5];  	}  	if (!array [i' 6].Equals (currentC)) {  		currentC = array [i' 6];  	}  	_Controller.CoordMotion.StraightTraverse (currentX' currentY' currentZ' currentA' currentB' currentC' true);  	_Controller.CoordMotion.WaitForSegmentsFinished (true);  	_Controller.CoordMotion.FlushSegments ();  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 2].Equals (currentY)) {  	currentY = array [i' 2];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 2].Equals (currentY)) {  	currentY = array [i' 2];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: currentY = array [i' 2];  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 3].Equals (currentZ)) {  	currentZ = array [i' 3];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 3].Equals (currentZ)) {  	currentZ = array [i' 3];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: currentZ = array [i' 3];  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 4].Equals (currentA)) {  	currentA = array [i' 4];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 4].Equals (currentA)) {  	currentA = array [i' 4];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: currentA = array [i' 4];  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 5].Equals (currentB)) {  	currentB = array [i' 5];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 5].Equals (currentB)) {  	currentB = array [i' 5];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: currentB = array [i' 5];  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 6].Equals (currentC)) {  	currentC = array [i' 6];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: if (!array [i' 6].Equals (currentC)) {  	currentC = array [i' 6];  }  
Magic Number,PickandPlace,kflop,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\kflop.cs,MoveArrayFeed,The following statement contains a magic number: currentC = array [i' 6];  
Magic Number,PickandPlace.ImageButton,ImageButton,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\ImageButton.cs,ImageButton,The following statement contains a magic number: _image.Margin = new System.Windows.Thickness (0' 0' 0' 5);  
Magic Number,PickandPlace.ImageButton,ImageButton,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\ImageButton.cs,ImageButton,The following statement contains a magic number: _textBlock.FontSize = 15;  
Magic Number,PickandPlace.Pages,ManualControl,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\ManualControl.xaml.cs,bt_ChipFeeder_Click,The following statement contains a magic number: usbController.RunVibrationMotor (25);  
Magic Number,PickandPlace.Pages,BoardDesigner,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardDesigner.xaml.cs,bt_SaveFle_Click,The following statement contains a magic number: if (txt_BoardName.Text.Length > 0) {  	dscomponents.Tables ["BoardInfo"].Rows.Add (txt_BoardName.Text' Double.Parse (txt_BoardHeight.Text)' 20);  	SaveFileDialog saveFileDialog = new SaveFileDialog ();  	saveFileDialog.Filter = "Xml file (*.xml)|*.xml";  	if (saveFileDialog.ShowDialog () == true) {  		System.IO.StreamWriter xmlSW = new System.IO.StreamWriter (saveFileDialog.FileName);  		dscomponents.WriteXml (xmlSW' XmlWriteMode.WriteSchema);  		xmlSW.Close ();  		MessageBox.Show ("File Saved");  	}  }  else {  	MessageBox.Show ("Please enter the PCB Board name");  }  
Magic Number,PickandPlace.Pages,BoardDesigner,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardDesigner.xaml.cs,bt_SaveFle_Click,The following statement contains a magic number: dscomponents.Tables ["BoardInfo"].Rows.Add (txt_BoardName.Text' Double.Parse (txt_BoardHeight.Text)' 20);  
Magic Number,PickandPlace.Pages,BoardDesigner,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardDesigner.xaml.cs,bt_addrow_Click,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PickandPlace.Pages,BoardDesigner,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardDesigner.xaml.cs,bt_addrow_Click,The following statement contains a magic number: if (txt_ComName.Text.Length > 0) {  	Int32 ComponentCode = Int32.Parse (dd_ComponentSelect.SelectedValue.ToString ());  	string ComponentName = txt_ComName.Text + " - " + comp.GetComponentValue (dd_ComponentSelect.SelectedValue.ToString ());  	double PlacementX = double.Parse (txt_CameraX.Text);  	double PlacementY = double.Parse (txt_CameraY.Text);  	int PlacementRotate = int.Parse (txt_Rotate.Text);  	int PlacementNozzle = 1;  	if (check_1.IsChecked.Value == true) {  		PlacementNozzle = 1;  	}  	else {  		PlacementNozzle = 2;  	}  	dscomponents.Tables ["Components"].Rows.Add (ComponentCode' ComponentName' PlacementX' PlacementY' PlacementRotate' PlacementNozzle' true);  	lblInfo.Content = dscomponents.Tables ["Components"].Rows.Count.ToString () + " components added";  }  else {  	MessageBox.Show ("Please enter the component Ref ID");  }  
Magic Number,PickandPlace.Pages,BoardDesigner,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardDesigner.xaml.cs,bt_addrow_Click,The following statement contains a magic number: if (check_1.IsChecked.Value == true) {  	PlacementNozzle = 1;  }  else {  	PlacementNozzle = 2;  }  
Magic Number,PickandPlace.Pages,BoardDesigner,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardDesigner.xaml.cs,bt_addrow_Click,The following statement contains a magic number: PlacementNozzle = 2;  
Magic Number,PickandPlace.Pages,BoardPage,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardPage.xaml.cs,bt_Load_Click,The following statement contains a magic number: if (result == true) {  	// Open document   	string filename = dlg.FileName;  	dsData.ReadXml (dlg.FileName);  	dtComponents = dsData.Tables ["Components"];  	dtBoardInfo = dsData.Tables ["BoardInfo"];  	ItemTitle.Text = dsData.Tables ["BoardInfo"].Rows [0] [0].ToString ();  	csfeeder.Text = dsData.Tables ["BoardInfo"].Rows [0] [2].ToString ();  }  
Magic Number,PickandPlace.Pages,BoardPage,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardPage.xaml.cs,bt_Load_Click,The following statement contains a magic number: csfeeder.Text = dsData.Tables ["BoardInfo"].Rows [0] [2].ToString ();  
Magic Number,PickandPlace.Pages,BoardPage,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardPage.xaml.cs,bt_Save_Click,The following statement contains a magic number: if (saveFileDialog.ShowDialog () == true) {  	dsData.Tables ["BoardInfo"].Rows [0] [2] = csfeeder.Text;  	System.IO.StreamWriter xmlSW = new System.IO.StreamWriter (saveFileDialog.FileName);  	dsData.WriteXml (xmlSW' XmlWriteMode.WriteSchema);  	xmlSW.Close ();  	MessageBox.Show ("File Saved");  }  
Magic Number,PickandPlace.Pages,BoardPage,C:\repos\briandorey_ModernUI-Pick-and-Place-Controller-Software\PickandPlace\PickandPlace\Pages\BoardPage.xaml.cs,bt_Save_Click,The following statement contains a magic number: dsData.Tables ["BoardInfo"].Rows [0] [2] = csfeeder.Text;  
