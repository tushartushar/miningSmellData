Implementation smell,Namespace,Class,File,Method,Description
Long Method,MassTransit.AzurePerformance.Receiver,ReceiverWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Receiver\ReceiverWorker.cs,Run,The method has 117 lines of code.
Long Statement,MassTransit.AzurePerformance.Receiver,ReceiverWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Receiver\ReceiverWorker.cs,Run,The length of the statement  " datapoints.Select(x => x.SampleMessage).All(x => x.Payload.Equals(TestData.PayloadMessage' StringComparison.InvariantCulture))' " is 127.
Magic Number,MassTransit.AzurePerformance.Receiver,ReceiverWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Receiver\ReceiverWorker.cs,Run,The following statement contains a magic number: using (var sb = ServiceBusFactory.New(sbc =>  				{  					sbc.ReceiveFrom(creds.BuildUri("receiver"));    					sbc.SetPurgeOnStartup(true);  					sbc.UseNLog();  					sbc.UseAzureServiceBus();  					sbc.UseAzureServiceBusRouting();  				}))  			{  				UnsubscribeAction unsubscribeMe = null;  				unsubscribeMe += sb.SubscribeHandler<SenderUp>(su =>  					{  						_logger.Info("received SenderUp!");    						lock (senders)  						{  							var endpoint = sb.GetEndpoint(su.Source);  							if (!senders.Any(x => x.Address.Uri.Equals(endpoint.Address.Uri))   								&& allSendersUp.CurrentCount < maxSenders)  							{  								senders.AddLast(endpoint);  								allSendersUp.Signal();  							}  						}  					});    				_logger.Info("waiting for all senders ...");  				allSendersUp.Wait();    				_logger.Info("sending 'ReadySetGo' to all senders");    				lock (senders)  					senders.Each(sender => sender.Send<ReadySetGo>(new {}));    				//unsubscribeMe = sb.SubscribeHandler<IConsumeContext<ZoomZoom>>(consumeContext =>  				unsubscribeMe += sb.SubscribeHandler<ZoomZoom>(payment =>  					{  						//var payment = consumeContext.Message;  						  						long currentReceived;  						if ((currentReceived = Interlocked.Increment(ref received)) == rampUp)  							watch.Start();  						else if (currentReceived < rampUp) return;    						var localFailures = new long?();  						if (Math.Abs(payment.Amount - 1024m) > 0.0001m)  						{  							localFailures = Interlocked.Increment(ref failures);  						}    						if (currentReceived + rampUp == sampleSize || _isStopping)  						{  							unsubscribeMe();  							watch.Stop();  							stopping.Set();  						}    						if (currentReceived % 100 == 0)  						{  							var point = new DataPoint  								{  									Received = currentReceived'  									Ticks = watch.ElapsedTicks'  									Failures = localFailures ?? failures'  									SampleMessage = payment'  									Instance = DateTime.UtcNow  									/* assume all prev 100 msgs same size */  									//Size = consumeContext.BaseContext.BodyStream.Length * 100   								};  							lock (datapoints) datapoints.AddLast(point);  							_logger.Debug(string.Format("Logging {0}"' point));  						}  					});    				PipelineViewer.Trace(sb.InboundPipeline);    				_logger.Info("waiting for all messages!");  				stopping.WaitOne();      				sb.GetEndpoint(creds.BuildUri("sender")).Send<ZoomDone>(new{});  			}
Magic Number,MassTransit.AzurePerformance.Receiver,ReceiverWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Receiver\ReceiverWorker.cs,Run,The following statement contains a magic number: while (true)  				Thread.Sleep(10000);
Magic Number,MassTransit.AzurePerformance.Receiver,ReceiverWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Receiver\ReceiverWorker.cs,OnStart,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 12;
