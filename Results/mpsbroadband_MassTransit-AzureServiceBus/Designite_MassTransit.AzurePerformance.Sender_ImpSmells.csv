Implementation smell,Namespace,Class,File,Method,Description
Magic Number,MassTransit.AzurePerformance.Sender,SenderWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Sender\SenderWorker.cs,Run,The following statement contains a magic number: using (var sb = ServiceBusFactory.New(sbc =>  				{  					sbc.ReceiveFromComponents(creds);  					sbc.UseAzureServiceBus();  					sbc.UseAzureServiceBusRouting();  					sbc.UseNLog();  					//sbc.UseGraphite();  					sbc.Subscribe(s =>  						{  							s.Handler<ZoomDone>(zd => { _isStopping = true; });  							s.Handler<ReadySetGo>(go => startSignal.Set());  						});  				}))  			{  				var receiver = sb.GetEndpoint(creds.BuildUri("receiver"));    				receiver.Send<SenderUp>(new { Source = creds.BuildUri() });    				startSignal.Wait();    				var count = 0;  				var watch = Stopwatch.StartNew();  				// it sends about 3 x stopcount in the time receiver has to get them  				_logger.Info("starting sending");  				while (!_isStopping && count != 1500)  				{  					var msg = new ZoomImpl { Id = CombGuid.Generate() };  					receiver.Send<ZoomZoom>(msg);  					count++;  				}  				watch.Stop();    				_logger.Info("sent nuff zooms {0}' in {1} seconds for a day. Idling again!"'  					count'   					watch.ElapsedMilliseconds / 1000.0);    				while (true) Thread.Sleep(5000);  			}
Magic Number,MassTransit.AzurePerformance.Sender,SenderWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Sender\SenderWorker.cs,Run,The following statement contains a magic number: using (var sb = ServiceBusFactory.New(sbc =>  				{  					sbc.ReceiveFromComponents(creds);  					sbc.UseAzureServiceBus();  					sbc.UseAzureServiceBusRouting();  					sbc.UseNLog();  					//sbc.UseGraphite();  					sbc.Subscribe(s =>  						{  							s.Handler<ZoomDone>(zd => { _isStopping = true; });  							s.Handler<ReadySetGo>(go => startSignal.Set());  						});  				}))  			{  				var receiver = sb.GetEndpoint(creds.BuildUri("receiver"));    				receiver.Send<SenderUp>(new { Source = creds.BuildUri() });    				startSignal.Wait();    				var count = 0;  				var watch = Stopwatch.StartNew();  				// it sends about 3 x stopcount in the time receiver has to get them  				_logger.Info("starting sending");  				while (!_isStopping && count != 1500)  				{  					var msg = new ZoomImpl { Id = CombGuid.Generate() };  					receiver.Send<ZoomZoom>(msg);  					count++;  				}  				watch.Stop();    				_logger.Info("sent nuff zooms {0}' in {1} seconds for a day. Idling again!"'  					count'   					watch.ElapsedMilliseconds / 1000.0);    				while (true) Thread.Sleep(5000);  			}
Magic Number,MassTransit.AzurePerformance.Sender,SenderWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Sender\SenderWorker.cs,Run,The following statement contains a magic number: using (var sb = ServiceBusFactory.New(sbc =>  				{  					sbc.ReceiveFromComponents(creds);  					sbc.UseAzureServiceBus();  					sbc.UseAzureServiceBusRouting();  					sbc.UseNLog();  					//sbc.UseGraphite();  					sbc.Subscribe(s =>  						{  							s.Handler<ZoomDone>(zd => { _isStopping = true; });  							s.Handler<ReadySetGo>(go => startSignal.Set());  						});  				}))  			{  				var receiver = sb.GetEndpoint(creds.BuildUri("receiver"));    				receiver.Send<SenderUp>(new { Source = creds.BuildUri() });    				startSignal.Wait();    				var count = 0;  				var watch = Stopwatch.StartNew();  				// it sends about 3 x stopcount in the time receiver has to get them  				_logger.Info("starting sending");  				while (!_isStopping && count != 1500)  				{  					var msg = new ZoomImpl { Id = CombGuid.Generate() };  					receiver.Send<ZoomZoom>(msg);  					count++;  				}  				watch.Stop();    				_logger.Info("sent nuff zooms {0}' in {1} seconds for a day. Idling again!"'  					count'   					watch.ElapsedMilliseconds / 1000.0);    				while (true) Thread.Sleep(5000);  			}
Magic Number,MassTransit.AzurePerformance.Sender,SenderWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Sender\SenderWorker.cs,GetCredentials,The following statement contains a magic number: var appName = "sender" + id.Substring(id.IndexOf("IN_"' StringComparison.InvariantCulture) + 3);
Magic Number,MassTransit.AzurePerformance.Sender,SenderWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Sender\SenderWorker.cs,OnStart,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 12;
Magic Number,MassTransit.AzurePerformance.Sender,SenderWorker,C:\repos\mpsbroadband_MassTransit-AzureServiceBus\src\PerformanceTesting\MassTransit.AzurePerformance.Sender\SenderWorker.cs,ConfigureDiagnostics,The following statement contains a magic number: var everySecond = 3.Seconds();
