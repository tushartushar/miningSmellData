Implementation smell,Namespace,Class,File,Method,Description
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The method has 100 lines of code.
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,The method has 165 lines of code.
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_HandleEvents,The method has 119 lines of code.
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has 319 lines of code.
Complex Method,WARBOT_V4.Bot.Actions,Message,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Bot\Actions\Message.cs,Answer,Cyclomatic complexity of the method is 9
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,Cyclomatic complexity of the method is 32
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,Cyclomatic complexity of the method is 67
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_HandleEvents,Cyclomatic complexity of the method is 100
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,Cyclomatic complexity of the method is 96
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,Cyclomatic complexity of the method is 27
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,Cyclomatic complexity of the method is 13
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NICK,Cyclomatic complexity of the method is 10
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,Cyclomatic complexity of the method is 31
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,Cyclomatic complexity of the method is 11
Complex Method,Meebey.SmartIrc4net,WhoInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\WhoInfo.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,Meebey.SmartIrc4net,IrcCommands,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcCommands\IrcCommands.cs,SendMessage,Cyclomatic complexity of the method is 15
Complex Method,Meebey.SmartIrc4net,IrcCommands,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcCommands\IrcCommands.cs,SendReply,Cyclomatic complexity of the method is 9
Complex Method,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,_SimpleParser,Cyclomatic complexity of the method is 11
Complex Method,WARBOT_V4.Talk.Emoticons,Say,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Talk\Emoticons\Say.cs,Answer,Cyclomatic complexity of the method is 9
Long Parameter List,Meebey.SmartIrc4net,KickEventArgs,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\EventArgs.cs,KickEventArgs,The method has 5 parameters.
Long Parameter List,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,Login,The method has 5 parameters.
Long Parameter List,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,Login,The method has 5 parameters.
Long Parameter List,Meebey.SmartIrc4net,IrcMessageData,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcMessageData.cs,IrcMessageData,The method has 10 parameters.
Long Statement,WARBOT_V4,Program,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Program.cs,Main,The length of the statement  "		Data.JaySon.Serializer.Serialize (getnick + "/" + getpass + "/" + host + "/" + port + chan' "nick/pass/host/port/channel"' "config/main.txt"); " is 142.
Long Statement,WARBOT_V4.Data,Saver,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\Saver.cs,Load,The length of the statement  "	string getms = msg.Replace ("Is"' "").Replace ("What"' "").Replace ("Where"' "").Replace ("Who"' "").Replace ("Are"' "").Replace ("is"' "").Replace ("who"' "").Replace ("what"' "").Replace ("where"' "").Replace ("are"' "").Replace ("?"' "").Replace ("!"' ""); " is 259.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,The length of the statement  "			                    Logger.MessageTypes.Warn("This IRC server ("+Address+") doesn't conform to the RFC 2812! ignoring unrecognized replycode '"+replycode+"'");" is 139.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "						                                    Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring...");" is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "						                                    Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring...");" is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "							                                        Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring...");" is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "							                                        Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring...");" is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "						                                    Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring...");" is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "						                                    Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring...");" is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,The length of the statement  "				                        Logger.ChannelSyncing.Debug("creating ChannelUser: "+nickname+" for Channel: "+channelname+" because he doesn't exist yet");" is 124.
Long Statement,WARBOT_V4.Talk.Emoticons,Think,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Talk\Emoticons\Think.cs,Contains,The length of the statement  "	if (message.Contains (":D") || message.Contains (":P") || message.Contains (":O") || message.Contains (":)") || message.Contains ("O:") || message.Contains (":(") || message.Contains ("D:") || message.Contains ("P:")) " is 217.
Complex Conditional,WARBOT_V4.Talk.Emoticons,Think,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Talk\Emoticons\Think.cs,Contains,The conditional expression  "message.Contains (":D") || message.Contains (":P") || message.Contains (":O") || message.Contains (":)") || message.Contains ("O:") || message.Contains (":(") || message.Contains ("D:") || message.Contains ("P:")"  is complex.
Empty Catch Block,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_OnConnectionError,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,WhoInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\WhoInfo.cs,Parse,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,_SimpleParser,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,_OnConnectionError,The method has an empty catch block.
Magic Number,WARBOT_V4.Bot.Actions,Message,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Bot\Actions\Message.cs,Answer,The following statement contains a magic number: if (msg.ToLower ().StartsWith ("lua::")) {  	if (msg.Length > 5) {  		Lua.Lua.lua.DoString (msg.Substring (5));  	}  	return;  }  
Magic Number,WARBOT_V4.Bot.Actions,Message,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Bot\Actions\Message.cs,Answer,The following statement contains a magic number: if (msg.ToLower ().StartsWith ("lua::")) {  	if (msg.Length > 5) {  		Lua.Lua.lua.DoString (msg.Substring (5));  	}  	return;  }  
Magic Number,WARBOT_V4.Bot.Actions,Message,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Bot\Actions\Message.cs,Answer,The following statement contains a magic number: if (msg.Length > 5) {  	Lua.Lua.lua.DoString (msg.Substring (5));  }  
Magic Number,WARBOT_V4.Bot.Actions,Message,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Bot\Actions\Message.cs,Answer,The following statement contains a magic number: if (msg.Length > 5) {  	Lua.Lua.lua.DoString (msg.Substring (5));  }  
Magic Number,WARBOT_V4.Bot.Actions,Message,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Bot\Actions\Message.cs,Answer,The following statement contains a magic number: Lua.Lua.lua.DoString (msg.Substring (5));  
Magic Number,WARBOT_V4.Bot,Setup,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Bot\Setup.cs,OnDisconnected,The following statement contains a magic number: try {  	irc.Connect (Config.Server' 6667);  }  catch {  	Console.WriteLine ("Lost connection to " + Config.Server + ":" + Config.Port);  }  
Magic Number,WARBOT_V4.Bot,Setup,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Bot\Setup.cs,OnDisconnected,The following statement contains a magic number: irc.Connect (Config.Server' 6667);  
Magic Number,WARBOT_V4,Config,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Config.cs,ChangeStatus,The following statement contains a magic number: if (type == Status.GetType.Shutdown) {  	ChangeTitle ("Shutting down...");  	Console.BackgroundColor = Error;  	Console.ForegroundColor = Default;  	Classic.Write ("Shutting down the server because of a huge error...");  	System.Timers.Timer sys = new System.Timers.Timer (1000);  	int count = 5;  	sys.Start ();  	sys.Elapsed += delegate {  		Classic.Write ("In " + count + "...");  		count = count - 1;  		if (count == 0) {  			sys.Stop ();  			Classic.Write ("Restarting...");  			Process[] ps = Process.GetProcessesByName (Title);  			Process.Start (Title + ".exe");  			foreach (Process proc in ps) {  				proc.Kill ();  			}  		}  	};  }  
Magic Number,WARBOT_V4,Config,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Config.cs,ChangeStatus,The following statement contains a magic number: if (type == Status.GetType.Shutdown) {  	ChangeTitle ("Shutting down...");  	Console.BackgroundColor = Error;  	Console.ForegroundColor = Default;  	Classic.Write ("Shutting down the server because of a huge error...");  	System.Timers.Timer sys = new System.Timers.Timer (1000);  	int count = 5;  	sys.Start ();  	sys.Elapsed += delegate {  		Classic.Write ("In " + count + "...");  		count = count - 1;  		if (count == 0) {  			sys.Stop ();  			Classic.Write ("Restarting...");  			Process[] ps = Process.GetProcessesByName (Title);  			Process.Start (Title + ".exe");  			foreach (Process proc in ps) {  				proc.Kill ();  			}  		}  	};  }  
Magic Number,WARBOT_V4,Program,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Program.cs,Main,The following statement contains a magic number: if (!F.Exists ("config/main.txt")) {  	C.WriteLine ("Please enter the nickname of bot:");  	string getnick = C.ReadLine ();  	C.WriteLine ("Please enter the password of bot:");  	string getpass = C.ReadLine ();  	C.WriteLine ("Please enter the host of the bot:");  	string host = C.ReadLine ();  	C.WriteLine ("Please enter the port of the bot:");  	string port = C.ReadLine ();  	C.WriteLine ("Please enter the channel you want:");  	string chan = C.ReadLine ();  	C.WriteLine ("Saving the config...");  	Data.JaySon.Serializer.Serialize (getnick + "/" + getpass + "/" + host + "/" + port + chan' "nick/pass/host/port/channel"' "config/main.txt");  	C.WriteLine ("Saved the config!");  	Bot.Config.Nick = getnick;  	Bot.Config.Password = getpass;  	Bot.Config.Server = host;  	Bot.Config.Port = int.Parse (port);  }  else {  	string[] data = Data.JaySon.Deserializer.Deserialize ("nick/pass/host/port/channel"' "config/main.txt");  	Bot.Config.Nick = data [0];  	Bot.Config.Server = data [2];  	Bot.Config.Password = data [1];  	Bot.Config.Port = int.Parse (data [3]);  	Bot.Config.Channel = data [4];  }  
Magic Number,WARBOT_V4,Program,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Program.cs,Main,The following statement contains a magic number: if (!F.Exists ("config/main.txt")) {  	C.WriteLine ("Please enter the nickname of bot:");  	string getnick = C.ReadLine ();  	C.WriteLine ("Please enter the password of bot:");  	string getpass = C.ReadLine ();  	C.WriteLine ("Please enter the host of the bot:");  	string host = C.ReadLine ();  	C.WriteLine ("Please enter the port of the bot:");  	string port = C.ReadLine ();  	C.WriteLine ("Please enter the channel you want:");  	string chan = C.ReadLine ();  	C.WriteLine ("Saving the config...");  	Data.JaySon.Serializer.Serialize (getnick + "/" + getpass + "/" + host + "/" + port + chan' "nick/pass/host/port/channel"' "config/main.txt");  	C.WriteLine ("Saved the config!");  	Bot.Config.Nick = getnick;  	Bot.Config.Password = getpass;  	Bot.Config.Server = host;  	Bot.Config.Port = int.Parse (port);  }  else {  	string[] data = Data.JaySon.Deserializer.Deserialize ("nick/pass/host/port/channel"' "config/main.txt");  	Bot.Config.Nick = data [0];  	Bot.Config.Server = data [2];  	Bot.Config.Password = data [1];  	Bot.Config.Port = int.Parse (data [3]);  	Bot.Config.Channel = data [4];  }  
Magic Number,WARBOT_V4,Program,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Program.cs,Main,The following statement contains a magic number: if (!F.Exists ("config/main.txt")) {  	C.WriteLine ("Please enter the nickname of bot:");  	string getnick = C.ReadLine ();  	C.WriteLine ("Please enter the password of bot:");  	string getpass = C.ReadLine ();  	C.WriteLine ("Please enter the host of the bot:");  	string host = C.ReadLine ();  	C.WriteLine ("Please enter the port of the bot:");  	string port = C.ReadLine ();  	C.WriteLine ("Please enter the channel you want:");  	string chan = C.ReadLine ();  	C.WriteLine ("Saving the config...");  	Data.JaySon.Serializer.Serialize (getnick + "/" + getpass + "/" + host + "/" + port + chan' "nick/pass/host/port/channel"' "config/main.txt");  	C.WriteLine ("Saved the config!");  	Bot.Config.Nick = getnick;  	Bot.Config.Password = getpass;  	Bot.Config.Server = host;  	Bot.Config.Port = int.Parse (port);  }  else {  	string[] data = Data.JaySon.Deserializer.Deserialize ("nick/pass/host/port/channel"' "config/main.txt");  	Bot.Config.Nick = data [0];  	Bot.Config.Server = data [2];  	Bot.Config.Password = data [1];  	Bot.Config.Port = int.Parse (data [3]);  	Bot.Config.Channel = data [4];  }  
Magic Number,WARBOT_V4,Program,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Program.cs,Main,The following statement contains a magic number: Bot.Config.Server = data [2];  
Magic Number,WARBOT_V4,Program,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Program.cs,Main,The following statement contains a magic number: Bot.Config.Port = int.Parse (data [3]);  
Magic Number,WARBOT_V4,Program,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Program.cs,Main,The following statement contains a magic number: Bot.Config.Channel = data [4];  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: using (SR sr = new SR (file)) {  	string line;  	int count = 0;  	while ((line = sr.ReadLine ()) != null) {  		count = count + 1;  		if (count > 2 && count < str.Length + 3) {  			rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  			strc = strc + 1;  		}  	}  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: using (SR sr = new SR (file)) {  	string line;  	int count = 0;  	while ((line = sr.ReadLine ()) != null) {  		count = count + 1;  		if (count > 2 && count < str.Length + 3) {  			rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  			strc = strc + 1;  		}  	}  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: using (SR sr = new SR (file)) {  	string line;  	int count = 0;  	while ((line = sr.ReadLine ()) != null) {  		count = count + 1;  		if (count > 2 && count < str.Length + 3) {  			rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  			strc = strc + 1;  		}  	}  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	count = count + 1;  	if (count > 2 && count < str.Length + 3) {  		rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  		strc = strc + 1;  	}  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	count = count + 1;  	if (count > 2 && count < str.Length + 3) {  		rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  		strc = strc + 1;  	}  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	count = count + 1;  	if (count > 2 && count < str.Length + 3) {  		rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  		strc = strc + 1;  	}  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: if (count > 2 && count < str.Length + 3) {  	rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  	strc = strc + 1;  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: if (count > 2 && count < str.Length + 3) {  	rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  	strc = strc + 1;  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: if (count > 2 && count < str.Length + 3) {  	rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  	strc = strc + 1;  }  
Magic Number,WARBOT_V4.Data.JaySon,Deserializer,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Data\JaySon\Deserializer.cs,Deserialize,The following statement contains a magic number: rtn [strc] = line.Substring (str [strc].Length + 9).Replace ("\""' "");  
Magic Number,Meebey.SmartIrc4net,BanInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\BanInfo.cs,Parse,The following statement contains a magic number: info.f_Channel = data.RawMessageArray [3];  
Magic Number,Meebey.SmartIrc4net,BanInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\BanInfo.cs,Parse,The following statement contains a magic number: info.f_Mask = data.RawMessageArray [4];  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {  case ReceiveType.Join:  case ReceiveType.Kick:  case ReceiveType.Part:  case ReceiveType.TopicChange:  case ReceiveType.ChannelModeChange:  case ReceiveType.ChannelMessage:  case ReceiveType.ChannelAction:  case ReceiveType.ChannelNotice:  	channel = linear [2];  	break;  case ReceiveType.Who:  case ReceiveType.Topic:  case ReceiveType.Invite:  case ReceiveType.BanList:  case ReceiveType.ChannelMode:  	channel = linear [3];  	break;  case ReceiveType.Name:  	channel = linear [4];  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {  case ReceiveType.Join:  case ReceiveType.Kick:  case ReceiveType.Part:  case ReceiveType.TopicChange:  case ReceiveType.ChannelModeChange:  case ReceiveType.ChannelMessage:  case ReceiveType.ChannelAction:  case ReceiveType.ChannelNotice:  	channel = linear [2];  	break;  case ReceiveType.Who:  case ReceiveType.Topic:  case ReceiveType.Invite:  case ReceiveType.BanList:  case ReceiveType.ChannelMode:  	channel = linear [3];  	break;  case ReceiveType.Name:  	channel = linear [4];  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {  case ReceiveType.Join:  case ReceiveType.Kick:  case ReceiveType.Part:  case ReceiveType.TopicChange:  case ReceiveType.ChannelModeChange:  case ReceiveType.ChannelMessage:  case ReceiveType.ChannelAction:  case ReceiveType.ChannelNotice:  	channel = linear [2];  	break;  case ReceiveType.Who:  case ReceiveType.Topic:  case ReceiveType.Invite:  case ReceiveType.BanList:  case ReceiveType.ChannelMode:  	channel = linear [3];  	break;  case ReceiveType.Name:  	channel = linear [4];  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: channel = linear [2];  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: channel = linear [3];  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: channel = linear [4];  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (replycode) {  case ReplyCode.List:  case ReplyCode.ListEnd:  case ReplyCode.ErrorNoChannelModes:  	channel = linear [3];  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: channel = linear [3];  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (found.Success) {  	string code = found.Groups [1].Value;  	ReplyCode replycode = (ReplyCode)int.Parse (code);  	// check if this replycode is known in the RFC  	if (Array.IndexOf (_ReplyCodes' replycode) == -1) {  		#if LOG4NET  		                    Logger.MessageTypes.Warn("This IRC server ("+Address+") doesn't conform to the RFC 2812! ignoring unrecognized replycode '"+replycode+"'"); #endif  		return ReceiveType.Unknown;  	}  	switch (replycode) {  	case ReplyCode.Welcome:  	case ReplyCode.YourHost:  	case ReplyCode.Created:  	case ReplyCode.MyInfo:  	case ReplyCode.Bounce:  		return ReceiveType.Login;  	case ReplyCode.LuserClient:  	case ReplyCode.LuserOp:  	case ReplyCode.LuserUnknown:  	case ReplyCode.LuserMe:  	case ReplyCode.LuserChannels:  		return ReceiveType.Info;  	case ReplyCode.MotdStart:  	case ReplyCode.Motd:  	case ReplyCode.EndOfMotd:  		return ReceiveType.Motd;  	case ReplyCode.NamesReply:  	case ReplyCode.EndOfNames:  		return ReceiveType.Name;  	case ReplyCode.WhoReply:  	case ReplyCode.EndOfWho:  		return ReceiveType.Who;  	case ReplyCode.ListStart:  	case ReplyCode.List:  	case ReplyCode.ListEnd:  		return ReceiveType.List;  	case ReplyCode.BanList:  	case ReplyCode.EndOfBanList:  		return ReceiveType.BanList;  	case ReplyCode.Topic:  	case ReplyCode.NoTopic:  		return ReceiveType.Topic;  	case ReplyCode.WhoIsUser:  	case ReplyCode.WhoIsServer:  	case ReplyCode.WhoIsOperator:  	case ReplyCode.WhoIsIdle:  	case ReplyCode.WhoIsChannels:  	case ReplyCode.EndOfWhoIs:  		return ReceiveType.WhoIs;  	case ReplyCode.WhoWasUser:  	case ReplyCode.EndOfWhoWas:  		return ReceiveType.WhoWas;  	case ReplyCode.UserModeIs:  		return ReceiveType.UserMode;  	case ReplyCode.ChannelModeIs:  		return ReceiveType.ChannelMode;  	default:  		if (((int)replycode >= 400) && ((int)replycode <= 599)) {  			return ReceiveType.ErrorMessage;  		}  		else {  			#if LOG4NET  			                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  			return ReceiveType.Unknown;  		}  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (found.Success) {  	string code = found.Groups [1].Value;  	ReplyCode replycode = (ReplyCode)int.Parse (code);  	// check if this replycode is known in the RFC  	if (Array.IndexOf (_ReplyCodes' replycode) == -1) {  		#if LOG4NET  		                    Logger.MessageTypes.Warn("This IRC server ("+Address+") doesn't conform to the RFC 2812! ignoring unrecognized replycode '"+replycode+"'"); #endif  		return ReceiveType.Unknown;  	}  	switch (replycode) {  	case ReplyCode.Welcome:  	case ReplyCode.YourHost:  	case ReplyCode.Created:  	case ReplyCode.MyInfo:  	case ReplyCode.Bounce:  		return ReceiveType.Login;  	case ReplyCode.LuserClient:  	case ReplyCode.LuserOp:  	case ReplyCode.LuserUnknown:  	case ReplyCode.LuserMe:  	case ReplyCode.LuserChannels:  		return ReceiveType.Info;  	case ReplyCode.MotdStart:  	case ReplyCode.Motd:  	case ReplyCode.EndOfMotd:  		return ReceiveType.Motd;  	case ReplyCode.NamesReply:  	case ReplyCode.EndOfNames:  		return ReceiveType.Name;  	case ReplyCode.WhoReply:  	case ReplyCode.EndOfWho:  		return ReceiveType.Who;  	case ReplyCode.ListStart:  	case ReplyCode.List:  	case ReplyCode.ListEnd:  		return ReceiveType.List;  	case ReplyCode.BanList:  	case ReplyCode.EndOfBanList:  		return ReceiveType.BanList;  	case ReplyCode.Topic:  	case ReplyCode.NoTopic:  		return ReceiveType.Topic;  	case ReplyCode.WhoIsUser:  	case ReplyCode.WhoIsServer:  	case ReplyCode.WhoIsOperator:  	case ReplyCode.WhoIsIdle:  	case ReplyCode.WhoIsChannels:  	case ReplyCode.EndOfWhoIs:  		return ReceiveType.WhoIs;  	case ReplyCode.WhoWasUser:  	case ReplyCode.EndOfWhoWas:  		return ReceiveType.WhoWas;  	case ReplyCode.UserModeIs:  		return ReceiveType.UserMode;  	case ReplyCode.ChannelModeIs:  		return ReceiveType.ChannelMode;  	default:  		if (((int)replycode >= 400) && ((int)replycode <= 599)) {  			return ReceiveType.ErrorMessage;  		}  		else {  			#if LOG4NET  			                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  			return ReceiveType.Unknown;  		}  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: switch (replycode) {  case ReplyCode.Welcome:  case ReplyCode.YourHost:  case ReplyCode.Created:  case ReplyCode.MyInfo:  case ReplyCode.Bounce:  	return ReceiveType.Login;  case ReplyCode.LuserClient:  case ReplyCode.LuserOp:  case ReplyCode.LuserUnknown:  case ReplyCode.LuserMe:  case ReplyCode.LuserChannels:  	return ReceiveType.Info;  case ReplyCode.MotdStart:  case ReplyCode.Motd:  case ReplyCode.EndOfMotd:  	return ReceiveType.Motd;  case ReplyCode.NamesReply:  case ReplyCode.EndOfNames:  	return ReceiveType.Name;  case ReplyCode.WhoReply:  case ReplyCode.EndOfWho:  	return ReceiveType.Who;  case ReplyCode.ListStart:  case ReplyCode.List:  case ReplyCode.ListEnd:  	return ReceiveType.List;  case ReplyCode.BanList:  case ReplyCode.EndOfBanList:  	return ReceiveType.BanList;  case ReplyCode.Topic:  case ReplyCode.NoTopic:  	return ReceiveType.Topic;  case ReplyCode.WhoIsUser:  case ReplyCode.WhoIsServer:  case ReplyCode.WhoIsOperator:  case ReplyCode.WhoIsIdle:  case ReplyCode.WhoIsChannels:  case ReplyCode.EndOfWhoIs:  	return ReceiveType.WhoIs;  case ReplyCode.WhoWasUser:  case ReplyCode.EndOfWhoWas:  	return ReceiveType.WhoWas;  case ReplyCode.UserModeIs:  	return ReceiveType.UserMode;  case ReplyCode.ChannelModeIs:  	return ReceiveType.ChannelMode;  default:  	if (((int)replycode >= 400) && ((int)replycode <= 599)) {  		return ReceiveType.ErrorMessage;  	}  	else {  		#if LOG4NET  		                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  		return ReceiveType.Unknown;  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: switch (replycode) {  case ReplyCode.Welcome:  case ReplyCode.YourHost:  case ReplyCode.Created:  case ReplyCode.MyInfo:  case ReplyCode.Bounce:  	return ReceiveType.Login;  case ReplyCode.LuserClient:  case ReplyCode.LuserOp:  case ReplyCode.LuserUnknown:  case ReplyCode.LuserMe:  case ReplyCode.LuserChannels:  	return ReceiveType.Info;  case ReplyCode.MotdStart:  case ReplyCode.Motd:  case ReplyCode.EndOfMotd:  	return ReceiveType.Motd;  case ReplyCode.NamesReply:  case ReplyCode.EndOfNames:  	return ReceiveType.Name;  case ReplyCode.WhoReply:  case ReplyCode.EndOfWho:  	return ReceiveType.Who;  case ReplyCode.ListStart:  case ReplyCode.List:  case ReplyCode.ListEnd:  	return ReceiveType.List;  case ReplyCode.BanList:  case ReplyCode.EndOfBanList:  	return ReceiveType.BanList;  case ReplyCode.Topic:  case ReplyCode.NoTopic:  	return ReceiveType.Topic;  case ReplyCode.WhoIsUser:  case ReplyCode.WhoIsServer:  case ReplyCode.WhoIsOperator:  case ReplyCode.WhoIsIdle:  case ReplyCode.WhoIsChannels:  case ReplyCode.EndOfWhoIs:  	return ReceiveType.WhoIs;  case ReplyCode.WhoWasUser:  case ReplyCode.EndOfWhoWas:  	return ReceiveType.WhoWas;  case ReplyCode.UserModeIs:  	return ReceiveType.UserMode;  case ReplyCode.ChannelModeIs:  	return ReceiveType.ChannelMode;  default:  	if (((int)replycode >= 400) && ((int)replycode <= 599)) {  		return ReceiveType.ErrorMessage;  	}  	else {  		#if LOG4NET  		                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  		return ReceiveType.Unknown;  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (((int)replycode >= 400) && ((int)replycode <= 599)) {  	return ReceiveType.ErrorMessage;  }  else {  	#if LOG4NET  	                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  	return ReceiveType.Unknown;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (((int)replycode >= 400) && ((int)replycode <= 599)) {  	return ReceiveType.ErrorMessage;  }  else {  	#if LOG4NET  	                            Logger.MessageTypes.Warn("replycode unknown ("+code+"): \""+rawline+"\""); #endif  	return ReceiveType.Unknown;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Type == ReceiveType.CtcpRequest) {  	if (ircdata.Message.StartsWith ("\x1" + "PING")) {  		if (ircdata.Message.Length > 7) {  			SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  		}  		else {  			SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  		}  	}  	else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  		string versionstring;  		if (_CtcpVersion == null) {  			versionstring = VersionString;  		}  		else {  			versionstring = _CtcpVersion;  		}  		SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  	}  	else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Type == ReceiveType.CtcpRequest) {  	if (ircdata.Message.StartsWith ("\x1" + "PING")) {  		if (ircdata.Message.Length > 7) {  			SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  		}  		else {  			SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  		}  	}  	else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  		string versionstring;  		if (_CtcpVersion == null) {  			versionstring = VersionString;  		}  		else {  			versionstring = _CtcpVersion;  		}  		SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  	}  	else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Type == ReceiveType.CtcpRequest) {  	if (ircdata.Message.StartsWith ("\x1" + "PING")) {  		if (ircdata.Message.Length > 7) {  			SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  		}  		else {  			SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  		}  	}  	else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  		string versionstring;  		if (_CtcpVersion == null) {  			versionstring = VersionString;  		}  		else {  			versionstring = _CtcpVersion;  		}  		SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  	}  	else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Message.StartsWith ("\x1" + "PING")) {  	if (ircdata.Message.Length > 7) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  	}  	else {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  	}  }  else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  	string versionstring;  	if (_CtcpVersion == null) {  		versionstring = VersionString;  	}  	else {  		versionstring = _CtcpVersion;  	}  	SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  }  else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Message.StartsWith ("\x1" + "PING")) {  	if (ircdata.Message.Length > 7) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  	}  	else {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  	}  }  else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  	string versionstring;  	if (_CtcpVersion == null) {  		versionstring = VersionString;  	}  	else {  		versionstring = _CtcpVersion;  	}  	SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  }  else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Message.StartsWith ("\x1" + "PING")) {  	if (ircdata.Message.Length > 7) {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  	}  	else {  		SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  	}  }  else if (ircdata.Message.StartsWith ("\x1" + "VERSION")) {  	string versionstring;  	if (_CtcpVersion == null) {  		versionstring = VersionString;  	}  	else {  		versionstring = _CtcpVersion;  	}  	SendMessage (SendType.CtcpReply' ircdata.Nick' "VERSION " + versionstring);  }  else if (ircdata.Message.StartsWith ("\x1" + "CLIENTINFO")) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "CLIENTINFO PING VERSION CLIENTINFO");  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Message.Length > 7) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  }  else {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Message.Length > 7) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  }  else {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (ircdata.Message.Length > 7) {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  }  else {  	SendMessage (SendType.CtcpReply' ircdata.Nick' "PING");  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: SendMessage (SendType.CtcpReply' ircdata.Nick' "PING " + ircdata.Message.Substring (6' (ircdata.Message.Length - 7)));  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnChannelAction != null) {  	string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  	OnChannelAction (this' new ActionEventArgs (ircdata' action));  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnChannelAction != null) {  	string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  	OnChannelAction (this' new ActionEventArgs (ircdata' action));  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnQueryAction != null) {  	string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  	OnQueryAction (this' new ActionEventArgs (ircdata' action));  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnQueryAction != null) {  	string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  	OnQueryAction (this' new ActionEventArgs (ircdata' action));  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnCtcpRequest != null) {  	int space_pos = ircdata.Message.IndexOf (' ');  	string cmd = "";  	string param = "";  	if (space_pos != -1) {  		cmd = ircdata.Message.Substring (1' space_pos - 1);  		param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  	}  	else {  		cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  	}  	OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (OnCtcpRequest != null) {  	int space_pos = ircdata.Message.IndexOf (' ');  	string cmd = "";  	string param = "";  	if (space_pos != -1) {  		cmd = ircdata.Message.Substring (1' space_pos - 1);  		param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  	}  	else {  		cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  	}  	OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (space_pos != -1) {  	cmd = ircdata.Message.Substring (1' space_pos - 1);  	param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  }  else {  	cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: if (space_pos != -1) {  	cmd = ircdata.Message.Substring (1' space_pos - 1);  	param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  }  else {  	cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelNotice:  	if (OnChannelNotice != null) {  		OnChannelNotice (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryNotice:  	if (OnQueryNotice != null) {  		OnQueryNotice (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.CtcpReply:  	if (OnCtcpReply != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpReply (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: switch (ircdata.Type) {  case ReceiveType.ChannelNotice:  	if (OnChannelNotice != null) {  		OnChannelNotice (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryNotice:  	if (OnQueryNotice != null) {  		OnQueryNotice (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.CtcpReply:  	if (OnCtcpReply != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpReply (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: if (OnCtcpReply != null) {  	int space_pos = ircdata.Message.IndexOf (' ');  	string cmd = "";  	string param = "";  	if (space_pos != -1) {  		cmd = ircdata.Message.Substring (1' space_pos - 1);  		param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  	}  	else {  		cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  	}  	OnCtcpReply (this' new CtcpEventArgs (ircdata' cmd' param));  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: if (OnCtcpReply != null) {  	int space_pos = ircdata.Message.IndexOf (' ');  	string cmd = "";  	string param = "";  	if (space_pos != -1) {  		cmd = ircdata.Message.Substring (1' space_pos - 1);  		param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  	}  	else {  		cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  	}  	OnCtcpReply (this' new CtcpEventArgs (ircdata' cmd' param));  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: if (space_pos != -1) {  	cmd = ircdata.Message.Substring (1' space_pos - 1);  	param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  }  else {  	cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: if (space_pos != -1) {  	cmd = ircdata.Message.Substring (1' space_pos - 1);  	param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  }  else {  	cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe (ircdata.RawMessageArray [2])) {  	// my user mode changed  	_Usermode = ircdata.RawMessageArray [3].Substring (1);  }  else {  	// channel mode changed  	string mode = ircdata.RawMessageArray [3];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length - 4);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: _Usermode = ircdata.RawMessageArray [3].Substring (1);  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing && IsJoined (ircdata.Channel)) {  	// reset stored mode first' as this is the complete mode  	Channel chan = GetChannel (ircdata.Channel);  	chan.Mode = String.Empty;  	string mode = ircdata.RawMessageArray [4];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length - 5);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing && IsJoined (ircdata.Channel)) {  	// reset stored mode first' as this is the complete mode  	Channel chan = GetChannel (ircdata.Channel);  	chan.Mode = String.Empty;  	string mode = ircdata.RawMessageArray [4];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length - 5);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing && IsJoined (ircdata.Channel)) {  	// reset stored mode first' as this is the complete mode  	Channel chan = GetChannel (ircdata.Channel);  	chan.Mode = String.Empty;  	string mode = ircdata.RawMessageArray [4];  	string parameter = String.Join (" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length - 5);  	_InterpretChannelMode (ircdata' mode' parameter);  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_RPL_WELCOME,The following statement contains a magic number: _Nickname = ircdata.RawMessageArray [2];  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (_CurrentNickname == NicknameList.Length - 1) {  	Random rand = new Random ();  	int number = rand.Next (999);  	if (Nickname.Length > 5) {  		nickname = Nickname.Substring (0' 5) + number;  	}  	else {  		nickname = Nickname.Substring (0' Nickname.Length - 1) + number;  	}  }  else {  	nickname = _NextNickname ();  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (_CurrentNickname == NicknameList.Length - 1) {  	Random rand = new Random ();  	int number = rand.Next (999);  	if (Nickname.Length > 5) {  		nickname = Nickname.Substring (0' 5) + number;  	}  	else {  		nickname = Nickname.Substring (0' Nickname.Length - 1) + number;  	}  }  else {  	nickname = _NextNickname ();  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (_CurrentNickname == NicknameList.Length - 1) {  	Random rand = new Random ();  	int number = rand.Next (999);  	if (Nickname.Length > 5) {  		nickname = Nickname.Substring (0' 5) + number;  	}  	else {  		nickname = Nickname.Substring (0' Nickname.Length - 1) + number;  	}  }  else {  	nickname = _NextNickname ();  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (Nickname.Length > 5) {  	nickname = Nickname.Substring (0' 5) + number;  }  else {  	nickname = Nickname.Substring (0' Nickname.Length - 1) + number;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (Nickname.Length > 5) {  	nickname = Nickname.Substring (0' 5) + number;  }  else {  	nickname = Nickname.Substring (0' Nickname.Length - 1) + number;  }  
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: nickname = Nickname.Substring (0' 5) + number;  
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Channel = data.RawMessageArray [3];  
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Ident = data.RawMessageArray [4];  
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Host = data.RawMessageArray [5];  
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Server = data.RawMessageArray [6];  
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Nick = data.RawMessageArray [7];  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {  	System.Net.IPAddress ip = System.Net.Dns.Resolve (Address).AddressList [0];  	_TcpClient = new IrcTcpClient ();  	_TcpClient.NoDelay = true;  	_TcpClient.Socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);  	// set timeout' after this the connection will be aborted  	_TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  	_TcpClient.SendTimeout = _SocketSendTimeout * 1000;  	_TcpClient.Connect (ip' port);  	Stream stream = _TcpClient.GetStream ();  	#if NET_2_0  	                if (_UseSsl) {                     SslStream sslStream = new SslStream(stream' false' delegate {                         return true;                     });                     sslStream.AuthenticateAsClient(Address);                     stream = sslStream;                 } #endif  	_Reader = new StreamReader (stream' _Encoding);  	_Writer = new StreamWriter (stream' _Encoding);  	if (_Encoding.GetPreamble ().Length > 0) {  		// HACK: we have an encoding that has some kind of preamble  		// like UTF-8 has a BOM' this will confuse the IRCd!  		// Thus we send a \r\n so the IRCd can safely ignore that  		// garbage.  		_Writer.WriteLine ();  	}  	// Connection was succeful' reseting the connect counter  	_ConnectTries = 0;  	// updating the connection error state' so connecting is possible again  	IsConnectionError = false;  	_IsConnected = true;  	// lets power up our threads  	_ReadThread.Start ();  	_WriteThread.Start ();  	_IdleWorkerThread.Start ();  	#if LOG4NET  	                Logger.Connection.Info("connected"); #endif  	if (OnConnected != null) {  		OnConnected (this' EventArgs.Empty);  	}  }  catch (Exception e) {  	if (_Reader != null) {  		try {  			_Reader.Close ();  		}  		catch (ObjectDisposedException) {  		}  	}  	if (_Writer != null) {  		try {  			_Writer.Close ();  		}  		catch (ObjectDisposedException) {  		}  	}  	if (_TcpClient != null) {  		_TcpClient.Close ();  	}  	_IsConnected = false;  	IsConnectionError = true;  	#if LOG4NET  	                Logger.Connection.Info("connection failed: "+e.Message); #endif  	if (_AutoRetry && _ConnectTries <= 3) {  		if (OnAutoConnectError != null) {  			OnAutoConnectError (this' new AutoConnectErrorEventArgs (Address' Port' e));  		}  		#if LOG4NET  		                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  		Thread.Sleep (_AutoRetryDelay * 1000);  		_NextAddress ();  		Connect (_AddressList' _Port);  	}  	else {  		throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {  	System.Net.IPAddress ip = System.Net.Dns.Resolve (Address).AddressList [0];  	_TcpClient = new IrcTcpClient ();  	_TcpClient.NoDelay = true;  	_TcpClient.Socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);  	// set timeout' after this the connection will be aborted  	_TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  	_TcpClient.SendTimeout = _SocketSendTimeout * 1000;  	_TcpClient.Connect (ip' port);  	Stream stream = _TcpClient.GetStream ();  	#if NET_2_0  	                if (_UseSsl) {                     SslStream sslStream = new SslStream(stream' false' delegate {                         return true;                     });                     sslStream.AuthenticateAsClient(Address);                     stream = sslStream;                 } #endif  	_Reader = new StreamReader (stream' _Encoding);  	_Writer = new StreamWriter (stream' _Encoding);  	if (_Encoding.GetPreamble ().Length > 0) {  		// HACK: we have an encoding that has some kind of preamble  		// like UTF-8 has a BOM' this will confuse the IRCd!  		// Thus we send a \r\n so the IRCd can safely ignore that  		// garbage.  		_Writer.WriteLine ();  	}  	// Connection was succeful' reseting the connect counter  	_ConnectTries = 0;  	// updating the connection error state' so connecting is possible again  	IsConnectionError = false;  	_IsConnected = true;  	// lets power up our threads  	_ReadThread.Start ();  	_WriteThread.Start ();  	_IdleWorkerThread.Start ();  	#if LOG4NET  	                Logger.Connection.Info("connected"); #endif  	if (OnConnected != null) {  		OnConnected (this' EventArgs.Empty);  	}  }  catch (Exception e) {  	if (_Reader != null) {  		try {  			_Reader.Close ();  		}  		catch (ObjectDisposedException) {  		}  	}  	if (_Writer != null) {  		try {  			_Writer.Close ();  		}  		catch (ObjectDisposedException) {  		}  	}  	if (_TcpClient != null) {  		_TcpClient.Close ();  	}  	_IsConnected = false;  	IsConnectionError = true;  	#if LOG4NET  	                Logger.Connection.Info("connection failed: "+e.Message); #endif  	if (_AutoRetry && _ConnectTries <= 3) {  		if (OnAutoConnectError != null) {  			OnAutoConnectError (this' new AutoConnectErrorEventArgs (Address' Port' e));  		}  		#if LOG4NET  		                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  		Thread.Sleep (_AutoRetryDelay * 1000);  		_NextAddress ();  		Connect (_AddressList' _Port);  	}  	else {  		throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {  	System.Net.IPAddress ip = System.Net.Dns.Resolve (Address).AddressList [0];  	_TcpClient = new IrcTcpClient ();  	_TcpClient.NoDelay = true;  	_TcpClient.Socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);  	// set timeout' after this the connection will be aborted  	_TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  	_TcpClient.SendTimeout = _SocketSendTimeout * 1000;  	_TcpClient.Connect (ip' port);  	Stream stream = _TcpClient.GetStream ();  	#if NET_2_0  	                if (_UseSsl) {                     SslStream sslStream = new SslStream(stream' false' delegate {                         return true;                     });                     sslStream.AuthenticateAsClient(Address);                     stream = sslStream;                 } #endif  	_Reader = new StreamReader (stream' _Encoding);  	_Writer = new StreamWriter (stream' _Encoding);  	if (_Encoding.GetPreamble ().Length > 0) {  		// HACK: we have an encoding that has some kind of preamble  		// like UTF-8 has a BOM' this will confuse the IRCd!  		// Thus we send a \r\n so the IRCd can safely ignore that  		// garbage.  		_Writer.WriteLine ();  	}  	// Connection was succeful' reseting the connect counter  	_ConnectTries = 0;  	// updating the connection error state' so connecting is possible again  	IsConnectionError = false;  	_IsConnected = true;  	// lets power up our threads  	_ReadThread.Start ();  	_WriteThread.Start ();  	_IdleWorkerThread.Start ();  	#if LOG4NET  	                Logger.Connection.Info("connected"); #endif  	if (OnConnected != null) {  		OnConnected (this' EventArgs.Empty);  	}  }  catch (Exception e) {  	if (_Reader != null) {  		try {  			_Reader.Close ();  		}  		catch (ObjectDisposedException) {  		}  	}  	if (_Writer != null) {  		try {  			_Writer.Close ();  		}  		catch (ObjectDisposedException) {  		}  	}  	if (_TcpClient != null) {  		_TcpClient.Close ();  	}  	_IsConnected = false;  	IsConnectionError = true;  	#if LOG4NET  	                Logger.Connection.Info("connection failed: "+e.Message); #endif  	if (_AutoRetry && _ConnectTries <= 3) {  		if (OnAutoConnectError != null) {  			OnAutoConnectError (this' new AutoConnectErrorEventArgs (Address' Port' e));  		}  		#if LOG4NET  		                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  		Thread.Sleep (_AutoRetryDelay * 1000);  		_NextAddress ();  		Connect (_AddressList' _Port);  	}  	else {  		throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {  	System.Net.IPAddress ip = System.Net.Dns.Resolve (Address).AddressList [0];  	_TcpClient = new IrcTcpClient ();  	_TcpClient.NoDelay = true;  	_TcpClient.Socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);  	// set timeout' after this the connection will be aborted  	_TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  	_TcpClient.SendTimeout = _SocketSendTimeout * 1000;  	_TcpClient.Connect (ip' port);  	Stream stream = _TcpClient.GetStream ();  	#if NET_2_0  	                if (_UseSsl) {                     SslStream sslStream = new SslStream(stream' false' delegate {                         return true;                     });                     sslStream.AuthenticateAsClient(Address);                     stream = sslStream;                 } #endif  	_Reader = new StreamReader (stream' _Encoding);  	_Writer = new StreamWriter (stream' _Encoding);  	if (_Encoding.GetPreamble ().Length > 0) {  		// HACK: we have an encoding that has some kind of preamble  		// like UTF-8 has a BOM' this will confuse the IRCd!  		// Thus we send a \r\n so the IRCd can safely ignore that  		// garbage.  		_Writer.WriteLine ();  	}  	// Connection was succeful' reseting the connect counter  	_ConnectTries = 0;  	// updating the connection error state' so connecting is possible again  	IsConnectionError = false;  	_IsConnected = true;  	// lets power up our threads  	_ReadThread.Start ();  	_WriteThread.Start ();  	_IdleWorkerThread.Start ();  	#if LOG4NET  	                Logger.Connection.Info("connected"); #endif  	if (OnConnected != null) {  		OnConnected (this' EventArgs.Empty);  	}  }  catch (Exception e) {  	if (_Reader != null) {  		try {  			_Reader.Close ();  		}  		catch (ObjectDisposedException) {  		}  	}  	if (_Writer != null) {  		try {  			_Writer.Close ();  		}  		catch (ObjectDisposedException) {  		}  	}  	if (_TcpClient != null) {  		_TcpClient.Close ();  	}  	_IsConnected = false;  	IsConnectionError = true;  	#if LOG4NET  	                Logger.Connection.Info("connection failed: "+e.Message); #endif  	if (_AutoRetry && _ConnectTries <= 3) {  		if (OnAutoConnectError != null) {  			OnAutoConnectError (this' new AutoConnectErrorEventArgs (Address' Port' e));  		}  		#if LOG4NET  		                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  		Thread.Sleep (_AutoRetryDelay * 1000);  		_NextAddress ();  		Connect (_AddressList' _Port);  	}  	else {  		throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: _TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: _TcpClient.SendTimeout = _SocketSendTimeout * 1000;  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: if (_AutoRetry && _ConnectTries <= 3) {  	if (OnAutoConnectError != null) {  		OnAutoConnectError (this' new AutoConnectErrorEventArgs (Address' Port' e));  	}  	#if LOG4NET  	                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  	Thread.Sleep (_AutoRetryDelay * 1000);  	_NextAddress ();  	Connect (_AddressList' _Port);  }  else {  	throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  }  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: if (_AutoRetry && _ConnectTries <= 3) {  	if (OnAutoConnectError != null) {  		OnAutoConnectError (this' new AutoConnectErrorEventArgs (Address' Port' e));  	}  	#if LOG4NET  	                    Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec"); #endif  	Thread.Sleep (_AutoRetryDelay * 1000);  	_NextAddress ();  	Connect (_AddressList' _Port);  }  else {  	throw new CouldNotConnectException ("Could not connect to: " + Address + ":" + Port + " " + e.Message' e);  }  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: Thread.Sleep (_AutoRetryDelay * 1000);  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,ReadLine,The following statement contains a magic number: if (blocking) {  	// block till the queue has data' but bail out on connection error  	while (IsConnected && !IsConnectionError && _ReadThread.Queue.Count == 0) {  		Thread.Sleep (10);  	}  }  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,ReadLine,The following statement contains a magic number: while (IsConnected && !IsConnectionError && _ReadThread.Queue.Count == 0) {  	Thread.Sleep (10);  }  
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,ReadLine,The following statement contains a magic number: Thread.Sleep (10);  
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following switch statement is missing a default case: switch (type) {  case ReceiveType.Join:  case ReceiveType.Kick:  case ReceiveType.Part:  case ReceiveType.TopicChange:  case ReceiveType.ChannelModeChange:  case ReceiveType.ChannelMessage:  case ReceiveType.ChannelAction:  case ReceiveType.ChannelNotice:  	channel = linear [2];  	break;  case ReceiveType.Who:  case ReceiveType.Topic:  case ReceiveType.Invite:  case ReceiveType.BanList:  case ReceiveType.ChannelMode:  	channel = linear [3];  	break;  case ReceiveType.Name:  	channel = linear [4];  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,MessageParser,The following switch statement is missing a default case: switch (replycode) {  case ReplyCode.List:  case ReplyCode.ListEnd:  case ReplyCode.ErrorNoChannelModes:  	channel = linear [3];  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (code) {  case "PING":  	_Event_PING (ircdata);  	break;  case "ERROR":  	_Event_ERROR (ircdata);  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (code) {  case "PRIVMSG":  	_Event_PRIVMSG (ircdata);  	break;  case "NOTICE":  	_Event_NOTICE (ircdata);  	break;  case "JOIN":  	_Event_JOIN (ircdata);  	break;  case "PART":  	_Event_PART (ircdata);  	break;  case "KICK":  	_Event_KICK (ircdata);  	break;  case "QUIT":  	_Event_QUIT (ircdata);  	break;  case "TOPIC":  	_Event_TOPIC (ircdata);  	break;  case "NICK":  	_Event_NICK (ircdata);  	break;  case "INVITE":  	_Event_INVITE (ircdata);  	break;  case "MODE":  	_Event_MODE (ircdata);  	break;  case "PONG":  	_Event_PONG (ircdata);  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (ircdata.ReplyCode) {  case ReplyCode.Welcome:  	_Event_RPL_WELCOME (ircdata);  	break;  case ReplyCode.Topic:  	_Event_RPL_TOPIC (ircdata);  	break;  case ReplyCode.NoTopic:  	_Event_RPL_NOTOPIC (ircdata);  	break;  case ReplyCode.NamesReply:  	_Event_RPL_NAMREPLY (ircdata);  	break;  case ReplyCode.EndOfNames:  	_Event_RPL_ENDOFNAMES (ircdata);  	break;  case ReplyCode.List:  	_Event_RPL_LIST (ircdata);  	break;  case ReplyCode.ListEnd:  	_Event_RPL_LISTEND (ircdata);  	break;  case ReplyCode.WhoReply:  	_Event_RPL_WHOREPLY (ircdata);  	break;  case ReplyCode.EndOfWho:  	_Event_RPL_ENDOFWHO (ircdata);  	break;  case ReplyCode.ChannelModeIs:  	_Event_RPL_CHANNELMODEIS (ircdata);  	break;  case ReplyCode.BanList:  	_Event_RPL_BANLIST (ircdata);  	break;  case ReplyCode.EndOfBanList:  	_Event_RPL_ENDOFBANLIST (ircdata);  	break;  case ReplyCode.ErrorNoChannelModes:  	_Event_ERR_NOCHANMODES (ircdata);  	break;  case ReplyCode.Motd:  	_Event_RPL_MOTD (ircdata);  	break;  case ReplyCode.EndOfMotd:  	_Event_RPL_ENDOFMOTD (ircdata);  	break;  case ReplyCode.Away:  	_Event_RPL_AWAY (ircdata);  	break;  case ReplyCode.UnAway:  	_Event_RPL_UNAWAY (ircdata);  	break;  case ReplyCode.NowAway:  	_Event_RPL_NOWAWAY (ircdata);  	break;  case ReplyCode.TryAgain:  	_Event_RPL_TRYAGAIN (ircdata);  	break;  case ReplyCode.ErrorNicknameInUse:  	_Event_ERR_NICKNAMEINUSE (ircdata);  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following switch statement is missing a default case: switch (ircdata.Type) {  case ReceiveType.ChannelMessage:  	if (OnChannelMessage != null) {  		OnChannelMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.ChannelAction:  	if (OnChannelAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnChannelAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.QueryMessage:  	if (OnQueryMessage != null) {  		OnQueryMessage (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryAction:  	if (OnQueryAction != null) {  		string action = ircdata.Message.Substring (8' ircdata.Message.Length - 9);  		OnQueryAction (this' new ActionEventArgs (ircdata' action));  	}  	break;  case ReceiveType.CtcpRequest:  	if (OnCtcpRequest != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpRequest (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_NOTICE,The following switch statement is missing a default case: switch (ircdata.Type) {  case ReceiveType.ChannelNotice:  	if (OnChannelNotice != null) {  		OnChannelNotice (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.QueryNotice:  	if (OnQueryNotice != null) {  		OnQueryNotice (this' new IrcEventArgs (ircdata));  	}  	break;  case ReceiveType.CtcpReply:  	if (OnCtcpReply != null) {  		int space_pos = ircdata.Message.IndexOf (' ');  		string cmd = "";  		string param = "";  		if (space_pos != -1) {  			cmd = ircdata.Message.Substring (1' space_pos - 1);  			param = ircdata.Message.Substring (space_pos + 1' ircdata.Message.Length - space_pos - 2);  		}  		else {  			cmd = ircdata.Message.Substring (1' ircdata.Message.Length - 2);  		}  		OnCtcpReply (this' new CtcpEventArgs (ircdata' cmd' param));  	}  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,The following switch statement is missing a default case: switch (channel [0]) {  case '#':  case '!':  case '&':  case '+':  	// this channel may not be where we are joined!  	// see RFC 1459 and RFC 2812' it must return a channelname  	// we use this channel info when possible...  	if (channeluser != null) {  		channeluser.IsOp = info.IsOp;  		channeluser.IsVoice = info.IsVoice;  	}  	break;  }  
Missing Default,Meebey.SmartIrc4net,WhoInfo,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcClient\WhoInfo.cs,Parse,The following switch statement is missing a default case: switch (usermode [i]) {  case 'H':  	away = false;  	break;  case 'G':  	away = true;  	break;  case '@':  	op = true;  	break;  case '+':  	voice = true;  	break;  case '*':  	ircop = true;  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcCommands,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcCommands\IrcCommands.cs,SendMessage,The following switch statement is missing a default case: switch (type) {  case SendType.Message:  	RfcPrivmsg (destination' message' priority);  	break;  case SendType.Action:  	RfcPrivmsg (destination' "\x1" + "ACTION " + message + "\x1"' priority);  	break;  case SendType.Notice:  	RfcNotice (destination' message' priority);  	break;  case SendType.CtcpRequest:  	RfcPrivmsg (destination' "\x1" + message + "\x1"' priority);  	break;  case SendType.CtcpReply:  	RfcNotice (destination' "\x1" + message + "\x1"' priority);  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcCommands,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcCommands\IrcCommands.cs,SendReply,The following switch statement is missing a default case: switch (data.Type) {  case ReceiveType.ChannelMessage:  	SendMessage (SendType.Message' data.Channel' message' priority);  	break;  case ReceiveType.QueryMessage:  	SendMessage (SendType.Message' data.Nick' message' priority);  	break;  case ReceiveType.QueryNotice:  	SendMessage (SendType.Notice' data.Nick' message' priority);  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,_SimpleParser,The following switch statement is missing a default case: switch (replycode) {  case ReplyCode.Welcome:  	_IsRegistered = true;  	#if LOG4NET  	                            Logger.Connection.Info("logged in"); #endif  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,_SimpleParser,The following switch statement is missing a default case: switch (rawlineex [1]) {  case "PONG":  	DateTime now = DateTime.Now;  	_LastPongReceived = now;  	_Lag = now - _LastPingSent;  	#if LOG4NET  	                            Logger.Connection.Debug("PONG received' took: " + _Lag.TotalMilliseconds + " ms"); #endif  	break;  }  
Missing Default,Meebey.SmartIrc4net,IrcConnection,C:\repos\111WARLOCK111_WARBOT-V4\WARBOT-V4\WARBOT V4\Network\IrcConnection\IrcConnection.cs,_SimpleParser,The following switch statement is missing a default case: switch (messagecode) {  case "ERROR":  	// FIXME: handle server errors differently than connection errors!  	//IsConnectionError = true;  	break;  }  
