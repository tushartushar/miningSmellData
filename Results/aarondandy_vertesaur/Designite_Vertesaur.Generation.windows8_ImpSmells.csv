Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,Cyclomatic complexity of the method is 10
Complex Method,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateConstantExpression,Cyclomatic complexity of the method is 12
Complex Method,Vertesaur.Generation.Expressions,VectorExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\VectorExpressionGenerator.cs,Generate,Cyclomatic complexity of the method is 9
Long Identifier,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,,The length of the parameter _standardUnaryExpressionGeneratorLookup is 39.
Long Identifier,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,,The length of the parameter _standardBinaryExpressionGeneratorLookup is 40.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateNegation,The length of the statement  "            if (resultType == typeof(ulong) || resultType == typeof(uint) || resultType == typeof(ushort) || resultType == typeof(byte) || resultType == typeof(sbyte)) { " is 157.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateArithmetic,The length of the statement  "            if ((left.Type == right.Type) && (left.Type == typeof(byte) || left.Type == typeof(char) || left.Type == typeof(sbyte))) { " is 122.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,Generate,The length of the statement  "            if (String.IsNullOrEmpty(request.ExpressionName)) throw new ArgumentException("Invalid request expression name."' "request"); " is 125.
Complex Conditional,Vertesaur.Generation.Expressions,Atan2Expression,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\Atan2Expression.cs,Reduce,The conditional expression  "(typeof (float) == LeftParameter.Type && typeof (float) == RightParameter.Type)                  || (typeof(double) == LeftParameter.Type && typeof(double) == RightParameter.Type)"  is complex.
Complex Conditional,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateNegation,The conditional expression  "resultType == typeof(ulong) || resultType == typeof(uint) || resultType == typeof(ushort) || resultType == typeof(byte) || resultType == typeof(sbyte)"  is complex.
Complex Conditional,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateArithmetic,The conditional expression  "(left.Type == right.Type) && (left.Type == typeof(byte) || left.Type == typeof(char) || left.Type == typeof(sbyte))"  is complex.
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: if (expressionName.Equals("TWO"' StringComparison.OrdinalIgnoreCase)) {                  constantValue = 2;                  return true;              }
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: if (expressionName.Equals("HALFPI"' StringComparison.OrdinalIgnoreCase)) {                  constantValue = Math.PI / 2.0;                  return true;              }
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: if (expressionName.Equals("QUARTERPI"' StringComparison.OrdinalIgnoreCase)) {                  constantValue = Math.PI / 4.0;                  return true;              }
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateStandardExpression,The following statement contains a magic number: if (parameters.Count == 2) {                  Func<IExpressionGenerationRequest' Expression' Expression' Expression> binaryGenerator;                  if (_standardBinaryExpressionGeneratorLookup.TryGetValue(expressionName' out binaryGenerator)) {                      Contract.Assume(binaryGenerator != null);                      return binaryGenerator(expressionRequest' parameters[0]' parameters[1]);                  }              }
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateStandardExpression,The following statement contains a magic number: if (parameters.Count > 2) {                  var result = GenerateArithmetic(expressionRequest' parameters);                  if (null != result)                      return result;              }
Magic Number,Vertesaur.Generation.Expressions,DistanceExpression,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\DistanceExpression.cs,DistanceExpression,The following statement contains a magic number: Contract.Requires(components.Length % 2 == 0);
Magic Number,Vertesaur.Generation.Expressions,DotProductExpression,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\DotProductExpression.cs,DotProductExpression,The following statement contains a magic number: if (components.Length % 2 != 0) throw new ArgumentException("Must have an even number of components."' "components");
Magic Number,Vertesaur.Generation.Expressions,DotProductExpression,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\DotProductExpression.cs,CodeContractInvariants,The following statement contains a magic number: Contract.Invariant(Components.Length % 2 == 0);
Magic Number,Vertesaur.Generation.Expressions,DotProductExpression,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\DotProductExpression.cs,Reduce,The following statement contains a magic number: var halfCount = Components.Length / 2;
Magic Number,Vertesaur.Generation.Expressions,SquaredDistanceExpression,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\SquaredDistanceExpression.cs,SquaredDistanceExpression,The following statement contains a magic number: if (components.Length % 2 != 0) throw new ArgumentException("Must have an even number of components."' "components");
Magic Number,Vertesaur.Generation.Expressions,SquaredDistanceExpression,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\SquaredDistanceExpression.cs,CodeContractInvariants,The following statement contains a magic number: Contract.Invariant(Components.Length % 2 == 0);
Magic Number,Vertesaur.Generation.Expressions,SquaredDistanceExpression,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\SquaredDistanceExpression.cs,Reduce,The following statement contains a magic number: var halfCount = Components.Length / 2;
Magic Number,Vertesaur.Generation.Expressions,VectorExpressionGenerator,C:\repos\aarondandy_vertesaur\src\Vertesaur.Generation\Expressions\VectorExpressionGenerator.cs,Generate,The following statement contains a magic number: if (inputExpressions.Length > 0) {                  if (StringComparer.OrdinalIgnoreCase.Equals(expressionName' "MAGNITUDE"))                      return new MagnitudeExpression(inputExpressions' topLevelGenerator);                  if (StringComparer.OrdinalIgnoreCase.Equals(expressionName' "SQUAREDMAGNITUDE"))                      return new SquaredMagnitudeExpression(inputExpressions' topLevelGenerator);                    if (inputExpressions.Length % 2 == 0) {                      if (StringComparer.OrdinalIgnoreCase.Equals(expressionName' "DOTPRODUCT"))                          return new DotProductExpression(inputExpressions' topLevelGenerator);                      if (StringComparer.OrdinalIgnoreCase.Equals(expressionName' "DISTANCE"))                          return new DistanceExpression(inputExpressions' topLevelGenerator);                      if (StringComparer.OrdinalIgnoreCase.Equals(expressionName' "SQUAREDDISTANCE"))                          return new SquaredDistanceExpression(inputExpressions' topLevelGenerator);                  }              }
