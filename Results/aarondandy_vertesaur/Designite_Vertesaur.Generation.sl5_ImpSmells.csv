Implementation smell,Namespace,Class,File,Method,Description
Long Method,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,CoreExpressionGenerator,The method has 163 lines of code.
Complex Method,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,Cyclomatic complexity of the method is 9
Complex Method,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateConstantExpression,Cyclomatic complexity of the method is 8
Long Statement,Vertesaur.Generation.Expressions,AbsExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\AbsExpression.cs,GenerateExpression,The length of the statement  "	return Condition (gen.GenerateOrThrow ("GREATEREQUAL"' parameter' gen.GenerateOrThrow ("ZERO"' Type))' parameter' gen.GenerateOrThrow ("NEGATE"' parameter)); " is 157.
Long Statement,Vertesaur.Generation.Expressions,AcoshExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\AcoshExpression.cs,CreateExpression,The length of the statement  "	return gen.GenerateOrThrow ("LOG"' gen.GenerateOrThrow ("ADD"' gen.GenerateOrThrow ("SQUAREROOT"' gen.GenerateOrThrow ("SUBTRACT"' gen.GenerateOrThrow ("SQUARE"' input)' gen.GenerateOrThrow ("1"' input.Type)))' input)); " is 219.
Long Statement,Vertesaur.Generation.Expressions,AsinhExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\AsinhExpression.cs,CreateExpression,The length of the statement  "	return gen.GenerateOrThrow ("LOG"' gen.GenerateOrThrow ("ADD"' gen.GenerateOrThrow ("SQUAREROOT"' gen.GenerateOrThrow ("ADD"' gen.GenerateOrThrow ("SQUARE"' input)' gen.GenerateOrThrow ("1"' input.Type)))' input)); " is 214.
Long Statement,Vertesaur.Generation.Expressions,Atan2Expression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\Atan2Expression.cs,Reduce,The length of the statement  "	if ((typeof(float) == LeftParameter.Type && typeof(float) == RightParameter.Type) || (typeof(double) == LeftParameter.Type && typeof(double) == RightParameter.Type)) { " is 167.
Long Statement,Vertesaur.Generation.Expressions,AtanhExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\AtanhExpression.cs,CreateExpression,The length of the statement  "	var log = gen.GenerateOrThrow ("LOG"' gen.GenerateOrThrow ("DIVIDE"' gen.GenerateOrThrow ("ADD"' one' input)' gen.GenerateOrThrow ("SUBTRACT"' one' input))); " is 157.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateNegation,The length of the statement  "	if (resultType == typeof(ulong) || resultType == typeof(uint) || resultType == typeof(ushort) || resultType == typeof(byte) || resultType == typeof(sbyte)) { " is 157.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateArithmetic,The length of the statement  "	if ((left.Type == right.Type) && (left.Type == typeof(byte) || left.Type == typeof(char) || left.Type == typeof(sbyte))) { " is 122.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateCompareTo,The length of the statement  "		return Expression.Condition (eq' Expression.Constant (0)' Expression.Condition (less' Expression.Constant (-1)' Expression.Constant (1))); " is 138.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The length of the statement  "	if (expressionName.Equals ("UNDEFINED"' StringComparison.OrdinalIgnoreCase) || expressionName.Equals ("INVALID"' StringComparison.OrdinalIgnoreCase)) { " is 151.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,Generate,The length of the statement  "	if ("CONVERT".Equals (expressionName' StringComparison.OrdinalIgnoreCase) && request.InputExpressions.Count == 1 && null != request.DesiredResultType) { " is 152.
Long Statement,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,Generate,The length of the statement  "	if (request.InputExpressions.Count == 0 && null != request.DesiredResultType && typeof(void) != request.DesiredResultType) { " is 124.
Long Statement,Vertesaur.Generation.Expressions,DistanceExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\DistanceExpression.cs,Reduce,The length of the statement  "	return ReductionExpressionGenerator.Generate ("SquareRoot"' InnerExpression) ?? new SquareRootExpression (InnerExpression' ReductionExpressionGenerator); " is 153.
Long Statement,Vertesaur.Generation.Expressions,ExpressionBuilderExtensionMethods,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\ExpressionBuilderExtensionMethods.cs,InvalidOp,The length of the statement  "	return new InvalidOperationException (String.Format ("Failed to create expression \"{0}\" for {1}."' expressionName' String.Join ("'"' inputExpressions))); " is 155.
Long Statement,Vertesaur.Generation.Expressions,ExpressionBuilderExtensionMethods,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\ExpressionBuilderExtensionMethods.cs,InvalidOp,The length of the statement  "	return new InvalidOperationException (String.Format ("Failed to create expression \"{0}\" for {1}."' expressionName' type.FullName)); " is 133.
Long Statement,Vertesaur.Generation.Expressions,ExpressionBuilderExtensionMethods,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\ExpressionBuilderExtensionMethods.cs,InvalidOpConversion,The length of the statement  "	return new InvalidOperationException (String.Format ("Failed to create conversion from \"{0}\" to {1}."' from.FullName' to.FullName)); " is 134.
Long Statement,Vertesaur.Generation.Expressions,MagnitudeExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\MagnitudeExpression.cs,Reduce,The length of the statement  "	return ReductionExpressionGenerator.Generate ("SquareRoot"' InnerExpression) ?? new SquareRootExpression (InnerExpression' ReductionExpressionGenerator); " is 153.
Long Statement,Vertesaur.Generation,Point2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Point2.cs,Add,The length of the statement  "	return new Point2<TValue> (BasicOperations<TValue>.Default.Add (X' delta.X)' BasicOperations<TValue>.Default.Add (Y' delta.Y)); " is 127.
Long Statement,Vertesaur.Generation,Point2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Point2.cs,Difference,The length of the statement  "	return new Vector2<TValue> (BasicOperations<TValue>.Default.Subtract (X' b.X)' BasicOperations<TValue>.Default.Subtract (Y' b.Y)); " is 130.
Long Statement,Vertesaur.Generation,Point2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Point2.cs,Difference,The length of the statement  "	return new Point2<TValue> (BasicOperations<TValue>.Default.Subtract (X' b.X)' BasicOperations<TValue>.Default.Subtract (Y' b.Y)); " is 129.
Long Statement,Vertesaur.Generation,Vector2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Vector2.cs,Add,The length of the statement  "	return new Vector2<TValue> (BasicOperations<TValue>.Default.Add (X' rightHandSide.X)' BasicOperations<TValue>.Default.Add (Y' rightHandSide.Y)); " is 144.
Long Statement,Vertesaur.Generation,Vector2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Vector2.cs,Add,The length of the statement  "	return new Point2<TValue> (BasicOperations<TValue>.Default.Add (X' rightHandSide.X)' BasicOperations<TValue>.Default.Add (Y' rightHandSide.Y)); " is 143.
Long Statement,Vertesaur.Generation,Vector2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Vector2.cs,Difference,The length of the statement  "	return new Vector2<TValue> (BasicOperations<TValue>.Default.Subtract (X' rightHandSide.X)' BasicOperations<TValue>.Default.Subtract (Y' rightHandSide.Y)); " is 154.
Long Statement,Vertesaur.Generation,Vector2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Vector2.cs,Difference,The length of the statement  "	return new Point2<TValue> (BasicOperations<TValue>.Default.Subtract (X' rightHandSide.X)' BasicOperations<TValue>.Default.Subtract (Y' rightHandSide.Y)); " is 153.
Long Statement,Vertesaur.Generation,Vector2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Vector2.cs,GetScaled,The length of the statement  "	return new Vector2<TValue> (BasicOperations<TValue>.Default.Multiply (X' factor)' BasicOperations<TValue>.Default.Multiply (Y' factor)); " is 136.
Long Statement,Vertesaur.Generation,Vector2,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Vector2.cs,GetNormalized,The length of the statement  "	return new Vector2<TValue> (BasicOperations<TValue>.Default.Divide (X' m)' BasicOperations<TValue>.Default.Divide (Y' m)); " is 122.
Long Statement,Vertesaur.Generation.Utility,ReflectionUtils,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Utility\ReflectionUtils.cs,GetInterfacesByGenericTypeDefinition,The length of the statement  "	return targetType.GetInterfaces ().Where (t => t.IsGenericType && t.GetGenericTypeDefinition () == genericTypeDefinition); " is 122.
Long Statement,Vertesaur.Generation.Utility,ReflectionUtils,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Utility\ReflectionUtils.cs,GetPublicInstanceInvokableMethod,The length of the statement  "	return targetType.GetMethod (methodName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.InvokeMethod' null' paramTypes' null); " is 138.
Long Statement,Vertesaur.Generation.Utility,ReflectionUtils,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Utility\ReflectionUtils.cs,GetPublicStaticInvokableMethod,The length of the statement  "	return targetType.GetMethod (methodName' BindingFlags.Public | BindingFlags.Static | BindingFlags.InvokeMethod' null' paramTypes' null); " is 136.
Complex Conditional,Vertesaur.Generation.Expressions,Atan2Expression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\Atan2Expression.cs,Reduce,The conditional expression  "(typeof(float) == LeftParameter.Type && typeof(float) == RightParameter.Type) || (typeof(double) == LeftParameter.Type && typeof(double) == RightParameter.Type)"  is complex.
Complex Conditional,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateNegation,The conditional expression  "resultType == typeof(ulong) || resultType == typeof(uint) || resultType == typeof(ushort) || resultType == typeof(byte) || resultType == typeof(sbyte)"  is complex.
Complex Conditional,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateArithmetic,The conditional expression  "(left.Type == right.Type) && (left.Type == typeof(byte) || left.Type == typeof(char) || left.Type == typeof(sbyte))"  is complex.
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: if (expressionName.Equals ("TWO"' StringComparison.OrdinalIgnoreCase)) {  	constantValue = 2;  	return true;  }  
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: constantValue = 2;  
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: if (expressionName.Equals ("HALFPI"' StringComparison.OrdinalIgnoreCase)) {  	constantValue = Math.PI / 2.0;  	return true;  }  
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: constantValue = Math.PI / 2.0;  
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: if (expressionName.Equals ("QUARTERPI"' StringComparison.OrdinalIgnoreCase)) {  	constantValue = Math.PI / 4.0;  	return true;  }  
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,TryGetDoubleConstantValue,The following statement contains a magic number: constantValue = Math.PI / 4.0;  
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateStandardExpression,The following statement contains a magic number: if (parameters.Count == 2) {  	Func<IExpressionGenerationRequest' Expression' Expression' Expression> binaryGenerator;  	if (_standardBinaryExpressionGeneratorLookup.TryGetValue (expressionName' out binaryGenerator)) {  		Contract.Assume (binaryGenerator != null);  		return binaryGenerator (expressionRequest' parameters [0]' parameters [1]);  	}  }  
Magic Number,Vertesaur.Generation.Expressions,CoreExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\CoreExpressionGenerator.cs,GenerateStandardExpression,The following statement contains a magic number: if (parameters.Count > 2) {  	var result = GenerateArithmetic (expressionRequest' parameters);  	if (null != result)  		return result;  }  
Magic Number,Vertesaur.Generation.Expressions,DistanceExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\DistanceExpression.cs,DistanceExpression,The following statement contains a magic number: Contract.Requires (components.Length % 2 == 0);  
Magic Number,Vertesaur.Generation.Expressions,DotProductExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\DotProductExpression.cs,DotProductExpression,The following statement contains a magic number: if (components.Length % 2 != 0)  	throw new ArgumentException ("Must have an even number of components."' "components");  
Magic Number,Vertesaur.Generation.Expressions,DotProductExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\DotProductExpression.cs,CodeContractInvariants,The following statement contains a magic number: Contract.Invariant (Components.Length % 2 == 0);  
Magic Number,Vertesaur.Generation.Expressions,SquaredDistanceExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\SquaredDistanceExpression.cs,SquaredDistanceExpression,The following statement contains a magic number: if (components.Length % 2 != 0)  	throw new ArgumentException ("Must have an even number of components."' "components");  
Magic Number,Vertesaur.Generation.Expressions,SquaredDistanceExpression,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\SquaredDistanceExpression.cs,CodeContractInvariants,The following statement contains a magic number: Contract.Invariant (Components.Length % 2 == 0);  
Magic Number,Vertesaur.Generation.Expressions,VectorExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\VectorExpressionGenerator.cs,Generate,The following statement contains a magic number: if (inputExpressions.Length > 0) {  	if (StringComparer.OrdinalIgnoreCase.Equals (expressionName' "MAGNITUDE"))  		return new MagnitudeExpression (inputExpressions' topLevelGenerator);  	if (StringComparer.OrdinalIgnoreCase.Equals (expressionName' "SQUAREDMAGNITUDE"))  		return new SquaredMagnitudeExpression (inputExpressions' topLevelGenerator);  	if (inputExpressions.Length % 2 == 0) {  		if (StringComparer.OrdinalIgnoreCase.Equals (expressionName' "DOTPRODUCT"))  			return new DotProductExpression (inputExpressions' topLevelGenerator);  		if (StringComparer.OrdinalIgnoreCase.Equals (expressionName' "DISTANCE"))  			return new DistanceExpression (inputExpressions' topLevelGenerator);  		if (StringComparer.OrdinalIgnoreCase.Equals (expressionName' "SQUAREDDISTANCE"))  			return new SquaredDistanceExpression (inputExpressions' topLevelGenerator);  	}  }  
Magic Number,Vertesaur.Generation.Expressions,VectorExpressionGenerator,F:\newReposMay17\aarondandy_vertesaur\ports\Vertesaur.Generation.sl5\..\..\src\Vertesaur.Generation\Expressions\VectorExpressionGenerator.cs,Generate,The following statement contains a magic number: if (inputExpressions.Length % 2 == 0) {  	if (StringComparer.OrdinalIgnoreCase.Equals (expressionName' "DOTPRODUCT"))  		return new DotProductExpression (inputExpressions' topLevelGenerator);  	if (StringComparer.OrdinalIgnoreCase.Equals (expressionName' "DISTANCE"))  		return new DistanceExpression (inputExpressions' topLevelGenerator);  	if (StringComparer.OrdinalIgnoreCase.Equals (expressionName' "SQUAREDDISTANCE"))  		return new SquaredDistanceExpression (inputExpressions' topLevelGenerator);  }  
