Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ExampleRemotingService,Program,C:\repos\tyranid_ExploitRemotingService\ExampleRemotingService\Program.cs,Main,The method has 6 parameters.
Long Statement,ExampleRemotingService,Program,C:\repos\tyranid_ExploitRemotingService\ExampleRemotingService\Program.cs,Main,The length of the statement  "			RemotingConfiguration.RegisterWellKnownServiceType (typeof(RemoteType)' "RemotingServer"' WellKnownObjectMode.Singleton); " is 121.
Long Statement,ExampleRemotingService,Program,C:\repos\tyranid_ExploitRemotingService\ExampleRemotingService\Program.cs,Main,The length of the statement  "			Console.WriteLine ("Server Activated at {0}://{1}/RemotingServer"' isipc ? "ipc" : "tcp"' isipc ? ipc : "HOST:" + port.ToString ()); " is 132.
Magic Number,ExampleRemotingService,Program,C:\repos\tyranid_ExploitRemotingService\ExampleRemotingService\Program.cs,Main,The following statement contains a magic number: try {  	RemotingConfiguration.CustomErrorsMode = CustomErrorsModes.Off;  	bool secure = false;  	int port = 12345;  	string ipc = String.Empty;  	bool showhelp = false;  	TypeFilterLevel typefilter = TypeFilterLevel.Low;  	OptionSet p = new OptionSet () {  		{  			"s|secure"'  			"Enable secure mode"'  			v => secure = v != null  		}'  		{  			"p|port="'  			"Specify the local TCP port to listen on"'  			v => port = int.Parse (v)  		}'  		{  			"t|typefilter="'  			"Specify the type filter level (low'full)' default low"'  			v => typefilter = (TypeFilterLevel)Enum.Parse (typeof(TypeFilterLevel)' v' true)  		}'  		{  			"i|ipc="'  			"Specify listening pipe name for IPC channel"'  			v => ipc = v  		}'  		{  			"h|?|help"'  			v => showhelp = v != null  		}'  	};  	p.Parse (args);  	if (showhelp) {  		Console.WriteLine ("Example .NET Remoting Server");  		Console.WriteLine ("Copyright (c) James Forshaw 2014");  		p.WriteOptionDescriptions (Console.Out);  	}  	else {  		Trace.Listeners.Add (new ConsoleTraceListener (true));  		IChannel chan;  		IDictionary properties = new Hashtable ();  		BinaryServerFormatterSinkProvider serverSinkProvider = new BinaryServerFormatterSinkProvider ();  		serverSinkProvider.TypeFilterLevel = typefilter;  		if (!String.IsNullOrEmpty (ipc)) {  			properties ["portName"] = ipc;  			properties ["authorizedGroup"] = "Everyone";  			chan = new IpcChannel (properties' new BinaryClientFormatterSinkProvider ()' serverSinkProvider);  		}  		else {  			properties ["port"] = port;  			chan = new TcpChannel (properties' new BinaryClientFormatterSinkProvider ()' serverSinkProvider);  		}  		ChannelServices.RegisterChannel (chan' secure);  		//register channel  		RemotingConfiguration.RegisterWellKnownServiceType (typeof(RemoteType)' "RemotingServer"' WellKnownObjectMode.Singleton);  		bool isipc = chan is IpcChannel;  		Console.WriteLine ("Server Activated at {0}://{1}/RemotingServer"' isipc ? "ipc" : "tcp"' isipc ? ipc : "HOST:" + port.ToString ());  		Console.ReadLine ();  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.ToString ());  }  
