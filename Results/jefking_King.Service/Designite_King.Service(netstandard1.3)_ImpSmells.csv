Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,King.Service,AutoScaler<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\AutoScaler.cs,AutoScaler,The method has 5 parameters. Parameters: scaler' configuration' minimum' maximum' checkScaleInMinutes
Long Parameter List,King.Service.Data,Coordinator,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\Coordinator.cs,Complete,The method has 5 parameters. Parameters: type' identifier' start' end' success
Long Parameter List,King.Service.Data,DequeueBatch<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Data\DequeueBatch.cs,DequeueBatch,The method has 5 parameters. Parameters: poller' processor' batchCount' minimumPeriodInSeconds' maximumPeriodInSeconds
Long Parameter List,King.Service.Data,DequeueBatchDynamic<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Data\DequeueBatchDynamic.cs,DequeueBatchDynamic,The method has 5 parameters. Parameters: poller' processor' tracker' minimumPeriodInSeconds' maximumPeriodInSeconds
Long Parameter List,King.Service.Data,ICoordinator,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Data\Interfaces.cs,Complete,The method has 5 parameters. Parameters: type' identifier' start' end' success
Long Parameter List,King.Service.Data,QueueAutoScaler<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Data\QueueAutoScaler.cs,QueueAutoScaler,The method has 6 parameters. Parameters: count' messagesPerScaleUnit' configuration' minimum' maximum' checkScaleInMinutes
Long Parameter List,King.Service.Azure,StorageDequeue<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\StorageDequeue.cs,StorageDequeue,The method has 5 parameters. Parameters: name' connectionString' processor' minimumPeriodInSeconds' maximumPeriodInSeconds
Long Parameter List,King.Service.Azure,StorageDequeueBatch<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\StorageDequeueBatch.cs,StorageDequeueBatch,The method has 6 parameters. Parameters: name' connectionString' processor' batchCount' minimumPeriodInSeconds' maximumPeriodInSeconds
Long Parameter List,King.Service.Azure,StorageDequeueBatch<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\StorageDequeueBatch.cs,StorageDequeueBatch,The method has 5 parameters. Parameters: queue' processor' batchCount' minimumPeriodInSeconds' maximumPeriodInSeconds
Long Parameter List,King.Service.Azure,StorageDequeueBatchDynamic<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\StorageDequeueBatchDynamic.cs,StorageDequeueBatchDynamic,The method has 5 parameters. Parameters: name' connectionString' processor' minimumPeriodInSeconds' maximumPeriodInSeconds
Long Parameter List,King.Service.Azure,StorageDequeueBatchDynamic<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\StorageDequeueBatchDynamic.cs,StorageDequeueBatchDynamic,The method has 5 parameters. Parameters: queue' processor' tracker' minimumPeriodInSeconds' maximumPeriodInSeconds
Long Parameter List,King.Service.Azure,StorageQueueAutoScaler<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\StorageQueueAutoScaler.cs,StorageQueueAutoScaler,The method has 6 parameters. Parameters: count' connection' messagesPerScaleUnit' minimum' maximum' checkScaleInMinutes
Long Parameter List,King.Service.Azure,StorageQueueAutoScaler<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\StorageQueueAutoScaler.cs,StorageQueueAutoScaler,The method has 7 parameters. Parameters: count' connection' throughput' messagesPerScaleUnit' minimum' maximum' checkScaleInMinutes
Long Statement,King.Service,RoleTaskManager<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\RoleTaskManager.cs,OnStart,The length of the statement  "                var ts = (from f in this.factories select f.Tasks(passthrough)).Where(f => f != null).SelectMany(t => t).Where(t => t != null); " is 127.
Long Statement,King.Service,TaskFinderFactory<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\TaskFinderFactory.cs,Tasks,The length of the statement  "                        var run = new BetweenRuns(Activator.CreateInstance(type.AsType())' method' between.Frequency.Minimum' between.Frequency.Maximum); " is 129.
Long Statement,King.Service.Data,DequeueBatchDynamic<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Data\DequeueBatchDynamic.cs,RunCompleted,The length of the statement  "            Trace.TraceInformation("Dequeue message processing took: {0}; for {1} messages for processing by {2}."' duration' count' base.processor.GetType()); " is 147.
Long Statement,King.Service.Azure,StorageQueueAutoScaler<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\StorageQueueAutoScaler.cs,Runs,The length of the statement  "            return new StorageDequeueBatchDynamic<T>(queue.Setup.Name' queue.ConnectionString' queue.Setup.Processor()' frequency.Minimum' frequency.Maximum); " is 146.
Long Statement,King.Service.Timing,LinearTiming,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Timing\LinearTiming.cs,Get,The length of the statement  "            return attempts > 10 ? this.periodInSeconds.Maximum : this.periodInSeconds.Minimum + (((this.periodInSeconds.Maximum - this.periodInSeconds.Minimum) * .1) * attempts); " is 167.
Magic Number,King.Service,AutoScaler<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\AutoScaler.cs,AutoScaler,The following statement contains a magic number: this.instanceCount.Maximum = 2 > maximum ? (byte)2 : maximum;
Magic Number,King.Service,AutoScaler<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\AutoScaler.cs,AutoScaler,The following statement contains a magic number: this.instanceCount.Maximum = 2 > maximum ? (byte)2 : maximum;
Magic Number,King.Service,RunAtTask,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\RunAtTask.cs,RunAtTask,The following statement contains a magic number: this.hour = hour > 23 ? (byte)23 : hour;
Magic Number,King.Service,RunAtTask,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\RunAtTask.cs,RunAtTask,The following statement contains a magic number: this.hour = hour > 23 ? (byte)23 : hour;
Magic Number,King.Service,RunAtTask,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\RunAtTask.cs,RunAtTask,The following statement contains a magic number: this.minute = minute < 0 ? (sbyte)-1 : (minute > 59 ? (sbyte)59 : (sbyte)minute);
Magic Number,King.Service,RunAtTask,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\RunAtTask.cs,RunAtTask,The following statement contains a magic number: this.minute = minute < 0 ? (sbyte)-1 : (minute > 59 ? (sbyte)59 : (sbyte)minute);
Magic Number,King.Service.Data,Coordinator,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Azure\Coordinator.cs,Coordinator,The following statement contains a magic number: this.retryInterval = TimeSpan.FromSeconds(period.TotalSeconds * 2.5);
Magic Number,King.Service.Data,DequeueFactory,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Data\DequeueFactory.cs,Shards,The following statement contains a magic number: shardCount = shardCount > 0 ? shardCount : (byte)2;
Magic Number,King.Service.Scalability,QueueScaler<T>,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueScaler.cs,QueueScaler,The following statement contains a magic number: this.messagesPerScaleUnit = messagesPerScaleUnit < 10 ? (ushort)MessagesPerScaleUnitDefault : messagesPerScaleUnit;
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,MessagesPerScaleUnit,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return 9500;                  case QueuePriority.Medium:                      return 1400;                  default:                      return QueueScaler<object>.MessagesPerScaleUnitDefault;              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,MessagesPerScaleUnit,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return 9500;                  case QueuePriority.Medium:                      return 1400;                  default:                      return QueueScaler<object>.MessagesPerScaleUnitDefault;              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,Frequency,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return new Range<byte>(1' 5);                  case QueuePriority.Medium:                      return new Range<byte>(5' 15);                  default:                      return new Range<byte>(BaseTimes.DefaultMinimumTiming' BaseTimes.DefaultMaximumTiming);              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,Frequency,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return new Range<byte>(1' 5);                  case QueuePriority.Medium:                      return new Range<byte>(5' 15);                  default:                      return new Range<byte>(BaseTimes.DefaultMinimumTiming' BaseTimes.DefaultMaximumTiming);              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,Frequency,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return new Range<byte>(1' 5);                  case QueuePriority.Medium:                      return new Range<byte>(5' 15);                  default:                      return new Range<byte>(BaseTimes.DefaultMinimumTiming' BaseTimes.DefaultMaximumTiming);              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,Scale,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return new Range<byte>(2' 5);                  case QueuePriority.Medium:                      return new Range<byte>(1' 4);                  default:                      return new Range<byte>(1' 2);              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,Scale,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return new Range<byte>(2' 5);                  case QueuePriority.Medium:                      return new Range<byte>(1' 4);                  default:                      return new Range<byte>(1' 2);              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,Scale,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return new Range<byte>(2' 5);                  case QueuePriority.Medium:                      return new Range<byte>(1' 4);                  default:                      return new Range<byte>(1' 2);              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,Scale,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return new Range<byte>(2' 5);                  case QueuePriority.Medium:                      return new Range<byte>(1' 4);                  default:                      return new Range<byte>(1' 2);              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,CheckScaleEvery,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return 2;                  case QueuePriority.Medium:                      return 3;                  default:                      return 4;              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,CheckScaleEvery,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return 2;                  case QueuePriority.Medium:                      return 3;                  default:                      return 4;              }
Magic Number,King.Service.Scalability,QueueThroughput,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Scalability\QueueThroughput.cs,CheckScaleEvery,The following statement contains a magic number: switch (priority)              {                  case QueuePriority.High:                      return 2;                  case QueuePriority.Medium:                      return 3;                  default:                      return 4;              }
Magic Number,King.Service.Timing,ExponentialTiming,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Timing\ExponentialTiming.cs,Get,The following statement contains a magic number: var current = ((Math.Pow(2' attempts) * .1d) * this.periodInSeconds.Minimum) + this.periodInSeconds.Minimum;
Magic Number,King.Service.Timing,ExponentialTiming,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Timing\ExponentialTiming.cs,Get,The following statement contains a magic number: var current = ((Math.Pow(2' attempts) * .1d) * this.periodInSeconds.Minimum) + this.periodInSeconds.Minimum;
Magic Number,King.Service.Timing,LinearTiming,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Timing\LinearTiming.cs,Get,The following statement contains a magic number: return attempts > 10 ? this.periodInSeconds.Maximum : this.periodInSeconds.Minimum + (((this.periodInSeconds.Maximum - this.periodInSeconds.Minimum) * .1) * attempts);
Magic Number,King.Service.Timing,LinearTiming,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Timing\LinearTiming.cs,Get,The following statement contains a magic number: return attempts > 10 ? this.periodInSeconds.Maximum : this.periodInSeconds.Minimum + (((this.periodInSeconds.Maximum - this.periodInSeconds.Minimum) * .1) * attempts);
Magic Number,King.Service.Timing,TimingTracker,D:\research\architectureSmells\repos\jefking_King.Service\King.Service\Timing\TimingTracker.cs,TimingTracker,The following statement contains a magic number: this.maxTime = TimeSpan.FromTicks((long)Math.Round(maxTime.Ticks * .75' 0));
