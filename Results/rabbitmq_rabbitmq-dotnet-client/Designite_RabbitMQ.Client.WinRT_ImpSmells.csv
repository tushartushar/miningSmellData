Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RabbitMQ.Client,ConnectionFactory,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ConnectionFactory.cs,SetUri,Cyclomatic complexity of the method is 9
Complex Method,RabbitMQ.Util,SortedList<TKey;TValue>,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\SortedList.cs,CopyTo,Cyclomatic complexity of the method is 8
Long Parameter List,RabbitMQ.Client,AsyncDefaultBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\AsyncDefaultBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client,AsyncDefaultBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\AsyncDefaultBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client,BasicGetResult,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\BasicGetResult.cs,BasicGetResult,The method has 7 parameters. Parameters: deliveryTag' redelivered' exchange' routingKey' messageCount' basicProperties' body
Long Parameter List,RabbitMQ.Client,DefaultBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\DefaultBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client,IAsyncBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IAsyncBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client,IBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client,IBasicPublishBatch,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IBasicPublishBatch.cs,Add,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' properties' body
Long Parameter List,RabbitMQ.Client,IModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModel.cs,BasicConsume,The method has 7 parameters. Parameters: queue' autoAck' consumerTag' noLocal' exclusive' arguments' consumer
Long Parameter List,RabbitMQ.Client,IModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModel.cs,BasicPublish,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client,IModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModel.cs,ExchangeDeclare,The method has 5 parameters. Parameters: exchange' type' durable' autoDelete' arguments
Long Parameter List,RabbitMQ.Client,IModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModel.cs,ExchangeDeclareNoWait,The method has 5 parameters. Parameters: exchange' type' durable' autoDelete' arguments
Long Parameter List,RabbitMQ.Client,IModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModel.cs,QueueDeclare,The method has 5 parameters. Parameters: queue' durable' exclusive' autoDelete' arguments
Long Parameter List,RabbitMQ.Client,IModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModel.cs,QueueDeclareNoWait,The method has 5 parameters. Parameters: queue' durable' exclusive' autoDelete' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,BasicConsume,The method has 8 parameters. Parameters: model' consumer' queue' autoAck' consumerTag' noLocal' exclusive' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,BasicConsume,The method has 5 parameters. Parameters: model' queue' autoAck' consumerTag' consumer
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,BasicConsume,The method has 6 parameters. Parameters: model' queue' autoAck' consumerTag' arguments' consumer
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,BasicPublish,The method has 5 parameters. Parameters: model' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,BasicPublish,The method has 6 parameters. Parameters: model' exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,QueueDeclare,The method has 6 parameters. Parameters: model' queue' durable' exclusive' autoDelete' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,ExchangeBind,The method has 5 parameters. Parameters: model' destination' source' routingKey' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,ExchangeBindNoWait,The method has 5 parameters. Parameters: model' destination' source' routingKey' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,ExchangeDeclare,The method has 6 parameters. Parameters: model' exchange' type' durable' autoDelete' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,ExchangeDeclareNoWait,The method has 6 parameters. Parameters: model' exchange' type' durable' autoDelete' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,ExchangeUnbind,The method has 5 parameters. Parameters: model' destination' source' routingKey' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,QueueBind,The method has 5 parameters. Parameters: model' queue' exchange' routingKey' arguments
Long Parameter List,RabbitMQ.Client,IModelExensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IModelExtensions.cs,QueueUnbind,The method has 5 parameters. Parameters: model' queue' exchange' routingKey' arguments
Long Parameter List,RabbitMQ.Client,IQueueingBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\IQueueingBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client,QueueingBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\QueueingBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client,ShutdownEventArgs,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ShutdownEventArgs.cs,ShutdownEventArgs,The method has 6 parameters. Parameters: initiator' replyCode' replyText' classId' methodId' cause
Long Parameter List,RabbitMQ.Client.Events,AsyncEventingBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\events\AsyncEventingBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client.Events,BasicDeliverEventArgs,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\events\BasicDeliverEventArgs.cs,BasicDeliverEventArgs,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client.Events,EventingBasicConsumer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\events\EventingBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,RabbitMQ.Client.Impl,AsyncConsumerDispatcher,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AsyncConsumerDispatcher.cs,HandleBasicDeliver,The method has 8 parameters. Parameters: consumer' consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,HandleBasicGetOk,The method has 7 parameters. Parameters: deliveryTag' redelivered' exchange' routingKey' messageCount' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,HandleBasicReturn,The method has 6 parameters. Parameters: replyCode' replyText' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,HandleConnectionStart,The method has 5 parameters. Parameters: versionMajor' versionMinor' serverProperties' mechanisms' locales
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,_Private_BasicConsume,The method has 7 parameters. Parameters: queue' consumerTag' noLocal' autoAck' exclusive' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,_Private_BasicPublish,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,_Private_ExchangeBind,The method has 5 parameters. Parameters: destination' source' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,_Private_ExchangeDeclare,The method has 8 parameters. Parameters: exchange' type' passive' durable' autoDelete' internal' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,_Private_ExchangeUnbind,The method has 5 parameters. Parameters: destination' source' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,_Private_QueueBind,The method has 5 parameters. Parameters: queue' exchange' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,_Private_QueueDeclare,The method has 7 parameters. Parameters: queue' passive' durable' exclusive' autoDelete' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,BasicConsume,The method has 7 parameters. Parameters: queue' autoAck' consumerTag' noLocal' exclusive' arguments' consumer
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,BasicPublish,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,ExchangeDeclare,The method has 5 parameters. Parameters: exchange' type' durable' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,ExchangeDeclareNoWait,The method has 5 parameters. Parameters: exchange' type' durable' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,QueueDeclare,The method has 5 parameters. Parameters: queue' durable' exclusive' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,QueueDeclareNoWait,The method has 5 parameters. Parameters: queue' durable' exclusive' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,BasicDeliver,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\BasicDeliver.cs,BasicDeliver,The method has 8 parameters. Parameters: consumer' consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,BasicPublishBatch,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\BasicPublishBatch.cs,Add,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,ConcurrentConsumerDispatcher,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ConcurrentConsumerDispatcher.cs,HandleBasicDeliver,The method has 8 parameters. Parameters: consumer' consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,IConsumerDispatcher,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IConsumerDispatcher.cs,HandleBasicDeliver,The method has 8 parameters. Parameters: consumer' consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,HandleBasicGetOk,The method has 7 parameters. Parameters: deliveryTag' redelivered' exchange' routingKey' messageCount' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,HandleBasicReturn,The method has 6 parameters. Parameters: replyCode' replyText' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,HandleConnectionStart,The method has 5 parameters. Parameters: versionMajor' versionMinor' serverProperties' mechanisms' locales
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_BasicConsume,The method has 7 parameters. Parameters: queue' consumerTag' noLocal' autoAck' exclusive' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_BasicPublish,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_ExchangeBind,The method has 5 parameters. Parameters: destination' source' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_ExchangeDeclare,The method has 8 parameters. Parameters: exchange' type' passive' durable' autoDelete' internal' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_ExchangeUnbind,The method has 5 parameters. Parameters: destination' source' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_QueueBind,The method has 5 parameters. Parameters: queue' exchange' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_QueueDeclare,The method has 7 parameters. Parameters: queue' passive' durable' exclusive' autoDelete' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,HandleBasicGetOk,The method has 7 parameters. Parameters: deliveryTag' redelivered' exchange' routingKey' messageCount' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,HandleBasicReturn,The method has 6 parameters. Parameters: replyCode' replyText' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,HandleConnectionStart,The method has 5 parameters. Parameters: versionMajor' versionMinor' serverProperties' mechanisms' locales
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,_Private_BasicConsume,The method has 7 parameters. Parameters: queue' consumerTag' noLocal' autoAck' exclusive' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,_Private_BasicPublish,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,_Private_ExchangeBind,The method has 5 parameters. Parameters: destination' source' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,_Private_ExchangeDeclare,The method has 8 parameters. Parameters: exchange' type' passive' durable' autoDelete' internal' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,_Private_ExchangeUnbind,The method has 5 parameters. Parameters: destination' source' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,_Private_QueueBind,The method has 5 parameters. Parameters: queue' exchange' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,_Private_QueueDeclare,The method has 7 parameters. Parameters: queue' passive' durable' exclusive' autoDelete' nowait' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,BasicConsume,The method has 7 parameters. Parameters: queue' autoAck' consumerTag' noLocal' exclusive' arguments' consumer
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,BasicPublish,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,ExchangeDeclare,The method has 5 parameters. Parameters: exchange' type' durable' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,ExchangeDeclareNoWait,The method has 5 parameters. Parameters: exchange' type' durable' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,QueueDeclare,The method has 5 parameters. Parameters: queue' durable' exclusive' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,QueueDeclareNoWait,The method has 5 parameters. Parameters: queue' durable' exclusive' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,QueueDeclare,The method has 6 parameters. Parameters: queue' passive' durable' exclusive' autoDelete' arguments
Long Parameter List,RabbitMQ.Client.Impl,RecoveryAwareModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\RecoveryAwareModel.cs,HandleBasicGetOk,The method has 7 parameters. Parameters: deliveryTag' redelivered' exchange' routingKey' messageCount' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,RecoveryAwareModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\RecoveryAwareModel.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Impl,SocketFrameHandler,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\client\impl\SocketFrameHandlerWinRT.cs,SocketFrameHandler,The method has 5 parameters. Parameters: endpoint' socketFactory' connectionTimeout' _readTimeout' _writeTimeout
Long Parameter List,RabbitMQ.Client.Framing.Impl,IProtocolExtensions,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IProtocolExtensions.cs,CreateFrameHandler,The method has 6 parameters. Parameters: protocol' endpoint' socketFactory' connectionTimeout' readTimeout' writeTimeout
Long Parameter List,RabbitMQ.Client.Framing.Impl,ProtocolBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ProtocolBase.cs,CreateChannelClose,The method has 5 parameters. Parameters: reasonCode' reasonText' request' replyClassId' replyMethodId
Long Parameter List,RabbitMQ.Client.Framing.Impl,ProtocolBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ProtocolBase.cs,CreateConnectionClose,The method has 5 parameters. Parameters: reasonCode' reasonText' request' replyClassId' replyMethodId
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,HandleBasicGetOk,The method has 7 parameters. Parameters: deliveryTag' redelivered' exchange' routingKey' messageCount' basicProperties' body
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,HandleBasicReturn,The method has 6 parameters. Parameters: replyCode' replyText' exchange' routingKey' basicProperties' body
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,HandleConnectionStart,The method has 5 parameters. Parameters: versionMajor' versionMinor' serverProperties' mechanisms' locales
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_BasicConsume,The method has 7 parameters. Parameters: queue' consumerTag' noLocal' autoAck' exclusive' nowait' arguments
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_BasicPublish,The method has 5 parameters. Parameters: exchange' routingKey' mandatory' basicProperties' body
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_ExchangeBind,The method has 5 parameters. Parameters: destination' source' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_ExchangeDeclare,The method has 8 parameters. Parameters: exchange' type' passive' durable' autoDelete' internal' nowait' arguments
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_ExchangeUnbind,The method has 5 parameters. Parameters: destination' source' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_QueueBind,The method has 5 parameters. Parameters: queue' exchange' routingKey' nowait' arguments
Long Parameter List,RabbitMQ.Client.Apigen.Attributes,IFullModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\IFullModel.cs,_Private_QueueDeclare,The method has 7 parameters. Parameters: queue' passive' durable' exclusive' autoDelete' nowait' arguments
Long Identifier,RabbitMQ.Client,ConnectionFactory,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ConnectionFactory.cs,,The length of the parameter m_handshakeContinuationTimeout is 30.
Long Identifier,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,,The length of the parameter m_recordedBasicAckEventHandlers is 31.
Long Identifier,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,,The length of the parameter m_recordedBasicNackEventHandlers is 32.
Long Identifier,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,,The length of the parameter m_recordedBasicReturnEventHandlers is 34.
Long Identifier,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,,The length of the parameter m_recordedCallbackExceptionEventHandlers is 40.
Long Identifier,RabbitMQ.Client.Impl,AutorecoveringModel,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringModel.cs,,The length of the parameter m_recordedShutdownEventHandlers is 31.
Long Identifier,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,,The length of the parameter m_handshakeContinuationTimeout is 30.
Long Identifier,RabbitMQ.Client.Framing.Impl,AutorecoveringConnection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringConnection.cs,,The length of the parameter m_recordedBlockedEventHandlers is 30.
Long Identifier,RabbitMQ.Client.Framing.Impl,AutorecoveringConnection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringConnection.cs,,The length of the parameter m_recordedShutdownEventHandlers is 31.
Long Identifier,RabbitMQ.Client.Framing.Impl,AutorecoveringConnection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringConnection.cs,,The length of the parameter m_recordedUnblockedEventHandlers is 32.
Long Statement,RabbitMQ.Client.Impl,AsyncConsumerDispatcher,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AsyncConsumerDispatcher.cs,HandleBasicDeliver,The length of the statement  "            ScheduleUnlessShuttingDown(new BasicDeliver(consumer' consumerTag' deliveryTag' redelivered' exchange' routingKey' basicProperties' body)); " is 139.
Long Statement,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,StartAndTune,The length of the statement  "                string mechanismsString = Encoding.UTF8.GetString(connectionStart.m_mechanisms' 0' connectionStart.m_mechanisms.Length); " is 120.
Long Statement,RabbitMQ.Util,SortedList<TKey;TValue>,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\SortedList.cs,ToKey,The length of the statement  "                throw new ArgumentException("The value \"" + key + "\" isn't of type \"" + typeof(TKey) + "\" and can't be used in this generic collection."' "key"); " is 149.
Long Statement,RabbitMQ.Util,SortedList<TKey;TValue>,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\SortedList.cs,ToValue,The length of the statement  "                throw new ArgumentException("The value \"" + value + "\" isn't of type \"" + typeof(TValue) + "\" and can't be used in this generic collection."' "value"); " is 155.
Long Statement,System.Threading,Timer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\Timer.cs,Change,The length of the statement  "                ThreadPoolTimer.CreateTimer(timer => this.StartTimers(period)' TimeSpan.FromMilliseconds(dueTime)' timer => timer.Cancel()); " is 124.
Long Statement,System.Threading,Timer,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\Timer.cs,StartTimers,The length of the statement  "                threadPoolTimer = ThreadPoolTimer.CreateTimer(timer => callback(state)' TimeSpan.FromMilliseconds(0)' timer => timer.Cancel()); " is 127.
Complex Conditional,RabbitMQ.Client.Content,StreamWireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\content\StreamWireFormatting.cs,ReadInt64,The conditional expression  "value is long || value is int || value is short || value is byte"  is complex.
Complex Conditional,RabbitMQ.Client.Impl,MainSession,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\MainSession.cs,Transmit,The conditional expression  "((method.ProtocolClassId == m_closeOkClassId)                   && (method.ProtocolMethodId == m_closeOkMethodId))                  || (!m_closeServerInitiated && (                      (method.ProtocolClassId == m_closeClassId) &&                      (method.ProtocolMethodId == m_closeMethodId))                      )"  is complex.
Virtual Method Call from Constructor,RabbitMQ.Client.Content,BasicMessageBuilder,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\content\BasicMessageBuilder.cs,BasicMessageBuilder,The constructor "BasicMessageBuilder" calls a virtual method "GetDefaultContentType".
Virtual Method Call from Constructor,RabbitMQ.Client.Impl,MethodOutboundFrame,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Frame.cs,MethodOutboundFrame,The constructor "MethodOutboundFrame" calls a virtual method "WriteArgumentsTo".
Empty Catch Block,RabbitMQ.Client,WorkPool,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AsyncConsumerWorkService.cs,Loop,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,ConnectionOpen,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,ConnectionSecureOk,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,ConnectionStartOk,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,OnCallbackException,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,HandleConnectionClose,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,HandleConnectionClose,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Impl,Work,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Work.cs,Execute,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,AutorecoveringConnection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AutorecoveringConnection.cs,Dispose,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,Close,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,OnCallbackException,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,HeartbeatReadTimerCallback,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,HeartbeatReadTimerCallback,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,HeartbeatWriteTimerCallback,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,MaybeDisposeTimer,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,MaybeDisposeTimer,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,Dispose,The method has an empty catch block.
Empty Catch Block,RabbitMQ.Client.MessagePatterns,Subscription,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\messagepatterns\Subscription.cs,Close,The method has an empty catch block.
Magic Number,RabbitMQ.Client,AmqpTcpEndpoint,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\AmqpTcpEndpoint.cs,Parse,The following statement contains a magic number: if (match.Success)              {                  GroupCollection groups = match.Groups;                  portNumber = -1;                  if (groups[2].Success)                  {                      port = groups[3].Value;                      portNumber = (port.Length == 0) ? -1 : int.Parse(port);                  }                  return new AmqpTcpEndpoint(match.Groups[1].Value' portNumber);              }
Magic Number,RabbitMQ.Client,AmqpTcpEndpoint,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\AmqpTcpEndpoint.cs,Parse,The following statement contains a magic number: if (match.Success)              {                  GroupCollection groups = match.Groups;                  portNumber = -1;                  if (groups[2].Success)                  {                      port = groups[3].Value;                      portNumber = (port.Length == 0) ? -1 : int.Parse(port);                  }                  return new AmqpTcpEndpoint(match.Groups[1].Value' portNumber);              }
Magic Number,RabbitMQ.Client,AmqpVersion,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\AmqpVersion.cs,AmqpVersion,The following statement contains a magic number: if (major == 8 && minor == 0)              {                  // The AMQP 0-8 spec confusingly defines the version                  // as 8-0. This maps the latter to the former' for                  // cases where our peer might be confused.                  major = 0;                  minor = 8;              }
Magic Number,RabbitMQ.Client,AmqpVersion,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\AmqpVersion.cs,AmqpVersion,The following statement contains a magic number: if (major == 8 && minor == 0)              {                  // The AMQP 0-8 spec confusingly defines the version                  // as 8-0. This maps the latter to the former' for                  // cases where our peer might be confused.                  major = 0;                  minor = 8;              }
Magic Number,RabbitMQ.Client,AmqpVersion,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\AmqpVersion.cs,GetHashCode,The following statement contains a magic number: return 31*Major.GetHashCode() + Minor.GetHashCode();
Magic Number,RabbitMQ.Client,ConnectionFactory,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ConnectionFactory.cs,ConfigureFrameHandler,The following statement contains a magic number: fh.ReadTimeout = Math.Max(SocketReadTimeout' RequestedHeartbeat * 1000);
Magic Number,RabbitMQ.Client,ConnectionFactory,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ConnectionFactory.cs,ConfigureFrameHandler,The following statement contains a magic number: fh.WriteTimeout = Math.Max(SocketWriteTimeout' RequestedHeartbeat * 1000);
Magic Number,RabbitMQ.Client,ConnectionFactory,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ConnectionFactory.cs,SetUri,The following statement contains a magic number: if (!string.IsNullOrEmpty(userInfo))              {                  string[] userPass = userInfo.Split(':');                  if (userPass.Length > 2)                  {                      throw new ArgumentException("Bad user info in AMQP " + "URI: " + userInfo);                  }                  UserName = UriDecode(userPass[0]);                  if (userPass.Length == 2)                  {                      Password = UriDecode(userPass[1]);                  }              }
Magic Number,RabbitMQ.Client,ConnectionFactory,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ConnectionFactory.cs,SetUri,The following statement contains a magic number: if (!string.IsNullOrEmpty(userInfo))              {                  string[] userPass = userInfo.Split(':');                  if (userPass.Length > 2)                  {                      throw new ArgumentException("Bad user info in AMQP " + "URI: " + userInfo);                  }                  UserName = UriDecode(userPass[0]);                  if (userPass.Length == 2)                  {                      Password = UriDecode(userPass[1]);                  }              }
Magic Number,RabbitMQ.Client,ConnectionFactory,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ConnectionFactory.cs,SetUri,The following statement contains a magic number: if (uri.Segments.Length > 2)              {                  throw new ArgumentException("Multiple segments in " +                                              "path of AMQP URI: " +                                              string.Join("' "' uri.Segments));              }
Magic Number,RabbitMQ.Client,ConnectionFactory,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\ConnectionFactory.cs,SetUri,The following statement contains a magic number: if (uri.Segments.Length == 2)              {                  VirtualHost = UriDecode(uri.Segments[1]);              }
Magic Number,RabbitMQ.Client,PublicationAddress,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\PublicationAddress.cs,Parse,The following statement contains a magic number: if (match.Success)              {                  return new PublicationAddress(match.Groups[1].Value'                      match.Groups[2].Value'                      match.Groups[3].Value);              }
Magic Number,RabbitMQ.Client,PublicationAddress,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\api\PublicationAddress.cs,Parse,The following statement contains a magic number: if (match.Success)              {                  return new PublicationAddress(match.Groups[1].Value'                      match.Groups[2].Value'                      match.Groups[3].Value);              }
Magic Number,RabbitMQ.Client,WorkPool,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AsyncConsumerWorkService.cs,WorkPool,The following statement contains a magic number: waitTime = TimeSpan.FromMilliseconds(100);
Magic Number,RabbitMQ.Client,WorkPool,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\AsyncConsumerWorkService.cs,WorkPool,The following statement contains a magic number: waitTime = TimeSpan.FromMilliseconds(100);
Magic Number,RabbitMQ.Client.Content,StreamWireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\content\StreamWireFormatting.cs,ReadUntypedString,The following statement contains a magic number: BinaryWriter buffer = NetworkBinaryWriter.TemporaryBinaryWriter(256);
Magic Number,RabbitMQ.Client.Impl,ContentHeaderPropertyReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ContentHeaderPropertyReader.cs,ContentHeaderPropertyReader,The following statement contains a magic number: m_bitCount = 15;
Magic Number,RabbitMQ.Client.Impl,ContentHeaderPropertyReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ContentHeaderPropertyReader.cs,ReadPresence,The following statement contains a magic number: if (m_bitCount == 15)              {                  ReadFlagWord();              }
Magic Number,RabbitMQ.Client.Impl,ContentHeaderPropertyReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ContentHeaderPropertyReader.cs,ReadPresence,The following statement contains a magic number: int bit = 15 - m_bitCount;
Magic Number,RabbitMQ.Client.Impl,ContentHeaderPropertyWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ContentHeaderPropertyWriter.cs,WritePresence,The following statement contains a magic number: if (m_bitCount == 15)              {                  EmitFlagWord(true);              }
Magic Number,RabbitMQ.Client.Impl,ContentHeaderPropertyWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ContentHeaderPropertyWriter.cs,WritePresence,The following statement contains a magic number: if (present)              {                  int bit = 15 - m_bitCount;                  m_flagWord = (ushort)(m_flagWord | (1 << bit));              }
Magic Number,RabbitMQ.Client.Impl,ModelBase,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\ModelBase.cs,Close,The following statement contains a magic number: try              {                  ConsumerDispatcher.Quiesce();                  if (SetCloseReason(reason))                  {                      _Private_ChannelClose(reason.ReplyCode' reason.ReplyText' 0' 0);                  }                                  k.Wait(TimeSpan.FromMilliseconds(10000));                  ConsumerDispatcher.Shutdown(this);              }              catch (AlreadyClosedException)              {                  if (!abort)                  {                      throw;                  }              }              catch (IOException)              {                  if (!abort)                  {                      throw;                  }              }              catch (Exception)              {                  if (!abort)                  {                      throw;                  }              }
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,AmqpToDecimal,The following statement contains a magic number: if (scale > 28)              {                  throw new SyntaxError("Unrepresentable AMQP decimal table field: " +                                        "scale=" + scale);              }
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,DecimalToAmqp,The following statement contains a magic number: if (bitRepresentation[1] != 0 || // mantissa extends into middle word                  bitRepresentation[2] != 0 || // mantissa extends into top word                  bitRepresentation[0] < 0) // mantissa extends beyond 31 bits              {                  throw new WireFormattingException("Decimal overflow in AMQP encoding"' value);              }
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,DecimalToAmqp,The following statement contains a magic number: scale = (byte)((((uint)bitRepresentation[3]) >> 16) & 0xFF);
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,DecimalToAmqp,The following statement contains a magic number: scale = (byte)((((uint)bitRepresentation[3]) >> 16) & 0xFF);
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,DecimalToAmqp,The following statement contains a magic number: mantissa = (int)((((uint)bitRepresentation[3]) & 0x80000000) |                               (((uint)bitRepresentation[0]) & 0x7FFFFFFF));
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,WriteArray,The following statement contains a magic number: if (val == null)              {                  writer.Write((uint)0);              }              else              {                  Stream backingStream = writer.BaseStream;                  long patchPosition = backingStream.Position;                  writer.Write((uint)0); // length of table - will be backpatched                  foreach (object entry in val)                  {                      WriteFieldValue(writer' entry);                  }                  long savedPosition = backingStream.Position;                  long tableLength = savedPosition - patchPosition - 4; // offset for length word                  backingStream.Seek(patchPosition' SeekOrigin.Begin);                  writer.Write((uint)tableLength);                  backingStream.Seek(savedPosition' SeekOrigin.Begin);              }
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,WriteShortstr,The following statement contains a magic number: if (len > 255)              {                  throw new WireFormattingException("Short string too long; " +                                                    "UTF-8 encoded length=" + len + "' max=255");              }
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,WriteTable,The following statement contains a magic number: if (val == null)              {                  writer.Write((uint)0);              }              else              {                  Stream backingStream = writer.BaseStream;                  long patchPosition = backingStream.Position;                  writer.Write((uint)0); // length of table - will be backpatched                    foreach (DictionaryEntry entry in val)                  {                      WriteShortstr(writer' entry.Key.ToString());                      object value = entry.Value;                      WriteFieldValue(writer' value);                  }                    // Now' backpatch the table length.                  long savedPosition = backingStream.Position;                  long tableLength = savedPosition - patchPosition - 4; // offset for length word                  backingStream.Seek(patchPosition' SeekOrigin.Begin);                  writer.Write((uint)tableLength);                  backingStream.Seek(savedPosition' SeekOrigin.Begin);              }
Magic Number,RabbitMQ.Client.Impl,WireFormatting,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\WireFormatting.cs,WriteTable,The following statement contains a magic number: if (val == null)              {                  writer.Write((uint)0);              }              else              {                  Stream backingStream = writer.BaseStream;                  long patchPosition = backingStream.Position;                  writer.Write((uint)0); // length of table - will be backpatched                    foreach (KeyValuePair<string' object> entry in val)                  {                      WriteShortstr(writer' entry.Key);                      object value = entry.Value;                      WriteFieldValue(writer' value);                  }                    // Now' backpatch the table length.                  long savedPosition = backingStream.Position;                  long tableLength = savedPosition - patchPosition - 4; // offset for length word                  backingStream.Seek(patchPosition' SeekOrigin.Begin);                  writer.Write((uint)tableLength);                  backingStream.Seek(savedPosition' SeekOrigin.Begin);              }
Magic Number,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,MaybeStartHeartbeatTimers,The following statement contains a magic number: if (Heartbeat != 0)              {  #if NETFX_CORE                  _heartbeatWriteTimer = new Timer(HeartbeatWriteTimerCallback);                  _heartbeatReadTimer = new Timer(HeartbeatReadTimerCallback);                  _heartbeatWriteTimer.Change(200' (int)m_heartbeatTimeSpan.TotalMilliseconds);                  _heartbeatReadTimer.Change(200' (int)m_heartbeatTimeSpan.TotalMilliseconds);  #else                  _heartbeatWriteTimer = new Timer(HeartbeatWriteTimerCallback' null' 200' m_heartbeatTimeSpan.Milliseconds);                  _heartbeatReadTimer = new Timer(HeartbeatReadTimerCallback' null' 200' m_heartbeatTimeSpan.Milliseconds);                  _heartbeatWriteTimer.Change(TimeSpan.FromMilliseconds(200)' m_heartbeatTimeSpan);                  _heartbeatReadTimer.Change(TimeSpan.FromMilliseconds(200)' m_heartbeatTimeSpan);  #endif              }
Magic Number,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,MaybeStartHeartbeatTimers,The following statement contains a magic number: if (Heartbeat != 0)              {  #if NETFX_CORE                  _heartbeatWriteTimer = new Timer(HeartbeatWriteTimerCallback);                  _heartbeatReadTimer = new Timer(HeartbeatReadTimerCallback);                  _heartbeatWriteTimer.Change(200' (int)m_heartbeatTimeSpan.TotalMilliseconds);                  _heartbeatReadTimer.Change(200' (int)m_heartbeatTimeSpan.TotalMilliseconds);  #else                  _heartbeatWriteTimer = new Timer(HeartbeatWriteTimerCallback' null' 200' m_heartbeatTimeSpan.Milliseconds);                  _heartbeatReadTimer = new Timer(HeartbeatReadTimerCallback' null' 200' m_heartbeatTimeSpan.Milliseconds);                  _heartbeatWriteTimer.Change(TimeSpan.FromMilliseconds(200)' m_heartbeatTimeSpan);                  _heartbeatReadTimer.Change(TimeSpan.FromMilliseconds(200)' m_heartbeatTimeSpan);  #endif              }
Magic Number,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,HeartbeatReadTimerCallback,The following statement contains a magic number: try              {                  if (!m_closed)                  {                      if (!m_heartbeatRead.WaitOne(0))                      {                          m_missedHeartbeats++;                      }                      else                      {                          m_missedHeartbeats = 0;                      }                        // We check against 8 = 2 * 4 because we need to wait for at                      // least two complete heartbeat setting intervals before                      // complaining' and we've set the socket timeout to a quarter                      // of the heartbeat setting in setHeartbeat above.                      if (m_missedHeartbeats > 2 * 4)                      {                          String description = String.Format("Heartbeat missing with heartbeat == {0} seconds"' m_heartbeat);                          var eose = new EndOfStreamException(description);                          ESLog.Error(description' eose);                          m_shutdownReport.Add(new ShutdownReportEntry(description' eose));                          HandleMainLoopException(                              new ShutdownEventArgs(ShutdownInitiator.Library' 0' "End of stream"' eose));                          shouldTerminate = true;                      }                  }                    if (shouldTerminate)                  {                      TerminateMainloop();                      FinishClose();                  }                  else if(_heartbeatReadTimer != null)                  {                      _heartbeatReadTimer.Change(Heartbeat * 1000' Timeout.Infinite);                  }              }              catch (ObjectDisposedException)              {                  // timer is already disposed'                  // e.g. due to shutdown              }              catch (NullReferenceException)              {                  // timer has already been disposed from a different thread after null check                  // this event should be rare              }
Magic Number,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,HeartbeatReadTimerCallback,The following statement contains a magic number: try              {                  if (!m_closed)                  {                      if (!m_heartbeatRead.WaitOne(0))                      {                          m_missedHeartbeats++;                      }                      else                      {                          m_missedHeartbeats = 0;                      }                        // We check against 8 = 2 * 4 because we need to wait for at                      // least two complete heartbeat setting intervals before                      // complaining' and we've set the socket timeout to a quarter                      // of the heartbeat setting in setHeartbeat above.                      if (m_missedHeartbeats > 2 * 4)                      {                          String description = String.Format("Heartbeat missing with heartbeat == {0} seconds"' m_heartbeat);                          var eose = new EndOfStreamException(description);                          ESLog.Error(description' eose);                          m_shutdownReport.Add(new ShutdownReportEntry(description' eose));                          HandleMainLoopException(                              new ShutdownEventArgs(ShutdownInitiator.Library' 0' "End of stream"' eose));                          shouldTerminate = true;                      }                  }                    if (shouldTerminate)                  {                      TerminateMainloop();                      FinishClose();                  }                  else if(_heartbeatReadTimer != null)                  {                      _heartbeatReadTimer.Change(Heartbeat * 1000' Timeout.Infinite);                  }              }              catch (ObjectDisposedException)              {                  // timer is already disposed'                  // e.g. due to shutdown              }              catch (NullReferenceException)              {                  // timer has already been disposed from a different thread after null check                  // this event should be rare              }
Magic Number,RabbitMQ.Client.Framing.Impl,Connection,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\client\impl\Connection.cs,HeartbeatReadTimerCallback,The following statement contains a magic number: try              {                  if (!m_closed)                  {                      if (!m_heartbeatRead.WaitOne(0))                      {                          m_missedHeartbeats++;                      }                      else                      {                          m_missedHeartbeats = 0;                      }                        // We check against 8 = 2 * 4 because we need to wait for at                      // least two complete heartbeat setting intervals before                      // complaining' and we've set the socket timeout to a quarter                      // of the heartbeat setting in setHeartbeat above.                      if (m_missedHeartbeats > 2 * 4)                      {                          String description = String.Format("Heartbeat missing with heartbeat == {0} seconds"' m_heartbeat);                          var eose = new EndOfStreamException(description);                          ESLog.Error(description' eose);                          m_shutdownReport.Add(new ShutdownReportEntry(description' eose));                          HandleMainLoopException(                              new ShutdownEventArgs(ShutdownInitiator.Library' 0' "End of stream"' eose));                          shouldTerminate = true;                      }                  }                    if (shouldTerminate)                  {                      TerminateMainloop();                      FinishClose();                  }                  else if(_heartbeatReadTimer != null)                  {                      _heartbeatReadTimer.Change(Heartbeat * 1000' Timeout.Infinite);                  }              }              catch (ObjectDisposedException)              {                  // timer is already disposed'                  // e.g. due to shutdown              }              catch (NullReferenceException)              {                  // timer has already been disposed from a different thread after null check                  // this event should be rare              }
Magic Number,RabbitMQ.Util,DebugUtil,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\DebugUtil.cs,Dump,The following statement contains a magic number: int rowlen = 16;
Magic Number,RabbitMQ.Util,DebugUtil,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\DebugUtil.cs,Dump,The following statement contains a magic number: for (int count = 0; count < bytes.Length; count += rowlen)              {                  int thisRow = Math.Min(bytes.Length - count' rowlen);                    writer.Write("{0:X8}: "' count);                  for (int i = 0; i < thisRow; i++)                  {                      writer.Write("{0:X2}"' bytes[count + i]);                  }                  for (int i = 0; i < (rowlen - thisRow); i++)                  {                      writer.Write("  ");                  }                  writer.Write("  ");                  for (int i = 0; i < thisRow; i++)                  {                      if (bytes[count + i] >= 32 &&                          bytes[count + i] < 128)                      {                          writer.Write((char)bytes[count + i]);                      }                      else                      {                          writer.Write('.');                      }                  }                  writer.WriteLine();              }
Magic Number,RabbitMQ.Util,DebugUtil,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\DebugUtil.cs,Dump,The following statement contains a magic number: for (int count = 0; count < bytes.Length; count += rowlen)              {                  int thisRow = Math.Min(bytes.Length - count' rowlen);                    writer.Write("{0:X8}: "' count);                  for (int i = 0; i < thisRow; i++)                  {                      writer.Write("{0:X2}"' bytes[count + i]);                  }                  for (int i = 0; i < (rowlen - thisRow); i++)                  {                      writer.Write("  ");                  }                  writer.Write("  ");                  for (int i = 0; i < thisRow; i++)                  {                      if (bytes[count + i] >= 32 &&                          bytes[count + i] < 128)                      {                          writer.Write((char)bytes[count + i]);                      }                      else                      {                          writer.Write('.');                      }                  }                  writer.WriteLine();              }
Magic Number,RabbitMQ.Util,DebugUtil,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\DebugUtil.cs,Dump,The following statement contains a magic number: if (bytes.Length % 16 != 0)              {                  writer.WriteLine("{0:X8}: "' bytes.Length);              }
Magic Number,RabbitMQ.Util,DebugUtil,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\DebugUtil.cs,DumpKeyValue,The following statement contains a magic number: string prefix = new String(' '' indent + 2) + key + ": ";
Magic Number,RabbitMQ.Util,DebugUtil,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\DebugUtil.cs,DumpKeyValue,The following statement contains a magic number: DumpProperties(value' writer' indent + 2);
Magic Number,RabbitMQ.Util,IntAllocator,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\IntAllocator.cs,IntAllocator,The following statement contains a magic number: unsorted = new int[Math.Max(32' (int)Math.Sqrt(end - start))];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: byte[] bytes = ReadBytes(8);
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[0] = bytes[7];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[7] = temp;
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[1] = bytes[6];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[6] = temp;
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: temp = bytes[2];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[2] = bytes[5];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[2] = bytes[5];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[5] = temp;
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: temp = bytes[3];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[3] = bytes[4];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[3] = bytes[4];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadDouble,The following statement contains a magic number: bytes[4] = temp;
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt16,The following statement contains a magic number: return (short)(((i & 0xFF00) >> 8) |                             ((i & 0x00FF) << 8));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt16,The following statement contains a magic number: return (short)(((i & 0xFF00) >> 8) |                             ((i & 0x00FF) << 8));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(((i & 0xFF000000) >> 24) |                           ((i & 0x00FF0000) >> 8) |                           ((i & 0x0000FF00) << 8) |                           ((i & 0x000000FF) << 24));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(((i & 0xFF000000) >> 24) |                           ((i & 0x00FF0000) >> 8) |                           ((i & 0x0000FF00) << 8) |                           ((i & 0x000000FF) << 24));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(((i & 0xFF000000) >> 24) |                           ((i & 0x00FF0000) >> 8) |                           ((i & 0x0000FF00) << 8) |                           ((i & 0x000000FF) << 24));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt32,The following statement contains a magic number: return (int)(((i & 0xFF000000) >> 24) |                           ((i & 0x00FF0000) >> 8) |                           ((i & 0x0000FF00) << 8) |                           ((i & 0x000000FF) << 24));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt64,The following statement contains a magic number: return (long)(((i & 0xFF00000000000000) >> 56) |                            ((i & 0x00FF000000000000) >> 40) |                            ((i & 0x0000FF0000000000) >> 24) |                            ((i & 0x000000FF00000000) >> 8) |                            ((i & 0x00000000FF000000) << 8) |                            ((i & 0x0000000000FF0000) << 24) |                            ((i & 0x000000000000FF00) << 40) |                            ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt64,The following statement contains a magic number: return (long)(((i & 0xFF00000000000000) >> 56) |                            ((i & 0x00FF000000000000) >> 40) |                            ((i & 0x0000FF0000000000) >> 24) |                            ((i & 0x000000FF00000000) >> 8) |                            ((i & 0x00000000FF000000) << 8) |                            ((i & 0x0000000000FF0000) << 24) |                            ((i & 0x000000000000FF00) << 40) |                            ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt64,The following statement contains a magic number: return (long)(((i & 0xFF00000000000000) >> 56) |                            ((i & 0x00FF000000000000) >> 40) |                            ((i & 0x0000FF0000000000) >> 24) |                            ((i & 0x000000FF00000000) >> 8) |                            ((i & 0x00000000FF000000) << 8) |                            ((i & 0x0000000000FF0000) << 24) |                            ((i & 0x000000000000FF00) << 40) |                            ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt64,The following statement contains a magic number: return (long)(((i & 0xFF00000000000000) >> 56) |                            ((i & 0x00FF000000000000) >> 40) |                            ((i & 0x0000FF0000000000) >> 24) |                            ((i & 0x000000FF00000000) >> 8) |                            ((i & 0x00000000FF000000) << 8) |                            ((i & 0x0000000000FF0000) << 24) |                            ((i & 0x000000000000FF00) << 40) |                            ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt64,The following statement contains a magic number: return (long)(((i & 0xFF00000000000000) >> 56) |                            ((i & 0x00FF000000000000) >> 40) |                            ((i & 0x0000FF0000000000) >> 24) |                            ((i & 0x000000FF00000000) >> 8) |                            ((i & 0x00000000FF000000) << 8) |                            ((i & 0x0000000000FF0000) << 24) |                            ((i & 0x000000000000FF00) << 40) |                            ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt64,The following statement contains a magic number: return (long)(((i & 0xFF00000000000000) >> 56) |                            ((i & 0x00FF000000000000) >> 40) |                            ((i & 0x0000FF0000000000) >> 24) |                            ((i & 0x000000FF00000000) >> 8) |                            ((i & 0x00000000FF000000) << 8) |                            ((i & 0x0000000000FF0000) << 24) |                            ((i & 0x000000000000FF00) << 40) |                            ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt64,The following statement contains a magic number: return (long)(((i & 0xFF00000000000000) >> 56) |                            ((i & 0x00FF000000000000) >> 40) |                            ((i & 0x0000FF0000000000) >> 24) |                            ((i & 0x000000FF00000000) >> 8) |                            ((i & 0x00000000FF000000) << 8) |                            ((i & 0x0000000000FF0000) << 24) |                            ((i & 0x000000000000FF00) << 40) |                            ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadInt64,The following statement contains a magic number: return (long)(((i & 0xFF00000000000000) >> 56) |                            ((i & 0x00FF000000000000) >> 40) |                            ((i & 0x0000FF0000000000) >> 24) |                            ((i & 0x000000FF00000000) >> 8) |                            ((i & 0x00000000FF000000) << 8) |                            ((i & 0x0000000000FF0000) << 24) |                            ((i & 0x000000000000FF00) << 40) |                            ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadSingle,The following statement contains a magic number: byte[] bytes = ReadBytes(4);
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadSingle,The following statement contains a magic number: bytes[0] = bytes[3];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadSingle,The following statement contains a magic number: bytes[3] = temp;
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadSingle,The following statement contains a magic number: bytes[1] = bytes[2];
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadSingle,The following statement contains a magic number: bytes[2] = temp;
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt16,The following statement contains a magic number: return (ushort)(((i & 0xFF00) >> 8) |                              ((i & 0x00FF) << 8));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt16,The following statement contains a magic number: return (ushort)(((i & 0xFF00) >> 8) |                              ((i & 0x00FF) << 8));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (((i & 0xFF000000) >> 24) |                      ((i & 0x00FF0000) >> 8) |                      ((i & 0x0000FF00) << 8) |                      ((i & 0x000000FF) << 24));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (((i & 0xFF000000) >> 24) |                      ((i & 0x00FF0000) >> 8) |                      ((i & 0x0000FF00) << 8) |                      ((i & 0x000000FF) << 24));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (((i & 0xFF000000) >> 24) |                      ((i & 0x00FF0000) >> 8) |                      ((i & 0x0000FF00) << 8) |                      ((i & 0x000000FF) << 24));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return (((i & 0xFF000000) >> 24) |                      ((i & 0x00FF0000) >> 8) |                      ((i & 0x0000FF00) << 8) |                      ((i & 0x000000FF) << 24));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return (((i & 0xFF00000000000000) >> 56) |                      ((i & 0x00FF000000000000) >> 40) |                      ((i & 0x0000FF0000000000) >> 24) |                      ((i & 0x000000FF00000000) >> 8) |                      ((i & 0x00000000FF000000) << 8) |                      ((i & 0x0000000000FF0000) << 24) |                      ((i & 0x000000000000FF00) << 40) |                      ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return (((i & 0xFF00000000000000) >> 56) |                      ((i & 0x00FF000000000000) >> 40) |                      ((i & 0x0000FF0000000000) >> 24) |                      ((i & 0x000000FF00000000) >> 8) |                      ((i & 0x00000000FF000000) << 8) |                      ((i & 0x0000000000FF0000) << 24) |                      ((i & 0x000000000000FF00) << 40) |                      ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return (((i & 0xFF00000000000000) >> 56) |                      ((i & 0x00FF000000000000) >> 40) |                      ((i & 0x0000FF0000000000) >> 24) |                      ((i & 0x000000FF00000000) >> 8) |                      ((i & 0x00000000FF000000) << 8) |                      ((i & 0x0000000000FF0000) << 24) |                      ((i & 0x000000000000FF00) << 40) |                      ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return (((i & 0xFF00000000000000) >> 56) |                      ((i & 0x00FF000000000000) >> 40) |                      ((i & 0x0000FF0000000000) >> 24) |                      ((i & 0x000000FF00000000) >> 8) |                      ((i & 0x00000000FF000000) << 8) |                      ((i & 0x0000000000FF0000) << 24) |                      ((i & 0x000000000000FF00) << 40) |                      ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return (((i & 0xFF00000000000000) >> 56) |                      ((i & 0x00FF000000000000) >> 40) |                      ((i & 0x0000FF0000000000) >> 24) |                      ((i & 0x000000FF00000000) >> 8) |                      ((i & 0x00000000FF000000) << 8) |                      ((i & 0x0000000000FF0000) << 24) |                      ((i & 0x000000000000FF00) << 40) |                      ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return (((i & 0xFF00000000000000) >> 56) |                      ((i & 0x00FF000000000000) >> 40) |                      ((i & 0x0000FF0000000000) >> 24) |                      ((i & 0x000000FF00000000) >> 8) |                      ((i & 0x00000000FF000000) << 8) |                      ((i & 0x0000000000FF0000) << 24) |                      ((i & 0x000000000000FF00) << 40) |                      ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return (((i & 0xFF00000000000000) >> 56) |                      ((i & 0x00FF000000000000) >> 40) |                      ((i & 0x0000FF0000000000) >> 24) |                      ((i & 0x000000FF00000000) >> 8) |                      ((i & 0x00000000FF000000) << 8) |                      ((i & 0x0000000000FF0000) << 24) |                      ((i & 0x000000000000FF00) << 40) |                      ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryReader,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return (((i & 0xFF00000000000000) >> 56) |                      ((i & 0x00FF000000000000) >> 40) |                      ((i & 0x0000FF0000000000) >> 24) |                      ((i & 0x000000FF00000000) >> 8) |                      ((i & 0x00000000FF000000) << 8) |                      ((i & 0x0000000000FF0000) << 24) |                      ((i & 0x000000000000FF00) << 40) |                      ((i & 0x00000000000000FF) << 56));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write((byte)((i & 0xFF00) >> 8));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write((byte)((i & 0xFF00) >> 8));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write((byte)((i & 0xFF000000) >> 24));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write((byte)((i & 0x00FF0000) >> 16));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write((byte)((i & 0x0000FF00) >> 8));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write((byte)((i & 0xFF000000) >> 24));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write((byte)((i & 0x00FF0000) >> 16));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write((byte)((i & 0x0000FF00) >> 8));
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: var i1 = (uint)(i >> 32);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: var i1 = (uint)(i >> 32);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: BinaryWriter w = TemporaryBinaryWriter(4);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write(wrongBytes[3]);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write(wrongBytes[2]);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: BinaryWriter w = TemporaryBinaryWriter(8);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write(wrongBytes[7]);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write(wrongBytes[6]);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write(wrongBytes[5]);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write(wrongBytes[4]);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write(wrongBytes[3]);
Magic Number,RabbitMQ.Util,NetworkBinaryWriter,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client\src\util\NetworkBinaryWriter.cs,Write,The following statement contains a magic number: Write(wrongBytes[2]);
Magic Number,RabbitMQ.Util,MetroEventSource,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\MetroEventSource.cs,Info,The following statement contains a magic number: this.WriteEvent(2' message);
Magic Number,RabbitMQ.Util,MetroEventSource,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\MetroEventSource.cs,Warn,The following statement contains a magic number: this.WriteEvent(3' message);
Magic Number,RabbitMQ.Util,MetroEventSource,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\MetroEventSource.cs,Error,The following statement contains a magic number: this.WriteEvent(4' message);
Magic Number,RabbitMQ.Util,MetroEventSource,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\MetroEventSource.cs,Critical,The following statement contains a magic number: this.WriteEvent(5' message);
Magic Number,RabbitMQ.Util,SortedList<TKey;TValue>,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\SortedList.cs,IndexOfKey,The following statement contains a magic number: return (indx | (indx >> 31));
Magic Number,RabbitMQ.Util,SortedList<TKey;TValue>,C:\repos\rabbitmq_rabbitmq-dotnet-client\projects\client\RabbitMQ.Client.WinRT\src\util\SortedList.cs,TrimExcess,The following statement contains a magic number: if (inUse < table.Length * 0.9)                  Capacity = inUse;
