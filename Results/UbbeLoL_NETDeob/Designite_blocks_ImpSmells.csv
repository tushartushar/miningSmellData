Implementation smell,Namespace,Class,File,Method,Description
Long Method,de4dot.blocks.cflow,DeadCodeRemover,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\DeadCodeRemover.cs,okInstructions,The method has 230 lines of code.
Long Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The method has 226 lines of code.
Long Method,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The method has 104 lines of code.
Complex Method,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,optimizeLocals,Cyclomatic complexity of the method is 11
Complex Method,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,mergeNopBlocks,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks,Sorter,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\BlocksSorter.cs,sort,Cyclomatic complexity of the method is 10
Complex Method,de4dot.blocks,Sorter,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\BlocksSorter.cs,visit,Cyclomatic complexity of the method is 10
Complex Method,de4dot.blocks,Sorter,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\BlocksSorter.cs,getLoopStartBlock,Cyclomatic complexity of the method is 9
Complex Method,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,findMethods,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,createLdci4,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks,MemberReferenceHelper,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,compareMethodReferenceSignature,Cyclomatic complexity of the method is 13
Complex Method,de4dot.blocks,MemberReferenceHelper,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,comparePropertyReference,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\ScopeBlock.cs,removeDeadBlocks,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\ScopeBlock.cs,mergeBlocks,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\ScopeBlock.cs,removeAllDeadBlocks,Cyclomatic complexity of the method is 11
Complex Method,de4dot.blocks.cflow,InstructionExpressionFinder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\DeadCodeRemover.cs,find,Cyclomatic complexity of the method is 11
Complex Method,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\MethodCallInlinerBase.cs,tryInlineOtherMethod,Cyclomatic complexity of the method is 11
Complex Method,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,Cyclomatic complexity of the method is 12
Complex Method,de4dot.PE,ResourceDirectory,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\ResourceDirectory.cs,initializeEntries,Cyclomatic complexity of the method is 12
Long Parameter List,de4dot.blocks,ExceptionInfo,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\CodeGenerator.cs,ExceptionInfo,The method has 7 parameters. Parameters: tryStart' tryEnd' filterStart' handlerStart' handlerEnd' catchType' handlerType
Long Parameter List,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,findOrCreateTypeReference,The method has 5 parameters. Parameters: module' asmRef' ns' name' isValueType
Long Parameter List,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\MethodCallInlinerBase.cs,inlineOtherMethod,The method has 5 parameters. Parameters: patchIndex' methodToInline' instr' instrIndex' popLastArgs
Long Parameter List,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\MethodCallInlinerBase.cs,tryInlineOtherMethod,The method has 5 parameters. Parameters: patchIndex' methodToInline' instr' instrIndex' popLastArgs
Long Statement,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,optimizeLocals,The length of the statement  "					info.block.Instructions[info.index] = new Instr(optimizeLocalInstr(info.block.Instructions[info.index]' local' (uint)newIndex)); " is 128.
Long Statement,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,repartitionBlocks,The length of the statement  "					Console.WriteLine("Null ref exception! Invalid metadata token in code? Method: {0:X8}: {1}"' method.MetadataToken.ToUInt32()' method.FullName); " is 143.
Long Statement,de4dot.blocks,CodeGenerator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\CodeGenerator.cs,doTryBlock,The length of the statement  "				exceptions.Add(new ExceptionInfo(tryStart' tryEnd' filterStart' handlerStart' handlerEnd' handlerBlock.CatchType' handlerBlock.HandlerType)); " is 141.
Long Statement,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,isMethod,The length of the statement  "			return method != null && method.FullName == returnType + " " + method.DeclaringType.FullName + "::" + method.Name + parameters; " is 127.
Long Statement,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getGenericArgument,The length of the statement  "			if (methodOwner != null && MemberReferenceHelper.compareMethodReferenceAndDeclaringType(methodOwner.ElementMethod' gp.Owner as MethodReference)) " is 144.
Long Statement,de4dot.blocks,ForwardScanOrder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\ForwardScanOrder.cs,createNewList,The length of the statement  "				throw new ApplicationException(string.Format("Too many/few blocks after sorting: {0} vs {1}"' newList.Count' sorted.Count)); " is 124.
Long Statement,de4dot.blocks,InstructionListParser,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\InstructionListParser.cs,getSortedExceptionInfos,The length of the statement  "					throw new ApplicationException("Exception handler's try block does not start and end at the same place as the other one."); " is 123.
Long Statement,de4dot.blocks,MethodReferenceInstance,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberRefInstance.cs,makeInstance,The length of the statement  "			var mr = new MethodReference(methodReference.Name' makeInstance(methodReference.MethodReturnType.ReturnType)' methodReference.DeclaringType); " is 141.
Long Statement,de4dot.blocks,PropertyReferenceInstance,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberRefInstance.cs,makeInstance,The length of the statement  "			var pr = new PropertyDefinition(propertyReference.Name' (PropertyAttributes)0' makeInstance(propertyReference.PropertyType)); " is 125.
Long Statement,de4dot.blocks.cflow,ConstantsFolder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\ConstantsFolder.cs,deobfuscate,The length of the statement  "					changed |= fixLoadInstruction(block' i' instructionEmulator.getLocal(DotNetUtils.getLocalVar(blocks.Locals' instr.Instruction))); " is 129.
Long Statement,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\SwitchCflowDeobfuscator.cs,isStLdlocBranch,The length of the statement  "				Instr.getLocalVar(blocks.Locals' switchBlock.Instructions[0]) == Instr.getLocalVar(blocks.Locals' switchBlock.Instructions[1]); " is 127.
Long Statement,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The length of the statement  "				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef }); " is 144.
Long Statement,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The length of the statement  "				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec }); " is 168.
Long Statement,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The length of the statement  "				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType }); " is 121.
Long Statement,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,getSectionHeaderRva,The length of the statement  "				if (section.virtualAddress <= rva && rva < section.virtualAddress + Math.Max(section.virtualSize' section.sizeOfRawData)) " is 121.
Complex Conditional,de4dot.blocks,Block,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Block.cs,removeLastBr,The conditional expression  "fallThrough != null || (LastInstr.Operand != null && (targets == null || targets.Count != 1))"  is complex.
Complex Conditional,de4dot.blocks,ExceptionInfo,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\CodeGenerator.cs,ExceptionInfo,The conditional expression  "tryStart > tryEnd || filterStart > handlerStart ||  					tryStart < 0 || tryEnd < 0 || filterStart < 0 || handlerStart < 0 || handlerEnd < 0"  is complex.
Complex Conditional,de4dot.blocks,ForwardScanOrder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\ForwardScanOrder.cs,addToNewList,The conditional expression  "blockInfo.stackStart == 0 || ReferenceEquals(bb' sorted[0]) ||  				block == null || block.Sources == null || isInNewList(block.Sources)"  is complex.
Complex Conditional,de4dot.blocks,MemberReferenceHelper,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,comparePropertyReference,The conditional expression  "(a.Parameters == null && b.Parameters != null) || (a.Parameters != null && b.Parameters == null)"  is complex.
Complex Conditional,de4dot.blocks,MemberReferenceHelper,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,compareTypes,The conditional expression  "(atype == typeof(TypeReference) || atype == typeof(TypeDefinition)) &&  					(btype == typeof(TypeReference) || btype == typeof(TypeDefinition))"  is complex.
Complex Conditional,de4dot.blocks,MemberReferenceHelper,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,compareTypeReferences,The conditional expression  "(a.GetType() != typeof(TypeReference) && a.GetType() != typeof(TypeDefinition)) ||  				(b.GetType() != typeof(TypeReference) && b.GetType() != typeof(TypeDefinition))"  is complex.
Complex Conditional,de4dot.blocks,MemberReferenceHelper,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,compareTypeReferenceSameVersion,The conditional expression  "(a.GetType() != typeof(TypeReference) && a.GetType() != typeof(TypeDefinition)) ||  				(b.GetType() != typeof(TypeReference) && b.GetType() != typeof(TypeDefinition))"  is complex.
Complex Conditional,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\MethodCallInlinerBase.cs,tryInlineOtherMethod,The conditional expression  "instr.OpCode.Code == Code.Ldfld || instr.OpCode.Code == Code.Ldflda ||  					instr.OpCode.Code == Code.Ldftn || instr.OpCode.Code == Code.Ldvirtftn"  is complex.
Complex Conditional,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The conditional expression  "instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S"  is complex.
Empty Catch Block,de4dot.blocks.cflow,BlockDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockDeobfuscator.cs,deobfuscate,The method has an empty catch block.
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				if (newIndex == 0)  					return Instruction.Create(OpCodes.Ldloc_0);  				if (newIndex == 1)  					return Instruction.Create(OpCodes.Ldloc_1);  				if (newIndex == 2)  					return Instruction.Create(OpCodes.Ldloc_2);  				if (newIndex == 3)  					return Instruction.Create(OpCodes.Ldloc_3);  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Ldloc_S' local);  				return Instruction.Create(OpCodes.Ldloc' local);    			case Code.Stloc:  			case Code.Stloc_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  				if (newIndex == 0)  					return Instruction.Create(OpCodes.Stloc_0);  				if (newIndex == 1)  					return Instruction.Create(OpCodes.Stloc_1);  				if (newIndex == 2)  					return Instruction.Create(OpCodes.Stloc_2);  				if (newIndex == 3)  					return Instruction.Create(OpCodes.Stloc_3);  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Stloc_S' local);  				return Instruction.Create(OpCodes.Stloc' local);    			case Code.Ldloca_S:  			case Code.Ldloca:  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Ldloca_S' local);  				return Instruction.Create(OpCodes.Ldloca' local);    			default:  				throw new ApplicationException("Invalid ld/st local instruction");  			}
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				if (newIndex == 0)  					return Instruction.Create(OpCodes.Ldloc_0);  				if (newIndex == 1)  					return Instruction.Create(OpCodes.Ldloc_1);  				if (newIndex == 2)  					return Instruction.Create(OpCodes.Ldloc_2);  				if (newIndex == 3)  					return Instruction.Create(OpCodes.Ldloc_3);  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Ldloc_S' local);  				return Instruction.Create(OpCodes.Ldloc' local);    			case Code.Stloc:  			case Code.Stloc_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  				if (newIndex == 0)  					return Instruction.Create(OpCodes.Stloc_0);  				if (newIndex == 1)  					return Instruction.Create(OpCodes.Stloc_1);  				if (newIndex == 2)  					return Instruction.Create(OpCodes.Stloc_2);  				if (newIndex == 3)  					return Instruction.Create(OpCodes.Stloc_3);  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Stloc_S' local);  				return Instruction.Create(OpCodes.Stloc' local);    			case Code.Ldloca_S:  			case Code.Ldloca:  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Ldloca_S' local);  				return Instruction.Create(OpCodes.Ldloca' local);    			default:  				throw new ApplicationException("Invalid ld/st local instruction");  			}
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				if (newIndex == 0)  					return Instruction.Create(OpCodes.Ldloc_0);  				if (newIndex == 1)  					return Instruction.Create(OpCodes.Ldloc_1);  				if (newIndex == 2)  					return Instruction.Create(OpCodes.Ldloc_2);  				if (newIndex == 3)  					return Instruction.Create(OpCodes.Ldloc_3);  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Ldloc_S' local);  				return Instruction.Create(OpCodes.Ldloc' local);    			case Code.Stloc:  			case Code.Stloc_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  				if (newIndex == 0)  					return Instruction.Create(OpCodes.Stloc_0);  				if (newIndex == 1)  					return Instruction.Create(OpCodes.Stloc_1);  				if (newIndex == 2)  					return Instruction.Create(OpCodes.Stloc_2);  				if (newIndex == 3)  					return Instruction.Create(OpCodes.Stloc_3);  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Stloc_S' local);  				return Instruction.Create(OpCodes.Stloc' local);    			case Code.Ldloca_S:  			case Code.Ldloca:  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Ldloca_S' local);  				return Instruction.Create(OpCodes.Ldloca' local);    			default:  				throw new ApplicationException("Invalid ld/st local instruction");  			}
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,optimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				if (newIndex == 0)  					return Instruction.Create(OpCodes.Ldloc_0);  				if (newIndex == 1)  					return Instruction.Create(OpCodes.Ldloc_1);  				if (newIndex == 2)  					return Instruction.Create(OpCodes.Ldloc_2);  				if (newIndex == 3)  					return Instruction.Create(OpCodes.Ldloc_3);  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Ldloc_S' local);  				return Instruction.Create(OpCodes.Ldloc' local);    			case Code.Stloc:  			case Code.Stloc_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  				if (newIndex == 0)  					return Instruction.Create(OpCodes.Stloc_0);  				if (newIndex == 1)  					return Instruction.Create(OpCodes.Stloc_1);  				if (newIndex == 2)  					return Instruction.Create(OpCodes.Stloc_2);  				if (newIndex == 3)  					return Instruction.Create(OpCodes.Stloc_3);  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Stloc_S' local);  				return Instruction.Create(OpCodes.Stloc' local);    			case Code.Ldloca_S:  			case Code.Ldloca:  				if (newIndex <= 0xFF)  					return Instruction.Create(OpCodes.Ldloca_S' local);  				return Instruction.Create(OpCodes.Ldloca' local);    			default:  				throw new ApplicationException("Invalid ld/st local instruction");  			}
Magic Number,de4dot.blocks,Blocks,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\Blocks.cs,mergeNopBlocks,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  				bool changed = false;    				foreach (var block in allBlocks) {  					Block nopBlockTarget;    					nopBlockTarget = getNopBlockTarget(nopBlocks' block' block.FallThrough);  					if (nopBlockTarget != null) {  						block.setNewFallThrough(nopBlockTarget);  						changed = true;  					}    					if (block.Targets != null) {  						for (int targetIndex = 0; targetIndex < block.Targets.Count; targetIndex++) {  							nopBlockTarget = getNopBlockTarget(nopBlocks' block' block.Targets[targetIndex]);  							if (nopBlockTarget == null)  								continue;  							block.setNewTarget(targetIndex' nopBlockTarget);  							changed = true;  						}  					}  				}    				if (!changed)  					break;  			}
Magic Number,de4dot.blocks,CodeGenerator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\CodeGenerator.cs,getCode,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  				if (!optimizeBranches(allInstructions))  					break;  			}
Magic Number,de4dot.blocks,CodeGenerator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\CodeGenerator.cs,optimizeBranches,The following statement contains a magic number: for (int i = 0; i < allInstructions.Count; i++) {  				var instruction = allInstructions[i];  				OpCode opcode;  				if (getShortBranch(instruction' out opcode)) {  					const int instrSize = 5;	// It's a long branch instruction  					var target = (Instruction)instruction.Operand;  					int distance = target == null ? int.MaxValue : target.Offset - (instruction.Offset + instrSize);  					if (-0x80 <= distance && distance <= 0x7F) {  						instruction.OpCode = opcode;  						changed = true;  					}  				}  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getLdcI4Value,The following statement contains a magic number: switch (instruction.OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0: return 0;  			case Code.Ldc_I4_1: return 1;  			case Code.Ldc_I4_2: return 2;  			case Code.Ldc_I4_3: return 3;  			case Code.Ldc_I4_4: return 4;  			case Code.Ldc_I4_5: return 5;  			case Code.Ldc_I4_6: return 6;  			case Code.Ldc_I4_7: return 7;  			case Code.Ldc_I4_8: return 8;  			case Code.Ldc_I4_S: return (sbyte)instruction.Operand;  			case Code.Ldc_I4:	return (int)instruction.Operand;  			default:  				throw new ApplicationException(string.Format("Not an ldc.i4 instruction: {0}"' instruction));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getLdcI4Value,The following statement contains a magic number: switch (instruction.OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0: return 0;  			case Code.Ldc_I4_1: return 1;  			case Code.Ldc_I4_2: return 2;  			case Code.Ldc_I4_3: return 3;  			case Code.Ldc_I4_4: return 4;  			case Code.Ldc_I4_5: return 5;  			case Code.Ldc_I4_6: return 6;  			case Code.Ldc_I4_7: return 7;  			case Code.Ldc_I4_8: return 8;  			case Code.Ldc_I4_S: return (sbyte)instruction.Operand;  			case Code.Ldc_I4:	return (int)instruction.Operand;  			default:  				throw new ApplicationException(string.Format("Not an ldc.i4 instruction: {0}"' instruction));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getLdcI4Value,The following statement contains a magic number: switch (instruction.OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0: return 0;  			case Code.Ldc_I4_1: return 1;  			case Code.Ldc_I4_2: return 2;  			case Code.Ldc_I4_3: return 3;  			case Code.Ldc_I4_4: return 4;  			case Code.Ldc_I4_5: return 5;  			case Code.Ldc_I4_6: return 6;  			case Code.Ldc_I4_7: return 7;  			case Code.Ldc_I4_8: return 8;  			case Code.Ldc_I4_S: return (sbyte)instruction.Operand;  			case Code.Ldc_I4:	return (int)instruction.Operand;  			default:  				throw new ApplicationException(string.Format("Not an ldc.i4 instruction: {0}"' instruction));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getLdcI4Value,The following statement contains a magic number: switch (instruction.OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0: return 0;  			case Code.Ldc_I4_1: return 1;  			case Code.Ldc_I4_2: return 2;  			case Code.Ldc_I4_3: return 3;  			case Code.Ldc_I4_4: return 4;  			case Code.Ldc_I4_5: return 5;  			case Code.Ldc_I4_6: return 6;  			case Code.Ldc_I4_7: return 7;  			case Code.Ldc_I4_8: return 8;  			case Code.Ldc_I4_S: return (sbyte)instruction.Operand;  			case Code.Ldc_I4:	return (int)instruction.Operand;  			default:  				throw new ApplicationException(string.Format("Not an ldc.i4 instruction: {0}"' instruction));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getLdcI4Value,The following statement contains a magic number: switch (instruction.OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0: return 0;  			case Code.Ldc_I4_1: return 1;  			case Code.Ldc_I4_2: return 2;  			case Code.Ldc_I4_3: return 3;  			case Code.Ldc_I4_4: return 4;  			case Code.Ldc_I4_5: return 5;  			case Code.Ldc_I4_6: return 6;  			case Code.Ldc_I4_7: return 7;  			case Code.Ldc_I4_8: return 8;  			case Code.Ldc_I4_S: return (sbyte)instruction.Operand;  			case Code.Ldc_I4:	return (int)instruction.Operand;  			default:  				throw new ApplicationException(string.Format("Not an ldc.i4 instruction: {0}"' instruction));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getLdcI4Value,The following statement contains a magic number: switch (instruction.OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0: return 0;  			case Code.Ldc_I4_1: return 1;  			case Code.Ldc_I4_2: return 2;  			case Code.Ldc_I4_3: return 3;  			case Code.Ldc_I4_4: return 4;  			case Code.Ldc_I4_5: return 5;  			case Code.Ldc_I4_6: return 6;  			case Code.Ldc_I4_7: return 7;  			case Code.Ldc_I4_8: return 8;  			case Code.Ldc_I4_S: return (sbyte)instruction.Operand;  			case Code.Ldc_I4:	return (int)instruction.Operand;  			default:  				throw new ApplicationException(string.Format("Not an ldc.i4 instruction: {0}"' instruction));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getLdcI4Value,The following statement contains a magic number: switch (instruction.OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0: return 0;  			case Code.Ldc_I4_1: return 1;  			case Code.Ldc_I4_2: return 2;  			case Code.Ldc_I4_3: return 3;  			case Code.Ldc_I4_4: return 4;  			case Code.Ldc_I4_5: return 5;  			case Code.Ldc_I4_6: return 6;  			case Code.Ldc_I4_7: return 7;  			case Code.Ldc_I4_8: return 8;  			case Code.Ldc_I4_S: return (sbyte)instruction.Operand;  			case Code.Ldc_I4:	return (int)instruction.Operand;  			default:  				throw new ApplicationException(string.Format("Not an ldc.i4 instruction: {0}"' instruction));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getDllName,The following statement contains a magic number: if (dll.EndsWith(".dll"' StringComparison.OrdinalIgnoreCase))  				return dll.Substring(0' dll.Length - 4);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,calculateStackUsage_nonCall,The following statement contains a magic number: switch (stackBehavior) {  			case StackBehaviour.Push0:  				break;    			case StackBehaviour.Push1:  			case StackBehaviour.Pushi:  			case StackBehaviour.Pushi8:  			case StackBehaviour.Pushr4:  			case StackBehaviour.Pushr8:  			case StackBehaviour.Pushref:  				pushes++;  				break;    			case StackBehaviour.Push1_push1:  				pushes += 2;  				break;    			case StackBehaviour.Varpush:	// only call' calli' callvirt which are handled elsewhere  			default:  				throw new ApplicationException(string.Format("Unknown push StackBehavior {0}"' stackBehavior));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,calculateStackUsage_nonCall,The following statement contains a magic number: switch (stackBehavior) {  			case StackBehaviour.Pop0:  				break;    			case StackBehaviour.Pop1:  			case StackBehaviour.Popi:  			case StackBehaviour.Popref:  				pops++;  				break;    			case StackBehaviour.Pop1_pop1:  			case StackBehaviour.Popi_pop1:  			case StackBehaviour.Popi_popi:  			case StackBehaviour.Popi_popi8:  			case StackBehaviour.Popi_popr4:  			case StackBehaviour.Popi_popr8:  			case StackBehaviour.Popref_pop1:  			case StackBehaviour.Popref_popi:  				pops += 2;  				break;    			case StackBehaviour.Popi_popi_popi:  			case StackBehaviour.Popref_popi_popi:  			case StackBehaviour.Popref_popi_popi8:  			case StackBehaviour.Popref_popi_popr4:  			case StackBehaviour.Popref_popi_popr8:  			case StackBehaviour.Popref_popi_popref:  				pops += 3;  				break;    			case StackBehaviour.PopAll:  				pops = -1;  				break;    			case StackBehaviour.Varpop:	// call' calli' callvirt' newobj (all handled elsewhere)' and ret  				if (methodHasReturnValue)  					pops++;  				break;    			default:  				throw new ApplicationException(string.Format("Unknown pop StackBehavior {0}"' stackBehavior));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,calculateStackUsage_nonCall,The following statement contains a magic number: switch (stackBehavior) {  			case StackBehaviour.Pop0:  				break;    			case StackBehaviour.Pop1:  			case StackBehaviour.Popi:  			case StackBehaviour.Popref:  				pops++;  				break;    			case StackBehaviour.Pop1_pop1:  			case StackBehaviour.Popi_pop1:  			case StackBehaviour.Popi_popi:  			case StackBehaviour.Popi_popi8:  			case StackBehaviour.Popi_popr4:  			case StackBehaviour.Popi_popr8:  			case StackBehaviour.Popref_pop1:  			case StackBehaviour.Popref_popi:  				pops += 2;  				break;    			case StackBehaviour.Popi_popi_popi:  			case StackBehaviour.Popref_popi_popi:  			case StackBehaviour.Popref_popi_popi8:  			case StackBehaviour.Popref_popi_popr4:  			case StackBehaviour.Popref_popi_popr8:  			case StackBehaviour.Popref_popi_popref:  				pops += 3;  				break;    			case StackBehaviour.PopAll:  				pops = -1;  				break;    			case StackBehaviour.Varpop:	// call' calli' callvirt' newobj (all handled elsewhere)' and ret  				if (methodHasReturnValue)  					pops++;  				break;    			default:  				throw new ApplicationException(string.Format("Unknown pop StackBehavior {0}"' stackBehavior));  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getArgIndex,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldarg_0: return 0;  			case Code.Ldarg_1: return 1;  			case Code.Ldarg_2: return 2;  			case Code.Ldarg_3: return 3;    			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Ldarg:  			case Code.Ldarg_S:  				return getArgIndex(instr.Operand as ParameterDefinition);  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getArgIndex,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldarg_0: return 0;  			case Code.Ldarg_1: return 1;  			case Code.Ldarg_2: return 2;  			case Code.Ldarg_3: return 3;    			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Ldarg:  			case Code.Ldarg_S:  				return getArgIndex(instr.Operand as ParameterDefinition);  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,createLdci4,The following statement contains a magic number: if (value == 2) return Instruction.Create(OpCodes.Ldc_I4_2);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,createLdci4,The following statement contains a magic number: if (value == 3) return Instruction.Create(OpCodes.Ldc_I4_3);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,createLdci4,The following statement contains a magic number: if (value == 4) return Instruction.Create(OpCodes.Ldc_I4_4);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,createLdci4,The following statement contains a magic number: if (value == 5) return Instruction.Create(OpCodes.Ldc_I4_5);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,createLdci4,The following statement contains a magic number: if (value == 6) return Instruction.Create(OpCodes.Ldc_I4_6);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,createLdci4,The following statement contains a magic number: if (value == 7) return Instruction.Create(OpCodes.Ldc_I4_7);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,createLdci4,The following statement contains a magic number: if (value == 8) return Instruction.Create(OpCodes.Ldc_I4_8);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getInstruction,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  				if (index < 0 || index >= instructions.Count)  					return null;  				var instr = instructions[index++];  				if (instr.OpCode.Code == Code.Nop)  					continue;  				if (instr.OpCode.OpCodeType == OpCodeType.Prefix)  					continue;  				if (instr == null || (instr.OpCode.Code != Code.Br && instr.OpCode.Code != Code.Br_S))  					return instr;  				instr = instr.Operand as Instruction;  				if (instr == null)  					return null;  				index = instructions.IndexOf(instr);  			}
Magic Number,de4dot.blocks,TypeDefinitionDict<TValue>,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,getAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder[(int)typeDefinition.Attributes & 7];
Magic Number,de4dot.blocks,FieldDefinitionDictBase<TValue>,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,getAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder[(int)fieldDefinition.Attributes & 7];
Magic Number,de4dot.blocks,MethodDefinitionDictBase<TValue>,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\MemberReferenceHelper.cs,getAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder[(int)methodDefinition.Attributes & 7];
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareEq((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareEq((Int64Value)val1' (Int64Value)val2));  			else if (val1.isNull() && val2.isNull())  				return emulateBranch(2' true);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareEq((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareEq((Int64Value)val1' (Int64Value)val2));  			else if (val1.isNull() && val2.isNull())  				return emulateBranch(2' true);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Beq,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareEq((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareEq((Int64Value)val1' (Int64Value)val2));  			else if (val1.isNull() && val2.isNull())  				return emulateBranch(2' true);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareNeq((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareNeq((Int64Value)val1' (Int64Value)val2));  			else if (val1.isNull() && val2.isNull())  				return emulateBranch(2' false);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareNeq((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareNeq((Int64Value)val1' (Int64Value)val2));  			else if (val1.isNull() && val2.isNull())  				return emulateBranch(2' false);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bne_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareNeq((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareNeq((Int64Value)val1' (Int64Value)val2));  			else if (val1.isNull() && val2.isNull())  				return emulateBranch(2' false);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bge,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareGe((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareGe((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bge,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareGe((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareGe((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bge_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareGe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareGe_Un((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bge_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareGe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareGe_Un((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bgt,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareGt((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareGt((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bgt,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareGt((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareGt((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bgt_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareGt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareGt_Un((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Bgt_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareGt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareGt_Un((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Ble,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareLe((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareLe((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Ble,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareLe((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareLe((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Ble_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareLe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareLe_Un((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Ble_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareLe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareLe_Un((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Blt,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareLt((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareLt((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Blt,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareLt((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareLt((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Blt_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareLt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareLt_Un((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BlockCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlockCflowDeobfuscator.cs,emulate_Blt_Un,The following statement contains a magic number: if (val1.isInt32() && val2.isInt32())  				return emulateBranch(2' Int32Value.compareLt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.isInt64() && val2.isInt64())  				return emulateBranch(2' Int64Value.compareLt_Un((Int64Value)val1' (Int64Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	emulate_Starg((ParameterDefinition)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	emulate_Stloc(((VariableDefinition)instr.Operand).Index); break;  			case Code.Stloc_0:	emulate_Stloc(0); break;  			case Code.Stloc_1:	emulate_Stloc(1); break;  			case Code.Stloc_2:	emulate_Stloc(2); break;  			case Code.Stloc_3:	emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.push(getArg((ParameterDefinition)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.push(getArg(0)); break;  			case Code.Ldarg_1:	valueStack.push(getArg(1)); break;  			case Code.Ldarg_2:	valueStack.push(getArg(2)); break;  			case Code.Ldarg_3:	valueStack.push(getArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.push(getLocal((VariableDefinition)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.push(getLocal(0)); break;  			case Code.Ldloc_1:	valueStack.push(getLocal(1)); break;  			case Code.Ldloc_2:	valueStack.push(getLocal(2)); break;  			case Code.Ldloc_3:	valueStack.push(getLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	emulate_Ldarga((ParameterDefinition)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	emulate_Ldloca(((VariableDefinition)instr.Operand).Index); break;    			case Code.Dup:		valueStack.copyTop(); break;    			case Code.Ldc_I4:	valueStack.push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.push(Int32Value.zero); break;  			case Code.Ldc_I4_1:	valueStack.push(Int32Value.one); break;  			case Code.Ldc_I4_2:	valueStack.push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.push(new BoxedValue(valueStack.pop())); break;    			case Code.Conv_U1:	emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	emulate_Conv_I8(instr); break;  			case Code.Add:		emulate_Add(instr); break;  			case Code.Sub:		emulate_Sub(instr); break;  			case Code.Mul:		emulate_Mul(instr); break;  			case Code.Div:		emulate_Div(instr); break;  			case Code.Div_Un:	emulate_Div_Un(instr); break;  			case Code.Rem:		emulate_Rem(instr); break;  			case Code.Rem_Un:	emulate_Rem_Un(instr); break;  			case Code.Neg:		emulate_Neg(instr); break;  			case Code.And:		emulate_And(instr); break;  			case Code.Or:		emulate_Or(instr); break;  			case Code.Xor:		emulate_Xor(instr); break;  			case Code.Not:		emulate_Not(instr); break;  			case Code.Shl:		emulate_Shl(instr); break;  			case Code.Shr:		emulate_Shr(instr); break;  			case Code.Shr_Un:	emulate_Shr_Un(instr); break;  			case Code.Ceq:		emulate_Ceq(instr); break;  			case Code.Cgt:		emulate_Cgt(instr); break;  			case Code.Cgt_Un:	emulate_Cgt_Un(instr); break;  			case Code.Clt:		emulate_Clt(instr); break;  			case Code.Clt_Un:	emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:emulate_Unbox_Any(instr); break;    			case Code.Call:		emulate_Call(instr); break;  			case Code.Callvirt:	emulate_Callvirt(instr); break;    			case Code.Castclass: emulate_Castclass(instr); break;  			case Code.Isinst:	emulate_Isinst(instr); break;    			case Code.Add_Ovf:	emulateIntOps2(); break;  			case Code.Add_Ovf_Un: emulateIntOps2(); break;  			case Code.Sub_Ovf:	emulateIntOps2(); break;  			case Code.Sub_Ovf_Un: emulateIntOps2(); break;  			case Code.Mul_Ovf:	emulateIntOps2(); break;  			case Code.Mul_Ovf_Un: emulateIntOps2(); break;    			case Code.Conv_Ovf_I1:  			case Code.Conv_Ovf_I1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I2:  			case Code.Conv_Ovf_I2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I4:  			case Code.Conv_Ovf_I4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_I8:  			case Code.Conv_Ovf_I8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Conv_Ovf_U1:  			case Code.Conv_Ovf_U1_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Conv_Ovf_U2:  			case Code.Conv_Ovf_U2_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Conv_Ovf_U4:  			case Code.Conv_Ovf_U4_Un: valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Conv_Ovf_U8:  			case Code.Conv_Ovf_U8_Un: valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;    			case Code.Ldelem_I1: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I2: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_I8: valueStack.pop(2); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldelem_U1: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.pop(2); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.pop(2); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldelem_Any:valueStack.pop(2); valueStack.push(getUnknownValue(instr.Operand as TypeReference)); break;    			case Code.Ldind_I1:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I2:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Ldind_I8:	valueStack.pop(); valueStack.push(Int64Value.createUnknown()); break;  			case Code.Ldind_U1:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.pop(); valueStack.push(Int32Value.createUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldlen:	valueStack.pop(); valueStack.push(Int32Value.createUnknown()); break;  			case Code.Sizeof:	valueStack.push(Int32Value.createUnknown()); break;    			case Code.Ldfld:	emulate_Ldfld(instr); break;  			case Code.Ldsfld:	emulate_Ldsfld(instr); break;    			case Code.Unbox:    			case Code.Conv_R_Un:  			case Code.Conv_R4:  			case Code.Conv_R8:    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldflda:  			case Code.Ldftn:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Ldsflda:  			case Code.Ldtoken:  			case Code.Ldvirtftn:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.No:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem_Any:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tail:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				updateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,createUnknownUInt8,The following statement contains a magic number: return new Int32Value(0' NO_UNKNOWN_BITS << 8);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,createUnknownUInt16,The following statement contains a magic number: return new Int32Value(0' NO_UNKNOWN_BITS << 16);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Conv_U1,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 8;
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (isBitValid(validMask' 7))  				validMask |= NO_UNKNOWN_BITS << 8;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 8);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (isBitValid(validMask' 7))  				validMask |= NO_UNKNOWN_BITS << 8;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 8);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (isBitValid(validMask' 7))  				validMask |= NO_UNKNOWN_BITS << 8;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 8);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Conv_U2,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 16;
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (isBitValid(validMask' 15))  				validMask |= NO_UNKNOWN_BITS << 16;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 16);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (isBitValid(validMask' 15))  				validMask |= NO_UNKNOWN_BITS << 16;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 16);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (isBitValid(validMask' 15))  				validMask |= NO_UNKNOWN_BITS << 16;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 16);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Shl,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(int) * 8)  				return createUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Shl,The following statement contains a magic number: uint validMask = (a.validMask << shift) | (uint.MaxValue >> (sizeof(int) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(int) * 8)  				return createUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (a.isBitValid(sizeof(int) * 8 - 1))  				validMask |= (uint.MaxValue << (sizeof(int) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (a.isBitValid(sizeof(int) * 8 - 1))  				validMask |= (uint.MaxValue << (sizeof(int) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Shr_Un,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(int) * 8)  				return createUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int32Value.cs,Shr_Un,The following statement contains a magic number: uint validMask = (a.validMask >> shift) | (uint.MaxValue << (sizeof(int) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Conv_U8,The following statement contains a magic number: ulong validMask = a.validMask | (NO_UNKNOWN_BITS << 32);
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (isBitValid(validMask' 31))  				validMask |= NO_UNKNOWN_BITS << 32;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 32);
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (isBitValid(validMask' 31))  				validMask |= NO_UNKNOWN_BITS << 32;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 32);
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (isBitValid(validMask' 31))  				validMask |= NO_UNKNOWN_BITS << 32;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 32);
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Shl,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(long) * 8)  				return createUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Shl,The following statement contains a magic number: ulong validMask = (a.validMask << shift) | (ulong.MaxValue >> (sizeof(long) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(long) * 8)  				return createUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (a.isBitValid(sizeof(long) * 8 - 1))  				validMask |= (ulong.MaxValue << (sizeof(long) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (a.isBitValid(sizeof(long) * 8 - 1))  				validMask |= (ulong.MaxValue << (sizeof(long) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Shr_Un,The following statement contains a magic number: if (b.value < 0 || b.value >= sizeof(long) * 8)  				return createUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\Int64Value.cs,Shr_Un,The following statement contains a magic number: ulong validMask = (a.validMask >> shift) | (ulong.MaxValue << (sizeof(long) * 8 - shift));
Magic Number,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\SwitchCflowDeobfuscator.cs,isStLdlocBranch,The following statement contains a magic number: int numInstrs = 2 + (isSwitch ? 1 : 0);
Magic Number,de4dot.blocks.cflow,ValueStack,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\ValueStack.cs,ToString,The following statement contains a magic number: const int maxValues = 5;
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\BlocksCflowDeobfuscator.cs,fixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].isLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.isLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.replaceLastInstrsWithBranch(5' next);  				changed = true;  			}
Magic Number,de4dot.PE,Metadata,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\Metadata.cs,Metadata,The following statement contains a magic number: offset = (uint)reader.BaseStream.Position - 4;
Magic Number,de4dot.PE,Metadata,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\Metadata.cs,readAsciizString,The following statement contains a magic number: reader.BaseStream.Position = (reader.BaseStream.Position + 3) & ~3;
Magic Number,de4dot.PE,Metadata,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\Metadata.cs,readAsciizString,The following statement contains a magic number: reader.BaseStream.Position = (reader.BaseStream.Position + 3) & ~3;
Magic Number,de4dot.PE,MetadataTables,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTables.cs,init,The following statement contains a magic number: var numRows = new uint[64];
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,field,The following statement contains a magic number: switch (type) {  			case MetadataVarType.byte1:  				size = 1;  				break;  			case MetadataVarType.byte2:  				size = 2;  				break;  			case MetadataVarType.byte4:  				size = 4;  				break;  			case MetadataVarType.stringIndex:  				size = (heapOffsetSizes & 1) != 0 ? 4 : 2;  				break;  			case MetadataVarType.guidIndex:  				size = (heapOffsetSizes & 2) != 0 ? 4 : 2;  				break;  			case MetadataVarType.blobIndex:  				size = (heapOffsetSizes & 4) != 0 ? 4 : 2;  				break;  			case MetadataVarType.resolutionScope:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iModule' MetadataIndex.iModuleRef' MetadataIndex.iAssemblyRef' MetadataIndex.iTypeRef });  				break;  			case MetadataVarType.typeDefOrRef:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.memberRefParent:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iTypeRef' MetadataIndex.iModuleRef' MetadataIndex.iMethodDef' MetadataIndex.iTypeSpec });  				break;  			case MetadataVarType.hasConstant:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam' MetadataIndex.iProperty });  				break;  			case MetadataVarType.hasCustomAttribute:  				size = getSize(11' new MetadataIndex[] {  					MetadataIndex.iMethodDef' MetadataIndex.iField' MetadataIndex.iTypeRef'  					MetadataIndex.iTypeDef' MetadataIndex.iParam' MetadataIndex.iInterfaceImpl'  					MetadataIndex.iMemberRef' MetadataIndex.iModule /*TODO:' MetadataIndex.iPermission*/'  					MetadataIndex.iProperty' MetadataIndex.iEvent' MetadataIndex.iStandAloneSig'  					MetadataIndex.iModuleRef' MetadataIndex.iTypeSpec' MetadataIndex.iAssembly'  					MetadataIndex.iAssemblyRef' MetadataIndex.iFile' MetadataIndex.iExportedType'  					MetadataIndex.iManifestResource'  				});  				break;  			case MetadataVarType.customAttributeType:  				size = getSize(13' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });	// others aren't used  				break;  			case MetadataVarType.hasFieldMarshal:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iParam });  				break;  			case MetadataVarType.hasDeclSecurity:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef' MetadataIndex.iAssembly });  				break;  			case MetadataVarType.hasSemantics:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iEvent' MetadataIndex.iProperty });  				break;  			case MetadataVarType.methodDefOrRef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iMethodDef' MetadataIndex.iMemberRef });  				break;  			case MetadataVarType.memberForwarded:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iField' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.implementation:  				size = getSize(14' new MetadataIndex[] { MetadataIndex.iFile' MetadataIndex.iAssemblyRef' MetadataIndex.iExportedType });  				break;  			case MetadataVarType.typeOrMethodDef:  				size = getSize(15' new MetadataIndex[] { MetadataIndex.iTypeDef' MetadataIndex.iMethodDef });  				break;  			case MetadataVarType.fieldIndex:  				size = getSize(MetadataIndex.iField);  				break;  			case MetadataVarType.methodDefIndex:  				size = getSize(MetadataIndex.iMethodDef);  				break;  			case MetadataVarType.paramIndex:  				size = getSize(MetadataIndex.iParam);  				break;  			case MetadataVarType.typeDefIndex:  				size = getSize(MetadataIndex.iTypeDef);  				break;  			case MetadataVarType.eventIndex:  				size = getSize(MetadataIndex.iEvent);  				break;  			case MetadataVarType.propertyIndex:  				size = getSize(MetadataIndex.iProperty);  				break;  			case MetadataVarType.moduleRefIndex:  				size = getSize(MetadataIndex.iModuleRef);  				break;  			case MetadataVarType.assemblyRefIndex:  				size = getSize(MetadataIndex.iAssemblyRef);  				break;  			case MetadataVarType.genericParamIndex:  				size = getSize(MetadataIndex.iGenericParam);  				break;  			default:  				throw new ApplicationException("Unknown type");  			}
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,getSize,The following statement contains a magic number: return maxRows <= maxNum ? 2 : 4;
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,getSize,The following statement contains a magic number: return maxRows <= maxNum ? 2 : 4;
Magic Number,de4dot.PE,MetadataTypeBuilder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\MetadataTypeBuilder.cs,getSize,The following statement contains a magic number: return getSize(16' new MetadataIndex[] { index });
Magic Number,de4dot.PE,OptionalHeader,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\OptionalHeader.cs,OptionalHeader,The following statement contains a magic number: dataDirectories = new DataDirectory[16];
Magic Number,de4dot.PE,OptionalHeader,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\OptionalHeader.cs,offsetOfDataDirectory,The following statement contains a magic number: return offset + length - (uint)(16 - n) * 8;
Magic Number,de4dot.PE,OptionalHeader,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\OptionalHeader.cs,offsetOfDataDirectory,The following statement contains a magic number: return offset + length - (uint)(16 - n) * 8;
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,init,The following statement contains a magic number: skip(29 * 2);
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,init,The following statement contains a magic number: skip(29 * 2);
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,init,The following statement contains a magic number: uint netRva = optionalHeader.dataDirectories[14].virtualAddress;
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,init,The following statement contains a magic number: uint resourceRva = optionalHeader.dataDirectories[2].virtualAddress;
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,init,The following statement contains a magic number: resources = new Resources(reader' resourceOffset' optionalHeader.dataDirectories[2].size);
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,offsetRead,The following statement contains a magic number: if (size == 2) return offsetReadUInt16(offset);
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,offsetRead,The following statement contains a magic number: if (size == 4) return offsetReadUInt32(offset);
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,offsetWrite,The following statement contains a magic number: if (size == 2)  				offsetWriteUInt16(offset' (ushort)data);  			else if (size == 4)  				offsetWriteUInt32(offset' data);  			else  				throw new NotImplementedException();
Magic Number,de4dot.PE,PeImage,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\PeImage.cs,offsetWrite,The following statement contains a magic number: if (size == 2)  				offsetWriteUInt16(offset' (ushort)data);  			else if (size == 4)  				offsetWriteUInt32(offset' data);  			else  				throw new NotImplementedException();
Magic Number,de4dot.PE,ResourceDirectory,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\ResourceDirectory.cs,initializeEntries,The following statement contains a magic number: if (!resources.isSizeAvailable(offset' 16))  				return;
Magic Number,de4dot.PE,ResourceDirectory,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\ResourceDirectory.cs,initializeEntries,The following statement contains a magic number: if (!resources.seek(offset + 12))  				return;
Magic Number,de4dot.PE,ResourceDirectory,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\ResourceDirectory.cs,initializeEntries,The following statement contains a magic number: if (!resources.isSizeAvailable(total * 8))  				return;
Magic Number,de4dot.PE,ResourceDirectory,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\ResourceDirectory.cs,initializeEntries,The following statement contains a magic number: for (int i = 0' entryOffset = offset + 16; i < total; i++' entryOffset += 8) {  				resources.seek(entryOffset);  				uint nameOrId = resources.readUInt32();  				uint dataOrDirectory = resources.readUInt32();    				string name = null;  				int id = -1;  				if ((nameOrId & 0x80000000) != 0) {  					name = resources.readString((int)(nameOrId & 0x7FFFFFFF));  					if (name == null)  						break;  				}  				else  					id = (int)nameOrId;    				if ((dataOrDirectory & 0x80000000) == 0) {  					if (!resources.seek((int)dataOrDirectory))  						break;  					if (!resources.isSizeAvailable(16))  						break;  					uint dataRva = resources.readUInt32();  					uint dataSize = resources.readUInt32();  					if (name == null)  						resourceDataList.Add(new ResourceData(id' dataRva' dataSize));  					else  						resourceDataList.Add(new ResourceData(name' dataRva' dataSize));  				}  				else {  					int directoryOffset = (int)(dataOrDirectory & 0x7FFFFFFF);  					if (name == null)  						resourceDirectoryList.Add(new ResourceDirectory(id' resources' directoryOffset));  					else  						resourceDirectoryList.Add(new ResourceDirectory(name' resources' directoryOffset));  				}  			}
Magic Number,de4dot.PE,ResourceDirectory,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\ResourceDirectory.cs,initializeEntries,The following statement contains a magic number: for (int i = 0' entryOffset = offset + 16; i < total; i++' entryOffset += 8) {  				resources.seek(entryOffset);  				uint nameOrId = resources.readUInt32();  				uint dataOrDirectory = resources.readUInt32();    				string name = null;  				int id = -1;  				if ((nameOrId & 0x80000000) != 0) {  					name = resources.readString((int)(nameOrId & 0x7FFFFFFF));  					if (name == null)  						break;  				}  				else  					id = (int)nameOrId;    				if ((dataOrDirectory & 0x80000000) == 0) {  					if (!resources.seek((int)dataOrDirectory))  						break;  					if (!resources.isSizeAvailable(16))  						break;  					uint dataRva = resources.readUInt32();  					uint dataSize = resources.readUInt32();  					if (name == null)  						resourceDataList.Add(new ResourceData(id' dataRva' dataSize));  					else  						resourceDataList.Add(new ResourceData(name' dataRva' dataSize));  				}  				else {  					int directoryOffset = (int)(dataOrDirectory & 0x7FFFFFFF);  					if (name == null)  						resourceDirectoryList.Add(new ResourceDirectory(id' resources' directoryOffset));  					else  						resourceDirectoryList.Add(new ResourceDirectory(name' resources' directoryOffset));  				}  			}
Magic Number,de4dot.PE,ResourceDirectory,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\ResourceDirectory.cs,initializeEntries,The following statement contains a magic number: for (int i = 0' entryOffset = offset + 16; i < total; i++' entryOffset += 8) {  				resources.seek(entryOffset);  				uint nameOrId = resources.readUInt32();  				uint dataOrDirectory = resources.readUInt32();    				string name = null;  				int id = -1;  				if ((nameOrId & 0x80000000) != 0) {  					name = resources.readString((int)(nameOrId & 0x7FFFFFFF));  					if (name == null)  						break;  				}  				else  					id = (int)nameOrId;    				if ((dataOrDirectory & 0x80000000) == 0) {  					if (!resources.seek((int)dataOrDirectory))  						break;  					if (!resources.isSizeAvailable(16))  						break;  					uint dataRva = resources.readUInt32();  					uint dataSize = resources.readUInt32();  					if (name == null)  						resourceDataList.Add(new ResourceData(id' dataRva' dataSize));  					else  						resourceDataList.Add(new ResourceData(name' dataRva' dataSize));  				}  				else {  					int directoryOffset = (int)(dataOrDirectory & 0x7FFFFFFF);  					if (name == null)  						resourceDirectoryList.Add(new ResourceDirectory(id' resources' directoryOffset));  					else  						resourceDirectoryList.Add(new ResourceDirectory(name' resources' directoryOffset));  				}  			}
Magic Number,de4dot.PE,Resources,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\Resources.cs,readString,The following statement contains a magic number: if (!isSizeAvailable(2))  				return null;
Magic Number,de4dot.PE,Resources,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\Resources.cs,readString,The following statement contains a magic number: int sizeInBytes = size * 2;
Magic Number,de4dot.PE,SectionHeader,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\PE\SectionHeader.cs,SectionHeader,The following statement contains a magic number: name = reader.ReadBytes(8);
Missing Default,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getArgIndex,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  			case Code.Ldarg_0: return 0;  			case Code.Ldarg_1: return 1;  			case Code.Ldarg_2: return 2;  			case Code.Ldarg_3: return 3;    			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Ldarg:  			case Code.Ldarg_S:  				return getArgIndex(instr.Operand as ParameterDefinition);  			}
Missing Default,de4dot.blocks,DotNetUtils,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\DotNetUtils.cs,getFrameworkType,The following switch statement is missing a default case: switch (BitConverter.ToString(modRef.PublicKeyToken).Replace("-"' "").ToLowerInvariant()) {  				case "b77a5c561934e089":  					return FrameworkType.Desktop;  				case "7cec85d7bea7798e":  					return FrameworkType.Silverlight;  				case "969db8053d3322ac":  					return FrameworkType.CompactFramework;  				case "1c9e259686f921e0":  					return FrameworkType.XNA;  				case "e92a8b81eba7ceb7":  					return FrameworkType.Zune;  				}
Missing Default,de4dot.blocks,InstructionListParser,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\InstructionListParser.cs,createBranches,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  					case Code.Endfilter:  					case Code.Endfinally:  					case Code.Jmp:  					case Code.Ret:  					case Code.Rethrow:  					case Code.Throw:  						targets = new List<int>();  						break;  					}
Missing Default,de4dot.blocks,InstructionListParser,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\InstructionListParser.cs,fixBranchTargets,The following switch statement is missing a default case: switch (lastInstr.OpCode.OperandType) {  				case OperandType.ShortInlineBrTarget:  				case OperandType.InlineBrTarget:  					var targetInstr = lastInstr.Operand as Instruction;  					if (targetInstr != null)  						block.Targets = new List<Block> { instrToBlock[instrToIndex[targetInstr]] };  					break;    				case OperandType.InlineSwitch:  					var switchTargets = (Instruction[])lastInstr.Operand;  					var newSwitchTargets = new List<Block>();  					block.Targets = newSwitchTargets;  					foreach (var target in switchTargets) {  						if (target != null)  							newSwitchTargets.Add(instrToBlock[instrToIndex[target]]);  					}  					break;  				}
Missing Default,de4dot.blocks.cflow,ConstantsFolder,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\ConstantsFolder.cs,deobfuscate,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  				case Code.Ldarg_S:  					changed |= fixLoadInstruction(block' i' instructionEmulator.getArg(DotNetUtils.getParameter(args' instr.Instruction)));  					break;    				case Code.Ldloc:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  				case Code.Ldloc_S:  					changed |= fixLoadInstruction(block' i' instructionEmulator.getLocal(DotNetUtils.getLocalVar(blocks.Locals' instr.Instruction)));  					break;    				case Code.Ldarga:  				case Code.Ldarga_S:  					instructionEmulator.makeArgUnknown((ParameterDefinition)instr.Operand);  					break;    				case Code.Ldloca:  				case Code.Ldloca_S:  					instructionEmulator.makeLocalUnknown((VariableDefinition)instr.Operand);  					break;  				}
Missing Default,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,getUnknownValue,The following switch statement is missing a default case: switch (typeReference.EType) {  			case ElementType.Boolean: return Int32Value.createUnknownBool();  			case ElementType.I1: return Int32Value.createUnknown();  			case ElementType.U1: return Int32Value.createUnknownUInt8();  			case ElementType.I2: return Int32Value.createUnknown();  			case ElementType.U2: return Int32Value.createUnknownUInt16();  			case ElementType.I4: return Int32Value.createUnknown();  			case ElementType.U4: return Int32Value.createUnknown();  			case ElementType.I8: return Int64Value.createUnknown();  			case ElementType.U8: return Int64Value.createUnknown();  			}
Missing Default,de4dot.blocks.cflow,InstructionEmulator,C:\repos\UbbeLoL_NETDeob\NETDeob\blocks\cflow\InstructionEmulator.cs,truncateValue,The following switch statement is missing a default case: switch (typeReference.EType) {  			case ElementType.Boolean:  				if (value.isInt32())  					return ((Int32Value)value).toBoolean();  				return Int32Value.createUnknownBool();    			case ElementType.I1:  				if (value.isInt32())  					return ((Int32Value)value).toInt8();  				return Int32Value.createUnknown();    			case ElementType.U1:  				if (value.isInt32())  					return ((Int32Value)value).toUInt8();  				return Int32Value.createUnknownUInt8();    			case ElementType.I2:  				if (value.isInt32())  					return ((Int32Value)value).toInt16();  				return Int32Value.createUnknown();    			case ElementType.U2:  				if (value.isInt32())  					return ((Int32Value)value).toUInt16();  				return Int32Value.createUnknownUInt16();    			case ElementType.I4:  			case ElementType.U4:  				if (value.isInt32())  					return value;  				return Int32Value.createUnknown();    			case ElementType.I8:  			case ElementType.U8:  				if (value.isInt64())  					return value;  				return Int64Value.createUnknown();  			}
