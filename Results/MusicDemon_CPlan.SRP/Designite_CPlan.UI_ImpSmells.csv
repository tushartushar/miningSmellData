Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,Cyclomatic complexity of the method is 18
Complex Method,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,Cyclomatic complexity of the method is 23
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,TCPClient,The following statement contains a magic number: c = new TcpClient (IPAddress.Loopback.ToString ()' 4567);  
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,The following statement contains a magic number: if (c.Connected) {  	// Send user name and A when connected to the server.  	c.Client.Send (Encoding.UTF8.GetBytes ("MusicDemon").Concat (carrier.A.ToByteArray ()).ToArray ());  	while (run) {  		if ((c != null && c.Connected) && c.Available > 0) {  			byte[] data = new byte[c.Available];  			c.Client.Receive (data);  			switch (stage) {  			case 0:  				byte[] salt = data.Take (16).ToArray ();  				// Extract the salt.  				BigInteger B = new BigInteger (data.Skip (16).ToArray ());  				// Extract the B.   				carrier.CalculateEverthing (salt' B);  				c.Client.Send (carrier.M);  				// Send M.  				stage++;  				break;  			case 1:  				if (C.CompareArrays (data' carrier.M2)) {  					// Yea!! M2 is equal to the server M2.   					c.Client.Send (new byte[] {  						0  					});  					Console.WriteLine ("From Client: Status OK. Logged in!");  					Console.WriteLine ("From Client: Exiting client...");  					run = false;  				}  				else {  					c.Close ();  					c = null;  					run = false;  				}  				break;  			default:  				c.Close ();  				c = null;  				break;  			}  		}  	}  }  
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,The following statement contains a magic number: if (c.Connected) {  	// Send user name and A when connected to the server.  	c.Client.Send (Encoding.UTF8.GetBytes ("MusicDemon").Concat (carrier.A.ToByteArray ()).ToArray ());  	while (run) {  		if ((c != null && c.Connected) && c.Available > 0) {  			byte[] data = new byte[c.Available];  			c.Client.Receive (data);  			switch (stage) {  			case 0:  				byte[] salt = data.Take (16).ToArray ();  				// Extract the salt.  				BigInteger B = new BigInteger (data.Skip (16).ToArray ());  				// Extract the B.   				carrier.CalculateEverthing (salt' B);  				c.Client.Send (carrier.M);  				// Send M.  				stage++;  				break;  			case 1:  				if (C.CompareArrays (data' carrier.M2)) {  					// Yea!! M2 is equal to the server M2.   					c.Client.Send (new byte[] {  						0  					});  					Console.WriteLine ("From Client: Status OK. Logged in!");  					Console.WriteLine ("From Client: Exiting client...");  					run = false;  				}  				else {  					c.Close ();  					c = null;  					run = false;  				}  				break;  			default:  				c.Close ();  				c = null;  				break;  			}  		}  	}  }  
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,The following statement contains a magic number: while (run) {  	if ((c != null && c.Connected) && c.Available > 0) {  		byte[] data = new byte[c.Available];  		c.Client.Receive (data);  		switch (stage) {  		case 0:  			byte[] salt = data.Take (16).ToArray ();  			// Extract the salt.  			BigInteger B = new BigInteger (data.Skip (16).ToArray ());  			// Extract the B.   			carrier.CalculateEverthing (salt' B);  			c.Client.Send (carrier.M);  			// Send M.  			stage++;  			break;  		case 1:  			if (C.CompareArrays (data' carrier.M2)) {  				// Yea!! M2 is equal to the server M2.   				c.Client.Send (new byte[] {  					0  				});  				Console.WriteLine ("From Client: Status OK. Logged in!");  				Console.WriteLine ("From Client: Exiting client...");  				run = false;  			}  			else {  				c.Close ();  				c = null;  				run = false;  			}  			break;  		default:  			c.Close ();  			c = null;  			break;  		}  	}  }  
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,The following statement contains a magic number: while (run) {  	if ((c != null && c.Connected) && c.Available > 0) {  		byte[] data = new byte[c.Available];  		c.Client.Receive (data);  		switch (stage) {  		case 0:  			byte[] salt = data.Take (16).ToArray ();  			// Extract the salt.  			BigInteger B = new BigInteger (data.Skip (16).ToArray ());  			// Extract the B.   			carrier.CalculateEverthing (salt' B);  			c.Client.Send (carrier.M);  			// Send M.  			stage++;  			break;  		case 1:  			if (C.CompareArrays (data' carrier.M2)) {  				// Yea!! M2 is equal to the server M2.   				c.Client.Send (new byte[] {  					0  				});  				Console.WriteLine ("From Client: Status OK. Logged in!");  				Console.WriteLine ("From Client: Exiting client...");  				run = false;  			}  			else {  				c.Close ();  				c = null;  				run = false;  			}  			break;  		default:  			c.Close ();  			c = null;  			break;  		}  	}  }  
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,The following statement contains a magic number: if ((c != null && c.Connected) && c.Available > 0) {  	byte[] data = new byte[c.Available];  	c.Client.Receive (data);  	switch (stage) {  	case 0:  		byte[] salt = data.Take (16).ToArray ();  		// Extract the salt.  		BigInteger B = new BigInteger (data.Skip (16).ToArray ());  		// Extract the B.   		carrier.CalculateEverthing (salt' B);  		c.Client.Send (carrier.M);  		// Send M.  		stage++;  		break;  	case 1:  		if (C.CompareArrays (data' carrier.M2)) {  			// Yea!! M2 is equal to the server M2.   			c.Client.Send (new byte[] {  				0  			});  			Console.WriteLine ("From Client: Status OK. Logged in!");  			Console.WriteLine ("From Client: Exiting client...");  			run = false;  		}  		else {  			c.Close ();  			c = null;  			run = false;  		}  		break;  	default:  		c.Close ();  		c = null;  		break;  	}  }  
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,The following statement contains a magic number: if ((c != null && c.Connected) && c.Available > 0) {  	byte[] data = new byte[c.Available];  	c.Client.Receive (data);  	switch (stage) {  	case 0:  		byte[] salt = data.Take (16).ToArray ();  		// Extract the salt.  		BigInteger B = new BigInteger (data.Skip (16).ToArray ());  		// Extract the B.   		carrier.CalculateEverthing (salt' B);  		c.Client.Send (carrier.M);  		// Send M.  		stage++;  		break;  	case 1:  		if (C.CompareArrays (data' carrier.M2)) {  			// Yea!! M2 is equal to the server M2.   			c.Client.Send (new byte[] {  				0  			});  			Console.WriteLine ("From Client: Status OK. Logged in!");  			Console.WriteLine ("From Client: Exiting client...");  			run = false;  		}  		else {  			c.Close ();  			c = null;  			run = false;  		}  		break;  	default:  		c.Close ();  		c = null;  		break;  	}  }  
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,The following statement contains a magic number: switch (stage) {  case 0:  	byte[] salt = data.Take (16).ToArray ();  	// Extract the salt.  	BigInteger B = new BigInteger (data.Skip (16).ToArray ());  	// Extract the B.   	carrier.CalculateEverthing (salt' B);  	c.Client.Send (carrier.M);  	// Send M.  	stage++;  	break;  case 1:  	if (C.CompareArrays (data' carrier.M2)) {  		// Yea!! M2 is equal to the server M2.   		c.Client.Send (new byte[] {  			0  		});  		Console.WriteLine ("From Client: Status OK. Logged in!");  		Console.WriteLine ("From Client: Exiting client...");  		run = false;  	}  	else {  		c.Close ();  		c = null;  		run = false;  	}  	break;  default:  	c.Close ();  	c = null;  	break;  }  
Magic Number,CPlan.UI,TCPClient,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Client.cs,CheckData,The following statement contains a magic number: switch (stage) {  case 0:  	byte[] salt = data.Take (16).ToArray ();  	// Extract the salt.  	BigInteger B = new BigInteger (data.Skip (16).ToArray ());  	// Extract the B.   	carrier.CalculateEverthing (salt' B);  	c.Client.Send (carrier.M);  	// Send M.  	stage++;  	break;  case 1:  	if (C.CompareArrays (data' carrier.M2)) {  		// Yea!! M2 is equal to the server M2.   		c.Client.Send (new byte[] {  			0  		});  		Console.WriteLine ("From Client: Status OK. Logged in!");  		Console.WriteLine ("From Client: Exiting client...");  		run = false;  	}  	else {  		c.Close ();  		c = null;  		run = false;  	}  	break;  default:  	c.Close ();  	c = null;  	break;  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,Host,The following statement contains a magic number: l = new TcpListener (new IPEndPoint (IPAddress.Loopback' 4567));  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: while (run) {  	if ((c != null && c.Connected) && c.Available > 0) {  		byte[] data = new byte[c.Available];  		c.Client.Receive (data);  		switch (stage) {  		case 0:  			// Receive username and A.  			// We have fixed this.  			userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  			// Receive user name.  			A = new BigInteger (data.Skip (10).ToArray ());  			// NOTE: A is not checked for "A % N = 0"!!!  			c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  			// Send salt and B.  			S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  			// Calculate S.  			K = C.CalcK (S);  			// Calculate K.  			M = C.M (userName' salt' A' B' K' g' N);  			// Caculate M.  			stage++;  			break;  		case 1:  			// Receive and calculate M and M2.  			if (C.CompareArrays (data' M)) {  				// Client M and Server M are equal'   				c.Client.Send (C.M2 (A' M' K));  				// Send calculated M2.  				Console.WriteLine ("From Server: Status OK. Logged in!");  				stage++;  			}  			else {  				c.Close ();  				c = null;  				run = false;  			}  			break;  		case 2:  			// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  			Console.WriteLine ("From Server: Exiting server...");  			run = false;  			break;  		default:  			c.Close ();  			c = null;  			break;  		}  	}  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: while (run) {  	if ((c != null && c.Connected) && c.Available > 0) {  		byte[] data = new byte[c.Available];  		c.Client.Receive (data);  		switch (stage) {  		case 0:  			// Receive username and A.  			// We have fixed this.  			userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  			// Receive user name.  			A = new BigInteger (data.Skip (10).ToArray ());  			// NOTE: A is not checked for "A % N = 0"!!!  			c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  			// Send salt and B.  			S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  			// Calculate S.  			K = C.CalcK (S);  			// Calculate K.  			M = C.M (userName' salt' A' B' K' g' N);  			// Caculate M.  			stage++;  			break;  		case 1:  			// Receive and calculate M and M2.  			if (C.CompareArrays (data' M)) {  				// Client M and Server M are equal'   				c.Client.Send (C.M2 (A' M' K));  				// Send calculated M2.  				Console.WriteLine ("From Server: Status OK. Logged in!");  				stage++;  			}  			else {  				c.Close ();  				c = null;  				run = false;  			}  			break;  		case 2:  			// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  			Console.WriteLine ("From Server: Exiting server...");  			run = false;  			break;  		default:  			c.Close ();  			c = null;  			break;  		}  	}  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: while (run) {  	if ((c != null && c.Connected) && c.Available > 0) {  		byte[] data = new byte[c.Available];  		c.Client.Receive (data);  		switch (stage) {  		case 0:  			// Receive username and A.  			// We have fixed this.  			userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  			// Receive user name.  			A = new BigInteger (data.Skip (10).ToArray ());  			// NOTE: A is not checked for "A % N = 0"!!!  			c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  			// Send salt and B.  			S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  			// Calculate S.  			K = C.CalcK (S);  			// Calculate K.  			M = C.M (userName' salt' A' B' K' g' N);  			// Caculate M.  			stage++;  			break;  		case 1:  			// Receive and calculate M and M2.  			if (C.CompareArrays (data' M)) {  				// Client M and Server M are equal'   				c.Client.Send (C.M2 (A' M' K));  				// Send calculated M2.  				Console.WriteLine ("From Server: Status OK. Logged in!");  				stage++;  			}  			else {  				c.Close ();  				c = null;  				run = false;  			}  			break;  		case 2:  			// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  			Console.WriteLine ("From Server: Exiting server...");  			run = false;  			break;  		default:  			c.Close ();  			c = null;  			break;  		}  	}  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: if ((c != null && c.Connected) && c.Available > 0) {  	byte[] data = new byte[c.Available];  	c.Client.Receive (data);  	switch (stage) {  	case 0:  		// Receive username and A.  		// We have fixed this.  		userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  		// Receive user name.  		A = new BigInteger (data.Skip (10).ToArray ());  		// NOTE: A is not checked for "A % N = 0"!!!  		c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  		// Send salt and B.  		S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  		// Calculate S.  		K = C.CalcK (S);  		// Calculate K.  		M = C.M (userName' salt' A' B' K' g' N);  		// Caculate M.  		stage++;  		break;  	case 1:  		// Receive and calculate M and M2.  		if (C.CompareArrays (data' M)) {  			// Client M and Server M are equal'   			c.Client.Send (C.M2 (A' M' K));  			// Send calculated M2.  			Console.WriteLine ("From Server: Status OK. Logged in!");  			stage++;  		}  		else {  			c.Close ();  			c = null;  			run = false;  		}  		break;  	case 2:  		// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  		Console.WriteLine ("From Server: Exiting server...");  		run = false;  		break;  	default:  		c.Close ();  		c = null;  		break;  	}  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: if ((c != null && c.Connected) && c.Available > 0) {  	byte[] data = new byte[c.Available];  	c.Client.Receive (data);  	switch (stage) {  	case 0:  		// Receive username and A.  		// We have fixed this.  		userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  		// Receive user name.  		A = new BigInteger (data.Skip (10).ToArray ());  		// NOTE: A is not checked for "A % N = 0"!!!  		c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  		// Send salt and B.  		S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  		// Calculate S.  		K = C.CalcK (S);  		// Calculate K.  		M = C.M (userName' salt' A' B' K' g' N);  		// Caculate M.  		stage++;  		break;  	case 1:  		// Receive and calculate M and M2.  		if (C.CompareArrays (data' M)) {  			// Client M and Server M are equal'   			c.Client.Send (C.M2 (A' M' K));  			// Send calculated M2.  			Console.WriteLine ("From Server: Status OK. Logged in!");  			stage++;  		}  		else {  			c.Close ();  			c = null;  			run = false;  		}  		break;  	case 2:  		// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  		Console.WriteLine ("From Server: Exiting server...");  		run = false;  		break;  	default:  		c.Close ();  		c = null;  		break;  	}  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: if ((c != null && c.Connected) && c.Available > 0) {  	byte[] data = new byte[c.Available];  	c.Client.Receive (data);  	switch (stage) {  	case 0:  		// Receive username and A.  		// We have fixed this.  		userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  		// Receive user name.  		A = new BigInteger (data.Skip (10).ToArray ());  		// NOTE: A is not checked for "A % N = 0"!!!  		c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  		// Send salt and B.  		S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  		// Calculate S.  		K = C.CalcK (S);  		// Calculate K.  		M = C.M (userName' salt' A' B' K' g' N);  		// Caculate M.  		stage++;  		break;  	case 1:  		// Receive and calculate M and M2.  		if (C.CompareArrays (data' M)) {  			// Client M and Server M are equal'   			c.Client.Send (C.M2 (A' M' K));  			// Send calculated M2.  			Console.WriteLine ("From Server: Status OK. Logged in!");  			stage++;  		}  		else {  			c.Close ();  			c = null;  			run = false;  		}  		break;  	case 2:  		// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  		Console.WriteLine ("From Server: Exiting server...");  		run = false;  		break;  	default:  		c.Close ();  		c = null;  		break;  	}  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: switch (stage) {  case 0:  	// Receive username and A.  	// We have fixed this.  	userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  	// Receive user name.  	A = new BigInteger (data.Skip (10).ToArray ());  	// NOTE: A is not checked for "A % N = 0"!!!  	c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  	// Send salt and B.  	S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  	// Calculate S.  	K = C.CalcK (S);  	// Calculate K.  	M = C.M (userName' salt' A' B' K' g' N);  	// Caculate M.  	stage++;  	break;  case 1:  	// Receive and calculate M and M2.  	if (C.CompareArrays (data' M)) {  		// Client M and Server M are equal'   		c.Client.Send (C.M2 (A' M' K));  		// Send calculated M2.  		Console.WriteLine ("From Server: Status OK. Logged in!");  		stage++;  	}  	else {  		c.Close ();  		c = null;  		run = false;  	}  	break;  case 2:  	// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  	Console.WriteLine ("From Server: Exiting server...");  	run = false;  	break;  default:  	c.Close ();  	c = null;  	break;  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: switch (stage) {  case 0:  	// Receive username and A.  	// We have fixed this.  	userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  	// Receive user name.  	A = new BigInteger (data.Skip (10).ToArray ());  	// NOTE: A is not checked for "A % N = 0"!!!  	c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  	// Send salt and B.  	S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  	// Calculate S.  	K = C.CalcK (S);  	// Calculate K.  	M = C.M (userName' salt' A' B' K' g' N);  	// Caculate M.  	stage++;  	break;  case 1:  	// Receive and calculate M and M2.  	if (C.CompareArrays (data' M)) {  		// Client M and Server M are equal'   		c.Client.Send (C.M2 (A' M' K));  		// Send calculated M2.  		Console.WriteLine ("From Server: Status OK. Logged in!");  		stage++;  	}  	else {  		c.Close ();  		c = null;  		run = false;  	}  	break;  case 2:  	// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  	Console.WriteLine ("From Server: Exiting server...");  	run = false;  	break;  default:  	c.Close ();  	c = null;  	break;  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: switch (stage) {  case 0:  	// Receive username and A.  	// We have fixed this.  	userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  	// Receive user name.  	A = new BigInteger (data.Skip (10).ToArray ());  	// NOTE: A is not checked for "A % N = 0"!!!  	c.Client.Send (salt.Concat (B.ToByteArray ()).ToArray ());  	// Send salt and B.  	S = H.CalcS (A' v' C.Calcu (A' B' N)' b' N);  	// Calculate S.  	K = C.CalcK (S);  	// Calculate K.  	M = C.M (userName' salt' A' B' K' g' N);  	// Caculate M.  	stage++;  	break;  case 1:  	// Receive and calculate M and M2.  	if (C.CompareArrays (data' M)) {  		// Client M and Server M are equal'   		c.Client.Send (C.M2 (A' M' K));  		// Send calculated M2.  		Console.WriteLine ("From Server: Status OK. Logged in!");  		stage++;  	}  	else {  		c.Close ();  		c = null;  		run = false;  	}  	break;  case 2:  	// We want to know if the M2 is equal on the clients side. So' we'll wait for another empty packet.  	Console.WriteLine ("From Server: Exiting server...");  	run = false;  	break;  default:  	c.Close ();  	c = null;  	break;  }  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: userName = Encoding.UTF8.GetString (data.Take (10).ToArray ());  
Magic Number,CPlan.UI,Host,C:\repos\MusicDemon_CPlan.SRP\CPlan.UI\TCP_Test_Host.cs,CheckData,The following statement contains a magic number: A = new BigInteger (data.Skip (10).ToArray ());  
