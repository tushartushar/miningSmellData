Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Agatha.ServiceLayer,ServiceLayerConfiguration,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerConfiguration.cs,RegisterRequestHandlers,Cyclomatic complexity of the method is 10
Complex Method,Agatha.ServiceLayer.WCF,MessageInspector,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\WCF\MessageInspector.cs,LogMessage,Cyclomatic complexity of the method is 8
Long Identifier,Agatha.ServiceLayer,RequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\RequestProcessor.cs,Process,The length of the parameter possibleExceptionsFromInterceptors is 34.
Long Statement,Agatha.ServiceLayer,AsyncRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\AsyncRequestProcessor.cs,ProcessRequestsAsync,The length of the statement  "	ThreadPool.RegisterWaitForSingleObject (asyncResult.AsyncWaitHandle' (state' timedout) => ProcessRequestsCompleted ((IAsyncResult)state' callback)' asyncResult' -1' true); " is 171.
Long Statement,Agatha.ServiceLayer,AsyncRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\AsyncRequestProcessor.cs,ProcessOneWayRequestsAsync,The length of the statement  "	ThreadPool.RegisterWaitForSingleObject (asyncResult.AsyncWaitHandle' (state' timedout) => ProcessOneWayRequestsCompleted ((IAsyncResult)state' callback)' asyncResult' -1' true); " is 177.
Long Statement,Agatha.ServiceLayer,ServiceLayerAndClientConfiguration,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerAndClientConfiguration.cs,Initialize,The length of the statement  "	IoC.Container.Register (typeof(IRequestDispatcherFactory)' RequestDispatcherFactoryImplementation' Lifestyle.Singleton); " is 120.
Long Statement,Agatha.ServiceLayer,ServiceLayerAndClientConfiguration,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerAndClientConfiguration.cs,Initialize,The length of the statement  "	IoC.Container.Register (typeof(IAsyncRequestDispatcherFactory)' AsyncRequestDispatcherFactoryImplementation' Lifestyle.Singleton); " is 130.
Long Statement,Agatha.ServiceLayer,ServiceLayerConfiguration,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerConfiguration.cs,ConfigureCachingLayer,The length of the statement  "	var requestTypes = requestsAndResponseAssemblies.SelectMany (a => a.GetTypes ()).Where (t => !t.IsAbstract && t.IsSubclassOf (typeof(Request))); " is 144.
Long Statement,Agatha.ServiceLayer,ServiceLayerConfiguration,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerConfiguration.cs,RegisterRequestHandlers,The length of the statement  "						throw new InvalidOperationException (String.Format ("Found two request handlers that handle the same request: {0}. " + " First request handler: {1}' second: {2}. " + " For each request type there must by only one request handler."' requestType.FullName' type.FullName' requestWithRequestHandlers [requestType].FullName)); " is 321.
Long Statement,Agatha.ServiceLayer,ServiceLayerConfiguration,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerConfiguration.cs,GetRequestType,The length of the statement  "	var interfaceType = type.GetInterfaces ().FirstOrDefault (i => i.Name.StartsWith ("IRequestHandler`") || i.Name.StartsWith ("IOneWayRequestHandler`")); " is 151.
Long Statement,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The length of the statement  "		performanceLogger.Warn (string.Format ("Performance warning: {0}ms for the following batch: {1}"' batchStopwatch.ElapsedMilliseconds' builder)); " is 144.
Long Statement,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterHandle,The length of the statement  "		performanceLogger.Warn (string.Format ("Performance warning: {0}ms for {1}"' requestStopwatch.ElapsedMilliseconds' request.GetType ().Name)); " is 141.
Long Statement,Agatha.ServiceLayer,RequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\RequestProcessor.cs,ResolveInterceptors,The length of the statement  "	return serviceLayerConfiguration.GetRegisteredInterceptorTypes ().Select (t => (IRequestHandlerInterceptor)IoC.Container.Resolve (t)).ToList (); " is 144.
Long Statement,Agatha.ServiceLayer.WCF.Rest,RestRequestBuilder,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\WCF\Rest\RestRequestBuilder.cs,GetRequests,The length of the statement  "			var type = KnownTypeProvider.GetKnownTypes (null).Where (x => x.Name == splitCollection.Get ("request")).FirstOrDefault (); " is 123.
Long Statement,Agatha.ServiceLayer.WCF.Rest,RestRequestBuilder,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\WCF\Rest\RestRequestBuilder.cs,RecurseType,The length of the statement  "					var propertyNameToMatch = String.IsNullOrEmpty (prefix) ? key : key.Substring (property.Name.IndexOf (prefix) + prefix.Length + 1); " is 131.
Long Statement,Agatha.ServiceLayer.WCF.Rest,RestRequestBuilder,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\WCF\Rest\RestRequestBuilder.cs,RecurseType,The length of the statement  "						property.SetValue (returnObject' RecurseType (collection' property.PropertyType' String.Concat (prefix' property.PropertyType.Name))' null); " is 140.
Long Statement,Agatha.ServiceLayer.WCF.Rest,RestRequestBuilder,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\WCF\Rest\RestRequestBuilder.cs,IsSingleRequestCollection,The length of the statement  "	return collection.AllKeys.Where (x => x == "request").Count () == 1 && !collection.AllKeys.Any (x => x.IndexOf ("[") != -1); " is 124.
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The following statement contains a magic number: if (batchStopwatch.ElapsedMilliseconds > 200) {  	var builder = new StringBuilder ();  	foreach (var request in requests) {  		builder.Append (request.GetType ().Name + "' ");  	}  	builder.Remove (builder.Length - 2' 2);  	performanceLogger.Warn (string.Format ("Performance warning: {0}ms for the following batch: {1}"' batchStopwatch.ElapsedMilliseconds' builder));  }  
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The following statement contains a magic number: if (batchStopwatch.ElapsedMilliseconds > 200) {  	var builder = new StringBuilder ();  	foreach (var request in requests) {  		builder.Append (request.GetType ().Name + "' ");  	}  	builder.Remove (builder.Length - 2' 2);  	performanceLogger.Warn (string.Format ("Performance warning: {0}ms for the following batch: {1}"' batchStopwatch.ElapsedMilliseconds' builder));  }  
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The following statement contains a magic number: if (batchStopwatch.ElapsedMilliseconds > 200) {  	var builder = new StringBuilder ();  	foreach (var request in requests) {  		builder.Append (request.GetType ().Name + "' ");  	}  	builder.Remove (builder.Length - 2' 2);  	performanceLogger.Warn (string.Format ("Performance warning: {0}ms for the following batch: {1}"' batchStopwatch.ElapsedMilliseconds' builder));  }  
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The following statement contains a magic number: builder.Remove (builder.Length - 2' 2);  
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The following statement contains a magic number: builder.Remove (builder.Length - 2' 2);  
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterHandle,The following statement contains a magic number: if (requestStopwatch.ElapsedMilliseconds > 100) {  	performanceLogger.Warn (string.Format ("Performance warning: {0}ms for {1}"' requestStopwatch.ElapsedMilliseconds' request.GetType ().Name));  }  
Magic Number,Agatha.ServiceLayer.Conventions,RequestHandlerBasedConventions,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\Conventions\RequestHandlerBasedConventions.cs,BuildRequestResponseMapping,The following statement contains a magic number: if (genericArguments.Length < 2)  	return;  
Magic Number,Agatha.ServiceLayer.WCF,MessageInspector,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\WCF\MessageInspector.cs,LogMessage,The following statement contains a magic number: using (var memoryStream = new MemoryStream ()) {  	using (var writer = XmlDictionaryWriter.Create (memoryStream' writerSettings)) {  		message.WriteMessage (writer);  		writer.Flush ();  		var size = Math.Round (memoryStream.Position / 1024d' 2);  		logger.InfoFormat ("{0} message size: ~{1} KB"' messageType' size);  	}  	if (messageLogger.IsDebugEnabled) {  		memoryStream.Position = 0;  		using (var reader = new StreamReader (memoryStream)) {  			messageLogger.Debug (reader.ReadToEnd ());  		}  	}  }  
Magic Number,Agatha.ServiceLayer.WCF,MessageInspector,F:\newReposMay17\davybrion_Agatha\Agatha.ServiceLayer\WCF\MessageInspector.cs,LogMessage,The following statement contains a magic number: using (var writer = XmlDictionaryWriter.Create (memoryStream' writerSettings)) {  	message.WriteMessage (writer);  	writer.Flush ();  	var size = Math.Round (memoryStream.Position / 1024d' 2);  	logger.InfoFormat ("{0} message size: ~{1} KB"' messageType' size);  }  
