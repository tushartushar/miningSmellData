Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Agatha.ServiceLayer,ServiceLayerConfiguration,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerConfiguration.cs,RegisterRequestHandlers,Cyclomatic complexity of the method is 9
Long Identifier,Agatha.ServiceLayer,RequestProcessor,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\RequestProcessor.cs,Process,The length of the parameter possibleExceptionsFromInterceptors is 34.
Long Statement,Agatha.ServiceLayer,ServiceLayerAndClientConfiguration,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerAndClientConfiguration.cs,Initialize,The length of the statement  "			IoC.Container.Register(typeof(IAsyncRequestDispatcherFactory)' AsyncRequestDispatcherFactoryImplementation' Lifestyle.Singleton); " is 129.
Long Statement,Agatha.ServiceLayer,ServiceLayerConfiguration,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerConfiguration.cs,ConfigureCachingLayer,The length of the statement  "            var requestTypes = requestsAndResponseAssemblies.SelectMany(a => a.GetTypes()).Where(t => !t.IsAbstract && t.IsSubclassOf(typeof(Request))); " is 140.
Long Statement,Agatha.ServiceLayer,ServiceLayerConfiguration,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerConfiguration.cs,RegisterRequestHandlers,The length of the statement  "                                                                                + " For each request type there must by only one request handler."' requestType.FullName' type.FullName' requestWithRequestHandlers[requestType].FullName)); " is 156.
Long Statement,Agatha.ServiceLayer,ServiceLayerConfiguration,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\ServiceLayerConfiguration.cs,GetRequestType,The length of the statement  "            var interfaceType = type.GetInterfaces().FirstOrDefault(i => i.Name.StartsWith("IRequestHandler`") || i.Name.StartsWith("IOneWayRequestHandler`")); " is 147.
Long Statement,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The length of the statement  "				performanceLogger.Warn(string.Format("Performance warning: {0}ms for the following batch: {1}"' batchStopwatch.ElapsedMilliseconds' builder)); " is 142.
Long Statement,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterHandle,The length of the statement  "				performanceLogger.Warn(string.Format("Performance warning: {0}ms for {1}"' requestStopwatch.ElapsedMilliseconds' request.GetType().Name)); " is 138.
Long Statement,Agatha.ServiceLayer.WCF.Rest,RestRequestBuilder,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\WCF\Rest\RestRequestBuilder.cs,RecurseType,The length of the statement  "                            var propertyNameToMatch = String.IsNullOrEmpty(prefix) ? key : key.Substring(property.Name.IndexOf(prefix) + prefix.Length + 1); " is 128.
Long Statement,Agatha.ServiceLayer.WCF.Rest,RestRequestBuilder,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\WCF\Rest\RestRequestBuilder.cs,RecurseType,The length of the statement  "                                property.SetValue(returnObject' RecurseType(collection' property.PropertyType' String.Concat(prefix' property.PropertyType.Name))' null); " is 137.
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The following statement contains a magic number: if (batchStopwatch.ElapsedMilliseconds > 200)  			{  				var builder = new StringBuilder();    				foreach (var request in requests)  				{  					builder.Append(request.GetType().Name + "' ");  				}    				builder.Remove(builder.Length - 2' 2);    				performanceLogger.Warn(string.Format("Performance warning: {0}ms for the following batch: {1}"' batchStopwatch.ElapsedMilliseconds' builder));  			}
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The following statement contains a magic number: if (batchStopwatch.ElapsedMilliseconds > 200)  			{  				var builder = new StringBuilder();    				foreach (var request in requests)  				{  					builder.Append(request.GetType().Name + "' ");  				}    				builder.Remove(builder.Length - 2' 2);    				performanceLogger.Warn(string.Format("Performance warning: {0}ms for the following batch: {1}"' batchStopwatch.ElapsedMilliseconds' builder));  			}
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterProcessing,The following statement contains a magic number: if (batchStopwatch.ElapsedMilliseconds > 200)  			{  				var builder = new StringBuilder();    				foreach (var request in requests)  				{  					builder.Append(request.GetType().Name + "' ");  				}    				builder.Remove(builder.Length - 2' 2);    				performanceLogger.Warn(string.Format("Performance warning: {0}ms for the following batch: {1}"' batchStopwatch.ElapsedMilliseconds' builder));  			}
Magic Number,Agatha.ServiceLayer,PerformanceLoggingRequestProcessor,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\PerformanceLoggingRequestProcessor.cs,AfterHandle,The following statement contains a magic number: if (requestStopwatch.ElapsedMilliseconds > 100)  			{  				performanceLogger.Warn(string.Format("Performance warning: {0}ms for {1}"' requestStopwatch.ElapsedMilliseconds' request.GetType().Name));  			}
Magic Number,Agatha.ServiceLayer.Conventions,RequestHandlerBasedConventions,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\Conventions\RequestHandlerBasedConventions.cs,BuildRequestResponseMapping,The following statement contains a magic number: if (genericArguments.Length < 2) return;
Magic Number,Agatha.ServiceLayer.WCF,MessageInspector,C:\repos\davybrion_Agatha\Agatha.ServiceLayer\WCF\MessageInspector.cs,LogMessage,The following statement contains a magic number: using (var memoryStream = new MemoryStream())              {                  using (var writer = XmlDictionaryWriter.Create(memoryStream' writerSettings))                  {                      message.WriteMessage(writer);                      writer.Flush();                      var size = Math.Round(memoryStream.Position/1024d' 2);                      logger.InfoFormat("{0} message size: ~{1} KB"' messageType' size);                  }                    if (messageLogger.IsDebugEnabled)                  {                      memoryStream.Position = 0;                      using (var reader = new StreamReader(memoryStream))                      {                          messageLogger.Debug(reader.ReadToEnd());                      }                  }              }
