Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Tests.RequestProcessorTests.Async,ProcessRequestsAsynchronously,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Async\ProcessRequestsAsynchronously.cs,,The length of the parameter lastProcessRequestsThrewException is 33.
Long Identifier,Tests.RequestProcessorTests.RequestResponse,CachingSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\CachingSpecs.cs,CachedResponsesDontCallTheHandler,The length of the parameter numberOfCachedResponsesReturned is 31.
Long Identifier,Tests.RequestProcessorTests.RequestResponse,RequestHandlerCalledHowSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\RequestHandlerCalledHowSpecs.cs,AnyNonCachedRequestHandledAfterAndIncludingTheFirstExceptionCallsTheCreateDefaultResponseMethod,The length of the parameter requestsAfterTheFirstException is 30.
Long Identifier,Tests.RequestProcessorTests.RequestResponse,RequestHandlerCalledHowSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\RequestHandlerCalledHowSpecs.cs,AnyCachedRequestThatHasNotGotAResponseInTheCacheHandledBeforeTheFirstExceptionCallsTheHandleMethod,The length of the parameter requestsThatReturnedACachedResponse is 35.
Long Statement,Tests.ConfigurationTests,ClientComponentResolving<TContainer>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\ConfigurationTests\ClientComponentResolving.cs,AsyncRequestDispatcherIsSingleton,The length of the statement  "            Assert.Same(IoC.Container.Resolve<IAsyncRequestDispatcherFactory>()' IoC.Container.Resolve<IAsyncRequestDispatcherFactory>()); " is 126.
Long Statement,Tests.ConfigurationTests,ServiceLayerAndClientComponentResolving<TContainer>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\ConfigurationTests\ServiceLayerAndClientComponentResolving.cs,RequestHandlerRegistryContainsTypedRequestHandlers,The length of the statement  "                    assembly.GetTypes().Where(t => typeof(ITypedRequestHandler).IsAssignableFrom(t) && !t.IsAbstract).Select(t => t.FullName)); " is 123.
Long Statement,Tests.ConfigurationTests,ServiceLayerAndClientComponentResolving<TContainer>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\ConfigurationTests\ServiceLayerAndClientComponentResolving.cs,RequestHandlerRegistryContainsTypedRequestHandlers,The length of the statement  "            var actualRequestHandlers = IoC.Container.Resolve<IRequestHandlerRegistry>().GetTypedRequestHandlers().Select(t => t.FullName); " is 127.
Long Statement,Tests.ConfigurationTests,ServiceLayerAndClientComponentResolving<TContainer>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\ConfigurationTests\ServiceLayerAndClientComponentResolving.cs,RequestTypeRegistryContainsAllRequestTypesFromRegisteredAssemblies,The length of the statement  "            var actualRequestTypes = IoC.Container.Resolve<IRequestTypeRegistry>().GetRegisteredRequestTypes().Select(t => t.FullName); " is 123.
Long Statement,Tests.ConfigurationTests,ServiceLayerComponentResolving<TContainer>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\ConfigurationTests\ServiceLayerComponentResolving.cs,RequestHandlerRegistryContainsTypedRequestHandlers,The length of the statement  "                    assembly.GetTypes().Where(t => typeof(ITypedRequestHandler).IsAssignableFrom(t) && !t.IsAbstract).Select(t => t.FullName)); " is 123.
Long Statement,Tests.ConfigurationTests,ServiceLayerComponentResolving<TContainer>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\ConfigurationTests\ServiceLayerComponentResolving.cs,RequestHandlerRegistryContainsTypedRequestHandlers,The length of the statement  "            var actualRequestHandlers = IoC.Container.Resolve<IRequestHandlerRegistry>().GetTypedRequestHandlers().Select(t => t.FullName); " is 127.
Long Statement,Tests.ConfigurationTests,ServiceLayerComponentResolving<TContainer>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\ConfigurationTests\ServiceLayerComponentResolving.cs,RequestTypeRegistryContainsAllRequestTypesFromRegisteredAssemblies,The length of the statement  "            var actualRequestTypes = IoC.Container.Resolve<IRequestTypeRegistry>().GetRegisteredRequestTypes().Select(t => t.FullName); " is 123.
Long Statement,Tests.Conventions,When_creating_BasicConventions_given_a_request_type_without_corresponding_response_type,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\Conventions\BasicConventionsSpecs.cs,Given,The length of the statement  "            requestTypeRegistry.Stub(r => r.GetRegisteredRequestTypes()).Return(new[] { typeof(TestRequestWithoutResponseRequest) }); " is 121.
Long Statement,Tests.Conventions,When_creating_BasicConventions_given_a_request_type_without_corresponding_response_type,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\Conventions\BasicConventionsSpecs.cs,An_exception_should_be_thrown,The length of the statement  "                "Could not determine response type by convention for request of type " + typeof(TestRequestWithoutResponseRequest).FullName); " is 125.
Long Statement,Tests,Given_exceptions_previously_occurred_during_processing,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessingErrorHandlerSpecs.cs,EstablishContext,The length of the statement  "                //This is the last fallback logic -> use base Response type if the real response type can't be determined by other means " is 120.
Long Statement,Tests.RequestProcessorTests.Async,GetResults,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Async\GetResults.cs,GetResultsIfAllGoesWell,The length of the statement  "            return new Spec(() => Ensure.Equal(ProcessRequestsAsynchronously.lastProcessRequestInput.requestResponsePair.Item2' result)) " is 124.
Long Statement,Tests.RequestProcessorTests.Interceptors,Given_a_RequestHandlerInterceptor_marks_a_request_as_processed,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\RequestHandlingInterceptorSpecs.cs,Given,The length of the statement  "            new ServiceLayerAndClientConfiguration(typeof(ThrowingRequestHandler).Assembly' GetType().Assembly' new Agatha.Castle.Container()) " is 130.
Long Statement,Tests.RequestProcessorTests.Interceptors,Given_the_first_request_fails,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\RequestHandlingInterceptorSpecs.cs,Given,The length of the statement  "            new ServiceLayerAndClientConfiguration(typeof(ThrowingRequestHandler).Assembly' GetType().Assembly' new Agatha.Castle.Container()) " is 130.
Long Statement,Tests.RequestProcessorTests.OneWay,OneWayRequestExceptionHandling,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\OneWay\OneWayRequestExceptionHandling.cs,ProcessRequestsWithAnotherUnknownException,The length of the statement  "            Predicate<Exception> predicate = exception => exception != null && exception.GetType() == typeof(AnotherUnknownException); " is 122.
Long Statement,Tests.RequestProcessorTests.RequestResponse,CachingSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\CachingSpecs.cs,ResponsesAreCachedIfTheyArentInTheCacheYet,The length of the statement  "                                     Ensure.Equal(response' ProcessRequestsState.CacheManager.CacheEntries.First(entry => entry.Request.Equals(request)).Response); " is 126.
Long Statement,Tests.RequestProcessorTests.Rest,RestRequestBuilderTests<TRequestType1;TRequestType2>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Rest\RestRequestBuilderTests.cs,Should_fail_with_duplicate_request_index,The length of the statement  "            Assert.True("The name of the request type must be valid' and an index must be unique" == ((InvalidOperationException)exception).Message); " is 137.
Long Statement,Tests.RequestProcessorTests.Rest,RestRequestBuilderTests<TRequestType1;TRequestType2>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Rest\RestRequestBuilderTests.cs,Should_fail_with_non_indexed_duplicate_request_key,The length of the statement  "            Assert.True("The name of the request type must be valid' and an index must be unique" == ((InvalidOperationException)exception).Message); " is 137.
Virtual Method Call from Constructor,Tests,BddSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\BddSpecs.cs,BddSpecs,The constructor "BddSpecs" calls a virtual method "Given".
Virtual Method Call from Constructor,Tests,BddSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\BddSpecs.cs,BddSpecs,The constructor "BddSpecs" calls a virtual method "When".
Magic Number,Tests.RequestDispatcherTests,AddRequestArray,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestDispatcherTests\AddRequestArray.cs,Arrange,The following statement contains a magic number: input = new RequestGenerator().Many<Request>(2' 2).ToList();
Magic Number,Tests.RequestDispatcherTests,AddRequestArray,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestDispatcherTests\AddRequestArray.cs,Arrange,The following statement contains a magic number: input = new RequestGenerator().Many<Request>(2' 2).ToList();
Magic Number,Tests.RequestDispatcherTests,RequestGenerator,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestDispatcherTests\RequestGenerator.cs,RequestGenerator,The following statement contains a magic number: With(mi => mi.ReflectedType == typeof(int)' new IntGenerator(0' 5));
Magic Number,Tests.RequestProcessorTests.Async,ProcessRequestsAsynchronously,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Async\ProcessRequestsAsynchronously.cs,Act,The following statement contains a magic number: ++counter == 20
Magic Number,Tests.RequestProcessorTests.Async,ProcessRequestsAsynchronously,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Async\ProcessRequestsAsynchronously.cs,Act,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Tests.RequestProcessorTests.Interceptors,TestInterceptor,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\TestObjects.cs,BeforeHandlingRequest,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Tests.RequestProcessorTests.Interceptors,TestInterceptor,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\TestObjects.cs,AfterHandlingRequest,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Tests.RequestProcessorTests.Interceptors,OneWaySpyRequestInterceptor,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\TestObjects.cs,BeforeHandlingRequest,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Tests.RequestProcessorTests.Interceptors,OneWaySpyRequestInterceptor,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\TestObjects.cs,AfterHandlingRequest,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Tests.RequestProcessorTests.Interceptors,SubSequentInterceptor,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\TestObjects.cs,BeforeHandlingRequest,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Tests.RequestProcessorTests.Interceptors,SubSequentInterceptor,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\TestObjects.cs,AfterHandlingRequest,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Tests.RequestProcessorTests.Interceptors,SpyRequestHandler,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\TestObjects.cs,Handle,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Tests.RequestProcessorTests.Interceptors,OneWaySpyRequestHandler,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Interceptors\TestObjects.cs,Handle,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Tests.RequestProcessorTests.OneWay,OneWayRequestExceptionHandling,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\OneWay\OneWayRequestExceptionHandling.cs,Arrange,The following statement contains a magic number: input =                  new DomainGenerator()                      .With<ProcessOneWayRequestsInput>(                          opt => opt.For(i => i.OneWayRequestsAndHandlers' new OneWayRequestsAndHandlers()))                      .With<ProcessOneWayRequestsInput>(                          opt => opt.For(i => i.Actions' actionGenerator.Many<Action<IList<Exception>>>(3' 3).ToList()))                      .One<ProcessOneWayRequestsInput>();
Magic Number,Tests.RequestProcessorTests.OneWay,OneWayRequestExceptionHandling,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\OneWay\OneWayRequestExceptionHandling.cs,Arrange,The following statement contains a magic number: input =                  new DomainGenerator()                      .With<ProcessOneWayRequestsInput>(                          opt => opt.For(i => i.OneWayRequestsAndHandlers' new OneWayRequestsAndHandlers()))                      .With<ProcessOneWayRequestsInput>(                          opt => opt.For(i => i.Actions' actionGenerator.Many<Action<IList<Exception>>>(3' 3).ToList()))                      .One<ProcessOneWayRequestsInput>();
Magic Number,Tests.RequestProcessorTests.RequestResponse.Act,ProcessRequests,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\Act\ProcessRequests.cs,Arrange,The following statement contains a magic number: var numberOfRequests = new[] {0' 10}.FromRange();
Magic Number,Tests.RequestProcessorTests.RequestResponse.Act,ProcessRequestsState,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\Act\ProcessRequestsState.cs,ProcessRequestsState,The following statement contains a magic number: Generator =                  new DomainGenerator()                      .With(mi => mi.DeclaringType == typeof(string)' new StringGenerator(1' 1))                      .With(mi => mi.DeclaringType == typeof(int)' new IntGenerator(0' 5))                      .With<Request>(opt => opt.StartingValue(                          () =>                              new Request[]                                  {                                      new FirstRequest()'                                      new SecondRequest()'                                      new ThirdRequest()'                                      new FourthRequest()'                                      new FifthRequest()'                                       new FirstCachedRequest()'                                      new SecondCachedRequest()                                  }.PickOne()))                      .With(                              new DescribedAction { Exception = null' Description = "Does nothing" }'                              new DescribedAction { Exception = new BusinessException()' Description = "Throws BusinessException" }'                              new DescribedAction { Exception = new SecurityException()' Description = "Throws SecurityException" }'                              new DescribedAction { Exception = new UnknownException()' Description = "Throws UnknownException" }'                              new DescribedAction { Exception = new AnotherUnknownException()' Description = "Throws AnotherUnknownException" });
Magic Number,Tests.RequestProcessorTests.RequestResponse,CachingSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\CachingSpecs.cs,VerifyMySpecs,The following statement contains a magic number: new Suite(100' 20)                  .Using(() => new ProcessRequestsState())                  .Register(() => new CachingSpecs())                  .Run();
Magic Number,Tests.RequestProcessorTests.RequestResponse,CachingSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\CachingSpecs.cs,VerifyMySpecs,The following statement contains a magic number: new Suite(100' 20)                  .Using(() => new ProcessRequestsState())                  .Register(() => new CachingSpecs())                  .Run();
Magic Number,Tests.RequestProcessorTests.RequestResponse,ExceptionInfoSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\ExceptionInfoSpecs.cs,VerifyMySpecs,The following statement contains a magic number: new Suite(50' 100)                  .Using(() => new ProcessRequestsState())                  .Register(() => new ExceptionInfoSpecs())                  .Run();
Magic Number,Tests.RequestProcessorTests.RequestResponse,ExceptionInfoSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\ExceptionInfoSpecs.cs,VerifyMySpecs,The following statement contains a magic number: new Suite(50' 100)                  .Using(() => new ProcessRequestsState())                  .Register(() => new ExceptionInfoSpecs())                  .Run();
Magic Number,Tests.RequestProcessorTests.RequestResponse,GeneralSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\GeneralSpecs.cs,VerifyMySpecs,The following statement contains a magic number: new Suite(5' 10)                  .Using(() => new ProcessRequestsState())                  .Register(() => new RequestHandlerCalledHowSpecs())                  .Run();
Magic Number,Tests.RequestProcessorTests.RequestResponse,GeneralSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\GeneralSpecs.cs,VerifyMySpecs,The following statement contains a magic number: new Suite(5' 10)                  .Using(() => new ProcessRequestsState())                  .Register(() => new RequestHandlerCalledHowSpecs())                  .Run();
Magic Number,Tests.RequestProcessorTests.RequestResponse,RequestHandlerCalledHowSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\RequestHandlerCalledHowSpecs.cs,VerifyMySpecs,The following statement contains a magic number: new Suite(100' 20)                  .Using(() => new ProcessRequestsState())                  .Register(() => new RequestHandlerCalledHowSpecs())                  .Run();
Magic Number,Tests.RequestProcessorTests.RequestResponse,RequestHandlerCalledHowSpecs,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\RequestResponse\RequestHandlerCalledHowSpecs.cs,VerifyMySpecs,The following statement contains a magic number: new Suite(100' 20)                  .Using(() => new ProcessRequestsState())                  .Register(() => new RequestHandlerCalledHowSpecs())                  .Run();
Magic Number,Tests.RequestProcessorTests.Rest,RestRequestBuilderTests<TRequestType1;TRequestType2>,D:\research\architectureSmells\repos\davybrion_Agatha\Tests\RequestProcessorTests\Rest\RestRequestBuilderTests.cs,Should_resolve_complex_type,The following statement contains a magic number: Assert.True(27 == ((IRestTestClass)requests[0]).Age);
