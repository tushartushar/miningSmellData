Implementation smell,Namespace,Class,File,Method,Description
Long Method,FSLib.App.SimpleUpdater.Dialogs,MainWindow,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MainWindow.cs,InitializeComponent,The method has 115 lines of code.
Long Method,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadUpdateInfoInternal,The method has 122 lines of code.
Long Method,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadPackages,The method has 128 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The method has 121 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHuffman,The method has 103 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,Decode,The method has 108 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The method has 116 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The method has 178 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,RunUpdates,The method has 126 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,The method has 147 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,PutNextEntry,The method has 189 lines of code.
Long Method,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,Finish,The method has 113 lines of code.
Long Method,FSLib.App.SimpleUpdater.Wrapper,SlideComponent,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\SlideComponent.cs,_timer_Tick,The method has 111 lines of code.
Complex Method,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadUpdateInfoInternal,Cyclomatic complexity of the method is 11
Complex Method,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,GatheringDownloadPackages,Cyclomatic complexity of the method is 11
Complex Method,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CloseApplication,Cyclomatic complexity of the method is 8
Complex Method,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,SetProcessEnvVar,Cyclomatic complexity of the method is 11
Complex Method,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadPackages,Cyclomatic complexity of the method is 9
Complex Method,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CopyAndStartUpdater,Cyclomatic complexity of the method is 14
Complex Method,ICCEmbedded.SharpZipLib.Checksums,Adler32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\Adler32.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,ICCEmbedded.SharpZipLib.Core,FileSystemScanner,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Core\FileSystemScanner.cs,ScanDir,Cyclomatic complexity of the method is 11
Complex Method,ICCEmbedded.SharpZipLib.Core,StreamUtils,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Core\StreamUtils.cs,Copy,Cyclomatic complexity of the method is 11
Complex Method,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateFast,Cyclomatic complexity of the method is 10
Complex Method,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateSlow,Cyclomatic complexity of the method is 12
Complex Method,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,Cyclomatic complexity of the method is 9
Complex Method,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,Cyclomatic complexity of the method is 10
Complex Method,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,Cyclomatic complexity of the method is 10
Complex Method,ICCEmbedded.SharpZipLib.Zip,FastZip,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\FastZip.cs,ExtractFileEntry,Cyclomatic complexity of the method is 9
Complex Method,ICCEmbedded.SharpZipLib.Zip,FastZip,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\FastZip.cs,ExtractEntry,Cyclomatic complexity of the method is 9
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ProcessExtraData,Cyclomatic complexity of the method is 12
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestArchive,Cyclomatic complexity of the method is 18
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteLocalEntryHeader,Cyclomatic complexity of the method is 15
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteCentralDirectoryHeader,Cyclomatic complexity of the method is 16
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,RunUpdates,Cyclomatic complexity of the method is 15
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,Cyclomatic complexity of the method is 14
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteLocalHeader,Cyclomatic complexity of the method is 11
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,PutNextEntry,Cyclomatic complexity of the method is 30
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,CloseEntry,Cyclomatic complexity of the method is 12
Complex Method,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,Finish,Cyclomatic complexity of the method is 17
Complex Method,FSLib.App.SimpleUpdater.Wrapper,SlideComponent,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\SlideComponent.cs,SlideForm_Load,Cyclomatic complexity of the method is 11
Long Parameter List,FSLib.App.SimpleUpdater.Defination,UpdateCheckResult,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Defination\UpdateCheckResult.cs,UpdateCheckResult,The method has 5 parameters. Parameters: success' error' hasUpdate' newVersion' exception
Long Parameter List,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,RunExternalProgram,The method has 5 parameters. Parameters: e' program' arguments' waitingForExit' hide
Long Parameter List,ICCEmbedded.SharpZipLib.Core,StreamUtils,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Core\StreamUtils.cs,Copy,The method has 7 parameters. Parameters: source' destination' buffer' progressHandler' updateInterval' sender' name
Long Parameter List,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicEncryptCryptoTransform,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicDecryptCryptoTransform,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\DeflaterOutputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\DeflaterOutputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,InflaterInputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\InflaterInputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICCEmbedded.SharpZipLib.Zip,FastZip,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: zipFileName' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,ICCEmbedded.SharpZipLib.Zip,FastZip,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: outputStream' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,ICCEmbedded.SharpZipLib.Zip,FastZip,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\FastZip.cs,ExtractZip,The method has 7 parameters. Parameters: zipFileName' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime
Long Parameter List,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,CopyBytes,The method has 5 parameters. Parameters: update' destination' source' bytesToCopy' updateCrc
Long Parameter List,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,CopyEntryDataDirect,The method has 5 parameters. Parameters: update' stream' updateCrc' destinationPosition' sourcePosition
Long Identifier,FSLib.App.SimpleUpdater.Defination,UpdateContext,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Defination\UpdateContext.cs,,The length of the parameter _promptUserBeforeAutomaticUpgrade is 33.
Long Identifier,FSLib.App.SimpleUpdater.Defination,UpdateInfo,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Defination\UpdateInfo.cs,,The length of the parameter _promptUserBeforeAutomaticUpgrade is 33.
Long Identifier,ICCEmbedded.SharpZipLib.Zip,ZipConstants,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralFileHeaderSignature is 31.
Long Identifier,ICCEmbedded.SharpZipLib.Zip,ZipConstants,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralDirLocatorSignature is 31.
Long Identifier,ICCEmbedded.SharpZipLib.Zip,ZipConstants,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipConstants.cs,,The length of the parameter EndOfCentralDirectorySignature is 30.
Long Identifier,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,UpdateCommentOnly,The length of the parameter CentralHeaderCommentSizeOffset is 30.
Long Statement,FSLib.App.SimpleUpdater.Defination,UpdateContext,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Defination\UpdateContext.cs,GetUpdatePackageFullUrl,The length of the statement  "			if (!string.IsNullOrEmpty(UpdateInfoFileName)) return string.Format(UpdateDownloadUrl.Replace("\\"' "\\\\")' packageName); " is 122.
Long Statement,FSLib.App.SimpleUpdater.Defination,UpdateContext,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Defination\UpdateContext.cs,RandomUrl,The length of the statement  "			if (!AppendRandomTagInDownloadUrl || url.IndexOf('/') == -1 || url.IndexOf("http"' StringComparison.OrdinalIgnoreCase) != 0) " is 124.
Long Statement,FSLib.App.SimpleUpdater.Defination,UpdateInfo,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Defination\UpdateInfo.cs,GetDeleteFileLimitRuleSet,The length of the statement  "			return ExtensionMethod.ToList(Wrapper.ExtensionMethod.Select(DeleteFileLimits' s => new Regex(s' RegexOptions.IgnoreCase))); " is 124.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,CloseApp,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\CloseApp.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CloseApp)); " is 128.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,ProcessWrapper,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\CloseApp.cs,ToString,The length of the statement  "				return string.Format("[ID: {0:0000}] {1}"' Process.Id' ExtensionMethod.DefaultForEmpty(Process.MainWindowTitle' "(无标题)")); " is 122.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,EnsureUpdate,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\EnsureUpdate.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EnsureUpdate)); " is 132.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,MinmumVersionRequired,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MinmumVersionRequired.cs,MinmumVersionRequired_Load,The length of the statement  "			lblDesc.Text += "\r\n\r\n" + string.Format(SR.MinmumVersionRequired_Desc' info.RequiredMinVersion' updater.Context.CurrentVersion); " is 131.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,MinmumVersionRequired,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MinmumVersionRequired.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MinmumVersionRequired)); " is 141.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,SelfUpdate,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\SelfUpdate.cs,updater_Error,The length of the statement  "			if (MessageBox.Show("检查更新失败：" + Updater.Instance.Context.Exception.Message + "，您希望前往主页查看更新吗？"' "更新失败"' MessageBoxButtons.YesNo' MessageBoxIcon.Asterisk) == System.Windows.Forms.DialogResult.Yes) " is 194.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,SelfUpdate,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\SelfUpdate.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SelfUpdate)); " is 130.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,MainWindow,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MainWindow.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainWindow)); " is 130.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,MainWindow,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MainWindow.cs,InitializeComponent,The length of the statement  "			this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(120))))' ((int)(((byte)(163))))' ((int)(((byte)(78))))); " is 125.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,ProgramExecuteTimeout,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\ProgramExecuteTimeout.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProgramExecuteTimeout)); " is 141.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,UpdateFound_FormClosing,The length of the statement  "				var dlgResult = MessageBox.Show(FSLib.App.SimpleUpdater.SR.UpdatesFound_CriticalUpdateWarning' SR.Error' MessageBoxButtons.YesNo' MessageBoxIcon.Exclamation); " is 158.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,UpdateFound_Load,The length of the statement  "					rtf.Rtf = System.Text.Encoding.UTF8.GetString(Wrapper.ExtensionMethod.Decompress(Convert.FromBase64String(ui.RtfUpdateNote))); " is 126.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,UpdateFound_Load,The length of the statement  "			lblSize.Text = string.Format(FSLib.App.SimpleUpdater.SR.UpdateFound_EstimateDownloadSize' (pkgSize == 0 ? SR.Unknown : ExtensionMethod.ToSizeDescription(pkgSize))); " is 164.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UpdateFound)); " is 131.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The length of the statement  "			this.btnUpdate.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(54))))' ((int)(((byte)(145))))' ((int)(((byte)(45))))); " is 144.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The length of the statement  "			this.btnUpdate.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(189))))' ((int)(((byte)(232))))' ((int)(((byte)(174))))); " is 153.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The length of the statement  "			this.btnUpdate.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(121))))' ((int)(((byte)(146))))' ((int)(((byte)(63))))); " is 128.
Long Statement,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The length of the statement  "			this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(147))))' ((int)(((byte)(180))))' ((int)(((byte)(101))))); " is 126.
Long Statement,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,DeletePreviousFile,The length of the statement  "				if ((UpdateInfo.DeleteMethod == DeletePreviousProgramMethod.AllExceptSpecified && rules.FindIndex(s => s.IsMatch(rPath)) == -1) " is 127.
Long Statement,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,DeletePreviousFile,The length of the statement  "					(UpdateInfo.DeleteMethod == DeletePreviousProgramMethod.NoneButSpecified && rules.FindIndex(s => s.IsMatch(rPath)) != -1) " is 121.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,EnsureNoUpdate,The length of the statement  "						result = errorHandler(new Exception(string.Format(SR.MinmumVersionRequired_Desc' (s as Updater).Context.UpdateInfo.RequiredMinVersion))); " is 137.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,EnsureNoUpdate,The length of the statement  "						MessageBox.Show(string.Format(SR.MinmumVersionRequired_Desc' (s as Updater).Context.UpdateInfo.RequiredMinVersion' (s as Updater).Context.CurrentVersion)' SR.Error' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 215.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,EnsureNoUpdate,The length of the statement  "						MessageBox.Show(String.Format(SR.Updater_UnableToCheckUpdate' err.Message)' SR.Error' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 136.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CheckUpdateSimple,The length of the statement  "				_instance = CreateUpdaterInstance(null' null' new UpdateServerInfo[] { new UpdateServerInfo(templateUrl' xmlFileName) }); " is 121.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,BeginCheckUpdateInProcess,The length of the statement  "					Context.Exception = new VersionTooLowException(Context.CurrentVersion' new Version(Context.UpdateInfo.RequiredMinVersion)); " is 123.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadUpdateInfoInternal,The length of the statement  "			if ((Context.UpdateInfo = XMLSerializeHelper.XmlDeserializeFromString<UpdateInfo>(Context.UpdateInfoTextContent)) == null) " is 122.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadUpdateInfoInternal,The length of the statement  "			if (!string.IsNullOrEmpty(Context.UpdateInfo.RequiredMinVersion) && Context.CurrentVersion < new Version(Context.UpdateInfo.RequiredMinVersion)) " is 144.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadUpdateInfoInternal,The length of the statement  "				Trace.TraceWarning("当前应用程序版本过低，无法升级。要求最低版本：{0}，当前版本：{1}。"' Context.UpdateInfo.RequiredMinVersion' Context.CurrentVersion); " is 122.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadUpdateInfoInternal,The length of the statement  "						PackagesToUpdate = XMLSerializeHelper.XmlDeserializeFromString<List<PackageInfo>>(System.IO.File.ReadAllText(pkgList' Encoding.UTF8)); " is 134.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadUpdateInfoInternal,The length of the statement  "						var list = XMLSerializeHelper.XmlDeserializeFromString<List<string>>(System.IO.File.ReadAllText(preserveFileList' Encoding.UTF8)); " is 130.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,GatheringDownloadPackages,The length of the statement  "			if (!string.IsNullOrEmpty(Context.UpdateInfo.Package) && (Context.UpdateInfo.Packages == null || Context.UpdateInfo.Packages.Count == 0)) " is 137.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,GatheringDownloadPackages,The length of the statement  "					var isNewer = (pkg.HasVerifyFlag(FileVerificationLevel.Size) && new System.IO.FileInfo(localPath).Length != pkg.FileSize) " is 121.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,GatheringDownloadPackages,The length of the statement  "						(pkg.HasVerifyFlag(FileVerificationLevel.Version) && (string.IsNullOrEmpty(pkg.Version) || ExtensionMethod.CompareVersion(localPath' pkg.Version))) " is 147.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,SetProcessEnvVar,The length of the statement  "				if (p.PropertyType != typeof(bool) && p.PropertyType != typeof(int) && p.PropertyType != typeof(string) && p.PropertyType != typeof(Version)) continue; " is 151.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,SetProcessEnvVar,The length of the statement  "				if (p.PropertyType != typeof(bool) && p.PropertyType != typeof(int) && p.PropertyType != typeof(string) && p.PropertyType != typeof(Version)) continue; " is 151.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,RunExternalProgramAfter,The length of the statement  "			return RunExternalProgram(e' System.IO.Path.Combine(Context.ApplicationDirectory' Context.UpdateInfo.FileExecuteAfter)' Context.UpdateInfo.ExecuteArgumentAfter' false' Context.UpdateInfo.HideAfterExecuteWindow); " is 211.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,RunExternalProgramBefore,The length of the statement  "			return RunExternalProgram(e' System.IO.Path.Combine(Context.UpdateNewFilePath' Context.UpdateInfo.FileExecuteBefore)' Context.UpdateInfo.ExecuteArgumentBefore' true' Context.UpdateInfo.HideBeforeExecuteWindow); " is 210.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadPackages,The length of the statement  "							Trace.TraceWarning("包【" + pkg.PackageName + "】未能成功下载，正在进行第 " + pkg.RetryCount + " 次重试，最大重试次数为 " + Context.MaxiumRetryDownloadCount' "错误"); " is 138.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadPackages,The length of the statement  "						client.DownloadFileAsync(new Uri(Context.RandomUrl(Context.GetUpdatePackageFullUrl(nextPkg.PackageName)))' nextPkg.LocalSavePath' nextPkg); " is 139.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CopyAndStartUpdater,The length of the statement  "			XMLSerializeHelper.XmlSerilizeToFile(ExtensionMethod.ToList(FileInstaller.PreservedFiles.Keys)' Context.PreserveFileListPath); " is 126.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CopyAndStartUpdater,The length of the statement  "				sb.AppendFormat("/cred \"{0}\" "' string.Format("{0}:{1}"' Context.NetworkCredential.UserName' Context.NetworkCredential.Password)); " is 132.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CopyAndStartUpdater,The length of the statement  "			if (Environment.OSVersion.Version.Major > 5 && (Context.UpdateInfo.RequreAdminstrorPrivilege || !EnsureAdminPrivilege())) " is 121.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,EnsureAdminPrivilege,The length of the statement  "			Trace.TraceInformation("check if current process can write to application directory directly without admin privilege."); " is 120.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,EnsureAdminPrivilege,The length of the statement  "				Trace.TraceInformation("permission denied. admin privilege required to perform operation. using /runas to perform update."); " is 124.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,FetchProcessList,The length of the statement  "					if (!Context.ExternalProcessID.Contains(s.Id) && s.Id != mainProcessID && pathLookup(s).StartsWith(Context.ApplicationDirectory' StringComparison.OrdinalIgnoreCase)) " is 165.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CleanTemp,The length of the statement  "			var localpath = Environment.ExpandEnvironmentVariables(@"%TEMP%\FSLib.DeleteTmp_" + new Random().Next(100000) + ".exe"); " is 120.
Long Statement,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CleanTemp,The length of the statement  "			var arg = "deletetmp \"" + Process.GetCurrentProcess().Id + "\" \"" + Utility.SafeQuotePathInCommandLine(Context.UpdateTempRoot) + "\""; " is 136.
Long Statement,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The length of the statement  "						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) { " is 123.
Long Statement,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) { " is 162.
Long Statement,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) { " is 139.
Long Statement,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion)); " is 128.
Long Statement,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion)); " is 128.
Long Statement,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,The length of the statement  "				long offset = LocateBlockWithSignature(ZipConstants.Zip64CentralDirLocatorSignature' locatedEndOfCentralDir' 0' 0x1000); " is 120.
Long Statement,FSLib.App.SimpleUpdater.Wrapper,FunctionalForm,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\FunctionalForm.cs,Question,The length of the statement  "			return MessageBox.Show(title' content' isYesNo ? MessageBoxButtons.YesNo : MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == (isYesNo ? DialogResult.Yes : DialogResult.OK); " is 178.
Long Statement,FSLib.App.SimpleUpdater.Wrapper,FunctionalForm,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\FunctionalForm.cs,RetryError,The length of the statement  "			return MessageBox.Show("重试"' string.Format(content' param)' MessageBoxButtons.RetryCancel' MessageBoxIcon.Exclamation) == DialogResult.Retry; " is 141.
Long Statement,FSLib.App.SimpleUpdater.Wrapper,FunctionalForm,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\FunctionalForm.cs,RetryError,The length of the statement  "			return MessageBox.Show(title' content' MessageBoxButtons.RetryCancel' MessageBoxIcon.Exclamation) == DialogResult.Retry; " is 120.
Long Statement,FSLib.App.SimpleUpdater.Wrapper,FunctionalForm,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\FunctionalForm.cs,RetryError,The length of the statement  "			return MessageBox.Show(title' string.Format(content' param)' MessageBoxButtons.RetryCancel' MessageBoxIcon.Exclamation) == DialogResult.Retry; " is 142.
Long Statement,FSLib.App.SimpleUpdater.Wrapper,FunctionalForm,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\FunctionalForm.cs,RetryCommon,The length of the statement  "			return MessageBox.Show(title' string.Format(content' param)' MessageBoxButtons.RetryCancel' MessageBoxIcon.Question) == DialogResult.Retry; " is 139.
Long Statement,FSLib.App.SimpleUpdater.UpdateControl,ControlBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\ControlBase.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ControlBase)); " is 131.
Long Statement,FSLib.App.SimpleUpdater.UpdateControl,DownloadingInfo,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\DownloadingInfo.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DownloadingInfo)); " is 135.
Long Statement,FSLib.App.SimpleUpdater.UpdateControl,NoUpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\NoUpdateFound.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NoUpdateFound)); " is 133.
Long Statement,FSLib.App.SimpleUpdater.UpdateControl,UpdateError,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\UpdateError.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UpdateError)); " is 131.
Long Statement,FSLib.App.SimpleUpdater.UpdateControl,UpdateFinished,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\UpdateFinished.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UpdateFinished)); " is 134.
Complex Conditional,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,DeletePreviousFile,The conditional expression  "(UpdateInfo.DeleteMethod == DeletePreviousProgramMethod.AllExceptSpecified && rules.FindIndex(s => s.IsMatch(rPath)) == -1)  						||  					(UpdateInfo.DeleteMethod == DeletePreviousProgramMethod.NoneButSpecified && rules.FindIndex(s => s.IsMatch(rPath)) != -1)"  is complex.
Complex Conditional,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,SetProcessEnvVar,The conditional expression  "p.PropertyType != typeof(bool) && p.PropertyType != typeof(int) && p.PropertyType != typeof(string) && p.PropertyType != typeof(Version)"  is complex.
Complex Conditional,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,SetProcessEnvVar,The conditional expression  "p.PropertyType != typeof(bool) && p.PropertyType != typeof(int) && p.PropertyType != typeof(string) && p.PropertyType != typeof(Version)"  is complex.
Complex Conditional,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[curMatch + best_len] != scan_end      ||   					window[curMatch + best_len - 1] != scan_end1 ||   					window[curMatch] != window[scan]             ||   					window[curMatch + 1] != window[scan + 1]"  is complex.
Complex Conditional,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&  					(scan < strend)"  is complex.
Complex Conditional,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateStored,The conditional expression  "(storedLength >= DeflaterConstants.MAX_BLOCK_SIZE) || // Block is full  				(blockStart < WSIZE && storedLength >= MAX_DIST) ||   // Block may move out of window  				flush"  is complex.
Complex Conditional,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateFast,The conditional expression  "lookahead >= MIN_MATCH &&   					(hashHead = InsertString()) != 0 &&   					strategy != DeflateStrategy.HuffmanOnly &&  					strstart - hashHead <= MAX_DIST &&   					FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))"  is complex.
Complex Conditional,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The conditional expression  "(extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)"  is complex.
Complex Conditional,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,The conditional expression  "(thisDiskNumber == 0xffff) ||  				(startCentralDirDisk == 0xffff) ||  				(entriesForThisDisk == 0xffff) ||  				(entriesForWholeCentralDir == 0xffff) ||  				(centralDirSize == 0xffffffff) ||  				(offsetOfCentralDir == 0xffffffff)"  is complex.
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "InitUpdaterParameter".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnUpdateCancelled".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnRequestCloseApplication".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnGatheringPackages".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnGatheredPackages".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnDownloadUpdateInfo".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnDownloadUpdateInfoFinished".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnError".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnNoUpdateFound".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnUpdateFinished".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnOperationProgressChanged".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnPackageDownload".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnPackageDownloadMismatch".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnPackageDownloadFailed".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnPackageDownloadRetry".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnPackageDownloadFinished".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnPackageDownloadProgressChanged".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnDecompressPackage".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnDecompressPackageFinished".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnInstallUpdate".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnInstallFiles".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnInstallFiles".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnInstallFile".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnRemoveFiles".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnRemoveFilesFinished".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnRemoveFile".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnRollbackFiles".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnRollbackFilesFinished".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnRollbackFile".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnExecuteExternalProgramAfter".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnExecuteExternalProgramBefore".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnExternalUpdaterStart".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnExternalUpdaterStarted".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnExecuteExternalProcess".
Virtual Method Call from Constructor,FSLib.App.SimpleUpdater.Dialogs,AbstractUpdateBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\AbstractUpdateBase.cs,AbstractUpdateBase,The constructor "AbstractUpdateBase" calls a virtual method "OnMiniumalVersionRequired".
Empty Catch Block,FSLib.App.SimpleUpdater.Dialogs,MinmumVersionRequired,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MinmumVersionRequired.cs,btnGo_Click,The method has an empty catch block.
Empty Catch Block,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,UpdateFound_Load,The method has an empty catch block.
Empty Catch Block,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,rtf_LinkClicked,The method has an empty catch block.
Empty Catch Block,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,DownloadPackages,The method has an empty catch block.
Magic Number,FSLib.App.SimpleUpdater.Defination,UpdateContext,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Defination\UpdateContext.cs,UpdateContext,The following statement contains a magic number: MultipleDownloadCount = 3;
Magic Number,FSLib.App.SimpleUpdater.Defination,UpdateContext,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Defination\UpdateContext.cs,UpdateContext,The following statement contains a magic number: MaxiumRetryDownloadCount = 3;
Magic Number,FSLib.App.SimpleUpdater.Dialogs,MainWindow,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MainWindow.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(120))))' ((int)(((byte)(163))))' ((int)(((byte)(78)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,MainWindow,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MainWindow.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(120))))' ((int)(((byte)(163))))' ((int)(((byte)(78)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,MainWindow,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MainWindow.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(120))))' ((int)(((byte)(163))))' ((int)(((byte)(78)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,MainWindow,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\MainWindow.cs,InitializeComponent,The following statement contains a magic number: this.slideComponent1.MoveSpeedY = 8;
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(54))))' ((int)(((byte)(145))))' ((int)(((byte)(45)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(54))))' ((int)(((byte)(145))))' ((int)(((byte)(45)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.FlatAppearance.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(54))))' ((int)(((byte)(145))))' ((int)(((byte)(45)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(189))))' ((int)(((byte)(232))))' ((int)(((byte)(174)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(189))))' ((int)(((byte)(232))))' ((int)(((byte)(174)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(189))))' ((int)(((byte)(232))))' ((int)(((byte)(174)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(121))))' ((int)(((byte)(146))))' ((int)(((byte)(63)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(121))))' ((int)(((byte)(146))))' ((int)(((byte)(63)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.btnUpdate.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(121))))' ((int)(((byte)(146))))' ((int)(((byte)(63)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(147))))' ((int)(((byte)(180))))' ((int)(((byte)(101)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(147))))' ((int)(((byte)(180))))' ((int)(((byte)(101)))));
Magic Number,FSLib.App.SimpleUpdater.Dialogs,UpdateFound,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Dialogs\UpdateFound.cs,InitializeComponent,The following statement contains a magic number: this.panel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(147))))' ((int)(((byte)(180))))' ((int)(((byte)(101)))));
Magic Number,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,DeletePreviousFile,The following statement contains a magic number: foreach (var file in allOldFiles)  			{  				e.ReportProgress(allOldFiles.Length' ++index' file);    				var rPath = file.Remove(0' ApplicationRoot.Length).TrimEnd('\\');  				//保留的文件  				if (PreservedFiles.ContainsKey(rPath))  				{  					Trace.TraceInformation("文件 {0} 在保持文件列表中，跳过删除"' file);  					continue;  				}    				var dPath = System.IO.Path.Combine(bakPath' rPath);    				if ((UpdateInfo.DeleteMethod == DeletePreviousProgramMethod.AllExceptSpecified && rules.FindIndex(s => s.IsMatch(rPath)) == -1)  						||  					(UpdateInfo.DeleteMethod == DeletePreviousProgramMethod.NoneButSpecified && rules.FindIndex(s => s.IsMatch(rPath)) != -1)  					)  				{  					e.PostEvent(() => OnDeleteFile(new InstallFileEventArgs(file' dPath' allOldFiles.Length' index)));  					System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(dPath));  					Trace.TraceInformation("备份并删除文件: {0}  ->  {1}"' file' dPath);  					System.IO.File.Copy(file' dPath);    					var tryCount = 0;  					while (true)  					{  						++tryCount;    						try  						{  							System.IO.File.Delete(file);  							break;  						}  						catch (Exception ex)  						{  							this.Exception = ex;  							Trace.TraceWarning("第[" + tryCount + "]次删除失败：" + ex.Message);  						}  						//如果删除失败，则等待1秒后重试  						if (tryCount < 10)  							Thread.Sleep(1000);  						else return false;    					}  					_bakList.Add(rPath);  				}  			}
Magic Number,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,DeletePreviousFile,The following statement contains a magic number: foreach (var file in allOldFiles)  			{  				e.ReportProgress(allOldFiles.Length' ++index' file);    				var rPath = file.Remove(0' ApplicationRoot.Length).TrimEnd('\\');  				//保留的文件  				if (PreservedFiles.ContainsKey(rPath))  				{  					Trace.TraceInformation("文件 {0} 在保持文件列表中，跳过删除"' file);  					continue;  				}    				var dPath = System.IO.Path.Combine(bakPath' rPath);    				if ((UpdateInfo.DeleteMethod == DeletePreviousProgramMethod.AllExceptSpecified && rules.FindIndex(s => s.IsMatch(rPath)) == -1)  						||  					(UpdateInfo.DeleteMethod == DeletePreviousProgramMethod.NoneButSpecified && rules.FindIndex(s => s.IsMatch(rPath)) != -1)  					)  				{  					e.PostEvent(() => OnDeleteFile(new InstallFileEventArgs(file' dPath' allOldFiles.Length' index)));  					System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(dPath));  					Trace.TraceInformation("备份并删除文件: {0}  ->  {1}"' file' dPath);  					System.IO.File.Copy(file' dPath);    					var tryCount = 0;  					while (true)  					{  						++tryCount;    						try  						{  							System.IO.File.Delete(file);  							break;  						}  						catch (Exception ex)  						{  							this.Exception = ex;  							Trace.TraceWarning("第[" + tryCount + "]次删除失败：" + ex.Message);  						}  						//如果删除失败，则等待1秒后重试  						if (tryCount < 10)  							Thread.Sleep(1000);  						else return false;    					}  					_bakList.Add(rPath);  				}  			}
Magic Number,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,InstallFiles,The following statement contains a magic number: try  			{  				var index = 0;  				foreach (var file in filelist)  				{  					e.ReportProgress(filelist.Length' ++index' file);    					OriginalPath = System.IO.Path.Combine(ApplicationRoot' file);  					newVersionFile = System.IO.Path.Combine(SourceFolder' file);  					backupPath = System.IO.Path.Combine(RollbackPath' file);    					e.PostEvent(() => OnInstallFile(new InstallFileEventArgs(newVersionFile' OriginalPath' filelist.Length' index)));    					if (System.IO.File.Exists(OriginalPath))  					{  						System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(backupPath));  						tryCount = 0;    						while (true)  						{  							++tryCount;  							try  							{  								if (File.Exists(OriginalPath))  								{  									Trace.TraceInformation("第[" + tryCount + "]次尝试备份文件: " + OriginalPath + "  ->  " + backupPath);  									File.Copy(OriginalPath' backupPath' true);  									Trace.TraceInformation("第[" + tryCount + "]次尝试删除文件: " + OriginalPath);  									File.Delete(OriginalPath);  									Trace.TraceInformation("备份成功。");  								}    								break;  							}  							catch (Exception ex)  							{  								Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    								if (tryCount < 20)  									Thread.Sleep(1000);  								else throw ex;  							}  						}  						_bakList.Add(file);  					}  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在复制新版本文件: " + newVersionFile + "  ->  " + OriginalPath);  							System.IO.Directory.CreateDirectory(Path.GetDirectoryName(OriginalPath));  							System.IO.File.Copy(newVersionFile' OriginalPath);  							Trace.TraceInformation("安装成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else throw ex;  						}  					}  					//尝试删除已安装文件  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在尝试删除已安装文件: " + newVersionFile);  							System.IO.File.Delete(newVersionFile);  							Trace.TraceInformation("删除成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else break;  						}    					}  					_installedFile.Add(file);  					Trace.TraceInformation("安装文件: " + newVersionFile + "  ->  " + OriginalPath);  				}  			}  			catch (Exception ex)  			{  				this.Exception = new Exception(string.Format(SR.Updater_InstallFileError' OriginalPath' newVersionFile' ex.Message));  				Trace.TraceWarning("安装文件时发生错误：" + ex.Message' ex.ToString());  				return false;  			}
Magic Number,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,InstallFiles,The following statement contains a magic number: try  			{  				var index = 0;  				foreach (var file in filelist)  				{  					e.ReportProgress(filelist.Length' ++index' file);    					OriginalPath = System.IO.Path.Combine(ApplicationRoot' file);  					newVersionFile = System.IO.Path.Combine(SourceFolder' file);  					backupPath = System.IO.Path.Combine(RollbackPath' file);    					e.PostEvent(() => OnInstallFile(new InstallFileEventArgs(newVersionFile' OriginalPath' filelist.Length' index)));    					if (System.IO.File.Exists(OriginalPath))  					{  						System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(backupPath));  						tryCount = 0;    						while (true)  						{  							++tryCount;  							try  							{  								if (File.Exists(OriginalPath))  								{  									Trace.TraceInformation("第[" + tryCount + "]次尝试备份文件: " + OriginalPath + "  ->  " + backupPath);  									File.Copy(OriginalPath' backupPath' true);  									Trace.TraceInformation("第[" + tryCount + "]次尝试删除文件: " + OriginalPath);  									File.Delete(OriginalPath);  									Trace.TraceInformation("备份成功。");  								}    								break;  							}  							catch (Exception ex)  							{  								Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    								if (tryCount < 20)  									Thread.Sleep(1000);  								else throw ex;  							}  						}  						_bakList.Add(file);  					}  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在复制新版本文件: " + newVersionFile + "  ->  " + OriginalPath);  							System.IO.Directory.CreateDirectory(Path.GetDirectoryName(OriginalPath));  							System.IO.File.Copy(newVersionFile' OriginalPath);  							Trace.TraceInformation("安装成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else throw ex;  						}  					}  					//尝试删除已安装文件  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在尝试删除已安装文件: " + newVersionFile);  							System.IO.File.Delete(newVersionFile);  							Trace.TraceInformation("删除成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else break;  						}    					}  					_installedFile.Add(file);  					Trace.TraceInformation("安装文件: " + newVersionFile + "  ->  " + OriginalPath);  				}  			}  			catch (Exception ex)  			{  				this.Exception = new Exception(string.Format(SR.Updater_InstallFileError' OriginalPath' newVersionFile' ex.Message));  				Trace.TraceWarning("安装文件时发生错误：" + ex.Message' ex.ToString());  				return false;  			}
Magic Number,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,InstallFiles,The following statement contains a magic number: try  			{  				var index = 0;  				foreach (var file in filelist)  				{  					e.ReportProgress(filelist.Length' ++index' file);    					OriginalPath = System.IO.Path.Combine(ApplicationRoot' file);  					newVersionFile = System.IO.Path.Combine(SourceFolder' file);  					backupPath = System.IO.Path.Combine(RollbackPath' file);    					e.PostEvent(() => OnInstallFile(new InstallFileEventArgs(newVersionFile' OriginalPath' filelist.Length' index)));    					if (System.IO.File.Exists(OriginalPath))  					{  						System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(backupPath));  						tryCount = 0;    						while (true)  						{  							++tryCount;  							try  							{  								if (File.Exists(OriginalPath))  								{  									Trace.TraceInformation("第[" + tryCount + "]次尝试备份文件: " + OriginalPath + "  ->  " + backupPath);  									File.Copy(OriginalPath' backupPath' true);  									Trace.TraceInformation("第[" + tryCount + "]次尝试删除文件: " + OriginalPath);  									File.Delete(OriginalPath);  									Trace.TraceInformation("备份成功。");  								}    								break;  							}  							catch (Exception ex)  							{  								Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    								if (tryCount < 20)  									Thread.Sleep(1000);  								else throw ex;  							}  						}  						_bakList.Add(file);  					}  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在复制新版本文件: " + newVersionFile + "  ->  " + OriginalPath);  							System.IO.Directory.CreateDirectory(Path.GetDirectoryName(OriginalPath));  							System.IO.File.Copy(newVersionFile' OriginalPath);  							Trace.TraceInformation("安装成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else throw ex;  						}  					}  					//尝试删除已安装文件  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在尝试删除已安装文件: " + newVersionFile);  							System.IO.File.Delete(newVersionFile);  							Trace.TraceInformation("删除成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else break;  						}    					}  					_installedFile.Add(file);  					Trace.TraceInformation("安装文件: " + newVersionFile + "  ->  " + OriginalPath);  				}  			}  			catch (Exception ex)  			{  				this.Exception = new Exception(string.Format(SR.Updater_InstallFileError' OriginalPath' newVersionFile' ex.Message));  				Trace.TraceWarning("安装文件时发生错误：" + ex.Message' ex.ToString());  				return false;  			}
Magic Number,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,InstallFiles,The following statement contains a magic number: try  			{  				var index = 0;  				foreach (var file in filelist)  				{  					e.ReportProgress(filelist.Length' ++index' file);    					OriginalPath = System.IO.Path.Combine(ApplicationRoot' file);  					newVersionFile = System.IO.Path.Combine(SourceFolder' file);  					backupPath = System.IO.Path.Combine(RollbackPath' file);    					e.PostEvent(() => OnInstallFile(new InstallFileEventArgs(newVersionFile' OriginalPath' filelist.Length' index)));    					if (System.IO.File.Exists(OriginalPath))  					{  						System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(backupPath));  						tryCount = 0;    						while (true)  						{  							++tryCount;  							try  							{  								if (File.Exists(OriginalPath))  								{  									Trace.TraceInformation("第[" + tryCount + "]次尝试备份文件: " + OriginalPath + "  ->  " + backupPath);  									File.Copy(OriginalPath' backupPath' true);  									Trace.TraceInformation("第[" + tryCount + "]次尝试删除文件: " + OriginalPath);  									File.Delete(OriginalPath);  									Trace.TraceInformation("备份成功。");  								}    								break;  							}  							catch (Exception ex)  							{  								Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    								if (tryCount < 20)  									Thread.Sleep(1000);  								else throw ex;  							}  						}  						_bakList.Add(file);  					}  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在复制新版本文件: " + newVersionFile + "  ->  " + OriginalPath);  							System.IO.Directory.CreateDirectory(Path.GetDirectoryName(OriginalPath));  							System.IO.File.Copy(newVersionFile' OriginalPath);  							Trace.TraceInformation("安装成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else throw ex;  						}  					}  					//尝试删除已安装文件  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在尝试删除已安装文件: " + newVersionFile);  							System.IO.File.Delete(newVersionFile);  							Trace.TraceInformation("删除成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else break;  						}    					}  					_installedFile.Add(file);  					Trace.TraceInformation("安装文件: " + newVersionFile + "  ->  " + OriginalPath);  				}  			}  			catch (Exception ex)  			{  				this.Exception = new Exception(string.Format(SR.Updater_InstallFileError' OriginalPath' newVersionFile' ex.Message));  				Trace.TraceWarning("安装文件时发生错误：" + ex.Message' ex.ToString());  				return false;  			}
Magic Number,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,InstallFiles,The following statement contains a magic number: try  			{  				var index = 0;  				foreach (var file in filelist)  				{  					e.ReportProgress(filelist.Length' ++index' file);    					OriginalPath = System.IO.Path.Combine(ApplicationRoot' file);  					newVersionFile = System.IO.Path.Combine(SourceFolder' file);  					backupPath = System.IO.Path.Combine(RollbackPath' file);    					e.PostEvent(() => OnInstallFile(new InstallFileEventArgs(newVersionFile' OriginalPath' filelist.Length' index)));    					if (System.IO.File.Exists(OriginalPath))  					{  						System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(backupPath));  						tryCount = 0;    						while (true)  						{  							++tryCount;  							try  							{  								if (File.Exists(OriginalPath))  								{  									Trace.TraceInformation("第[" + tryCount + "]次尝试备份文件: " + OriginalPath + "  ->  " + backupPath);  									File.Copy(OriginalPath' backupPath' true);  									Trace.TraceInformation("第[" + tryCount + "]次尝试删除文件: " + OriginalPath);  									File.Delete(OriginalPath);  									Trace.TraceInformation("备份成功。");  								}    								break;  							}  							catch (Exception ex)  							{  								Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    								if (tryCount < 20)  									Thread.Sleep(1000);  								else throw ex;  							}  						}  						_bakList.Add(file);  					}  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在复制新版本文件: " + newVersionFile + "  ->  " + OriginalPath);  							System.IO.Directory.CreateDirectory(Path.GetDirectoryName(OriginalPath));  							System.IO.File.Copy(newVersionFile' OriginalPath);  							Trace.TraceInformation("安装成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else throw ex;  						}  					}  					//尝试删除已安装文件  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在尝试删除已安装文件: " + newVersionFile);  							System.IO.File.Delete(newVersionFile);  							Trace.TraceInformation("删除成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else break;  						}    					}  					_installedFile.Add(file);  					Trace.TraceInformation("安装文件: " + newVersionFile + "  ->  " + OriginalPath);  				}  			}  			catch (Exception ex)  			{  				this.Exception = new Exception(string.Format(SR.Updater_InstallFileError' OriginalPath' newVersionFile' ex.Message));  				Trace.TraceWarning("安装文件时发生错误：" + ex.Message' ex.ToString());  				return false;  			}
Magic Number,FSLib.App.SimpleUpdater,FileInstaller,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\FileInstaller.cs,InstallFiles,The following statement contains a magic number: try  			{  				var index = 0;  				foreach (var file in filelist)  				{  					e.ReportProgress(filelist.Length' ++index' file);    					OriginalPath = System.IO.Path.Combine(ApplicationRoot' file);  					newVersionFile = System.IO.Path.Combine(SourceFolder' file);  					backupPath = System.IO.Path.Combine(RollbackPath' file);    					e.PostEvent(() => OnInstallFile(new InstallFileEventArgs(newVersionFile' OriginalPath' filelist.Length' index)));    					if (System.IO.File.Exists(OriginalPath))  					{  						System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(backupPath));  						tryCount = 0;    						while (true)  						{  							++tryCount;  							try  							{  								if (File.Exists(OriginalPath))  								{  									Trace.TraceInformation("第[" + tryCount + "]次尝试备份文件: " + OriginalPath + "  ->  " + backupPath);  									File.Copy(OriginalPath' backupPath' true);  									Trace.TraceInformation("第[" + tryCount + "]次尝试删除文件: " + OriginalPath);  									File.Delete(OriginalPath);  									Trace.TraceInformation("备份成功。");  								}    								break;  							}  							catch (Exception ex)  							{  								Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    								if (tryCount < 20)  									Thread.Sleep(1000);  								else throw ex;  							}  						}  						_bakList.Add(file);  					}  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在复制新版本文件: " + newVersionFile + "  ->  " + OriginalPath);  							System.IO.Directory.CreateDirectory(Path.GetDirectoryName(OriginalPath));  							System.IO.File.Copy(newVersionFile' OriginalPath);  							Trace.TraceInformation("安装成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else throw ex;  						}  					}  					//尝试删除已安装文件  					tryCount = 0;  					while (true)  					{  						++tryCount;  						try  						{  							Trace.TraceInformation("正在尝试删除已安装文件: " + newVersionFile);  							System.IO.File.Delete(newVersionFile);  							Trace.TraceInformation("删除成功");  							break;  						}  						catch (Exception ex)  						{  							Trace.TraceWarning("第[" + tryCount + "]次尝试失败： " + ex.Message);    							if (tryCount < 10)  								Thread.Sleep(1000);  							else break;  						}    					}  					_installedFile.Add(file);  					Trace.TraceInformation("安装文件: " + newVersionFile + "  ->  " + OriginalPath);  				}  			}  			catch (Exception ex)  			{  				this.Exception = new Exception(string.Format(SR.Updater_InstallFileError' OriginalPath' newVersionFile' ex.Message));  				Trace.TraceWarning("安装文件时发生错误：" + ex.Message' ex.ToString());  				return false;  			}
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CreateUpdaterInstance,The following statement contains a magic number: if (servers == null || servers.Length < 2)  			{  				if (appVersion == null && string.IsNullOrEmpty(appDirectory))  					_instance = new Updater();  				else _instance = new Updater(appVersion' appDirectory);    				if (servers.Length > 0)  				{  					_instance.Context.UpdateDownloadUrl = servers[0].Url;  					_instance.Context.UpdateInfoFileName = servers[0].InfoFileName;  				}  			}  			else  			{  				if (appVersion == null && string.IsNullOrEmpty(appDirectory))  				{  					_instance = new MultiServerUpdater(servers) {SwitchIfNoUpdatesFound = switchIfNoUpdate};  				}  				else  				{  					if (appVersion == null || string.IsNullOrEmpty(appDirectory))  						throw new ArgumentException("If appVersion or appDirectory was provided' you must provide another one also.");      					_instance = new MultiServerUpdater(appVersion' appDirectory' servers) { SwitchIfNoUpdatesFound = switchIfNoUpdate };  				}  			}
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,InitializeParameters,The following statement contains a magic number: if (args.Length < 2 || (args[1] != "/startupdate" && args[1] != "/selfupdate")) return;
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,InitializeParameters,The following statement contains a magic number: var index = 2;
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,InitializeParameters,The following statement contains a magic number: while (index < args.Length)  			{  				var name = args[index++];    				switch (name)  				{  					case "/ui":  						Context.UpdateMainFormType = args[index++];  						break;  					case "/assembly":  						LoadExtraAssemblies(args[index++]);  						break;  					case "/cv": Context.CurrentVersion = new Version(args[index++]); break;  					case "/ad": Context.ApplicationDirectory = args[index++]; break;  					case "/url": Context.UpdateDownloadUrl = args[index++]; break;  					case "/infofile": Context.UpdateInfoFileName = args[index++]; break;  					case "/proxy": Context.ProxyAddress = args[index++]; break;  					case "/cred":  						var value = args[index++];  						if (!string.IsNullOrEmpty(value))  						{  							var info = value.Split(':');  							if (info.Length == 2 && !string.IsNullOrEmpty(info[0]))  							{  								Context.NetworkCredential = new System.Net.NetworkCredential(info[0]' info[1]);  							}  						}  						break;  					case "/p":  						var pi = args[index++];  						if (pi.StartsWith("*")) Context.ExternalProcessID.Add(int.Parse(pi.Remove(0' 1)));  						else Context.ExternalProcessName.Add(pi);  						break;  					case "/log": Context.LogFile = args[index++]; break;  					case "/forceupdate": Context.ForceUpdate = true; break;  					case "/autokill": Context.AutoKillProcesses = true; break;  					case "/noui": Context.HiddenUI = true; break;  				}  			}
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CloseApplication,The following statement contains a magic number: if (closeApplication.Count > 0)  			{  				//是否强制关闭进程？  				if (Context.AutoKillProcesses)  				{  					Trace.TraceInformation("已开启自动结束所有进程。正在结束进程。");  					foreach (var s in closeApplication)  					{  						if (s.HasExited)  						{  							Trace.TraceInformation("进程【" + s.ProcessName + "】已经提前退出。");  						}  						else  						{  							try  							{  								s.Kill();  								Trace.TraceInformation("进程【" + s.ProcessName + "】已经成功结束。");  							}  							catch (Exception ex)  							{  								Trace.TraceError("进程【" + s.ProcessName + "】结束失败：" + ex.Message);    								return false;  							}  						}  					}  					return true;  				}    				var evt = new QueryCloseApplicationEventArgs(closeApplication' NotifyUserToCloseApp);  				e.PostEvent(_ => OnQueryCloseApplication(evt));  				while (!evt.IsCancelled.HasValue)  				{  					Thread.Sleep(100);  				}  				return !evt.IsCancelled.Value;  			}
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,SetProcessEnvVar,The following statement contains a magic number: foreach (var p in props)  			{  				if (p.PropertyType != typeof(bool) && p.PropertyType != typeof(int) && p.PropertyType != typeof(string) && p.PropertyType != typeof(Version)) continue;    				var value = (p.GetValue(Context' null) ?? "").ToString();  				if (value.Length > 255) continue;   //当属性内容过长时' 忽略设置此属性' 防止设置导致环境变量过长抛出异常.    				if (!psi.EnvironmentVariables.ContainsKey(p.Name)) psi.EnvironmentVariables.Add(p.Name' value);  			}
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,SetProcessEnvVar,The following statement contains a magic number: foreach (var p in props)  			{  				if (p.PropertyType != typeof(bool) && p.PropertyType != typeof(int) && p.PropertyType != typeof(string) && p.PropertyType != typeof(Version)) continue;    				var value = (p.GetValue(Context.UpdateInfo' null) ?? "").ToString();  				if (value.Length > 255) continue;   //当属性内容过长时' 忽略设置此属性' 防止设置导致环境变量过长抛出异常.  				if (!psi.EnvironmentVariables.ContainsKey(p.Name)) psi.EnvironmentVariables.Add(p.Name' value);  			}
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,RunExternalProgram,The following statement contains a magic number: if (waitingForExit)  			{  				Trace.TraceInformation("等待外部进程执行完毕");  				if (Context.UpdateInfo.ExecuteTimeout > 0)  				{  					p.WaitForExit(1000 * Context.UpdateInfo.ExecuteTimeout);  				}  				else p.WaitForExit();    				Action<Process> actor = m =>  				{  					var pet = new ProgramExecuteTimeout();  					if (pet.ShowDialog() == DialogResult.OK)  					{  						if (!m.HasExited) m.Kill();  					}  				};  				while (!p.HasExited)  				{  					Application.OpenForms[0].Invoke(actor' p);  					if (!p.HasExited) p.WaitForExit(1000 * Context.UpdateInfo.ExecuteTimeout);  				}  			}
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,RunExternalProgram,The following statement contains a magic number: if (waitingForExit)  			{  				Trace.TraceInformation("等待外部进程执行完毕");  				if (Context.UpdateInfo.ExecuteTimeout > 0)  				{  					p.WaitForExit(1000 * Context.UpdateInfo.ExecuteTimeout);  				}  				else p.WaitForExit();    				Action<Process> actor = m =>  				{  					var pet = new ProgramExecuteTimeout();  					if (pet.ShowDialog() == DialogResult.OK)  					{  						if (!m.HasExited) m.Kill();  					}  				};  				while (!p.HasExited)  				{  					Application.OpenForms[0].Invoke(actor' p);  					if (!p.HasExited) p.WaitForExit(1000 * Context.UpdateInfo.ExecuteTimeout);  				}  			}
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CopyAndStartUpdater,The following statement contains a magic number: if (Environment.OSVersion.Version.Major > 5 && (Context.UpdateInfo.RequreAdminstrorPrivilege || !EnsureAdminPrivilege()))  				psi.Verb = "runas";
Magic Number,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,CleanTemp,The following statement contains a magic number: var localpath = Environment.ExpandEnvironmentVariables(@"%TEMP%\FSLib.DeleteTmp_" + new Random().Next(100000) + ".exe");
Magic Number,ICCEmbedded.SharpZipLib.Checksums,Adler32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICCEmbedded.SharpZipLib.Checksums,Adler32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) + s1;
Magic Number,ICCEmbedded.SharpZipLib.Checksums,Adler32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICCEmbedded.SharpZipLib.Checksums,Adler32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\Adler32.cs,Update,The following statement contains a magic number: while (count > 0) {  				// We can defer the modulo operation:  				// s1 maximally grows from 65521 to 65521 + 255 * 3800  				// s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31  				int n = 3800;  				if (n > count) {  					n = count;  				}  				count -= n;  				while (--n >= 0) {  					s1 = s1 + (uint)(buffer[offset++] & 0xff);  					s2 = s2 + s1;  				}  				s1 %= BASE;  				s2 %= BASE;  			}
Magic Number,ICCEmbedded.SharpZipLib.Checksums,Adler32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) | s1;
Magic Number,ICCEmbedded.SharpZipLib.Checksums,Crc32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\CRC32.cs,ComputeCrc32,The following statement contains a magic number: return (uint)(Crc32.CrcTable[(oldCrc ^ value) & 0xFF] ^ (oldCrc >> 8));
Magic Number,ICCEmbedded.SharpZipLib.Checksums,Crc32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\CRC32.cs,Update,The following statement contains a magic number: crc  = CrcTable[(crc ^ value) & 0xFF] ^ (crc >> 8);
Magic Number,ICCEmbedded.SharpZipLib.Checksums,Crc32,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Checksums\CRC32.cs,Update,The following statement contains a magic number: while (--count >= 0) {  				crc = CrcTable[(crc ^ buffer[offset++]) & 0xFF] ^ (crc >> 8);  			}
Magic Number,ICCEmbedded.SharpZipLib.Core,StreamUtils,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Core\StreamUtils.cs,Copy,The following statement contains a magic number: if (buffer.Length < 128) {  				throw new ArgumentException("Buffer is too small"' "buffer");  			}
Magic Number,ICCEmbedded.SharpZipLib.Core,StreamUtils,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Core\StreamUtils.cs,Copy,The following statement contains a magic number: if ( buffer.Length < 128 ) {  				throw new ArgumentException("Buffer is too small"' "buffer");  			}
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: for (int i = 0; i < seed.Length; ++i)   			{  				newKeys[0] = Crc32.ComputeCrc32(newKeys[0]' seed[i]);  				newKeys[1] = newKeys[1] + (byte)newKeys[0];  				newKeys[1] = newKeys[1] * 134775813 + 1;  				newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));  			}
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: for (int i = 0; i < seed.Length; ++i)   			{  				newKeys[0] = Crc32.ComputeCrc32(newKeys[0]' seed[i]);  				newKeys[1] = newKeys[1] + (byte)newKeys[0];  				newKeys[1] = newKeys[1] * 134775813 + 1;  				newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));  			}
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: for (int i = 0; i < seed.Length; ++i)   			{  				newKeys[0] = Crc32.ComputeCrc32(newKeys[0]' seed[i]);  				newKeys[1] = newKeys[1] + (byte)newKeys[0];  				newKeys[1] = newKeys[1] * 134775813 + 1;  				newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));  			}
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: for (int i = 0; i < seed.Length; ++i)   			{  				newKeys[0] = Crc32.ComputeCrc32(newKeys[0]' seed[i]);  				newKeys[1] = newKeys[1] + (byte)newKeys[0];  				newKeys[1] = newKeys[1] * 134775813 + 1;  				newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));  			}
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: byte[] result = new byte[12];
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[1] = (byte)((newKeys[0] >> 8) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[2] = (byte)((newKeys[0] >> 16) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[2] = (byte)((newKeys[0] >> 16) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[3] = (byte)((newKeys[0] >> 24) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[3] = (byte)((newKeys[0] >> 24) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[4] = (byte)(newKeys[1] & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[5] = (byte)((newKeys[1] >> 8) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[5] = (byte)((newKeys[1] >> 8) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[6] = (byte)((newKeys[1] >> 16) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[6] = (byte)((newKeys[1] >> 16) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[7] = (byte)((newKeys[1] >> 24) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[7] = (byte)((newKeys[1] >> 24) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[8] = (byte)(newKeys[2] & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[8] = (byte)(newKeys[2] & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassic,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: uint temp = ((keys[2] & 0xFFFF) | 2);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: uint temp = ((keys[2] & 0xFFFF) | 2);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: return (byte)((temp * (temp ^ 1)) >> 8);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: if ( keyData.Length != 12 ) {  				throw new InvalidOperationException("Key length is not valid");  			}
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys = new uint[3];
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[1] = keys[1] * 134775813 + 1;
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,Reset,The following statement contains a magic number: keys[2] = 0;
Magic Number,ICCEmbedded.SharpZipLib.Encryption,PkzipClassicManaged,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Encryption\PkzipClassic.cs,GenerateKey,The following statement contains a magic number: key_ = new byte[12];
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflaterEngine,The following statement contains a magic number: window = new byte[2 * WSIZE];
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,SetDictionary,The following statement contains a magic number: strstart += 2;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,SetLevel,The following statement contains a magic number: if ( (level < 0) || (level > 9) )  			{  				throw new ArgumentOutOfRangeException("level");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,FillWindow,The following statement contains a magic number: while (lookahead < DeflaterConstants.MIN_LOOKAHEAD && inputOff < inputEnd)   			{  				int more = 2 * WSIZE - lookahead - strstart;  				  				if (more > inputEnd - inputOff)   				{  					more = inputEnd - inputOff;  				}  				  				System.Array.Copy(inputBuf' inputOff' window' strstart + lookahead' more);  				adler.Update(inputBuf' inputOff' more);  				  				inputOff += more;  				totalIn  += more;  				lookahead += more;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: if (best_len >= this.goodLength) {  				chainLength >>= 2;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: do {    #if DebugDeflation    				if (DeflaterConstants.DEBUGGING && (curMatch >= strstart) )  				{  					throw new InvalidOperationException("no future");  				}  #endif              				if (window[curMatch + best_len] != scan_end      ||   					window[curMatch + best_len - 1] != scan_end1 ||   					window[curMatch] != window[scan]             ||   					window[curMatch + 1] != window[scan + 1]) {  					continue;  				}  				  				match = curMatch + 2;  				scan += 2;  				  				/* We check for insufficient lookahead only every 8th comparison;  				* the 256th check will be made at strstart + 258.  				*/  				while (  					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&  					(scan < strend))  				{  					// Do nothing  				}  				  				if (scan > best_end) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && (ins_h == 0) )  						Console.Error.WriteLine("Found match: " + curMatch + "-" + (scan - strstart));  #endif  					matchStart = curMatch;  					best_end = scan;  					best_len = scan - strstart;  					  					if (best_len >= niceLength) {  						break;  					}  					  					scan_end1  = window[best_end - 1];  					scan_end   = window[best_end];  				}  				scan = strstart;  			} while ((curMatch = (prev[curMatch & WMASK] & 0xffff)) > limit && --chainLength != 0);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: do {    #if DebugDeflation    				if (DeflaterConstants.DEBUGGING && (curMatch >= strstart) )  				{  					throw new InvalidOperationException("no future");  				}  #endif              				if (window[curMatch + best_len] != scan_end      ||   					window[curMatch + best_len - 1] != scan_end1 ||   					window[curMatch] != window[scan]             ||   					window[curMatch + 1] != window[scan + 1]) {  					continue;  				}  				  				match = curMatch + 2;  				scan += 2;  				  				/* We check for insufficient lookahead only every 8th comparison;  				* the 256th check will be made at strstart + 258.  				*/  				while (  					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&  					(scan < strend))  				{  					// Do nothing  				}  				  				if (scan > best_end) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && (ins_h == 0) )  						Console.Error.WriteLine("Found match: " + curMatch + "-" + (scan - strstart));  #endif  					matchStart = curMatch;  					best_end = scan;  					best_len = scan - strstart;  					  					if (best_len >= niceLength) {  						break;  					}  					  					scan_end1  = window[best_end - 1];  					scan_end   = window[best_end];  				}  				scan = strstart;  			} while ((curMatch = (prev[curMatch & WMASK] & 0xffff)) > limit && --chainLength != 0);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateFast,The following statement contains a magic number: while (lookahead >= MIN_LOOKAHEAD || flush) {  				if (lookahead == 0) {  					// We are flushing everything  					huffman.FlushBlock(window' blockStart' strstart - blockStart' finish);  					blockStart = strstart;  					return false;  				}  				  				if (strstart > 2 * WSIZE - MIN_LOOKAHEAD) {  					/* slide window' as FindLongestMatch needs this.  					 * This should only happen when flushing and the window  					 * is almost full.  					 */  					SlideWindow();  				}  				  				int hashHead;  				if (lookahead >= MIN_MATCH &&   					(hashHead = InsertString()) != 0 &&   					strategy != DeflateStrategy.HuffmanOnly &&  					strstart - hashHead <= MAX_DIST &&   					FindLongestMatch(hashHead)) {  					// longestMatch sets matchStart and matchLen  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING)   					{  						for (int i = 0 ; i < matchLen; i++) {  							if (window[strstart + i] != window[matchStart + i]) {  								throw new SharpZipBaseException("Match failure");  							}  						}  					}  #endif					    					bool full = huffman.TallyDist(strstart - matchStart' matchLen);    					lookahead -= matchLen;  					if (matchLen <= max_lazy && lookahead >= MIN_MATCH) {  						while (--matchLen > 0) {  							++strstart;  							InsertString();  						}  						++strstart;  					} else {  						strstart += matchLen;  						if (lookahead >= MIN_MATCH - 1) {  							UpdateHash();  						}  					}  					matchLen = MIN_MATCH - 1;  					if (!full) {  						continue;  					}  				} else {  					// No match found  					huffman.TallyLit(window[strstart] & 0xff);  					++strstart;  					--lookahead;  				}  				  				if (huffman.IsFull()) {  					bool lastBlock = finish && (lookahead == 0);  					huffman.FlushBlock(window' blockStart' strstart - blockStart' lastBlock);  					blockStart = strstart;  					return !lastBlock;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= MIN_LOOKAHEAD || flush) {  				if (lookahead == 0) {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = false;  					  					// We are flushing everything  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && !flush)   					{  						throw new SharpZipBaseException("Not flushing' but no lookahead");  					}  #endif                 					huffman.FlushBlock(window' blockStart' strstart - blockStart'  						finish);  					blockStart = strstart;  					return false;  				}  				  				if (strstart >= 2 * WSIZE - MIN_LOOKAHEAD) {  					/* slide window' as FindLongestMatch needs this.  					 * This should only happen when flushing and the window  					 * is almost full.  					 */  					SlideWindow();  				}  				  				int prevMatch = matchStart;  				int prevLen = matchLen;  				if (lookahead >= MIN_MATCH) {    					int hashHead = InsertString();    					if (strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)) {  						  						// longestMatch sets matchStart and matchLen  							  						// Discard match if too small and too far away  						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) {  							matchLen = MIN_MATCH - 1;  						}  					}  				}  				  				// previous match was better  				if ((prevLen >= MIN_MATCH) && (matchLen <= prevLen) ) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING)   					{  					   for (int i = 0 ; i < matchLen; i++) {  						  if (window[strstart-1+i] != window[prevMatch + i])  							 throw new SharpZipBaseException();  						}  					}  #endif  					huffman.TallyDist(strstart - 1 - prevMatch' prevLen);  					prevLen -= 2;  					do {  						strstart++;  						lookahead--;  						if (lookahead >= MIN_MATCH) {  							InsertString();  						}  					} while (--prevLen > 0);    					strstart ++;  					lookahead--;  					prevAvailable = false;  					matchLen = MIN_MATCH - 1;  				} else {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = true;  					strstart++;  					lookahead--;  				}  				  				if (huffman.IsFull()) {  					int len = strstart - blockStart;  					if (prevAvailable) {  						len--;  					}  					bool lastBlock = (finish && (lookahead == 0) && !prevAvailable);  					huffman.FlushBlock(window' blockStart' len' lastBlock);  					blockStart += len;  					return !lastBlock;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= MIN_LOOKAHEAD || flush) {  				if (lookahead == 0) {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = false;  					  					// We are flushing everything  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && !flush)   					{  						throw new SharpZipBaseException("Not flushing' but no lookahead");  					}  #endif                 					huffman.FlushBlock(window' blockStart' strstart - blockStart'  						finish);  					blockStart = strstart;  					return false;  				}  				  				if (strstart >= 2 * WSIZE - MIN_LOOKAHEAD) {  					/* slide window' as FindLongestMatch needs this.  					 * This should only happen when flushing and the window  					 * is almost full.  					 */  					SlideWindow();  				}  				  				int prevMatch = matchStart;  				int prevLen = matchLen;  				if (lookahead >= MIN_MATCH) {    					int hashHead = InsertString();    					if (strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)) {  						  						// longestMatch sets matchStart and matchLen  							  						// Discard match if too small and too far away  						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) {  							matchLen = MIN_MATCH - 1;  						}  					}  				}  				  				// previous match was better  				if ((prevLen >= MIN_MATCH) && (matchLen <= prevLen) ) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING)   					{  					   for (int i = 0 ; i < matchLen; i++) {  						  if (window[strstart-1+i] != window[prevMatch + i])  							 throw new SharpZipBaseException();  						}  					}  #endif  					huffman.TallyDist(strstart - 1 - prevMatch' prevLen);  					prevLen -= 2;  					do {  						strstart++;  						lookahead--;  						if (lookahead >= MIN_MATCH) {  							InsertString();  						}  					} while (--prevLen > 0);    					strstart ++;  					lookahead--;  					prevAvailable = false;  					matchLen = MIN_MATCH - 1;  				} else {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = true;  					strstart++;  					lookahead--;  				}  				  				if (huffman.IsFull()) {  					int len = strstart - blockStart;  					if (prevAvailable) {  						len--;  					}  					bool lastBlock = (finish && (lookahead == 0) && !prevAvailable);  					huffman.FlushBlock(window' blockStart' len' lastBlock);  					blockStart += len;  					return !lastBlock;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= MIN_LOOKAHEAD || flush) {  				if (lookahead == 0) {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = false;  					  					// We are flushing everything  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && !flush)   					{  						throw new SharpZipBaseException("Not flushing' but no lookahead");  					}  #endif                 					huffman.FlushBlock(window' blockStart' strstart - blockStart'  						finish);  					blockStart = strstart;  					return false;  				}  				  				if (strstart >= 2 * WSIZE - MIN_LOOKAHEAD) {  					/* slide window' as FindLongestMatch needs this.  					 * This should only happen when flushing and the window  					 * is almost full.  					 */  					SlideWindow();  				}  				  				int prevMatch = matchStart;  				int prevLen = matchLen;  				if (lookahead >= MIN_MATCH) {    					int hashHead = InsertString();    					if (strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)) {  						  						// longestMatch sets matchStart and matchLen  							  						// Discard match if too small and too far away  						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) {  							matchLen = MIN_MATCH - 1;  						}  					}  				}  				  				// previous match was better  				if ((prevLen >= MIN_MATCH) && (matchLen <= prevLen) ) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING)   					{  					   for (int i = 0 ; i < matchLen; i++) {  						  if (window[strstart-1+i] != window[prevMatch + i])  							 throw new SharpZipBaseException();  						}  					}  #endif  					huffman.TallyDist(strstart - 1 - prevMatch' prevLen);  					prevLen -= 2;  					do {  						strstart++;  						lookahead--;  						if (lookahead >= MIN_MATCH) {  							InsertString();  						}  					} while (--prevLen > 0);    					strstart ++;  					lookahead--;  					prevAvailable = false;  					matchLen = MIN_MATCH - 1;  				} else {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = true;  					strstart++;  					lookahead--;  				}  				  				if (huffman.IsFull()) {  					int len = strstart - blockStart;  					if (prevAvailable) {  						len--;  					}  					bool lastBlock = (finish && (lookahead == 0) && !prevAvailable);  					huffman.FlushBlock(window' blockStart' len' lastBlock);  					blockStart += len;  					return !lastBlock;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144) {  				staticLCodes[i] = BitReverse((0x030 + i) << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144) {  				staticLCodes[i] = BitReverse((0x030 + i) << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144) {  				staticLCodes[i] = BitReverse((0x030 + i) << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256) {  				staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);  				staticLLength[i++] = 9;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256) {  				staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);  				staticLLength[i++] = 9;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256) {  				staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);  				staticLLength[i++] = 9;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256) {  				staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);  				staticLLength[i++] = 9;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280) {  				staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);  				staticLLength[i++] = 7;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280) {  				staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);  				staticLLength[i++] = 7;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280) {  				staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);  				staticLLength[i++] = 7;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280) {  				staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);  				staticLLength[i++] = 7;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM) {  				staticLCodes[i] = BitReverse((0x0c0 - 280 + i)  << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM) {  				staticLCodes[i] = BitReverse((0x0c0 - 280 + i)  << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM) {  				staticLCodes[i] = BitReverse((0x0c0 - 280 + i)  << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: for (i = 0; i < DIST_NUM; i++) {  				staticDCodes[i] = BitReverse(i << 11);  				staticDLength[i] = 5;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: for (i = 0; i < DIST_NUM; i++) {  				staticDCodes[i] = BitReverse(i << 11);  				staticDLength[i] = 5;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: distTree    = new Tree(this' DIST_NUM' 1' 15);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree      = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree      = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(distTree.numCodes - 1' 5);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: for (int rank = 0; rank < blTreeCodes; rank++) {  				pending.WriteBits(blTree.length[BL_ORDER[rank]]' 3);  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (int i = 0; i < last_lit; i++) {  				int litlen = l_buf[i] & 0xff;  				int dist = d_buf[i];  				if (dist-- != 0) {  					//					if (DeflaterConstants.DEBUGGING) {  					//						Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");  					//					}  					  					int lc = Lcode(litlen);  					literalTree.WriteSymbol(lc);  					  					int bits = (lc - 261) / 4;  					if (bits > 0 && bits <= 5) {  						pending.WriteBits(litlen & ((1 << bits) - 1)' bits);  					}  					  					int dc = Dcode(dist);  					distTree.WriteSymbol(dc);  					  					bits = dc / 2 - 1;  					if (bits > 0) {  						pending.WriteBits(dist & ((1 << bits) - 1)' bits);  					}  				} else {  					//					if (DeflaterConstants.DEBUGGING) {  					//						if (litlen > 32 && litlen < 127) {  					//							Console.Write("("+(char)litlen+"): ");  					//						} else {  					//							Console.Write("{"+litlen+"}: ");  					//						}  					//					}  					literalTree.WriteSymbol(litlen);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (int i = 0; i < last_lit; i++) {  				int litlen = l_buf[i] & 0xff;  				int dist = d_buf[i];  				if (dist-- != 0) {  					//					if (DeflaterConstants.DEBUGGING) {  					//						Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");  					//					}  					  					int lc = Lcode(litlen);  					literalTree.WriteSymbol(lc);  					  					int bits = (lc - 261) / 4;  					if (bits > 0 && bits <= 5) {  						pending.WriteBits(litlen & ((1 << bits) - 1)' bits);  					}  					  					int dc = Dcode(dist);  					distTree.WriteSymbol(dc);  					  					bits = dc / 2 - 1;  					if (bits > 0) {  						pending.WriteBits(dist & ((1 << bits) - 1)' bits);  					}  				} else {  					//					if (DeflaterConstants.DEBUGGING) {  					//						if (litlen > 32 && litlen < 127) {  					//							Console.Write("("+(char)litlen+"): ");  					//						} else {  					//							Console.Write("{"+litlen+"}: ");  					//						}  					//					}  					literalTree.WriteSymbol(litlen);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (int i = 0; i < last_lit; i++) {  				int litlen = l_buf[i] & 0xff;  				int dist = d_buf[i];  				if (dist-- != 0) {  					//					if (DeflaterConstants.DEBUGGING) {  					//						Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");  					//					}  					  					int lc = Lcode(litlen);  					literalTree.WriteSymbol(lc);  					  					int bits = (lc - 261) / 4;  					if (bits > 0 && bits <= 5) {  						pending.WriteBits(litlen & ((1 << bits) - 1)' bits);  					}  					  					int dc = Dcode(dist);  					distTree.WriteSymbol(dc);  					  					bits = dc / 2 - 1;  					if (bits > 0) {  						pending.WriteBits(dist & ((1 << bits) - 1)' bits);  					}  				} else {  					//					if (DeflaterConstants.DEBUGGING) {  					//						if (litlen > 32 && litlen < 127) {  					//							Console.Write("("+(char)litlen+"): ");  					//						} else {  					//							Console.Write("{"+litlen+"}: ");  					//						}  					//					}  					literalTree.WriteSymbol(litlen);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (int i = 0; i < last_lit; i++) {  				int litlen = l_buf[i] & 0xff;  				int dist = d_buf[i];  				if (dist-- != 0) {  					//					if (DeflaterConstants.DEBUGGING) {  					//						Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");  					//					}  					  					int lc = Lcode(litlen);  					literalTree.WriteSymbol(lc);  					  					int bits = (lc - 261) / 4;  					if (bits > 0 && bits <= 5) {  						pending.WriteBits(litlen & ((1 << bits) - 1)' bits);  					}  					  					int dc = Dcode(dist);  					distTree.WriteSymbol(dc);  					  					bits = dc / 2 - 1;  					if (bits > 0) {  						pending.WriteBits(dist & ((1 << bits) - 1)' bits);  					}  				} else {  					//					if (DeflaterConstants.DEBUGGING) {  					//						if (litlen > 32 && litlen < 127) {  					//							Console.Write("("+(char)litlen+"): ");  					//						} else {  					//							Console.Write("{"+litlen+"}: ");  					//						}  					//					}  					literalTree.WriteSymbol(litlen);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushStoredBlock,The following statement contains a magic number: pending.WriteBits((DeflaterConstants.STORED_BLOCK << 1) + (lastBlock ? 1 : 0)' 3);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int blTreeCodes = 4;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: for (int i = 18; i > blTreeCodes; i--) {  				if (blTree.length[BL_ORDER[i]] > 0) {  					blTreeCodes = i+1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes * 3 + blTree.GetEncodedLength() +   				literalTree.GetEncodedLength() + distTree.GetEncodedLength() +   				extra_bits;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes * 3 + blTree.GetEncodedLength() +   				literalTree.GetEncodedLength() + distTree.GetEncodedLength() +   				extra_bits;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {  				// Store Block    				//				if (DeflaterConstants.DEBUGGING) {  				//					//Console.WriteLine("Storing' since " + storedLength + " < " + opt_len  				//					                  + " <= " + static_len);  				//				}  				FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);  			} else if (opt_len == static_len) {  				// Encode with static tree  				pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				literalTree.SetStaticCodes(staticLCodes' staticLLength);  				distTree.SetStaticCodes(staticDCodes' staticDLength);  				CompressBlock();  				Reset();  			} else {  				// Encode with dynamic tree  				pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				SendAllTrees(blTreeCodes);  				CompressBlock();  				Reset();  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {  				// Store Block    				//				if (DeflaterConstants.DEBUGGING) {  				//					//Console.WriteLine("Storing' since " + storedLength + " < " + opt_len  				//					                  + " <= " + static_len);  				//				}  				FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);  			} else if (opt_len == static_len) {  				// Encode with static tree  				pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				literalTree.SetStaticCodes(staticLCodes' staticLLength);  				distTree.SetStaticCodes(staticDCodes' staticDLength);  				CompressBlock();  				Reset();  			} else {  				// Encode with dynamic tree  				pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				SendAllTrees(blTreeCodes);  				CompressBlock();  				Reset();  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {  				// Store Block    				//				if (DeflaterConstants.DEBUGGING) {  				//					//Console.WriteLine("Storing' since " + storedLength + " < " + opt_len  				//					                  + " <= " + static_len);  				//				}  				FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);  			} else if (opt_len == static_len) {  				// Encode with static tree  				pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				literalTree.SetStaticCodes(staticLCodes' staticLLength);  				distTree.SetStaticCodes(staticDCodes' staticDLength);  				CompressBlock();  				Reset();  			} else {  				// Encode with dynamic tree  				pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				SendAllTrees(blTreeCodes);  				CompressBlock();  				Reset();  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {  				// Store Block    				//				if (DeflaterConstants.DEBUGGING) {  				//					//Console.WriteLine("Storing' since " + storedLength + " < " + opt_len  				//					                  + " <= " + static_len);  				//				}  				FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);  			} else if (opt_len == static_len) {  				// Encode with static tree  				pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				literalTree.SetStaticCodes(staticLCodes' staticLLength);  				distTree.SetStaticCodes(staticDCodes' staticDLength);  				CompressBlock();  				Reset();  			} else {  				// Encode with dynamic tree  				pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				SendAllTrees(blTreeCodes);  				CompressBlock();  				Reset();  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: l_buf[last_lit++] = (byte)(length - 3);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: int lc = Lcode(length - 3);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285) {  				extra_bits += (lc - 261) / 4;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285) {  				extra_bits += (lc - 261) / 4;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285) {  				extra_bits += (lc - 261) / 4;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285) {  				extra_bits += (lc - 261) / 4;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (dc >= 4) {  				extra_bits += dc / 2 - 1;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (dc >= 4) {  				extra_bits += dc / 2 - 1;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: if (length == 255) {  				return 285;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: if (length == 255) {  				return 285;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: int code = 257;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: while (length >= 8) {  				code += 4;  				length >>= 1;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: while (length >= 8) {  				code += 4;  				length >>= 1;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: while (distance >= 4) {  				code += 2;  				distance >>= 1;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: while (distance >= 4) {  				code += 2;  				distance >>= 1;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: for (int bits = 0; bits < maxLength; bits++) {  					nextCode[bits] = code;  					code += bl_counts[bits] << (15 - bits);    					//					if (DeflaterConstants.DEBUGGING) {  					//						//Console.WriteLine("bits: " + ( bits + 1) + " count: " + bl_counts[bits]  					//						                  +" nextCode: "+code);  					//					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: for (int i=0; i < numCodes; i++) {  					int bits = length[i];  					if (bits > 0) {    						//						if (DeflaterConstants.DEBUGGING) {  						//								//Console.WriteLine("codes["+i+"] = rev(" + nextCode[bits-1]+")'  						//								                  +bits);  						//						}    						codes[i] = BitReverse(nextCode[bits-1]);  						nextCode[bits-1] += 1 << (16 - bits);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (int n = 0; n < numSymbols; n++) {  					int freq = freqs[n];  					if (freq != 0) {  						// Insert n into heap  						int pos = heapLen++;  						int ppos;  						while (pos > 0 && freqs[heap[ppos = (pos - 1) / 2]] > freq) {  							heap[pos] = heap[ppos];  							pos = ppos;  						}  						heap[pos] = n;  						  						maxCode = n;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: while (heapLen < 2) {  					int node = maxCode < 2 ? ++maxCode : 0;  					heap[heapLen++] = node;  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: while (heapLen < 2) {  					int node = maxCode < 2 ? ++maxCode : 0;  					heap[heapLen++] = node;  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] childs = new int[4 * heapLen - 2];
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] childs = new int[4 * heapLen - 2];
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] values = new int[2 * heapLen - 1];
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < heapLen; i++) {  					int node = heap[i];  					childs[2 * i]   = node;  					childs[2 * i + 1] = -1;  					values[i] = freqs[node] << 8;  					heap[i] = i;  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < heapLen; i++) {  					int node = heap[i];  					childs[2 * i]   = node;  					childs[2 * i + 1] = -1;  					values[i] = freqs[node] << 8;  					heap[i] = i;  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < heapLen; i++) {  					int node = heap[i];  					childs[2 * i]   = node;  					childs[2 * i + 1] = -1;  					values[i] = freqs[node] << 8;  					heap[i] = i;  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: if (heap[0] != childs.Length / 2 - 1) {  					throw new SharpZipBaseException("Heap invariant violated");  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numNodes = childs.Length / 2;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numLeafs = (numNodes + 1) / 2;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int i = numNodes - 1; i >= 0; i--) {  					if (childs[2 * i + 1] != -1) {  						int bitLength = lengths[i] + 1;  						if (bitLength > maxLength) {  							bitLength = maxLength;  							overflow++;  						}  						lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;  					} else {  						// A leaf node  						int bitLength = lengths[i];  						bl_counts[bitLength - 1]++;  						this.length[childs[2*i]] = (byte) lengths[i];  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int i = numNodes - 1; i >= 0; i--) {  					if (childs[2 * i + 1] != -1) {  						int bitLength = lengths[i] + 1;  						if (bitLength > maxLength) {  							bitLength = maxLength;  							overflow++;  						}  						lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;  					} else {  						// A leaf node  						int bitLength = lengths[i];  						bl_counts[bitLength - 1]++;  						this.length[childs[2*i]] = (byte) lengths[i];  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int i = numNodes - 1; i >= 0; i--) {  					if (childs[2 * i + 1] != -1) {  						int bitLength = lengths[i] + 1;  						if (bitLength > maxLength) {  							bitLength = maxLength;  							overflow++;  						}  						lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;  					} else {  						// A leaf node  						int bitLength = lengths[i];  						bl_counts[bitLength - 1]++;  						this.length[childs[2*i]] = (byte) lengths[i];  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int i = numNodes - 1; i >= 0; i--) {  					if (childs[2 * i + 1] != -1) {  						int bitLength = lengths[i] + 1;  						if (bitLength > maxLength) {  							bitLength = maxLength;  							overflow++;  						}  						lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;  					} else {  						// A leaf node  						int bitLength = lengths[i];  						bl_counts[bitLength - 1]++;  						this.length[childs[2*i]] = (byte) lengths[i];  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: bl_counts[maxLength-2] -= overflow;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int nodePtr = 2 * numLeafs;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Tree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int bits = maxLength; bits != 0; bits--) {  					int n = bl_counts[bits-1];  					while (n > 0) {  						int childPtr = 2*childs[nodePtr++];  						if (childs[childPtr + 1] == -1) {  							// We found another leaf  							length[childs[childPtr]] = (byte) bits;  							n--;  						}  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: int header = input.PeekBits(16);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: input.DropBits(16);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if (header % 31 != 0) {  				throw new SharpZipBaseException("Header checksum illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if ((header & 0x0f00) != (Deflater.DEFLATED << 8)) {  				throw new SharpZipBaseException("Compression Method unknown");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if ((header & 0x0020) == 0) { // Dictionary flag?  				mode = DECODE_BLOCKS;  			} else {  				mode = DECODE_DICT;  				neededBits = 32;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0) {  				int dictByte = input.PeekBits(8);  				if (dictByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | dictByte;  				neededBits -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0) {  				int dictByte = input.PeekBits(8);  				if (dictByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | dictByte;  				neededBits -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0) {  				int dictByte = input.PeekBits(8);  				if (dictByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | dictByte;  				neededBits -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0) {  				int dictByte = input.PeekBits(8);  				if (dictByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | dictByte;  				neededBits -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0) {  				int chkByte = input.PeekBits(8);  				if (chkByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | chkByte;  				neededBits -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0) {  				int chkByte = input.PeekBits(8);  				if (chkByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | chkByte;  				neededBits -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0) {  				int chkByte = input.PeekBits(8);  				if (chkByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | chkByte;  				neededBits -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0) {  				int chkByte = input.PeekBits(8);  				if (chkByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | chkByte;  				neededBits -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Inflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}  				}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treeSize = 512;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = 1; bits <= MAX_BITLEN; bits++) {  				nextCode[bits] = code;  				code += blCount[bits] << (16 - bits);  				if (bits >= 10) {  					/* We need an extra table for bit lengths >= 10. */  					int start = nextCode[bits] & 0x1ff80;  					int end   = code & 0x1ff80;  					treeSize += (end - start) >> (16 - bits);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = 1; bits <= MAX_BITLEN; bits++) {  				nextCode[bits] = code;  				code += blCount[bits] << (16 - bits);  				if (bits >= 10) {  					/* We need an extra table for bit lengths >= 10. */  					int start = nextCode[bits] & 0x1ff80;  					int end   = code & 0x1ff80;  					treeSize += (end - start) >> (16 - bits);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = 1; bits <= MAX_BITLEN; bits++) {  				nextCode[bits] = code;  				code += blCount[bits] << (16 - bits);  				if (bits >= 10) {  					/* We need an extra table for bit lengths >= 10. */  					int start = nextCode[bits] & 0x1ff80;  					int end   = code & 0x1ff80;  					treeSize += (end - start) >> (16 - bits);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treePtr = 512;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteShort,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 16));
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 24));
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: if (bitCount > 0)   			{  				buffer_[end++] = unchecked((byte) bits);  				if (bitCount > 8) {  					buffer_[end++] = unchecked((byte) (bits >> 8));  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: if (bitCount > 0)   			{  				buffer_[end++] = unchecked((byte) bits);  				if (bitCount > 8) {  					buffer_[end++] = unchecked((byte) (bits >> 8));  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (bitCount >= 16) {  				buffer_[end++] = unchecked((byte) bits);  				buffer_[end++] = unchecked((byte) (bits >> 8));  				bits >>= 16;  				bitCount -= 16;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (bitCount >= 16) {  				buffer_[end++] = unchecked((byte) bits);  				buffer_[end++] = unchecked((byte) (bits >> 8));  				bits >>= 16;  				bitCount -= 16;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (bitCount >= 16) {  				buffer_[end++] = unchecked((byte) bits);  				buffer_[end++] = unchecked((byte) (bits >> 8));  				bits >>= 16;  				bitCount -= 16;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (bitCount >= 16) {  				buffer_[end++] = unchecked((byte) bits);  				buffer_[end++] = unchecked((byte) (bits >> 8));  				bits >>= 16;  				bitCount -= 16;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,WriteShortMSB,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (s >> 8));
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (bitCount >= 8) {  				buffer_[end++] = unchecked((byte) bits);  				bits >>= 8;  				bitCount -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (bitCount >= 8) {  				buffer_[end++] = unchecked((byte) bits);  				bits >>= 8;  				bitCount -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (bitCount >= 8) {  				buffer_[end++] = unchecked((byte) bits);  				bits >>= 8;  				bitCount -= 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflater,The following statement contains a magic number: if (level == DEFAULT_COMPRESSION) {  				level = 6;  			} else if (level < NO_COMPRESSION || level > BEST_COMPRESSION) {  				throw new ArgumentOutOfRangeException("level");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,SetLevel,The following statement contains a magic number: if (level == DEFAULT_COMPRESSION) {  				level = 6;  			} else if (level < NO_COMPRESSION || level > BEST_COMPRESSION) {  				throw new ArgumentOutOfRangeException("level");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression,Deflater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: if ( bufferSize < 1024 ) {  				bufferSize = 1024;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: if ( bufferSize < 1024 ) {  				bufferSize = 1024;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeShort,The following statement contains a magic number: return ReadLeByte() | (ReadLeByte() << 8);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeInt,The following statement contains a magic number: return ReadLeShort() | (ReadLeShort() << 16);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeLong,The following statement contains a magic number: return (uint)ReadLeInt() | ((long)ReadLeInt() << 32);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,InflaterInputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\InflaterInputStream.cs,Skip,The following statement contains a magic number: if (baseInputStream.CanSeek)   			{  				baseInputStream.Seek(count' SeekOrigin.Current);  				return count;  			}   			else   			{  				int len = 2048;  				if (count < len)   				{  					len = (int) count;  				}  				byte[] tmp = new byte[len];  				return (long)baseInputStream.Read(tmp' 0' tmp.Length);  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: if (bitsInBuffer_ < bitCount) {  				if (windowStart_ == windowEnd_) {  					return -1; // ok  				}  				buffer_ |= (uint)((window_[windowStart_++] & 0xff |  				                 (window_[windowStart_++] & 0xff) << 8) << bitsInBuffer_);  				bitsInBuffer_ += 16;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: if (bitsInBuffer_ < bitCount) {  				if (windowStart_ == windowEnd_) {  					return -1; // ok  				}  				buffer_ |= (uint)((window_[windowStart_++] & 0xff |  				                 (window_[windowStart_++] & 0xff) << 8) << bitsInBuffer_);  				bitsInBuffer_ += 16;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: buffer_ >>= (bitsInBuffer_ & 7);
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: bitsInBuffer_ &= ~7;
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: if ((bitsInBuffer_ & 7) != 0) {  				// bits_in_buffer may only be 0 or a multiple of 8  				throw new InvalidOperationException("Bit buffer is not byte aligned!");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: while ((bitsInBuffer_ > 0) && (length > 0)) {  				output[offset++] = (byte) buffer_;  				buffer_ >>= 8;  				bitsInBuffer_ -= 8;  				length--;  				count++;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: while ((bitsInBuffer_ > 0) && (length > 0)) {  				output[offset++] = (byte) buffer_;  				buffer_ >>= 8;  				bitsInBuffer_ -= 8;  				length--;  				count++;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: if (((windowStart_ - windowEnd_) & 1) != 0) {  				// We always want an even number of bytes in input' see peekBits  				buffer_ = (uint)(window_[windowStart_++] & 0xff);  				bitsInBuffer_ = 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\Streams\StreamManipulator.cs,SetInput,The following statement contains a magic number: if ((count & 1) != 0) {  				// We always want an even number of bytes in input' see PeekBits  				buffer_ |= (uint)((buffer[offset++] & 0xff) << bitsInBuffer_);  				bitsInBuffer_ += 8;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,FastZip,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\FastZip.cs,AddFileContents,The following statement contains a magic number: if (buffer_ == null)  			{  				buffer_ = new byte[4096];  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,FastZip,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\FastZip.cs,ExtractFileEntry,The following statement contains a magic number: if (proceed)  			{  				if (events_ != null)  				{  					continueRunning_ = events_.OnProcessFile(entry.Name);  				}    				if (continueRunning_)  				{  					try  					{  						using (FileStream outputStream = File.Create(targetName))  						{  							if (buffer_ == null)  							{  								buffer_ = new byte[4096];  							}  							if ((events_ != null) && (events_.Progress != null))  							{  								StreamUtils.Copy(zipFile_.GetInputStream(entry)' outputStream' buffer_'  									events_.Progress' events_.ProgressInterval' this' entry.Name);  							}  							else  							{  								StreamUtils.Copy(zipFile_.GetInputStream(entry)' outputStream' buffer_);  							}    							if (events_ != null)  							{  								continueRunning_ = events_.OnCompletedFile(entry.Name);  							}  						}    #if !NETCF_1_0 && !NETCF_2_0  						if (restoreDateTimeOnExtract_)  						{  							File.SetLastWriteTime(targetName' entry.DateTime);  						}    						if (RestoreAttributesOnExtract && entry.IsDOSEntry && (entry.ExternalFileAttributes != -1))  						{  							FileAttributes fileAttributes = (FileAttributes)entry.ExternalFileAttributes;  							// TODO: FastZip - Setting of other file attributes on extraction is a little trickier.  							fileAttributes &= (FileAttributes.Archive | FileAttributes.Normal | FileAttributes.ReadOnly | FileAttributes.Hidden);  							File.SetAttributes(targetName' fileAttributes);  						}  #endif  					}  					catch (Exception ex)  					{  						if (events_ != null)  						{  							continueRunning_ = events_.OnFileFailure(targetName' ex);  						}  						else  						{  							continueRunning_ = false;  						}  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ZipEntry,The following statement contains a magic number: if ( (versionRequiredToExtract != 0) && (versionRequiredToExtract < 10) ) {  				throw new ArgumentOutOfRangeException("versionRequiredToExtract");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(0x0001) ) {  				if ( (versionToExtract & 0xff) < ZipConstants.VersionZip64 ) {  					throw new ZipException("Zip64 Extended information found but version is not valid");  				}    				// The recorded size will change but remember that this is zip64.  				forceZip64_ = true;    				if ( extraData.ValueLength < 4 ) {  					throw new ZipException("Extra data extended Zip64 information length is invalid");  				}    				if ( localHeader || (size == uint.MaxValue) ) {  					size = (ulong)extraData.ReadLong();  				}    				if ( localHeader || (compressedSize == uint.MaxValue) ) {  					compressedSize = (ulong)extraData.ReadLong();  				}    				if ( !localHeader && (offset == uint.MaxValue) ) {  					offset = extraData.ReadLong();  				}  			}  			else {  				if (   					((versionToExtract & 0xff) >= ZipConstants.VersionZip64) &&  					((size == uint.MaxValue) || (compressedSize == uint.MaxValue))  				) {  					throw new ZipException("Zip64 Extended information required but is missing.");  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 8 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 8 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 8 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 8 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 8 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntry,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 8 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipEntryFactory,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipEntryFactory.cs,MakeDirectoryEntry,The following statement contains a magic number: externalAttributes |= (setAttributes_ | 16);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				// bit 0           if set' modification time is present  				// bit 1           if set' access time is present  				// bit 2           if set' creation time is present  				  				flags_ = (Flags)helperStream.ReadByte();  				if (((flags_ & Flags.ModificationTime) != 0) && (count >= 5))  				{  					int iTime = helperStream.ReadLEInt();    					modificationTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}    				if ((flags_ & Flags.AccessTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					lastAccessTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  				  				if ((flags_ & Flags.CreateTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					createTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				// bit 0           if set' modification time is present  				// bit 1           if set' access time is present  				// bit 2           if set' creation time is present  				  				flags_ = (Flags)helperStream.ReadByte();  				if (((flags_ & Flags.ModificationTime) != 0) && (count >= 5))  				{  					int iTime = helperStream.ReadLEInt();    					modificationTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}    				if ((flags_ & Flags.AccessTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					lastAccessTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  				  				if ((flags_ & Flags.CreateTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					createTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				// bit 0           if set' modification time is present  				// bit 1           if set' access time is present  				// bit 2           if set' creation time is present  				  				flags_ = (Flags)helperStream.ReadByte();  				if (((flags_ & Flags.ModificationTime) != 0) && (count >= 5))  				{  					int iTime = helperStream.ReadLEInt();    					modificationTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}    				if ((flags_ & Flags.AccessTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					lastAccessTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  				  				if ((flags_ & Flags.CreateTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					createTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				// bit 0           if set' modification time is present  				// bit 1           if set' access time is present  				// bit 2           if set' creation time is present  				  				flags_ = (Flags)helperStream.ReadByte();  				if (((flags_ & Flags.ModificationTime) != 0) && (count >= 5))  				{  					int iTime = helperStream.ReadLEInt();    					modificationTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}    				if ((flags_ & Flags.AccessTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					lastAccessTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  				  				if ((flags_ & Flags.CreateTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					createTime_ = (new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.IsStreamOwner = false;  				helperStream.WriteByte((byte)flags_);     // Flags  				if ( (flags_ & Flags.ModificationTime) != 0) {  					TimeSpan span = modificationTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (flags_ & Flags.AccessTime) != 0) {  					TimeSpan span = lastAccessTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (flags_ & Flags.CreateTime) != 0) {  					TimeSpan span = createTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				return ms.ToArray();  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.IsStreamOwner = false;  				helperStream.WriteByte((byte)flags_);     // Flags  				if ( (flags_ & Flags.ModificationTime) != 0) {  					TimeSpan span = modificationTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (flags_ & Flags.AccessTime) != 0) {  					TimeSpan span = lastAccessTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (flags_ & Flags.CreateTime) != 0) {  					TimeSpan span = createTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				return ms.ToArray();  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.IsStreamOwner = false;  				helperStream.WriteByte((byte)flags_);     // Flags  				if ( (flags_ & Flags.ModificationTime) != 0) {  					TimeSpan span = modificationTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (flags_ & Flags.AccessTime) != 0) {  					TimeSpan span = lastAccessTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (flags_ & Flags.CreateTime) != 0) {  					TimeSpan span = createTime_.ToUniversalTime() - new System.DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				return ms.ToArray();  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ExtendedUnixData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICCEmbedded.SharpZipLib.Zip,NTTaggedData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))   			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.ReadLEInt(); // Reserved  				while (helperStream.Position < helperStream.Length)  				{  					int ntfsTag = helperStream.ReadLEShort();  					int ntfsLength = helperStream.ReadLEShort();  					if (ntfsTag == 1)  					{  						if (ntfsLength >= 24)  						{  							long lastModificationTicks = helperStream.ReadLELong();  							lastModificationTime_ = DateTime.FromFileTime(lastModificationTicks);    							long lastAccessTicks = helperStream.ReadLELong();  							lastAccessTime_ = DateTime.FromFileTime(lastAccessTicks);    							long createTimeTicks = helperStream.ReadLELong();  							createTime_ = DateTime.FromFileTime(createTimeTicks);  						}  						break;  					}  					else  					{  						// An unknown NTFS tag so simply skip it.  						helperStream.Seek(ntfsLength' SeekOrigin.Current);  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,NTTaggedData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.IsStreamOwner = false;  				helperStream.WriteLEInt(0);       // Reserved  				helperStream.WriteLEShort(1);     // Tag  				helperStream.WriteLEShort(24);    // Length = 3 x 8.  				helperStream.WriteLELong(lastModificationTime_.ToFileTime());  				helperStream.WriteLELong(lastAccessTime_.ToFileTime());  				helperStream.WriteLELong(createTime_.ToFileTime());  				return ms.ToArray();  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,Find,The following statement contains a magic number: while ( (localTag != headerID) && (index_ < data_.Length - 3) ) {  				localTag = ReadShortInternal();  				localLength = ReadShortInternal();  				if ( localTag != headerID ) {  					index_ += localLength;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: int newLength = data_.Length + addLength + 4;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: if ( Find(headerID) )  			{  				newLength -= (ValueLength + 4);  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,AddLeShort,The following statement contains a magic number: unchecked {  				newEntry_.WriteByte(( byte )toAdd);  				newEntry_.WriteByte(( byte )(toAdd >> 8));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,AddLeInt,The following statement contains a magic number: unchecked {  				AddLeShort(( short )toAdd);  				AddLeShort(( short )(toAdd >> 16));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,AddLeLong,The following statement contains a magic number: unchecked {  				AddLeInt(( int )(toAdd & 0xffffffff));  				AddLeInt(( int )(toAdd >> 32));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if ( Find(headerID) ) {  				result = true;  				int trueStart = readValueStart_ - 4;    				byte[] newData = new byte[data_.Length - (ValueLength + 4)];  				Array.Copy(data_' 0' newData' 0' trueStart);    				int trueEnd = trueStart + ValueLength + 4;  				Array.Copy(data_' trueEnd' newData' trueStart' data_.Length - trueEnd);  				data_ = newData;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if ( Find(headerID) ) {  				result = true;  				int trueStart = readValueStart_ - 4;    				byte[] newData = new byte[data_.Length - (ValueLength + 4)];  				Array.Copy(data_' 0' newData' 0' trueStart);    				int trueEnd = trueStart + ValueLength + 4;  				Array.Copy(data_' trueEnd' newData' trueStart' data_.Length - trueEnd);  				data_ = newData;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if ( Find(headerID) ) {  				result = true;  				int trueStart = readValueStart_ - 4;    				byte[] newData = new byte[data_.Length - (ValueLength + 4)];  				Array.Copy(data_' 0' newData' 0' trueStart);    				int trueEnd = trueStart + ValueLength + 4;  				Array.Copy(data_' trueEnd' newData' trueStart' data_.Length - trueEnd);  				data_ = newData;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: ReadCheck(8);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: return (ReadInt() & 0xffffffff) | ((( long )ReadInt()) << 32);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: ReadCheck(4);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = data_[index_] + (data_[index_ + 1] << 8) +   				(data_[index_ + 2] << 16) + (data_[index_ + 3] << 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = data_[index_] + (data_[index_ + 1] << 8) +   				(data_[index_ + 2] << 16) + (data_[index_ + 3] << 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = data_[index_] + (data_[index_ + 1] << 8) +   				(data_[index_ + 2] << 16) + (data_[index_ + 3] << 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = data_[index_] + (data_[index_ + 1] << 8) +   				(data_[index_ + 2] << 16) + (data_[index_ + 3] << 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = data_[index_] + (data_[index_ + 1] << 8) +   				(data_[index_ + 2] << 16) + (data_[index_ + 3] << 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: index_ += 4;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: ReadCheck(2);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: int result = data_[index_] + (data_[index_ + 1] << 8);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: index_ += 2;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadCheck,The following statement contains a magic number: if ((readValueStart_ > data_.Length) ||  				(readValueStart_ < 4) ) {  				throw new ZipException("Find must be called before calling a Read method");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: if ( index_ > data_.Length - 2) {  				throw new ZipException("End of extra data");  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: int result = data_[index_] + (data_[index_ + 1] << 8);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: index_ += 2;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: data_[index + 1] = (byte)(source >> 8);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipExtraData,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: index += 2;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestArchive,The following statement contains a magic number: try {  				int entryIndex = 0;    				while ( testing && (entryIndex < Count) ) {  					if ( resultHandler != null ) {  						status.SetEntry(this[entryIndex]);  						status.SetOperation(TestOperation.EntryHeader);  						resultHandler(status' null);  					}    					try	{  						TestLocalHeader(this[entryIndex]' test);  					}  					catch(ZipException ex) {  						status.AddError();    						if ( resultHandler != null ) {  							resultHandler(status'  								string.Format("Exception during test - '{0}'"' ex.Message));  						}    						if ( strategy == TestStrategy.FindFirstError ) {  							testing = false;   						}  					}    					if ( testing && testData && this[entryIndex].IsFile ) {  						if ( resultHandler != null ) {  							status.SetOperation(TestOperation.EntryData);  							resultHandler(status' null);  						}    						Stream entryStream = this.GetInputStream(this[entryIndex]);  						  						Crc32 crc = new Crc32();  						byte[] buffer = new byte[4096];  						long totalBytes = 0;  						int bytesRead;  						while ((bytesRead = entryStream.Read(buffer' 0' buffer.Length)) > 0) {  							crc.Update(buffer' 0' bytesRead);    							if ( resultHandler != null ) {  								totalBytes += bytesRead;  								status.SetBytesTested(totalBytes);  								resultHandler(status' null);  							}  						}  	  						if (this[entryIndex].Crc != crc.Value) {  							status.AddError();  							  							if ( resultHandler != null ) {  								resultHandler(status' "CRC mismatch");  							}    							if ( strategy == TestStrategy.FindFirstError ) {  								testing = false;  							}  						}    						if (( this[entryIndex].Flags & (int)GeneralBitFlags.Descriptor) != 0 ) {  							ZipHelperStream helper = new ZipHelperStream(baseStream_);  							DescriptorData data = new DescriptorData();  							helper.ReadDataDescriptor(this[entryIndex].LocalHeaderRequiresZip64' data);  							if (this[entryIndex].Crc != data.Crc) {  								status.AddError();  							}    							if (this[entryIndex].CompressedSize != data.CompressedSize) {  								status.AddError();  							}    							if (this[entryIndex].Size != data.Size) {  								status.AddError();  							}  						}  					}    					if ( resultHandler != null ) {  						status.SetOperation(TestOperation.EntryComplete);  						resultHandler(status' null);  					}    					entryIndex += 1;  				}    				if ( resultHandler != null ) {  					status.SetOperation(TestOperation.MiscellaneousTests);  					resultHandler(status' null);  				}    				// TODO: the 'Corrina Johns' test where local headers are missing from  				// the central directory.  They are therefore invisible to many archivers.  			}  			catch (Exception ex) {  				status.AddError();    				if ( resultHandler != null ) {  					resultHandler(status' string.Format("Exception during test - '{0}'"' ex.Message));  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short )ReadLEUshort();  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData ed = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (ed.Find(1))  				{  					// TODO Check for tag values being distinct..  Multiple zip64 tags means what?    					// Zip64 extra data but 'extract version' is too low  					if (extractVersion < ZipConstants.VersionZip64)  					{  						throw new ZipException(  							string.Format("Extra data contains Zip64 information but version {0}.{1} is not high enough"'  							extractVersion / 10' extractVersion % 10));  					}    					// Zip64 extra data but size fields dont indicate its required.  					if (((uint)size != uint.MaxValue) && ((uint)compressedSize != uint.MaxValue))  					{  						throw new ZipException("Entry sizes not correct for Zip64");  					}    					size = ed.ReadLong();  					compressedSize = ed.ReadLong();  				}  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}    				if ( testHeader ) {  					if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..  						(extractVersion != 10) &&  						(extractVersion != 11) &&  						(extractVersion != 20) &&  						(extractVersion != 21) &&  						(extractVersion != 25) &&  						(extractVersion != 27) &&  						(extractVersion != 45) &&  						(extractVersion != 46) &&  						(extractVersion != 50) &&  						(extractVersion != 51) &&  						(extractVersion != 52) &&  						(extractVersion != 61) &&  						(extractVersion != 62) &&  						(extractVersion != 63)  						) {  						throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));  					}    					// Local entry flags dont have reserved bit set on.  					if ( (localFlags & ( int )(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0 ) {  						throw new ZipException("Reserved bit flags cannot be set.");  					}    					// Encryption requires extract version >= 20  					if ( ((localFlags & ( int )GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20) ) {  						throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  					}    					// Strong encryption requires encryption flag to be set and extract version >= 50.  					if ( (localFlags & (int)GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( (localFlags & (int)GeneralBitFlags.Encrypted) == 0 ) {  							throw new ZipException("Strong encryption flag set but encryption flag is not set");  						}    						if ( extractVersion < 50 ) {  							throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));  						}  					}    					// Patched entries require extract version >= 27  					if ( ((localFlags & ( int )GeneralBitFlags.Patched) != 0) && (extractVersion < 27) ) {  						throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));  					}    					// Central header flags match local entry flags.  					if ( localFlags != entry.Flags ) {  						throw new ZipException("Central header/local header flags mismatch");  					}    					// Central header compression method matches local entry  					if ( entry.CompressionMethod != ( CompressionMethod )compressionMethod ) {  						throw new ZipException("Central header/local header compression method mismatch");  					}    					// Strong encryption and extract version match  					if ( (localFlags & ( int )GeneralBitFlags.StrongEncryption) != 0 ) {  						if ( extractVersion < 62 ) {  							throw new ZipException("Strong encryption flag set but version not high enough");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.HeaderMasked) != 0 ) {  						if ( (fileTime != 0) || (fileDate != 0) ) {  							throw new ZipException("Header masked set but date/time values non-zero");  						}  					}    					if ( (localFlags & ( int )GeneralBitFlags.Descriptor) == 0 ) {  						if ( crcValue != (uint)entry.Crc ) {  							throw new ZipException("Central header/local header crc mismatch");  						}  					}    					// Crc valid for empty entry.  					// This will also apply to streamed entries where size isnt known and the header cant be patched  					if ( (size == 0) && (compressedSize == 0) ) {  						if ( crcValue != 0 ) {  							throw new ZipException("Invalid CRC for empty entry");  						}  					}    					// TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings  					// Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably  					if ( entry.Name.Length > storedNameLength ) {  						throw new ZipException("File name length mismatch");  					}    					// Name data has already been read convert it and compare.  					string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);    					// Central directory and local entry name match  					if ( localName != entry.Name ) {  						throw new ZipException("Central header and local header file name mismatch");  					}    					// Directories have zero size.  					if ( entry.IsDirectory ) {  						if ( (compressedSize != 0) || (size != 0) ) {  							throw new ZipException("Directory cannot have size");  						}  					}    					if ( !ZipNameTransform.IsValidName(localName' true) ) {  						throw new ZipException("Name is invalid");  					}    				}    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0 ||  					(size != 0 || compressedSize != 0)) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteLEShort,The following statement contains a magic number: baseStream_.WriteByte(( byte )((value >> 8) & 0xff));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteLEUshort,The following statement contains a magic number: baseStream_.WriteByte(( byte )(value >> 8));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort((ushort)(value >> 16));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteLeLong,The following statement contains a magic number: WriteLEInt(( int )(value >> 32));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteLEUlong,The following statement contains a magic number: WriteLEUint(( uint )(value >> 32));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteCentralDirectoryHeader,The following statement contains a magic number: if ( entry.ExternalFileAttributes != -1 ) {  				WriteLEInt(entry.ExternalFileAttributes);  			}  			else {  				if ( entry.IsDirectory ) {  					WriteLEUint(16);  				}  				else {  					WriteLEUint(0);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: if ( (update.Entry.Flags & (int)GeneralBitFlags.Descriptor) != 0) {  				result = ZipConstants.DataDescriptorSize - 4;  				if ( update.Entry.LocalHeaderRequiresZip64 ) {  					result = ZipConstants.Zip64DataDescriptorSize - 4;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: if ( (update.Entry.Flags & (int)GeneralBitFlags.Descriptor) != 0) {  				result = ZipConstants.DataDescriptorSize - 4;  				if ( update.Entry.LocalHeaderRequiresZip64 ) {  					result = ZipConstants.Zip64DataDescriptorSize - 4;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,GetOutputStream,The following statement contains a magic number: switch ( entry.CompressionMethod ) {  				case CompressionMethod.Stored:  					result = new UncompressedStream(result);  					break;    				case CompressionMethod.Deflated:  					DeflaterOutputStream dos = new DeflaterOutputStream(result' new Deflater(9' true));  					dos.IsStreamOwner = false;  					result = dos;  					break;    				default:  					throw new ZipException("Unknown compression method " + entry.CompressionMethod);  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,CopyEntryDirect,The following statement contains a magic number: const int NameLengthOffset = 26;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,CopyEntry,The following statement contains a magic number: if ( update.Entry.CompressedSize > 0 ) {  				const int NameLengthOffset = 26;    				long entryDataOffset = update.Entry.Offset + NameLengthOffset;    				// TODO: This wont work for SFX files!  				baseStream_.Seek(entryDataOffset' SeekOrigin.Begin);    				uint nameLength = ReadLEUshort();  				uint extraLength = ReadLEUshort();    				baseStream_.Seek(nameLength + extraLength' SeekOrigin.Current);    				CopyBytes(update' workFile.baseStream_' baseStream_' update.Entry.CompressedSize' false);  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,UpdateCommentOnly,The following statement contains a magic number: using ( updateFile ) {  				long locatedCentralDirOffset =   					updateFile.LocateBlockWithSignature(ZipConstants.EndOfCentralDirectorySignature'   														baseLength' ZipConstants.EndOfCentralRecordBaseSize' 0xffff);  				if ( locatedCentralDirOffset < 0 ) {  					throw new ZipException("Cannot find central directory");  				}    				const int CentralHeaderCommentSizeOffset = 16;  				updateFile.Position += CentralHeaderCommentSizeOffset;    				byte[] rawComment = newComment_.RawComment;    				updateFile.WriteLEShort(rawComment.Length);  				updateFile.Write(rawComment' 0' rawComment.Length);  				updateFile.SetLength(updateFile.Position);  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadLEUshort,The following statement contains a magic number: return unchecked((ushort)((ushort)data1 | (ushort)(data2 << 8)));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadLEUint,The following statement contains a magic number: return (uint)(ReadLEUshort() | (ReadLEUshort() << 16));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadLEUlong,The following statement contains a magic number: return ReadLEUint() | ((ulong)ReadLEUint() << 32);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: if ( !isZip64 && (offsetOfCentralDir < locatedEndOfCentralDir - (4 + (long)centralDirSize)) ) {  				offsetOfFirstEntry = locatedEndOfCentralDir - (4 + (long)centralDirSize + offsetOfCentralDir);  				if (offsetOfFirstEntry <= 0) {  					throw new ZipException("Invalid embedded zip archive");  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: if ( !isZip64 && (offsetOfCentralDir < locatedEndOfCentralDir - (4 + (long)centralDirSize)) ) {  				offsetOfFirstEntry = locatedEndOfCentralDir - (4 + (long)centralDirSize + offsetOfCentralDir);  				if (offsetOfFirstEntry <= 0) {  					throw new ZipException("Invalid embedded zip archive");  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: for (ulong i = 0; i < entriesForThisDisk; i++) {  				if (ReadLEUint() != ZipConstants.CentralHeaderSignature) {  					throw new ZipException("Wrong Central Directory signature");  				}  				  				int versionMadeBy      = ReadLEUshort();  				int versionToExtract   = ReadLEUshort();  				int bitFlags           = ReadLEUshort();  				int method             = ReadLEUshort();  				uint dostime           = ReadLEUint();  				uint crc               = ReadLEUint();  				long csize             = (long)ReadLEUint();  				long size              = (long)ReadLEUint();  				int nameLen            = ReadLEUshort();  				int extraLen           = ReadLEUshort();  				int commentLen         = ReadLEUshort();  				  				int diskStartNo        = ReadLEUshort();  // Not currently used  				int internalAttributes = ReadLEUshort();  // Not currently used    				uint externalAttributes = ReadLEUint();  				long offset             = ReadLEUint();  				  				byte[] buffer = new byte[Math.Max(nameLen' commentLen)];  				  				StreamUtils.ReadFully(baseStream_' buffer' 0' nameLen);  				string name = ZipConstants.ConvertToStringExt(bitFlags' buffer' nameLen);  				  				ZipEntry entry = new ZipEntry(name' versionToExtract' versionMadeBy' (CompressionMethod)method);  				entry.Crc = crc & 0xffffffffL;  				entry.Size = size & 0xffffffffL;  				entry.CompressedSize = csize & 0xffffffffL;  				entry.Flags = bitFlags;  				entry.DosTime = (uint)dostime;  				entry.ZipFileIndex = (long)i;  				entry.Offset = offset;  				entry.ExternalFileAttributes = (int)externalAttributes;    				if ((bitFlags & 8) == 0) {  					entry.CryptoCheckValue = (byte)(crc >> 24);  				}  				else {  					entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  				}    				if (extraLen > 0) {  					byte[] extra = new byte[extraLen];  					StreamUtils.ReadFully(baseStream_' extra);  					entry.ExtraData = extra;  				}    				entry.ProcessExtraData(false);  				  				if (commentLen > 0) {  					StreamUtils.ReadFully(baseStream_' buffer' 0' commentLen);  					entry.Comment = ZipConstants.ConvertToStringExt(bitFlags' buffer' commentLen);  				}  				  				entries_[i] = entry;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: for (ulong i = 0; i < entriesForThisDisk; i++) {  				if (ReadLEUint() != ZipConstants.CentralHeaderSignature) {  					throw new ZipException("Wrong Central Directory signature");  				}  				  				int versionMadeBy      = ReadLEUshort();  				int versionToExtract   = ReadLEUshort();  				int bitFlags           = ReadLEUshort();  				int method             = ReadLEUshort();  				uint dostime           = ReadLEUint();  				uint crc               = ReadLEUint();  				long csize             = (long)ReadLEUint();  				long size              = (long)ReadLEUint();  				int nameLen            = ReadLEUshort();  				int extraLen           = ReadLEUshort();  				int commentLen         = ReadLEUshort();  				  				int diskStartNo        = ReadLEUshort();  // Not currently used  				int internalAttributes = ReadLEUshort();  // Not currently used    				uint externalAttributes = ReadLEUint();  				long offset             = ReadLEUint();  				  				byte[] buffer = new byte[Math.Max(nameLen' commentLen)];  				  				StreamUtils.ReadFully(baseStream_' buffer' 0' nameLen);  				string name = ZipConstants.ConvertToStringExt(bitFlags' buffer' nameLen);  				  				ZipEntry entry = new ZipEntry(name' versionToExtract' versionMadeBy' (CompressionMethod)method);  				entry.Crc = crc & 0xffffffffL;  				entry.Size = size & 0xffffffffL;  				entry.CompressedSize = csize & 0xffffffffL;  				entry.Flags = bitFlags;  				entry.DosTime = (uint)dostime;  				entry.ZipFileIndex = (long)i;  				entry.Offset = offset;  				entry.ExternalFileAttributes = (int)externalAttributes;    				if ((bitFlags & 8) == 0) {  					entry.CryptoCheckValue = (byte)(crc >> 24);  				}  				else {  					entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  				}    				if (extraLen > 0) {  					byte[] extra = new byte[extraLen];  					StreamUtils.ReadFully(baseStream_' extra);  					entry.ExtraData = extra;  				}    				entry.ProcessExtraData(false);  				  				if (commentLen > 0) {  					StreamUtils.ReadFully(baseStream_' buffer' 0' commentLen);  					entry.Comment = ZipConstants.ConvertToStringExt(bitFlags' buffer' commentLen);  				}  				  				entries_[i] = entry;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: for (ulong i = 0; i < entriesForThisDisk; i++) {  				if (ReadLEUint() != ZipConstants.CentralHeaderSignature) {  					throw new ZipException("Wrong Central Directory signature");  				}  				  				int versionMadeBy      = ReadLEUshort();  				int versionToExtract   = ReadLEUshort();  				int bitFlags           = ReadLEUshort();  				int method             = ReadLEUshort();  				uint dostime           = ReadLEUint();  				uint crc               = ReadLEUint();  				long csize             = (long)ReadLEUint();  				long size              = (long)ReadLEUint();  				int nameLen            = ReadLEUshort();  				int extraLen           = ReadLEUshort();  				int commentLen         = ReadLEUshort();  				  				int diskStartNo        = ReadLEUshort();  // Not currently used  				int internalAttributes = ReadLEUshort();  // Not currently used    				uint externalAttributes = ReadLEUint();  				long offset             = ReadLEUint();  				  				byte[] buffer = new byte[Math.Max(nameLen' commentLen)];  				  				StreamUtils.ReadFully(baseStream_' buffer' 0' nameLen);  				string name = ZipConstants.ConvertToStringExt(bitFlags' buffer' nameLen);  				  				ZipEntry entry = new ZipEntry(name' versionToExtract' versionMadeBy' (CompressionMethod)method);  				entry.Crc = crc & 0xffffffffL;  				entry.Size = size & 0xffffffffL;  				entry.CompressedSize = csize & 0xffffffffL;  				entry.Flags = bitFlags;  				entry.DosTime = (uint)dostime;  				entry.ZipFileIndex = (long)i;  				entry.Offset = offset;  				entry.ExternalFileAttributes = (int)externalAttributes;    				if ((bitFlags & 8) == 0) {  					entry.CryptoCheckValue = (byte)(crc >> 24);  				}  				else {  					entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  				}    				if (extraLen > 0) {  					byte[] extra = new byte[extraLen];  					StreamUtils.ReadFully(baseStream_' extra);  					entry.ExtraData = extra;  				}    				entry.ProcessExtraData(false);  				  				if (commentLen > 0) {  					StreamUtils.ReadFully(baseStream_' buffer' 0' commentLen);  					entry.Comment = ZipConstants.ConvertToStringExt(bitFlags' buffer' commentLen);  				}  				  				entries_[i] = entry;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,CreateAndInitEncryptionStream,The following statement contains a magic number: if ( (entry.Version < ZipConstants.VersionStrongEncryption)  				|| (entry.Flags & (int)GeneralBitFlags.StrongEncryption) == 0) {  				PkzipClassicManaged classicManaged = new PkzipClassicManaged();    				OnKeysRequired(entry.Name);  				if (HaveKeys == false) {  					throw new ZipException("No password available for encrypted stream");  				}    				// Closing a CryptoStream will close the base stream as well so wrap it in an UncompressedStream  				// which doesnt do this.  				result = new CryptoStream(new UncompressedStream(baseStream)'  					classicManaged.CreateEncryptor(key' null)' CryptoStreamMode.Write);    				if ( (entry.Crc < 0) || (entry.Flags & 8) != 0) {  					WriteEncryptionHeader(result' entry.DosTime << 16);  				}  				else {  					WriteEncryptionHeader(result' entry.Crc);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,CreateAndInitEncryptionStream,The following statement contains a magic number: if ( (entry.Version < ZipConstants.VersionStrongEncryption)  				|| (entry.Flags & (int)GeneralBitFlags.StrongEncryption) == 0) {  				PkzipClassicManaged classicManaged = new PkzipClassicManaged();    				OnKeysRequired(entry.Name);  				if (HaveKeys == false) {  					throw new ZipException("No password available for encrypted stream");  				}    				// Closing a CryptoStream will close the base stream as well so wrap it in an UncompressedStream  				// which doesnt do this.  				result = new CryptoStream(new UncompressedStream(baseStream)'  					classicManaged.CreateEncryptor(key' null)' CryptoStreamMode.Write);    				if ( (entry.Crc < 0) || (entry.Flags & 8) != 0) {  					WriteEncryptionHeader(result' entry.DosTime << 16);  				}  				else {  					WriteEncryptionHeader(result' entry.Crc);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,MemoryArchiveStorage,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,MakeTemporaryCopy,The following statement contains a magic number: StreamUtils.Copy(stream' temporaryStream_' new byte[4096]);
Magic Number,ICCEmbedded.SharpZipLib.Zip,MemoryArchiveStorage,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,OpenForDirectUpdate,The following statement contains a magic number: if ((stream == null) || !stream.CanWrite) {    				result = new MemoryStream();    				if (stream != null) {  					stream.Position = 0;  					StreamUtils.Copy(stream' result' new byte[4096]);    					stream.Close();  				}  			}  			else {  				result = stream;  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteZip64EndOfCentralDirectory,The following statement contains a magic number: WriteLELong(44);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,ReadLEShort,The following statement contains a magic number: return byteValue1 | (byteValue2 << 8);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,ReadLEInt,The following statement contains a magic number: return ReadLEShort() | (ReadLEShort() << 16);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,ReadLELong,The following statement contains a magic number: return (uint)ReadLEInt() | ((long)ReadLEInt() << 32);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteLEShort,The following statement contains a magic number: stream_.WriteByte(( byte )((value >> 8) & 0xff));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteLEUshort,The following statement contains a magic number: stream_.WriteByte(( byte )(value >> 8));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort(( ushort )(value >> 16));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteLELong,The following statement contains a magic number: WriteLEInt(( int )(value >> 32));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteLEUlong,The following statement contains a magic number: WriteLEUint(( uint )(value >> 32));
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int)GeneralBitFlags.Descriptor) != 0)  			{  				// The signature is not PKZIP originally but is now described as optional  				// in the PKZIP Appnote documenting trhe format.  				WriteLEInt(ZipConstants.DataDescriptorSignature);  				WriteLEInt(unchecked((int)(entry.Crc)));    				result+=8;    				if (entry.LocalHeaderRequiresZip64)  				{  					WriteLELong(entry.CompressedSize);  					WriteLELong(entry.Size);  					result+=16;  				}  				else  				{  					WriteLEInt((int)entry.CompressedSize);  					WriteLEInt((int)entry.Size);  					result+=8;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int)GeneralBitFlags.Descriptor) != 0)  			{  				// The signature is not PKZIP originally but is now described as optional  				// in the PKZIP Appnote documenting trhe format.  				WriteLEInt(ZipConstants.DataDescriptorSignature);  				WriteLEInt(unchecked((int)(entry.Crc)));    				result+=8;    				if (entry.LocalHeaderRequiresZip64)  				{  					WriteLELong(entry.CompressedSize);  					WriteLELong(entry.Size);  					result+=16;  				}  				else  				{  					WriteLEInt((int)entry.CompressedSize);  					WriteLEInt((int)entry.Size);  					result+=8;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipHelperStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int)GeneralBitFlags.Descriptor) != 0)  			{  				// The signature is not PKZIP originally but is now described as optional  				// in the PKZIP Appnote documenting trhe format.  				WriteLEInt(ZipConstants.DataDescriptorSignature);  				WriteLEInt(unchecked((int)(entry.Crc)));    				result+=8;    				if (entry.LocalHeaderRequiresZip64)  				{  					WriteLELong(entry.CompressedSize);  					WriteLELong(entry.Size);  					result+=16;  				}  				else  				{  					WriteLEInt((int)entry.CompressedSize);  					WriteLEInt((int)entry.Size);  					result+=8;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipNameTransform,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: int howMany = invalidPathChars.Length + 2;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipNameTransform,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryCharsRelaxed[howMany - 2] = '?';
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipNameTransform,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: howMany = invalidPathChars.Length + 4;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipNameTransform,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = '\\';
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipNameTransform,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 3] = '*';
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipNameTransform,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 4] = '?';
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,WriteLeShort,The following statement contains a magic number: unchecked {  				baseOutputStream_.WriteByte((byte)(value & 0xff));  				baseOutputStream_.WriteByte((byte)((value >> 8) & 0xff));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,WriteLeInt,The following statement contains a magic number: unchecked {  				WriteLeShort(value);  				WriteLeShort(value >> 16);  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,WriteLeLong,The following statement contains a magic number: unchecked {  				WriteLeInt((int)value);  				WriteLeInt((int)(value >> 32));  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: if (method == CompressionMethod.Stored) {  				// Cant store values in a data descriptor as you cant extract stored files  				// if the length isnt known.  				entry.Flags &= ~8;  				if (entry.CompressedSize >= 0) {  					if (entry.Size < 0) {  						entry.Size = entry.CompressedSize;  					} else if (entry.Size != entry.CompressedSize) {  						throw new ZipException("Method STORED' but compressed size != size");  					}  				} else {  					if (entry.Size >= 0) {  						entry.CompressedSize = entry.Size;  					}  				}  					  				if (entry.Size < 0 || entry.Crc < 0) {  					if (CanPatchEntries == true) {  						headerInfoAvailable = false;  					}  					else {  						// Can't patch entries so storing is not possible.  						method = CompressionMethod.Deflated;  						compressionLevel = 0;  					}  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: if (headerInfoAvailable == false) {  				if (CanPatchEntries == false) {  					// Only way to record size and compressed size is to append a data descriptor  					// after compressed data.  					entry.Flags |= 8;  				} else {  					patchEntryHeader = true;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: if (Password != null) {  				entry.IsCrypted = true;  				if (entry.Crc < 0) {  					// Need to append a data descriptor as the crc isnt available for use  					// with encryption' the date is used instead.  Setting the flag  					// indicates this to the decompressor.  					entry.Flags |= 8;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: if (entry.IsCrypted == true) {  				if (entry.Crc < 0) {			// so testing Zip will says its ok  					WriteEncryptionHeader(entry.DosTime << 16);  				} else {  					WriteEncryptionHeader(entry.Crc);  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,CloseEntry,The following statement contains a magic number: if ((curEntry.Flags & 8) != 0) {  				WriteLeInt(ZipConstants.DataDescriptorSignature);  				WriteLeInt(unchecked((int)curEntry.Crc));  				  				if ( curEntry.LocalHeaderRequiresZip64 ) {  					WriteLeLong(curEntry.CompressedSize);  					WriteLeLong(curEntry.Size);  					offset += ZipConstants.Zip64DataDescriptorSize;  				}  				else {  					WriteLeInt((int)curEntry.CompressedSize);  					WriteLeInt((int)curEntry.Size);  					offset += ZipConstants.DataDescriptorSize;  				}  			}
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,CopyAndEncrypt,The following statement contains a magic number: const int CopyBufferSize = 4096;
Magic Number,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,Finish,The following statement contains a magic number: foreach (ZipEntry entry in entries) {  				WriteLeInt(ZipConstants.CentralHeaderSignature);   				WriteLeShort(ZipConstants.VersionMadeBy);  				WriteLeShort(entry.Version);  				WriteLeShort(entry.Flags);  				WriteLeShort((short)entry.CompressionMethod);  				WriteLeInt((int)entry.DosTime);  				WriteLeInt((int)entry.Crc);    				if ( entry.IsZip64Forced() ||   					(entry.CompressedSize >= uint.MaxValue) )  				{  					WriteLeInt(-1);  				}  				else {  					WriteLeInt((int)entry.CompressedSize);  				}    				if ( entry.IsZip64Forced() ||  					(entry.Size >= uint.MaxValue) )  				{  					WriteLeInt(-1);  				}  				else {  					WriteLeInt((int)entry.Size);  				}    				byte[] name = ZipConstants.ConvertToArray(entry.Flags' entry.Name);  				  				if (name.Length > 0xffff) {  					throw new ZipException("Name too long.");  				}  				  				ZipExtraData ed = new ZipExtraData(entry.ExtraData);    				if ( entry.CentralHeaderRequiresZip64 ) {  					ed.StartNewEntry();  					if ( entry.IsZip64Forced() ||  						(entry.Size >= 0xffffffff) )  					{  						ed.AddLeLong(entry.Size);  					}    					if ( entry.IsZip64Forced() ||  						(entry.CompressedSize >= 0xffffffff) )  					{  						ed.AddLeLong(entry.CompressedSize);  					}    					if ( entry.Offset >= 0xffffffff )  					{  						ed.AddLeLong(entry.Offset);  					}    					ed.AddNewEntry(1);  				}  				else {  					ed.Delete(1);  				}    				byte[] extra = ed.GetEntryData();  				  				byte[] entryComment =   					(entry.Comment != null) ?   					ZipConstants.ConvertToArray(entry.Flags' entry.Comment) :  					new byte[0];    				if (entryComment.Length > 0xffff) {  					throw new ZipException("Comment too long.");  				}  				  				WriteLeShort(name.Length);  				WriteLeShort(extra.Length);  				WriteLeShort(entryComment.Length);  				WriteLeShort(0);	// disk number  				WriteLeShort(0);	// internal file attributes  									// external file attributes    				if (entry.ExternalFileAttributes != -1) {  					WriteLeInt(entry.ExternalFileAttributes);  				} else {  					if (entry.IsDirectory) {                         // mark entry as directory (from nikolam.AT.perfectinfo.com)  						WriteLeInt(16);  					} else {  						WriteLeInt(0);  					}  				}    				if ( entry.Offset >= uint.MaxValue ) {  					WriteLeInt(-1);  				}  				else {  					WriteLeInt((int)entry.Offset);  				}  				  				if ( name.Length > 0 ) {  					baseOutputStream_.Write(name'    0' name.Length);  				}    				if ( extra.Length > 0 ) {  					baseOutputStream_.Write(extra'   0' extra.Length);  				}    				if ( entryComment.Length > 0 ) {  					baseOutputStream_.Write(entryComment' 0' entryComment.Length);  				}    				sizeEntries += ZipConstants.CentralHeaderBaseSize + name.Length + extra.Length + entryComment.Length;  			}
Magic Number,FSLib.App.SimpleUpdater.Wrapper,ExtensionMethod,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\ExtensionMethod.cs,ToSizeDescription,The following statement contains a magic number: return ToSizeDescription(size' 2);
Magic Number,FSLib.App.SimpleUpdater.Wrapper,SlideComponent,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Wrapper\SlideComponent.cs,SlideComponent,The following statement contains a magic number: _timer.Interval = 20;
Magic Number,FSLib.App.SimpleUpdater.UpdateControl,ControlBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\ControlBase.cs,OnLoad,The following statement contains a magic number: if (Program.IsRunning)  			{  				this.Location = new Point(12' 30);  				this.BackColor = Color.Transparent;  				this.Visible = false;  				Size = new Size(216' 88);    				foreach (Control ctl in this.Controls)  				{  					if (ctl is Button) (ctl as Button).ForeColor = SystemColors.ControlText;  				}  			}
Magic Number,FSLib.App.SimpleUpdater.UpdateControl,ControlBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\ControlBase.cs,OnLoad,The following statement contains a magic number: if (Program.IsRunning)  			{  				this.Location = new Point(12' 30);  				this.BackColor = Color.Transparent;  				this.Visible = false;  				Size = new Size(216' 88);    				foreach (Control ctl in this.Controls)  				{  					if (ctl is Button) (ctl as Button).ForeColor = SystemColors.ControlText;  				}  			}
Magic Number,FSLib.App.SimpleUpdater.UpdateControl,ControlBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\ControlBase.cs,OnLoad,The following statement contains a magic number: if (Program.IsRunning)  			{  				this.Location = new Point(12' 30);  				this.BackColor = Color.Transparent;  				this.Visible = false;  				Size = new Size(216' 88);    				foreach (Control ctl in this.Controls)  				{  					if (ctl is Button) (ctl as Button).ForeColor = SystemColors.ControlText;  				}  			}
Magic Number,FSLib.App.SimpleUpdater.UpdateControl,ControlBase,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\ControlBase.cs,OnLoad,The following statement contains a magic number: if (Program.IsRunning)  			{  				this.Location = new Point(12' 30);  				this.BackColor = Color.Transparent;  				this.Visible = false;  				Size = new Size(216' 88);    				foreach (Control ctl in this.Controls)  				{  					if (ctl is Button) (ctl as Button).ForeColor = SystemColors.ControlText;  				}  			}
Magic Number,FSLib.App.SimpleUpdater.UpdateControl,RunUpdate,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\RunUpdate.cs,RunUpdate,The following statement contains a magic number: if (Program.IsRunning)  			{    				//Updater.Instance.DownloadPackage += Instance_DownloadPackage;  				//Updater.Instance.DownloadPackageFinished += Instance_DownloadPackageFinished;  				//Updater.Instance.DownloadProgressChanged += Instance_DownloadProgressChanged;  				//Updater.Instance.InstallUpdates += Instance_InstallUpdates;  				//Updater.Instance.QueryCloseApplication += Instance_QueryCloseApplication;  				//Updater.Instance.VerifyPackage += Instance_VerifyPackage;  				//Updater.Instance.VerifyPackageFinished += Instance_VerifyPackageFinished;    				var u = Updater.Instance;  				u.PackageDownload += (s' e) =>  				{  					if (!Visible)  					{  						HideControls();  						Show();  					}  					StepTitle = FSLib.App.SimpleUpdater.SR.DownloadPackage;  				};  				u.DownloadProgressChanged += (s' e) =>  				{  					var count = u.PackagesToUpdate.Count;  					//var downloading = ExtensionMethod.Count(u.PackagesToUpdate' m => m.IsDownloading);  					var downloaded = ExtensionMethod.Count(u.PackagesToUpdate' m => m.IsDownloaded || m.IsDownloading);  					var totalSize = ExtensionMethod.Sum(u.PackagesToUpdate' m => m.PackageSize);  					var downloadedSize = ExtensionMethod.Sum(u.PackagesToUpdate' m => m.DownloadedSize);    					SetProgress((int)downloadedSize' (int)totalSize);  					StepDesc = string.Format(FSLib.App.SimpleUpdater.SR.DownloadProgress' count' downloaded' ExtensionMethod.ToSizeDescription(downloadedSize)' ExtensionMethod.ToSizeDescription(totalSize));    				};  				u.PackageExtractionBegin += (s' e) =>  				{  					SetProgress(0);    					StepTitle = FSLib.App.SimpleUpdater.SR.ExtractPackage;  					if (e.Package != null)  					{  						StepDesc = e.Package.PackageName;  					}  				};  				u.QueryCloseApplication += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.ClosingApplications;  					StepDesc = string.Empty;  				};  				u.InstallUpdates += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.InstallPackages;  					StepDesc = string.Empty;  				};  				u.FileInstaller.DeleteFileStart += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.DeleteOriginalFiles;  					StepDesc = string.Empty;  				};  				u.FileInstaller.InstallFileStart += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.InstallNewFiles;  					StepDesc = string.Empty;  				};  				u.FileInstaller.DeleteFile += (s' e) =>  				{  					StepDesc = e.Source;  					SetProgress(e.TotalCount > 0 ? Math.Min((int)(e.CurrentCount * 1.0 / e.TotalCount * 100)' 100) : 0' 100);  				};  				u.FileInstaller.InstallFile += (s' e) =>  				{  					StepDesc = e.Source;  					SetProgress(e.CurrentCount' e.TotalCount);  				};  				u.RunExternalProcess += (s' e) =>  				{  					StepTitle = FSLib.App.SimpleUpdater.SR.ExecuteExternal;  					SetProgress(0);  					StepDesc = System.IO.Path.GetFileName(e.ProcessStartInfo.FileName);  				};  			}
Magic Number,FSLib.App.SimpleUpdater.UpdateControl,RunUpdate,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\RunUpdate.cs,RunUpdate,The following statement contains a magic number: if (Program.IsRunning)  			{    				//Updater.Instance.DownloadPackage += Instance_DownloadPackage;  				//Updater.Instance.DownloadPackageFinished += Instance_DownloadPackageFinished;  				//Updater.Instance.DownloadProgressChanged += Instance_DownloadProgressChanged;  				//Updater.Instance.InstallUpdates += Instance_InstallUpdates;  				//Updater.Instance.QueryCloseApplication += Instance_QueryCloseApplication;  				//Updater.Instance.VerifyPackage += Instance_VerifyPackage;  				//Updater.Instance.VerifyPackageFinished += Instance_VerifyPackageFinished;    				var u = Updater.Instance;  				u.PackageDownload += (s' e) =>  				{  					if (!Visible)  					{  						HideControls();  						Show();  					}  					StepTitle = FSLib.App.SimpleUpdater.SR.DownloadPackage;  				};  				u.DownloadProgressChanged += (s' e) =>  				{  					var count = u.PackagesToUpdate.Count;  					//var downloading = ExtensionMethod.Count(u.PackagesToUpdate' m => m.IsDownloading);  					var downloaded = ExtensionMethod.Count(u.PackagesToUpdate' m => m.IsDownloaded || m.IsDownloading);  					var totalSize = ExtensionMethod.Sum(u.PackagesToUpdate' m => m.PackageSize);  					var downloadedSize = ExtensionMethod.Sum(u.PackagesToUpdate' m => m.DownloadedSize);    					SetProgress((int)downloadedSize' (int)totalSize);  					StepDesc = string.Format(FSLib.App.SimpleUpdater.SR.DownloadProgress' count' downloaded' ExtensionMethod.ToSizeDescription(downloadedSize)' ExtensionMethod.ToSizeDescription(totalSize));    				};  				u.PackageExtractionBegin += (s' e) =>  				{  					SetProgress(0);    					StepTitle = FSLib.App.SimpleUpdater.SR.ExtractPackage;  					if (e.Package != null)  					{  						StepDesc = e.Package.PackageName;  					}  				};  				u.QueryCloseApplication += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.ClosingApplications;  					StepDesc = string.Empty;  				};  				u.InstallUpdates += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.InstallPackages;  					StepDesc = string.Empty;  				};  				u.FileInstaller.DeleteFileStart += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.DeleteOriginalFiles;  					StepDesc = string.Empty;  				};  				u.FileInstaller.InstallFileStart += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.InstallNewFiles;  					StepDesc = string.Empty;  				};  				u.FileInstaller.DeleteFile += (s' e) =>  				{  					StepDesc = e.Source;  					SetProgress(e.TotalCount > 0 ? Math.Min((int)(e.CurrentCount * 1.0 / e.TotalCount * 100)' 100) : 0' 100);  				};  				u.FileInstaller.InstallFile += (s' e) =>  				{  					StepDesc = e.Source;  					SetProgress(e.CurrentCount' e.TotalCount);  				};  				u.RunExternalProcess += (s' e) =>  				{  					StepTitle = FSLib.App.SimpleUpdater.SR.ExecuteExternal;  					SetProgress(0);  					StepDesc = System.IO.Path.GetFileName(e.ProcessStartInfo.FileName);  				};  			}
Magic Number,FSLib.App.SimpleUpdater.UpdateControl,RunUpdate,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\RunUpdate.cs,RunUpdate,The following statement contains a magic number: if (Program.IsRunning)  			{    				//Updater.Instance.DownloadPackage += Instance_DownloadPackage;  				//Updater.Instance.DownloadPackageFinished += Instance_DownloadPackageFinished;  				//Updater.Instance.DownloadProgressChanged += Instance_DownloadProgressChanged;  				//Updater.Instance.InstallUpdates += Instance_InstallUpdates;  				//Updater.Instance.QueryCloseApplication += Instance_QueryCloseApplication;  				//Updater.Instance.VerifyPackage += Instance_VerifyPackage;  				//Updater.Instance.VerifyPackageFinished += Instance_VerifyPackageFinished;    				var u = Updater.Instance;  				u.PackageDownload += (s' e) =>  				{  					if (!Visible)  					{  						HideControls();  						Show();  					}  					StepTitle = FSLib.App.SimpleUpdater.SR.DownloadPackage;  				};  				u.DownloadProgressChanged += (s' e) =>  				{  					var count = u.PackagesToUpdate.Count;  					//var downloading = ExtensionMethod.Count(u.PackagesToUpdate' m => m.IsDownloading);  					var downloaded = ExtensionMethod.Count(u.PackagesToUpdate' m => m.IsDownloaded || m.IsDownloading);  					var totalSize = ExtensionMethod.Sum(u.PackagesToUpdate' m => m.PackageSize);  					var downloadedSize = ExtensionMethod.Sum(u.PackagesToUpdate' m => m.DownloadedSize);    					SetProgress((int)downloadedSize' (int)totalSize);  					StepDesc = string.Format(FSLib.App.SimpleUpdater.SR.DownloadProgress' count' downloaded' ExtensionMethod.ToSizeDescription(downloadedSize)' ExtensionMethod.ToSizeDescription(totalSize));    				};  				u.PackageExtractionBegin += (s' e) =>  				{  					SetProgress(0);    					StepTitle = FSLib.App.SimpleUpdater.SR.ExtractPackage;  					if (e.Package != null)  					{  						StepDesc = e.Package.PackageName;  					}  				};  				u.QueryCloseApplication += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.ClosingApplications;  					StepDesc = string.Empty;  				};  				u.InstallUpdates += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.InstallPackages;  					StepDesc = string.Empty;  				};  				u.FileInstaller.DeleteFileStart += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.DeleteOriginalFiles;  					StepDesc = string.Empty;  				};  				u.FileInstaller.InstallFileStart += (s' e) =>  				{  					SetProgress(0);  					StepTitle = FSLib.App.SimpleUpdater.SR.InstallNewFiles;  					StepDesc = string.Empty;  				};  				u.FileInstaller.DeleteFile += (s' e) =>  				{  					StepDesc = e.Source;  					SetProgress(e.TotalCount > 0 ? Math.Min((int)(e.CurrentCount * 1.0 / e.TotalCount * 100)' 100) : 0' 100);  				};  				u.FileInstaller.InstallFile += (s' e) =>  				{  					StepDesc = e.Source;  					SetProgress(e.CurrentCount' e.TotalCount);  				};  				u.RunExternalProcess += (s' e) =>  				{  					StepTitle = FSLib.App.SimpleUpdater.SR.ExecuteExternal;  					SetProgress(0);  					StepDesc = System.IO.Path.GetFileName(e.ProcessStartInfo.FileName);  				};  			}
Magic Number,FSLib.App.SimpleUpdater.UpdateControl,UpdateFinished,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\UpdateControl\UpdateFinished.cs,Instance_UpdateFinished,The following statement contains a magic number: if (Updater.Instance.Context.UpdateInfo.AutoCloseSucceedWindow)  			{  				var t = new Timer();  				t.Interval = 2000;  				t.Tick += (s' x) =>  				{  					t.Stop();  					FindForm().Close();  				};  				t.Start();  			}
Missing Default,FSLib.App.SimpleUpdater,Updater,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\Updater.Events.cs,InitializeParameters,The following switch statement is missing a default case: switch (name)  				{  					case "/ui":  						Context.UpdateMainFormType = args[index++];  						break;  					case "/assembly":  						LoadExtraAssemblies(args[index++]);  						break;  					case "/cv": Context.CurrentVersion = new Version(args[index++]); break;  					case "/ad": Context.ApplicationDirectory = args[index++]; break;  					case "/url": Context.UpdateDownloadUrl = args[index++]; break;  					case "/infofile": Context.UpdateInfoFileName = args[index++]; break;  					case "/proxy": Context.ProxyAddress = args[index++]; break;  					case "/cred":  						var value = args[index++];  						if (!string.IsNullOrEmpty(value))  						{  							var info = value.Split(':');  							if (info.Length == 2 && !string.IsNullOrEmpty(info[0]))  							{  								Context.NetworkCredential = new System.Net.NetworkCredential(info[0]' info[1]);  							}  						}  						break;  					case "/p":  						var pi = args[index++];  						if (pi.StartsWith("*")) Context.ExternalProcessID.Add(int.Parse(pi.Remove(0' 1)));  						else Context.ExternalProcessName.Add(pi);  						break;  					case "/log": Context.LogFile = args[index++]; break;  					case "/forceupdate": Context.ForceUpdate = true; break;  					case "/autokill": Context.AutoKillProcesses = true; break;  					case "/noui": Context.HiddenUI = true; break;  				}
Missing Default,ICCEmbedded.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\DeflaterEngine.cs,SetLevel,The following switch statement is missing a default case: switch (compressionFunction) {  					case DEFLATE_STORED:  						if (strstart > blockStart) {  							huffman.FlushStoredBlock(window' blockStart'  								strstart - blockStart' false);  							blockStart = strstart;  						}  						UpdateHash();  						break;    					case DEFLATE_FAST:  						if (strstart > blockStart) {  							huffman.FlushBlock(window' blockStart' strstart - blockStart'  								false);  							blockStart = strstart;  						}  						break;    					case DEFLATE_SLOW:  						if (prevAvailable) {  							huffman.TallyLit(window[strstart-1] & 0xff);  						}  						if (strstart > blockStart) {  							huffman.FlushBlock(window' blockStart' strstart - blockStart' false);  							blockStart = strstart;  						}  						prevAvailable = false;  						matchLen = MIN_MATCH - 1;  						break;  				}
Missing Default,ICCEmbedded.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\Compression\InflaterDynHeader.cs,Decode,The following switch statement is missing a default case: switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  							mode = LENS;  							goto decode_loop;  					}
Missing Default,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,WriteLocalEntryHeader,The following switch statement is missing a default case: switch (useZip64_) {  					case UseZip64.Dynamic:  						if (entry.Size < 0) {  							entry.ForceZip64();  						}  						break;    					case UseZip64.On:  						entry.ForceZip64();  						break;    					case UseZip64.Off:  						// Do nothing.  The entry itself may be using Zip64 independantly.  						break;  				}
Missing Default,ICCEmbedded.SharpZipLib.Zip,ZipFile,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipFile.cs,RunUpdates,The following switch statement is missing a default case: switch (update.Command) {  							case UpdateCommand.Copy:  								if (directUpdate) {  									CopyEntryDirect(workFile' update' ref destinationPosition);  								}  								else {  									CopyEntry(workFile' update);  								}  								break;    							case UpdateCommand.Modify:  								// TODO: Direct modifying of an entry will take some legwork.  								ModifyEntry(workFile' update);  								break;    							case UpdateCommand.Add:  								if (!IsNewArchive && directUpdate) {  									workFile.baseStream_.Position = destinationPosition;  								}    								AddEntry(workFile' update);    								if (directUpdate) {  									destinationPosition = workFile.baseStream_.Position;  								}  								break;  						}
Missing Default,ICCEmbedded.SharpZipLib.Zip,ZipOutputStream,C:\repos\iccfish_FSLib.App.SimpleUpdater\SimpleUpdater\FSLib.App.SimpleUpdater\ICCEmbedded\Zip\ZipOutputStream.cs,Write,The following switch statement is missing a default case: switch (curMethod) {  				case CompressionMethod.Deflated:  					base.Write(buffer' offset' count);  					break;  				  				case CompressionMethod.Stored:  					if (Password != null) {  						CopyAndEncrypt(buffer' offset' count);  					} else {  						baseOutputStream_.Write(buffer' offset' count);  					}  					break;  			}
