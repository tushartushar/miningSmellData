Implementation smell,Namespace,Class,File,Method,Description
Long Method,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoles,The method has 107 lines of code.
Long Method,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,Compare,The method has 130 lines of code.
Complex Method,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,Compare,Cyclomatic complexity of the method is 24
Complex Method,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,ScriptCreate,Cyclomatic complexity of the method is 10
Complex Method,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,CreateFromDir,Cyclomatic complexity of the method is 14
Complex Method,SchemaZen.Library.Models,DatabaseDiff,C:\repos\sethreno_schemazen\model\Models\Database.cs,Script,Cyclomatic complexity of the method is 20
Complex Method,SchemaZen.Library.Models,Table,C:\repos\sethreno_schemazen\model\Models\Table.cs,Compare,Cyclomatic complexity of the method is 8
Complex Method,SchemaZen.Library.Models,TableDiff,C:\repos\sethreno_schemazen\model\Models\Table.cs,Script,Cyclomatic complexity of the method is 11
Complex Method,SchemaZen.Library.Models.Comparers,ForeignKeyComparer,C:\repos\sethreno_schemazen\model\Models\Comparers\ForeignKeyComparer.cs,Compare,Cyclomatic complexity of the method is 9
Long Parameter List,SchemaZen.Library.Command,ScriptCommand,C:\repos\sethreno_schemazen\model\Command\ScriptCommand.cs,Execute,The method has 5 parameters. Parameters: namesAndSchemas' dataTablesPattern' dataTablesExcludePattern' tableHint' filteredTypes
Long Parameter List,SchemaZen.Library,BatchSqlParser,C:\repos\sethreno_schemazen\model\BatchSqlParser.cs,IsGO,The method has 6 parameters. Parameters: p3' p2' p' c' n' n2
Long Parameter List,SchemaZen.Library.Models,Column,C:\repos\sethreno_schemazen\model\Models\Column.cs,Column,The method has 5 parameters. Parameters: name' type' length' nullable' defaultValue
Long Parameter List,SchemaZen.Library.Models,Column,C:\repos\sethreno_schemazen\model\Models\Column.cs,Column,The method has 6 parameters. Parameters: name' type' precision' scale' nullable' defaultValue
Long Parameter List,SchemaZen.Library.Models,ForeignKey,C:\repos\sethreno_schemazen\model\Models\ForeignKey.cs,ForeignKey,The method has 5 parameters. Parameters: table' name' columns' refTable' refColumns
Long Parameter List,SchemaZen.Library.Models,ForeignKey,C:\repos\sethreno_schemazen\model\Models\ForeignKey.cs,ForeignKey,The method has 7 parameters. Parameters: table' name' columns' refTable' refColumns' onUpdate' onDelete
Long Parameter List,SchemaZen.Library.Models,UserDefinedType,C:\repos\sethreno_schemazen\model\Models\UserDefinedType.cs,UserDefinedType,The method has 5 parameters. Parameters: owner' name' baseTypeName' maxLength' nullable
Long Statement,SchemaZen.Library.Models,SqlAssembly,C:\repos\sethreno_schemazen\model\Models\Assembly.cs,ScriptCreate,The length of the statement  "					return $"CREATE ASSEMBLY [{Name}]\r\n{string.Empty}FROM {"0x" + new SoapHexBinary(kvp.Value).ToString()}\r\n{"WITH PERMISSION_SET = " + PermissionSet}"; " is 152.
Long Statement,SchemaZen.Library.Models,SqlAssembly,C:\repos\sethreno_schemazen\model\Models\Assembly.cs,ScriptCreate,The length of the statement  "				return $"ALTER ASSEMBLY [{Name}]\r\nADD FILE FROM {"0x" + new SoapHexBinary(kvp.Value).ToString()}\r\nAS N\'{kvp.Key}\'"; " is 121.
Long Statement,SchemaZen.Library.Models,Constraint,C:\repos\sethreno_schemazen\model\Models\Constraint.cs,ScriptCreate,The length of the statement  "					var sql = $"CREATE{UniqueText}{IndexType.Space()} INDEX [{Name}] ON [{Table.Owner}].[{Table.Name}] ({string.Join("' "' Columns.Select(c => c.Script()).ToArray())})"; " is 165.
Long Statement,SchemaZen.Library.Models,Constraint,C:\repos\sethreno_schemazen\model\Models\Constraint.cs,ScriptCreate,The length of the statement  "			return (Table.IsType ? string.Empty : $"CONSTRAINT [{Name}] ") + $"{Type}{IndexType.Space()} ({string.Join("' "' Columns.Select(c => c.Script()).ToArray())})"; " is 159.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoles,The length of the statement  "			//Roles are complicated.  This was adapted from https://dbaeyes.wordpress.com/2013/04/19/fully-script-out-a-mssql-database-role/ " is 128.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoles,The length of the statement  "				WHEN 4 THEN 'ON ' + (SELECT RIGHT(type_desc' 4) + '::[' + name FROM sys.database_principals WHERE principal_id = dp.major_id) + '] ' " is 132.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoles,The length of the statement  "				WHEN 10 THEN 'ON XML SCHEMA COLLECTION::[' + (SELECT SCHEMA_NAME(schema_id) + '.' + name FROM sys.xml_schema_collections WHERE xml_collection_id = dp.major_id) + '] ' " is 166.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoles,The length of the statement  "				WHEN 15 THEN 'ON MESSAGE TYPE::[' + (SELECT name FROM sys.service_message_types WHERE message_type_id = dp.major_id) + '] ' " is 123.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoles,The length of the statement  "				WHEN 18 THEN 'ON REMOTE SERVICE BINDING::[' + (SELECT name FROM sys.remote_service_bindings WHERE remote_service_binding_id = dp.major_id) + '] ' " is 145.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoles,The length of the statement  "				WHEN 23 THEN 'ON FULLTEXT CATALOG::[' + (SELECT name FROM sys.fulltext_catalogs WHERE fulltext_catalog_id = dp.major_id) + '] ' " is 127.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoles,The length of the statement  "				WHEN 26 THEN 'ON ASYMMETRIC KEY::[' + (SELECT name FROM sys.asymmetric_keys WHERE asymmetric_key_id = dp.major_id) + '] ' " is 121.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadForeignKeys,The length of the statement  "						inner join sys.foreign_keys fk on rc.CONSTRAINT_NAME = fk.name and rc.CONSTRAINT_SCHEMA = OBJECT_SCHEMA_NAME(fk.parent_object_id)"; " is 131.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadColumns,The length of the statement  "					CASE WHEN COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA + '.' + c.TABLE_NAME)' c.COLUMN_NAME' 'IsRowGuidCol') = 1 THEN 'YES' ELSE 'NO' END AS IS_ROW_GUID_COL " is 151.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadColumns,The length of the statement  "					CASE WHEN t.name = 'nvarchar' and c.max_length > 0 THEN CAST(c.max_length as int)/2 ELSE CAST(c.max_length as int) END as CHARACTER_MAXIMUM_LENGTH' " is 147.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,WriteScriptDir,The length of the statement  "				log(TraceLevel.Verbose' $"Scripting {name} {++index} of {objects.Count}...{(index < objects.Count ? "\r" : string.Empty)}"); " is 124.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,ExportData,The length of the statement  "				log?.Invoke(TraceLevel.Verbose' $"Exporting data from {t.Owner + "." + t.Name} (table {++index} of {DataTables.Count})..."); " is 124.
Long Statement,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,CreateFromDir,The length of the statement  "				log(TraceLevel.Info' errors.Any() ? $"{prevCount} errors unresolved. Details will follow later." : "All errors resolved' were probably dependency issues..."); " is 158.
Long Statement,SchemaZen.Library.Models,ForeignKey,C:\repos\sethreno_schemazen\model\Models\ForeignKey.cs,AssertArgNotNull,The length of the statement  "				throw new ArgumentNullException($"Unable to Script FK {Name} on table {Table.Owner}.{Table.Name}. {argName} must not be null."); " is 128.
Long Statement,SchemaZen.Library.Models,ForeignKey,C:\repos\sethreno_schemazen\model\Models\ForeignKey.cs,ScriptCreate,The length of the statement  "			text.Append($"   FOREIGN KEY([{string.Join("]' ["' Columns.ToArray())}]) REFERENCES [{RefTable.Owner}].[{RefTable.Name}] ([{string.Join("]' ["' RefColumns.ToArray())}])\r\n"); " is 175.
Long Statement,SchemaZen.Library.Models,Routine,C:\repos\sethreno_schemazen\model\Models\Routine.cs,ScriptQuotedIdAndAnsiNulls,The length of the statement  "				script += $"SET QUOTED_IDENTIFIER {((databaseDefaults ? defaultQuotedId : QuotedId) ? "ON" : "OFF")} {Environment.NewLine}GO{Environment.NewLine}"; " is 147.
Long Statement,SchemaZen.Library.Models,Routine,C:\repos\sethreno_schemazen\model\Models\Routine.cs,ScriptQuotedIdAndAnsiNulls,The length of the statement  "				script += $"SET ANSI_NULLS {((databaseDefaults ? defaultAnsiNulls : AnsiNull) ? "ON" : "OFF")} {Environment.NewLine}GO{Environment.NewLine}"; " is 141.
Long Statement,SchemaZen.Library.Models,Routine,C:\repos\sethreno_schemazen\model\Models\Routine.cs,ScriptBase,The length of the statement  "						$"{Environment.NewLine}{(Disabled ? "DISABLE" : "ENABLE")} TRIGGER [{Owner}].[{Name}] ON [{RelatedTableSchema}].[{RelatedTableName}]{Environment.NewLine}GO{Environment.NewLine}"; " is 178.
Long Statement,SchemaZen.Library.Models,Routine,C:\repos\sethreno_schemazen\model\Models\Routine.cs,Warnings,The length of the statement  "					yield return $"Name from script definition '{name}' does not match expected value from sys.objects.name '{Name}'. This can be corrected by dropping and recreating the object."; " is 176.
Long Statement,SchemaZen.Library.Models,SqlUser,C:\repos\sethreno_schemazen\model\Models\SqlUser.cs,ScriptCreate,The length of the statement  "			return login + $"CREATE USER [{Name}] {(PasswordHash == null ? "WITHOUT LOGIN" : "FOR LOGIN " + Name)} {(string.IsNullOrEmpty(Owner) ? string.Empty : "WITH DEFAULT_SCHEMA = ")}{Owner}" " is 184.
Long Statement,SchemaZen.Library.Models,Table,C:\repos\sethreno_schemazen\model\Models\Table.cs,Compare,The length of the statement  "						join c2 in src on c1.ScriptCreate() equals c2.ScriptCreate() into match //new { c1.Type' c1.Unique' c1.Clustered' Columns = string.Join("'"' c1.Columns.ToArray())' IncludedColumns = string.Join("'"' c1.IncludedColumns.ToArray()) } equals new { c2.Type' c2.Unique' c2.Clustered' Columns = string.Join("'"' c2.Columns.ToArray())' IncludedColumns = string.Join("'"' c2.IncludedColumns.ToArray()) } into match " is 405.
Long Statement,SchemaZen.Library.Models,Table,C:\repos\sethreno_schemazen\model\Models\Table.cs,ImportData,The length of the statement  "									fields[j].Replace(_escapeLineFeed' _lineFeed).Replace(_escapeCarriageReturn' _carriageReturn).Replace(_escapeTab' _tab)); " is 121.
Complex Conditional,SchemaZen.Library.Command,BaseCommand,C:\repos\sethreno_schemazen\model\Command\BaseCommand.cs,CreateDatabase,The conditional expression  "!string.IsNullOrEmpty(Server) ||  					!string.IsNullOrEmpty(DbName) ||  					!string.IsNullOrEmpty(User) ||  					!string.IsNullOrEmpty(Pass)"  is complex.
Empty Catch Block,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadSynonyms,The method has an empty catch block.
Empty Catch Block,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadUsersAndLogins,The method has an empty catch block.
Empty Catch Block,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadCLRAssemblies,The method has an empty catch block.
Empty Catch Block,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadXmlSchemas,The method has an empty catch block.
Empty Catch Block,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadColumns,The method has an empty catch block.
Empty Catch Block,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadTables,The method has an empty catch block.
Magic Number,SchemaZen.Library,BatchSqlParser,C:\repos\sethreno_schemazen\model\BatchSqlParser.cs,SplitBatch,The following statement contains a magic number: for (var i = 0; i < batchSql.Length; i++) {  				// previous 3' current' & next 2 chars  				// out of bounds chars are treated as whitespace  				p3 = i > 2 ? batchSql[i - 3] : ' ';  				p2 = i > 1 ? batchSql[i - 2] : ' ';  				p = i > 0 ? batchSql[i - 1] : ' ';  				c = batchSql[i];  				n = batchSql.Length > i + 1 ? batchSql[i + 1] : ' ';  				n2 = batchSql.Length > i + 2 ? batchSql[i + 2] : ' ';    				switch (state) {  					case State.Searching:  						if (IsMultiLineComment(p' c)) state = State.InMultiLineComment;  						else if (IsOneLineComment(p' c)) state = State.InOneLineComment;  						else if (c == '[') state = State.InBrackets;  						else if (c == '\'') state = State.InQuotes;  						else if (c == '\"') state = State.InDoubleQuotes;  						else if (IsGO(p3' p2' p' c' n' n2)) foundGO = true;  						break;    					case State.InOneLineComment:  						if (c == '\n') state = State.Searching;  						break;    					case State.InMultiLineComment:  						if (IsEndMultiLineComment(p' c)) commentDepth--;  						else if (IsMultiLineComment(p' c)) commentDepth++;  						if (commentDepth < 0) {  							commentDepth = 0;  							state = State.Searching;  						}  						break;    					case State.InBrackets:  						if (c == ']') state = State.Searching;  						break;    					case State.InQuotes:  						if (c == '\'') state = State.Searching;  						break;    					case State.InDoubleQuotes:  						if (c == '\"') state = State.Searching;  						break;  				}    				if (foundGO) {  					// store the current script and continue searching  					// set length -1 so 'G' is not included in the script  					var length = i - scriptStartIndex - 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  					// start the next script after the 'O' in "GO"  					scriptStartIndex = i + 1;  					foundGO = false;  				} else if (i == batchSql.Length - 1) {  					// end of batch  					// set lenght +1 to include the current char  					var length = i - scriptStartIndex + 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  				}  			}
Magic Number,SchemaZen.Library,BatchSqlParser,C:\repos\sethreno_schemazen\model\BatchSqlParser.cs,SplitBatch,The following statement contains a magic number: for (var i = 0; i < batchSql.Length; i++) {  				// previous 3' current' & next 2 chars  				// out of bounds chars are treated as whitespace  				p3 = i > 2 ? batchSql[i - 3] : ' ';  				p2 = i > 1 ? batchSql[i - 2] : ' ';  				p = i > 0 ? batchSql[i - 1] : ' ';  				c = batchSql[i];  				n = batchSql.Length > i + 1 ? batchSql[i + 1] : ' ';  				n2 = batchSql.Length > i + 2 ? batchSql[i + 2] : ' ';    				switch (state) {  					case State.Searching:  						if (IsMultiLineComment(p' c)) state = State.InMultiLineComment;  						else if (IsOneLineComment(p' c)) state = State.InOneLineComment;  						else if (c == '[') state = State.InBrackets;  						else if (c == '\'') state = State.InQuotes;  						else if (c == '\"') state = State.InDoubleQuotes;  						else if (IsGO(p3' p2' p' c' n' n2)) foundGO = true;  						break;    					case State.InOneLineComment:  						if (c == '\n') state = State.Searching;  						break;    					case State.InMultiLineComment:  						if (IsEndMultiLineComment(p' c)) commentDepth--;  						else if (IsMultiLineComment(p' c)) commentDepth++;  						if (commentDepth < 0) {  							commentDepth = 0;  							state = State.Searching;  						}  						break;    					case State.InBrackets:  						if (c == ']') state = State.Searching;  						break;    					case State.InQuotes:  						if (c == '\'') state = State.Searching;  						break;    					case State.InDoubleQuotes:  						if (c == '\"') state = State.Searching;  						break;  				}    				if (foundGO) {  					// store the current script and continue searching  					// set length -1 so 'G' is not included in the script  					var length = i - scriptStartIndex - 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  					// start the next script after the 'O' in "GO"  					scriptStartIndex = i + 1;  					foundGO = false;  				} else if (i == batchSql.Length - 1) {  					// end of batch  					// set lenght +1 to include the current char  					var length = i - scriptStartIndex + 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  				}  			}
Magic Number,SchemaZen.Library,BatchSqlParser,C:\repos\sethreno_schemazen\model\BatchSqlParser.cs,SplitBatch,The following statement contains a magic number: for (var i = 0; i < batchSql.Length; i++) {  				// previous 3' current' & next 2 chars  				// out of bounds chars are treated as whitespace  				p3 = i > 2 ? batchSql[i - 3] : ' ';  				p2 = i > 1 ? batchSql[i - 2] : ' ';  				p = i > 0 ? batchSql[i - 1] : ' ';  				c = batchSql[i];  				n = batchSql.Length > i + 1 ? batchSql[i + 1] : ' ';  				n2 = batchSql.Length > i + 2 ? batchSql[i + 2] : ' ';    				switch (state) {  					case State.Searching:  						if (IsMultiLineComment(p' c)) state = State.InMultiLineComment;  						else if (IsOneLineComment(p' c)) state = State.InOneLineComment;  						else if (c == '[') state = State.InBrackets;  						else if (c == '\'') state = State.InQuotes;  						else if (c == '\"') state = State.InDoubleQuotes;  						else if (IsGO(p3' p2' p' c' n' n2)) foundGO = true;  						break;    					case State.InOneLineComment:  						if (c == '\n') state = State.Searching;  						break;    					case State.InMultiLineComment:  						if (IsEndMultiLineComment(p' c)) commentDepth--;  						else if (IsMultiLineComment(p' c)) commentDepth++;  						if (commentDepth < 0) {  							commentDepth = 0;  							state = State.Searching;  						}  						break;    					case State.InBrackets:  						if (c == ']') state = State.Searching;  						break;    					case State.InQuotes:  						if (c == '\'') state = State.Searching;  						break;    					case State.InDoubleQuotes:  						if (c == '\"') state = State.Searching;  						break;  				}    				if (foundGO) {  					// store the current script and continue searching  					// set length -1 so 'G' is not included in the script  					var length = i - scriptStartIndex - 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  					// start the next script after the 'O' in "GO"  					scriptStartIndex = i + 1;  					foundGO = false;  				} else if (i == batchSql.Length - 1) {  					// end of batch  					// set lenght +1 to include the current char  					var length = i - scriptStartIndex + 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  				}  			}
Magic Number,SchemaZen.Library,BatchSqlParser,C:\repos\sethreno_schemazen\model\BatchSqlParser.cs,SplitBatch,The following statement contains a magic number: for (var i = 0; i < batchSql.Length; i++) {  				// previous 3' current' & next 2 chars  				// out of bounds chars are treated as whitespace  				p3 = i > 2 ? batchSql[i - 3] : ' ';  				p2 = i > 1 ? batchSql[i - 2] : ' ';  				p = i > 0 ? batchSql[i - 1] : ' ';  				c = batchSql[i];  				n = batchSql.Length > i + 1 ? batchSql[i + 1] : ' ';  				n2 = batchSql.Length > i + 2 ? batchSql[i + 2] : ' ';    				switch (state) {  					case State.Searching:  						if (IsMultiLineComment(p' c)) state = State.InMultiLineComment;  						else if (IsOneLineComment(p' c)) state = State.InOneLineComment;  						else if (c == '[') state = State.InBrackets;  						else if (c == '\'') state = State.InQuotes;  						else if (c == '\"') state = State.InDoubleQuotes;  						else if (IsGO(p3' p2' p' c' n' n2)) foundGO = true;  						break;    					case State.InOneLineComment:  						if (c == '\n') state = State.Searching;  						break;    					case State.InMultiLineComment:  						if (IsEndMultiLineComment(p' c)) commentDepth--;  						else if (IsMultiLineComment(p' c)) commentDepth++;  						if (commentDepth < 0) {  							commentDepth = 0;  							state = State.Searching;  						}  						break;    					case State.InBrackets:  						if (c == ']') state = State.Searching;  						break;    					case State.InQuotes:  						if (c == '\'') state = State.Searching;  						break;    					case State.InDoubleQuotes:  						if (c == '\"') state = State.Searching;  						break;  				}    				if (foundGO) {  					// store the current script and continue searching  					// set length -1 so 'G' is not included in the script  					var length = i - scriptStartIndex - 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  					// start the next script after the 'O' in "GO"  					scriptStartIndex = i + 1;  					foundGO = false;  				} else if (i == batchSql.Length - 1) {  					// end of batch  					// set lenght +1 to include the current char  					var length = i - scriptStartIndex + 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  				}  			}
Magic Number,SchemaZen.Library,BatchSqlParser,C:\repos\sethreno_schemazen\model\BatchSqlParser.cs,SplitBatch,The following statement contains a magic number: for (var i = 0; i < batchSql.Length; i++) {  				// previous 3' current' & next 2 chars  				// out of bounds chars are treated as whitespace  				p3 = i > 2 ? batchSql[i - 3] : ' ';  				p2 = i > 1 ? batchSql[i - 2] : ' ';  				p = i > 0 ? batchSql[i - 1] : ' ';  				c = batchSql[i];  				n = batchSql.Length > i + 1 ? batchSql[i + 1] : ' ';  				n2 = batchSql.Length > i + 2 ? batchSql[i + 2] : ' ';    				switch (state) {  					case State.Searching:  						if (IsMultiLineComment(p' c)) state = State.InMultiLineComment;  						else if (IsOneLineComment(p' c)) state = State.InOneLineComment;  						else if (c == '[') state = State.InBrackets;  						else if (c == '\'') state = State.InQuotes;  						else if (c == '\"') state = State.InDoubleQuotes;  						else if (IsGO(p3' p2' p' c' n' n2)) foundGO = true;  						break;    					case State.InOneLineComment:  						if (c == '\n') state = State.Searching;  						break;    					case State.InMultiLineComment:  						if (IsEndMultiLineComment(p' c)) commentDepth--;  						else if (IsMultiLineComment(p' c)) commentDepth++;  						if (commentDepth < 0) {  							commentDepth = 0;  							state = State.Searching;  						}  						break;    					case State.InBrackets:  						if (c == ']') state = State.Searching;  						break;    					case State.InQuotes:  						if (c == '\'') state = State.Searching;  						break;    					case State.InDoubleQuotes:  						if (c == '\"') state = State.Searching;  						break;  				}    				if (foundGO) {  					// store the current script and continue searching  					// set length -1 so 'G' is not included in the script  					var length = i - scriptStartIndex - 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  					// start the next script after the 'O' in "GO"  					scriptStartIndex = i + 1;  					foundGO = false;  				} else if (i == batchSql.Length - 1) {  					// end of batch  					// set lenght +1 to include the current char  					var length = i - scriptStartIndex + 1;  					scripts.Add(batchSql.Substring(scriptStartIndex' length));  				}  			}
Magic Number,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadProps,The following statement contains a magic number: using (IDataReader dr = cm.ExecuteReader()) {  				if (dr.Read()) {  					SetPropString("COMPATIBILITY_LEVEL"' dr["compatibility_level"]);  					SetPropString("COLLATE"' dr["collation_name"]);  					SetPropOnOff("AUTO_CLOSE"' dr["is_auto_close_on"]);  					SetPropOnOff("AUTO_SHRINK"' dr["is_auto_shrink_on"]);  					if (dr["snapshot_isolation_state"] != DBNull.Value) {  						FindProp("ALLOW_SNAPSHOT_ISOLATION").Value = (byte)dr["snapshot_isolation_state"] == 0 ||  																	 (byte)dr["snapshot_isolation_state"] == 2  							? "OFF"  							: "ON";  					}  					SetPropOnOff("READ_COMMITTED_SNAPSHOT"' dr["is_read_committed_snapshot_on"]);  					SetPropString("RECOVERY"' dr["recovery_model_desc"]);  					SetPropString("PAGE_VERIFY"' dr["page_verify_option_desc"]);  					SetPropOnOff("AUTO_CREATE_STATISTICS"' dr["is_auto_create_stats_on"]);  					SetPropOnOff("AUTO_UPDATE_STATISTICS"' dr["is_auto_update_stats_on"]);  					SetPropOnOff("AUTO_UPDATE_STATISTICS_ASYNC"' dr["is_auto_update_stats_async_on"]);  					SetPropOnOff("ANSI_NULL_DEFAULT"' dr["is_ansi_null_default_on"]);  					SetPropOnOff("ANSI_NULLS"' dr["is_ansi_nulls_on"]);  					SetPropOnOff("ANSI_PADDING"' dr["is_ansi_padding_on"]);  					SetPropOnOff("ANSI_WARNINGS"' dr["is_ansi_warnings_on"]);  					SetPropOnOff("ARITHABORT"' dr["is_arithabort_on"]);  					SetPropOnOff("CONCAT_NULL_YIELDS_NULL"' dr["is_concat_null_yields_null_on"]);  					SetPropOnOff("NUMERIC_ROUNDABORT"' dr["is_numeric_roundabort_on"]);  					SetPropOnOff("QUOTED_IDENTIFIER"' dr["is_quoted_identifier_on"]);  					SetPropOnOff("RECURSIVE_TRIGGERS"' dr["is_recursive_triggers_on"]);  					SetPropOnOff("CURSOR_CLOSE_ON_COMMIT"' dr["is_cursor_close_on_commit_on"]);  					if (dr["is_local_cursor_default"] != DBNull.Value) {  						FindProp("CURSOR_DEFAULT").Value = (bool)dr["is_local_cursor_default"] ? "LOCAL" : "GLOBAL";  					}  					SetPropOnOff("TRUSTWORTHY"' dr["is_trustworthy_on"]);  					SetPropOnOff("DB_CHAINING"' dr["is_db_chaining_on"]);  					if (dr["is_parameterization_forced"] != DBNull.Value) {  						FindProp("PARAMETERIZATION").Value = (bool)dr["is_parameterization_forced"] ? "FORCED" : "SIMPLE";  					}  					SetPropOnOff("DATE_CORRELATION_OPTIMIZATION"' dr["is_date_correlation_on"]);  				}  			}
Magic Number,SchemaZen.Library.Models,Routine,C:\repos\sethreno_schemazen\model\Models\Routine.cs,GetSQLTypeForRegEx,The following statement contains a magic number: if (RoutineType == RoutineKind.Procedure) // support shorthand - PROC  				return "(?:" + text + "|" + text.Substring(0' 4) + ")";
Magic Number,SchemaZen.Library.Models,Routine,C:\repos\sethreno_schemazen\model\Models\Routine.cs,Warnings,The following statement contains a magic number: if (string.IsNullOrEmpty(Text)) {  				yield return "Script definition could not be retrieved.";  			} else {  				// check if the name is correct  				var regex = new Regex(string.Format(_sqlCreateWithNameRegex' GetSQLTypeForRegEx())'  					RegexOptions.IgnoreCase | RegexOptions.Singleline);  				var match = regex.Match(Text);    				// the schema is captured in group index 2' and the name in 3    				var nameGroup = match.Groups[3];  				if (!nameGroup.Success)  					yield break;    				var name = nameGroup.Value;  				if (name.StartsWith("[") && name.EndsWith("]"))  					name = name.Substring(1' name.Length - 2);    				if (string.Compare(Name' name' StringComparison.InvariantCultureIgnoreCase) != 0) {  					yield return $"Name from script definition '{name}' does not match expected value from sys.objects.name '{Name}'. This can be corrected by dropping and recreating the object.";  				}  			}
Magic Number,SchemaZen.Library.Models,Routine,C:\repos\sethreno_schemazen\model\Models\Routine.cs,Warnings,The following statement contains a magic number: if (string.IsNullOrEmpty(Text)) {  				yield return "Script definition could not be retrieved.";  			} else {  				// check if the name is correct  				var regex = new Regex(string.Format(_sqlCreateWithNameRegex' GetSQLTypeForRegEx())'  					RegexOptions.IgnoreCase | RegexOptions.Singleline);  				var match = regex.Match(Text);    				// the schema is captured in group index 2' and the name in 3    				var nameGroup = match.Groups[3];  				if (!nameGroup.Success)  					yield break;    				var name = nameGroup.Value;  				if (name.StartsWith("[") && name.EndsWith("]"))  					name = name.Substring(1' name.Length - 2);    				if (string.Compare(Name' name' StringComparison.InvariantCultureIgnoreCase) != 0) {  					yield return $"Name from script definition '{name}' does not match expected value from sys.objects.name '{Name}'. This can be corrected by dropping and recreating the object.";  				}  			}
Missing Default,SchemaZen.Library,Logger,C:\repos\sethreno_schemazen\model\Logger.cs,Log,The following switch statement is missing a default case: switch (level) {  				case TraceLevel.Error:  					Console.ForegroundColor = ConsoleColor.Red;  					break;  				case TraceLevel.Verbose:  					if (!_verbose)  						return;  					break;  				case TraceLevel.Warning:  					//Console.ForegroundColor = ConsoleColor.Red;  					break;  			}
Missing Default,SchemaZen.Library,BatchSqlParser,C:\repos\sethreno_schemazen\model\BatchSqlParser.cs,SplitBatch,The following switch statement is missing a default case: switch (state) {  					case State.Searching:  						if (IsMultiLineComment(p' c)) state = State.InMultiLineComment;  						else if (IsOneLineComment(p' c)) state = State.InOneLineComment;  						else if (c == '[') state = State.InBrackets;  						else if (c == '\'') state = State.InQuotes;  						else if (c == '\"') state = State.InDoubleQuotes;  						else if (IsGO(p3' p2' p' c' n' n2)) foundGO = true;  						break;    					case State.InOneLineComment:  						if (c == '\n') state = State.Searching;  						break;    					case State.InMultiLineComment:  						if (IsEndMultiLineComment(p' c)) commentDepth--;  						else if (IsMultiLineComment(p' c)) commentDepth++;  						if (commentDepth < 0) {  							commentDepth = 0;  							state = State.Searching;  						}  						break;    					case State.InBrackets:  						if (c == ']') state = State.Searching;  						break;    					case State.InQuotes:  						if (c == '\'') state = State.Searching;  						break;    					case State.InDoubleQuotes:  						if (c == '\"') state = State.Searching;  						break;  				}
Missing Default,SchemaZen.Library.Models,Constraint,C:\repos\sethreno_schemazen\model\Models\Constraint.cs,ScriptCreate,The following switch statement is missing a default case: switch (Type) {  				case "CHECK":  					var notForReplicationOption = _isNotForReplication ? "NOT FOR REPLICATION" : "";  					return $"CONSTRAINT [{Name}] CHECK {notForReplicationOption} {_checkConstraintExpression}";  				case "INDEX":  					var sql = $"CREATE{UniqueText}{IndexType.Space()} INDEX [{Name}] ON [{Table.Owner}].[{Table.Name}] ({string.Join("' "' Columns.Select(c => c.Script()).ToArray())})";  					if (IncludedColumns.Count > 0) {  						sql += $" INCLUDE ([{string.Join("]' ["' IncludedColumns.ToArray())}])";  					}  					if (!string.IsNullOrEmpty(Filter)) {  						sql += $" WHERE {Filter}";  					}  					return sql;  			}
Missing Default,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadRoutines,The following switch statement is missing a default case: switch ((string)dr["type_desc"]) {  						case "SQL_STORED_PROCEDURE":  							r.RoutineType = Routine.RoutineKind.Procedure;  							break;  						case "SQL_TRIGGER":  							r.RoutineType = Routine.RoutineKind.Trigger;  							r.RelatedTableName = (string)dr["tableName"];  							r.RelatedTableSchema = (string)dr["tableSchema"];  							r.Disabled = (bool)dr["trigger_disabled"];  							break;  						case "SQL_SCALAR_FUNCTION":  						case "SQL_INLINE_TABLE_VALUED_FUNCTION":  						case "SQL_TABLE_VALUED_FUNCTION":  							r.RoutineType = Routine.RoutineKind.Function;  							break;  						case "VIEW":  							r.RoutineType = Routine.RoutineKind.View;  							break;  					}
Missing Default,SchemaZen.Library.Models,Database,C:\repos\sethreno_schemazen\model\Models\Database.cs,LoadColumnsBase,The following switch statement is missing a default case: switch (c.Type) {  					case "binary":  					case "char":  					case "nchar":  					case "nvarchar":  					case "varbinary":  					case "varchar":  						c.Length = (int)dr["CHARACTER_MAXIMUM_LENGTH"];  						break;  					case "decimal":  					case "numeric":  						c.Precision = (byte)dr["NUMERIC_PRECISION"];  						c.Scale = (int)dr["NUMERIC_SCALE"];  						break;  				}
