Implementation smell,Namespace,Class,File,Method,Description
Long Method,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,ParseFGD,The method has 103 lines of code.
Complex Method,VMFInstanceInserter,Program,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\Program.cs,Main,Cyclomatic complexity of the method is 12
Complex Method,VMFInstanceInserter,VMFFile,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFFile.cs,VMFFile,Cyclomatic complexity of the method is 8
Complex Method,VMFInstanceInserter,VMFFile,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFFile.cs,ResolveInstances,Cyclomatic complexity of the method is 19
Complex Method,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,ParseFGD,Cyclomatic complexity of the method is 26
Complex Method,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,Cyclomatic complexity of the method is 19
Complex Method,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,Cyclomatic complexity of the method is 8
Complex Method,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,Transform,Cyclomatic complexity of the method is 13
Long Parameter List,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,The method has 7 parameters. Parameters: clone' idOffset' nodeOffset' fixupStyle' targetName' replacements' matReplacements
Long Parameter List,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,Clone,The method has 6 parameters. Parameters: idOffset' nodeOffset' fixupStyle' targetName' replacements' matReplacements
Long Statement,VMFInstanceInserter,VMFFile,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFFile.cs,ResolveInstances,The length of the statement  "                            VMFVector3Value anglesVal = (structure["angles"] as VMFVector3Value) ?? new VMFVector3Value { Pitch = 0' Roll = 0' Yaw = 0 }; " is 125.
Long Statement,VMFInstanceInserter,VMFFile,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFFile.cs,ResolveInstances,The length of the statement  "                                        matReplacements.Add(new KeyValuePair<String' String>(split[0].Substring(1).Trim()' keyVal.Value.String.Substring(split[0].Length + 1).Trim())); " is 143.
Long Statement,VMFInstanceInserter,VMFFile,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFFile.cs,ResolveInstances,The length of the statement  "                                    replacements.Add(new KeyValuePair<String' String>(split[0].Trim()' keyVal.Value.String.Substring(split[0].Length + 1).Trim())); " is 127.
Long Statement,VMFInstanceInserter,VMFTextureInfoValue,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Clone,The length of the statement  "            return new VMFTextureInfoValue { Direction = (VMFVector3Value) this.Direction.Clone()' Pan = this.Pan' Scale = this.Scale }; " is 124.
Complex Conditional,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,FixupName,The conditional expression  "fixupStyle == TargetNameFixupStyle.None || targetName == null || name.StartsWith("@") || name.StartsWith("!")"  is complex.
Complex Conditional,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,The conditional expression  "fixup && (kvClone.Key == "targetname" || trans == TransformType.EntityName) && fixupStyle != TargetNameFixupStyle.None && targetName != null"  is complex.
Virtual Method Call from Constructor,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,The constructor "VMFStructure" calls a virtual method "OffsetIdentifiers".
Magic Number,VMFInstanceInserter,Program,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\Program.cs,Main,The following statement contains a magic number: String dest = (paths.Count >= 2 ? paths[1] : rootName + ".temp.vmf");
Magic Number,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,The following statement contains a magic number: switch (stInputsDict[split[1]]) {                                  case TransformType.EntityName:                                      split[2] = FixupName(split[2]' fixupStyle' targetName);                                      break;                                  // add more later                              }
Magic Number,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,The following statement contains a magic number: switch (stInputsDict[split[1]]) {                                  case TransformType.EntityName:                                      split[2] = FixupName(split[2]' fixupStyle' targetName);                                      break;                                  // add more later                              }
Magic Number,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,The following statement contains a magic number: pair.Length != 2
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,GetCosAndSin,The following statement contains a magic number: angle -= Math.Floor(angle / 360.0) * 360.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,GetCosAndSin,The following statement contains a magic number: angle -= Math.Floor(angle / 360.0) * 360.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,GetCosAndSin,The following statement contains a magic number: switch ((int) angle) {                      case 0:                          cos = 1; sin = 0; return;                      case 90:                          cos = 0; sin = 1; return;                      case 180:                          cos = -1; sin = 0; return;                      case 270:                          cos = 0; sin = -1; return;                  }
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,GetCosAndSin,The following statement contains a magic number: switch ((int) angle) {                      case 0:                          cos = 1; sin = 0; return;                      case 90:                          cos = 0; sin = 1; return;                      case 180:                          cos = -1; sin = 0; return;                      case 270:                          cos = 0; sin = -1; return;                  }
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,GetCosAndSin,The following statement contains a magic number: switch ((int) angle) {                      case 0:                          cos = 1; sin = 0; return;                      case 90:                          cos = 0; sin = 1; return;                      case 180:                          cos = -1; sin = 0; return;                      case 270:                          cos = 0; sin = -1; return;                  }
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,GetCosAndSin,The following statement contains a magic number: angle = angle * Math.PI / 180;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Mult,The following statement contains a magic number: double['] o = new double[3' 3];
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Mult,The following statement contains a magic number: double['] o = new double[3' 3];
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Mult,The following statement contains a magic number: i < 3
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Mult,The following statement contains a magic number: c < 3
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Mult,The following statement contains a magic number: r < 3
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: yaw = Math.Atan2(mat[1' 0]' mat[0' 0]) / Math.PI * 180.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: pitch = Math.Atan2(-mat[2' 0]' mat[0' 0]) / Math.PI * 180.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: pitch = Math.Atan2(-mat[2' 0]' mat[0' 0]) / Math.PI * 180.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: roll = Math.Atan2(-mat[1' 2]' mat[1' 1]) / Math.PI * 180.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: roll = Math.Atan2(-mat[1' 2]' mat[1' 1]) / Math.PI * 180.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: yaw -= Math.Floor(yaw / 360.0) * 360.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: yaw -= Math.Floor(yaw / 360.0) * 360.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: pitch -= Math.Floor(pitch / 360.0) * 360.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: pitch -= Math.Floor(pitch / 360.0) * 360.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: roll -= Math.Floor(roll / 360.0) * 360.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,FindAngles,The following statement contains a magic number: roll -= Math.Floor(roll / 360.0) * 360.0;
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Rotate,The following statement contains a magic number: X = x * mat[0' 0] + y * mat[0' 1] + z * mat[0' 2];
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Rotate,The following statement contains a magic number: Y = x * mat[1' 0] + y * mat[1' 1] + z * mat[1' 2];
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Rotate,The following statement contains a magic number: Z = x * mat[2' 0] + y * mat[2' 1] + z * mat[2' 2];
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Rotate,The following statement contains a magic number: Z = x * mat[2' 0] + y * mat[2' 1] + z * mat[2' 2];
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Rotate,The following statement contains a magic number: Z = x * mat[2' 0] + y * mat[2' 1] + z * mat[2' 2];
Magic Number,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,Rotate,The following statement contains a magic number: Z = x * mat[2' 0] + y * mat[2' 1] + z * mat[2' 2];
Missing Default,VMFInstanceInserter,Program,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\Program.cs,Main,The following switch statement is missing a default case: switch (arg.Substring(1).ToLower()) {                          case "c":                          case "-cleanup":                              cleanup = true;                              break;                          case "d":                          case "-fgd":                              fgdpaths = args[++i].Split(''').Select(x => x.Trim()).ToArray();                              break;                      }
Missing Default,VMFInstanceInserter,VMFFile,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFFile.cs,ResolveInstances,The following switch statement is missing a default case: switch(classnameVal.String) {                           case "func_instance":                              structures.RemoveAt(i);                                VMFStringValue fileVal = structure["file"] as VMFStringValue;                              VMFVector3Value originVal = (structure["origin"] as VMFVector3Value) ?? new VMFVector3Value { X = 0' Y = 0' Z = 0 };                              VMFVector3Value anglesVal = (structure["angles"] as VMFVector3Value) ?? new VMFVector3Value { Pitch = 0' Roll = 0' Yaw = 0 };                              VMFNumberValue fixup_styleVal = (structure["fixup_style"] as VMFNumberValue) ?? new VMFNumberValue { Value = 0 };                              VMFValue targetnameVal = structure["targetname"];                                Regex pattern = new Regex("^replace[0-9]*$");                              List<KeyValuePair<String' String>> replacements = new List<KeyValuePair<String' String>>();                              List<KeyValuePair<String' String>> matReplacements = new List<KeyValuePair<String' String>>();                                foreach (KeyValuePair<String' VMFValue> keyVal in structure.Properties) {                                  if (pattern.IsMatch(keyVal.Key)) {                                      String[] split = keyVal.Value.String.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                                      if (split.Length < 1)                                          continue;                                        if (split[0].StartsWith("#")) {                                          matReplacements.Add(new KeyValuePair<String' String>(split[0].Substring(1).Trim()' keyVal.Value.String.Substring(split[0].Length + 1).Trim()));                                          continue;                                      }                                        if (!split[0].StartsWith("$")) {                                          Console.WriteLine("Invalid property replacement name \"{0}\" - needs to begin with a $"' split[0]);                                          continue;                                      }                                        replacements.Add(new KeyValuePair<String' String>(split[0].Trim()' keyVal.Value.String.Substring(split[0].Length + 1).Trim()));                                  }                              }                                replacements = replacements.OrderByDescending(x => x.Key.Length).ToList();                              matReplacements = matReplacements.OrderByDescending(x => x.Key.Length).ToList();                                TargetNameFixupStyle fixupStyle = (TargetNameFixupStyle) fixup_styleVal.Value;                              String targetName = (targetnameVal != null ? targetnameVal.String : null);                                if (fixupStyle != TargetNameFixupStyle.None && targetName == null)                                  targetName = "AutoInstance" + (autoName++);                                if (fileVal == null) {                                  Console.WriteLine("Invalid instance at (" + originVal.String + ")");                                  continue;                              }                                Console.WriteLine("Inserting instance of {0} at ({1})' ({2})"' fileVal.String' originVal.String' anglesVal.String);                                String file = fileVal.String;                              VMFFile vmf = null;                                if (stVMFCache.ContainsKey(file))                                  vmf = stVMFCache[file];                              else {                                  vmf = new VMFFile(file' Path.GetDirectoryName(OriginalPath));                                  if (vmf.Root != null)                                      vmf.ResolveInstances();                              }                                if (vmf.Root == null) {                                  Console.WriteLine("Could not insert!");                                  continue;                              }                                foreach (VMFStructure worldStruct in vmf.World) {                                  if (worldStruct.Type == VMFStructureType.Group || worldStruct.Type == VMFStructureType.Solid) {                                      VMFStructure clone = worldStruct.Clone(LastID' LastNodeID' fixupStyle' targetName' replacements' matReplacements);                                      clone.Transform(originVal' anglesVal);                                      World.Structures.Add(clone);                                  }                              }                                int index = i;                                foreach (VMFStructure rootStruct in vmf.Root) {                                  if (rootStruct.Type == VMFStructureType.Entity) {                                      VMFStructure clone = rootStruct.Clone(LastID' LastNodeID' fixupStyle' targetName' replacements' matReplacements);                                      clone.Transform(originVal' anglesVal);                                      Root.Structures.Insert(index++' clone);                                  }                              }                                LastID = Root.GetLastID();                              LastNodeID = Root.GetLastNodeID();                              break;                          case "func_instance_parms":                              structures.RemoveAt(i);                              break;                      }
Missing Default,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,ParseFGD,The following switch statement is missing a default case: switch (typeName) {                          case "angle":                              type = TransformType.Angle;                              break;                          case "origin":                              type = TransformType.Position;                              break;                          case "target_destination":                          case "target_source":                          case "filterclass":                              type = TransformType.EntityName;                              break;                          case "vecline":                              // Single point axis helpers (see phys_motor' for example) are stored                              // as absolute world coordinates' not angles as one might expect.                              type = TransformType.Position;                              break;                          case "vector":                              // Temporary hack to fix mistake on valve's part                              if (curName == "func_useableladder" && (name == "point0" || name == "point1")) {                                  type = TransformType.Position;                              } else if (curName == "info_overlay") {                                  if (name == "BasisOrigin")                                      type = TransformType.Position;                                  else if (name == "BasisNormal" || name == "BasisU" || name == "BasisV")                                      type = TransformType.Offset;                                  else                                      type = TransformType.None;                              } else {                                  type = TransformType.Offset;                              }                              break;                          case "sidelist":                              type = TransformType.Identifier;                              break;                      }
Missing Default,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,VMFStructure,The following switch statement is missing a default case: switch (stInputsDict[split[1]]) {                                  case TransformType.EntityName:                                      split[2] = FixupName(split[2]' fixupStyle' targetName);                                      break;                                  // add more later                              }
Missing Default,VMFInstanceInserter,VMFStructure,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFStructure.cs,Transform,The following switch statement is missing a default case: switch (trans) {                          case TransformType.Offset:                              keyVal.Value.Rotate(rotation);                              break;                          case TransformType.Angle:                              keyVal.Value.AddAngles(rotation);                              break;                          case TransformType.Position:                              keyVal.Value.Rotate(rotation);                              keyVal.Value.Offset(translation);                              break;                      }
Missing Default,VMFInstanceInserter,VMFVector3Value,D:\research\architectureSmells\repos\Metapyziks_VMFInstanceInserter\VMFInstanceInserter\VMFValue.cs,GetCosAndSin,The following switch statement is missing a default case: switch ((int) angle) {                      case 0:                          cos = 1; sin = 0; return;                      case 90:                          cos = 0; sin = 1; return;                      case 180:                          cos = -1; sin = 0; return;                      case 270:                          cos = 0; sin = -1; return;                  }
