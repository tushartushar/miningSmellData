Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Akka.Cluster.Sharding,PersistentShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,ReceiveRecover,Cyclomatic complexity of the method is 11
Complex Method,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,Cyclomatic complexity of the method is 14
Complex Method,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandleCommand,Cyclomatic complexity of the method is 10
Complex Method,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,Active,Cyclomatic complexity of the method is 19
Complex Method,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Receive,Cyclomatic complexity of the method is 11
Complex Method,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,DeliverMessage,Cyclomatic complexity of the method is 11
Complex Method,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,HandleCoordinatorMessage,Cyclomatic complexity of the method is 15
Complex Method,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,HandleClusterEvent,Cyclomatic complexity of the method is 9
Complex Method,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,Cyclomatic complexity of the method is 30
Complex Method,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,Manifest,Cyclomatic complexity of the method is 30
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 7 parameters. Parameters: typeName' entityProps' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 7 parameters. Parameters: typeName' entityProps' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 5 parameters. Parameters: typeName' entityProps' settings' extractEntityId' extractShardId
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 5 parameters. Parameters: typeName' entityProps' settings' extractEntityId' extractShardId
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 6 parameters. Parameters: typeName' entityProps' settings' messageExtractor' allocationStrategy' handOffMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 6 parameters. Parameters: typeName' entityProps' settings' messageExtractor' allocationStrategy' handOffMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 7 parameters. Parameters: typeName' entityPropsFactory' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 7 parameters. Parameters: typeName' entityPropsFactory' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 5 parameters. Parameters: typeName' entityPropsFactory' settings' extractEntityId' extractShardId
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 5 parameters. Parameters: typeName' entityPropsFactory' settings' extractEntityId' extractShardId
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 6 parameters. Parameters: typeName' entityPropsFactory' settings' messageExtractor' allocationStrategy' handOffMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 6 parameters. Parameters: typeName' entityPropsFactory' settings' messageExtractor' allocationStrategy' handOffMessage
Long Parameter List,Akka.Cluster.Sharding,RebalanceWorker,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Props,The method has 5 parameters. Parameters: shard' from' handOffTimeout' regions' shuttingDownRegions
Long Parameter List,Akka.Cluster.Sharding,RebalanceWorker,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,RebalanceWorker,The method has 5 parameters. Parameters: shard' from' handOffTimeout' regions' shuttingDownRegions
Long Parameter List,Akka.Cluster.Sharding,Start,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingGuardian.cs,Start,The method has 7 parameters. Parameters: typeName' entityProps' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,TunningParameters,The method has 17 parameters. Parameters: coordinatorFailureBackoff' retryInterval' bufferSize' handOffTimeout' shardStartTimeout' shardFailureBackoff' entityRestartBackoff' rebalanceInterval' snapshotAfter' keepNrOfBatches' leastShardAllocationRebalanceThreshold' leastShardAllocationMaxSimultaneousRebalance' waitingForStateTimeout' updatingStateTimeout' entityRecoveryStrategy' entityRecoveryConstantRateStrategyFrequency' entityRecoveryConstantRateStrategyNumberOfEntities
Long Parameter List,Akka.Cluster.Sharding,ClusterShardingSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,ClusterShardingSettings,The method has 8 parameters. Parameters: role' rememberEntities' journalPluginId' snapshotPluginId' passivateIdleEntityAfter' stateStoreMode' tunningParameters' coordinatorSingletonSettings
Long Parameter List,Akka.Cluster.Sharding,ClusterShardingSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,Copy,The method has 8 parameters. Parameters: role' rememberEntities' journalPluginId' snapshotPluginId' passivateIdleAfter' stateStoreMode' tunningParameters' coordinatorSingletonSettings
Long Parameter List,Akka.Cluster.Sharding,DDataShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\DDataShard.cs,DDataShard,The method has 9 parameters. Parameters: typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage' replicator' majorityCap
Long Parameter List,Akka.Cluster.Sharding,DDataShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\DDataShardCoordinator.cs,Props,The method has 6 parameters. Parameters: typeName' settings' allocationStrategy' replicator' majorityMinCap' rememberEntities
Long Parameter List,Akka.Cluster.Sharding,DDataShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\DDataShardCoordinator.cs,DDataShardCoordinator,The method has 6 parameters. Parameters: typeName' settings' allocationStrategy' replicator' majorityMinCap' rememberEntities
Long Parameter List,Akka.Cluster.Sharding,PersistentShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,PersistentShard,The method has 7 parameters. Parameters: typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,State,The method has 5 parameters. Parameters: shards' regions' regionProxies' unallocatedShards' rememberEntities
Long Parameter List,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Copy,The method has 5 parameters. Parameters: shards' regions' regionProxies' unallocatedShards' rememberEntities
Long Parameter List,Akka.Cluster.Sharding,Shard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Shard,The method has 7 parameters. Parameters: typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,BaseDeliverTo,The method has 5 parameters. Parameters: shard' id' message' payload' sender
Long Parameter List,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Props,The method has 9 parameters. Parameters: typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage' replicator' majorityMinCap
Long Parameter List,Akka.Cluster.Sharding,RememberEntityStarter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Props,The method has 6 parameters. Parameters: region' typeName' shardId' ids' settings' requestor
Long Parameter List,Akka.Cluster.Sharding,RememberEntityStarter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,RememberEntityStarter,The method has 6 parameters. Parameters: region' typeName' shardId' ids' settings' requestor
Long Parameter List,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Props,The method has 9 parameters. Parameters: typeName' entityProps' settings' coordinatorPath' extractEntityId' extractShardId' handOffStopMessage' replicator' majorityMinCap
Long Parameter List,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,ProxyProps,The method has 7 parameters. Parameters: typeName' settings' coordinatorPath' extractEntityId' extractShardId' replicator' majorityMinCap
Long Parameter List,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,ShardRegion,The method has 9 parameters. Parameters: typeName' entityProps' settings' coordinatorPath' extractEntityId' extractShardId' handOffStopMessage' replicator' majorityMinCap
Long Parameter List,Akka.Cluster.Sharding,HandOffStopper,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Props,The method has 5 parameters. Parameters: shard' replyTo' entities' stopMessage' handoffTimeout
Long Parameter List,Akka.Cluster.Sharding,HandOffStopper,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,HandOffStopper,The method has 5 parameters. Parameters: shard' replyTo' entities' stopMessage' handoffTimeout
Long Identifier,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,TunningParameters,The length of the parameter leastShardAllocationRebalanceThreshold is 38.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,TunningParameters,The length of the parameter leastShardAllocationMaxSimultaneousRebalance is 44.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,TunningParameters,The length of the parameter entityRecoveryConstantRateStrategyFrequency is 43.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,TunningParameters,The length of the parameter entityRecoveryConstantRateStrategyNumberOfEntities is 50.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,,The length of the parameter LeastShardAllocationRebalanceThreshold is 38.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,,The length of the parameter LeastShardAllocationMaxSimultaneousRebalance is 44.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,,The length of the parameter EntityRecoveryConstantRateStrategyFrequency is 43.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,,The length of the parameter EntityRecoveryConstantRateStrategyNumberOfEntities is 50.
Long Identifier,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,,The length of the parameter ShardRegionProxyRegisteredManifest is 34.
Long Identifier,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,,The length of the parameter ShardRegionProxyTerminatedManifest is 34.
Long Identifier,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,,The length of the parameter GetClusterShardingStatsManifest is 31.
Long Identifier,Akka.Cluster.Sharding.Serialization.Proto.Msg,CoordinatorState,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,,The length of the parameter _repeated_unallocatedShards_codec is 33.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The length of the statement  "                var startMsg = new ClusterShardingGuardian.Start(typeName' _ => entityProps' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage); " is 160.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The length of the statement  "                var startMsg = new ClusterShardingGuardian.Start(typeName' _ => entityProps' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage); " is 160.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The length of the statement  "            return Start(typeName' entityProps' settings' extractEntityId' extractShardId' allocationStrategy' PoisonPill.Instance); " is 120.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The length of the statement  "            return StartAsync(typeName' entityProps' settings' extractEntityId' extractShardId' allocationStrategy' PoisonPill.Instance); " is 125.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The length of the statement  "            return StartAsync(typeName' entityProps' settings' extractEntityId' extractShardId' allocationStrategy' handOffMessage); " is 120.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The length of the statement  "                var startMsg = new ClusterShardingGuardian.Start(typeName' entityPropsFactory' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage); " is 162.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The length of the statement  "                var startMsg = new ClusterShardingGuardian.Start(typeName' entityPropsFactory' settings' extractEntityId' extractShardId' allocationStrategy' handOffStopMessage); " is 162.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The length of the statement  "            return Start(typeName' entityPropsFactory' settings' extractEntityId' extractShardId' allocationStrategy' PoisonPill.Instance); " is 127.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The length of the statement  "            return StartAsync(typeName' entityPropsFactory' settings' extractEntityId' extractShardId' allocationStrategy' PoisonPill.Instance); " is 132.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The length of the statement  "            return Start(typeName' entityPropsFactory' settings' extractEntityId' extractShardId' allocationStrategy' handOffMessage); " is 122.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The length of the statement  "            return StartAsync(typeName' entityPropsFactory' settings' extractEntityId' extractShardId' allocationStrategy' handOffMessage); " is 127.
Long Statement,Akka.Cluster.Sharding,ClusterShardingGuardian,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingGuardian.cs,Replicator,The length of the statement  "                    var replicatorRef = Context.ActorOf(DistributedData.Replicator.Props(_replicatorSettings.WithRole(settings.Role))' name); " is 121.
Long Statement,Akka.Cluster.Sharding,ClusterShardingSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,Create,The length of the statement  "                leastShardAllocationMaxSimultaneousRebalance: config.GetInt("least-shard-allocation-strategy.max-simultaneous-rebalance")' " is 122.
Long Statement,Akka.Cluster.Sharding,ClusterShardingSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,Create,The length of the statement  "                entityRecoveryConstantRateStrategyNumberOfEntities: config.GetInt("entity-recovery-constant-rate-strategy.number-of-entities")); " is 128.
Long Statement,Akka.Cluster.Sharding,ClusterShardingSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,Create,The length of the statement  "                stateStoreMode: (StateStoreMode)Enum.Parse(typeof(StateStoreMode)' config.GetString("state-store-mode")' ignoreCase: true)' " is 123.
Long Statement,Akka.Cluster.Sharding,ClusterShardingSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,WithTuningParameters,The length of the statement  "                throw new ArgumentNullException(nameof(tunningParameters)' $"ClusterShardingSettings requires {nameof(tunningParameters)} to be provided"); " is 139.
Long Statement,Akka.Cluster.Sharding,ClusterShardingSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,WithCoordinatorSingletonSettings,The length of the statement  "                throw new ArgumentNullException(nameof(coordinatorSingletonSettings)' $"ClusterShardingSettings requires {nameof(coordinatorSingletonSettings)} to be provided"); " is 161.
Long Statement,Akka.Cluster.Sharding,DDataShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\DDataShard.cs,RestartRememberedEntities,The length of the statement  "                scheduledRecovery.ContinueWith(t => new Shard.RestartEntities(t.Result)' TaskContinuationOptions.ExecuteSynchronously).PipeTo(Self' Self); " is 138.
Long Statement,Akka.Cluster.Sharding,DDataShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\DDataShardCoordinator.cs,Update,The length of the statement  "                case PersistentShardCoordinator.ShardHomeAllocated allocated when _rememberEntities && !_shards.Contains(allocated.Shard): " is 122.
Long Statement,Akka.Cluster.Sharding,DDataShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\DDataShardCoordinator.cs,Update,The length of the statement  "                    Context.BecomeStacked(WaitingForUpdate(e' handler' ImmutableHashSet.Create<IKey<IReplicatedData>>(_coordinatorStateKey))); " is 122.
Long Statement,Akka.Cluster.Sharding,PersistentShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,ReceiveCommand,The length of the statement  "                    InternalDeleteMessagesBeforeSnapshot(m' Settings.TunningParameters.KeepNrOfBatches' Settings.TunningParameters.SnapshotAfter); " is 126.
Long Statement,Akka.Cluster.Sharding,PersistentShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,ReceiveCommand,The length of the statement  "                    var deleteFrom = Math.Max(0' deleteTo - Settings.TunningParameters.KeepNrOfBatches * Settings.TunningParameters.SnapshotAfter); " is 127.
Long Statement,Akka.Cluster.Sharding,PersistentShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,ReceiveCommand,The length of the statement  "                    Log.Debug("PersistentShard messages to [{0}] deleted successfully. Deleting snapshots from [{1}] to [{2}]"' m.ToSequenceNr' deleteFrom' deleteTo); " is 146.
Long Statement,Akka.Cluster.Sharding,PersistentShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,RestartRememberedEntities,The length of the statement  "                scheduledRecovery.ContinueWith(t => new Shard.RestartEntities(t.Result)' TaskContinuationOptions.ExecuteSynchronously).PipeTo(Self' Self)); " is 139.
Long Statement,Akka.Cluster.Sharding,PersistentShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,EntityTerminated,The length of the statement  "                    Context.System.Scheduler.ScheduleTellOnce(Settings.TunningParameters.EntityRestartBackoff' Self' new Shard.RestartEntity(id)' ActorRefs.NoSender); " is 146.
Long Statement,Akka.Cluster.Sharding,PersistentShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,HandleSnapshotResult,The length of the statement  "                    InternalDeleteMessagesBeforeSnapshot(m' Settings.TunningParameters.KeepNrOfBatches' Settings.TunningParameters.SnapshotAfter); " is 126.
Long Statement,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Copy,The length of the statement  "                if (shards == null && regions == null && regionProxies == null && unallocatedShards == null && rememberEntities == null) return this; " is 133.
Long Statement,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Copy,The length of the statement  "                return new State(shards ?? Shards' regions ?? Regions' regionProxies ?? RegionProxies' unallocatedShards ?? UnallocatedShards' rememberEntities ?? RememberEntities); " is 165.
Long Statement,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandleStartEntity,The length of the statement  "            shard.Log.Debug("Got a request from [{0}] to start entity [{1}] in shard [{2}]"' requester' start.EntityId' shard.ShardId); " is 123.
Long Statement,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandleStartEntityAck,The length of the statement  "                shard.Log.Debug("Entity [{0}] previously owned by shard [{1}] started in shard [{2}]"' ack.EntityId' shard.ShardId' ack.ShardId); " is 129.
Long Statement,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandleRestartEntities,The length of the statement  "            shard.Context.ActorOf(RememberEntityStarter.Props(shard.Context.Parent' shard.TypeName' shard.ShardId' ids' shard.Settings' shard.Sender)); " is 139.
Long Statement,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandOff,The length of the statement  "            if (shard.HandOffStopper != null) shard.Log.Warning("HandOff shard [{0}] received during existing handOff"' shard.ShardId); " is 123.
Long Statement,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandOff,The length of the statement  "                        ShardRegion.HandOffStopper.Props(shard.ShardId' replyTo' shard.IdByRef.Keys' shard.HandOffStopMessage' entityHandOffTimeout))); " is 127.
Long Statement,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Props,The length of the statement  "                    return Actor.Props.Create(() => new PersistentShard(typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage)).WithDeploy(Deploy.Local); " is 173.
Long Statement,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Props,The length of the statement  "                    return Actor.Props.Create(() => new DDataShard(typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage' replicator' majorityMinCap)).WithDeploy(Deploy.Local); " is 196.
Long Statement,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Props,The length of the statement  "                    return Actor.Props.Create(() => new Shard(typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage)).WithDeploy(Deploy.Local); " is 163.
Long Statement,Akka.Cluster.Sharding,LeastShardAllocationStrategy,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardAllocationStrategy.cs,Rebalance,The length of the statement  "                var mostShards = currentShardAllocations.Select(kv => kv.Value.Where(s => !rebalanceInProgress.Contains(s))).OrderByDescending(i => i.Count()).FirstOrDefault()?.ToArray(); " is 171.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,IsMember,The length of the statement  "            return addr == coordinator.Self.Path.Address || coordinator.Cluster.ReadView.Members.Any(m => m.Address == addr && m.Status == MemberStatus.Up); " is 144.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,Active,The length of the statement  "                case PersistentShardCoordinator.GracefulShutdownRequest msg: HandleGracefulShutdownRequest(coordinator' msg); return true; " is 122.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,Active,The length of the statement  "                        .Select(region => string.IsNullOrEmpty(region.Path.Address.Host) ? coordinator.Cluster.SelfAddress : region.Path.Address) " is 121.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,WatchStateActors,The length of the statement  "            coordinator.Context.System.Scheduler.ScheduleTellOnce(TimeSpan.FromMilliseconds(500)' coordinator.Self' PersistentShardCoordinator.StateInitialized.Instance' ActorRefs.NoSender); " is 178.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,HandleGracefulShutdownRequest,The length of the statement  "                    coordinator.Log.Debug("Graceful shutdown of region [{0}] with shards [{1}]"' request.ShardRegion' string.Join("' "' shards)); " is 125.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,DeferGetShardHomeRequest,The length of the statement  "            coordinator.Log.Debug("GetShardHome [{0}] request from [{1}] deferred' because rebalance is in progress for this shard. It will be handled when rebalance is done."' shard' from); " is 178.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,HandleRebalanceTick,The length of the statement  "                var shardsTask = coordinator.AllocationStrategy.Rebalance(coordinator.CurrentState.Regions' coordinator.RebalanceInProgress.Keys.ToImmutableHashSet()); " is 151.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,HandleRebalanceTick,The length of the statement  "                        : new PersistentShardCoordinator.RebalanceResult(ImmutableHashSet<ShardId>.Empty)' TaskContinuationOptions.ExecuteSynchronously) " is 128.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,HandleGetShardHome,The length of the statement  "                        coordinator.Log.Debug("GetShardHome [{0}] request ignored' due to region [{1}] termination in progress."' shard' region); " is 121.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,RegionProxyTerminated,The length of the statement  "                coordinator.Update(new PersistentShardCoordinator.ShardRegionProxyTerminated(proxyRef)' e => coordinator.CurrentState = coordinator.CurrentState.Updated(e)); " is 157.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,HandleRegister,The length of the statement  "            else coordinator.Log.Debug("ShardRegion [{0}] was not registered since the coordinator currently does not know about a node of that region"' region); " is 149.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,HandleGetClusterShardingStats,The length of the statement  "                coordinator.AliveRegions.Select(regionActor => regionActor.Ask<ShardRegionStats>(GetShardRegionStats.Instance' message.Timeout).ContinueWith(r => (regionActor' r.Result)' TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion)) " is 265.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,HandleGetClusterShardingStats,The length of the statement  "                        Address address = (regionAddress.HasLocalScope && regionAddress.System == coordinator.Cluster.SelfAddress.System) ? coordinator.Cluster.SelfAddress : regionAddress; " is 164.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,ContinueRebalance,The length of the statement  "                        coordinator.Context.ActorOf(RebalanceWorker.Props(shard' rebalanceFromRegion' coordinator.Settings.TunningParameters.HandOffTimeout' regions' coordinator.GracefullShutdownInProgress) " is 182.
Long Statement,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,ContinueGetShardHome,The length of the statement  "                        coordinator.Log.Debug("Allocated region {0} for shard [{1}] is not (any longer) one of the registered regions"' region' shard); " is 127.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Props,The length of the statement  "            return Actor.Props.Create(() => new ShardRegion(typeName' entityProps' settings' coordinatorPath' extractEntityId' extractShardId' handOffStopMessage' replicator' majorityMinCap)).WithDeploy(Deploy.Local); " is 205.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,ProxyProps,The length of the statement  "            return Actor.Props.Create(() => new ShardRegion(typeName' null' settings' coordinatorPath' extractEntityId' extractShardId' PoisonPill.Instance' replicator' majorityMinCap)).WithDeploy(Deploy.Local); " is 199.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Register,The length of the statement  "                    var coordinatorMessage = Cluster.State.Unreachable.Contains(MembersByAge.First()) ? $"Coordinator [{MembersByAge.First()}] is unreachable." : $"Coordinator [{MembersByAge.First()}] is reachable."; " is 196.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Register,The length of the statement  "                    Log.Warning("No coordinator found to register. Probably' no seed-nodes configured and manual cluster join not performed? Total [{0}] buffered messages."' " is 153.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,BufferMessage,The length of the statement  "                        Log.Warning(logMsg + " The coordinator might not be available. You might want to check cluster membership status."' TypeName' 100 * total / bufferSize); " is 152.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,ReplyToRegionStateQuery,The length of the statement  "                    return new CurrentShardRegionState(shardStates.Result.Select(x => new ShardState(x.Item1' x.Item2.EntityIds.ToImmutableHashSet())).ToImmutableHashSet()); " is 153.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,AskAllShardsAsync,The length of the statement  "            var tasks = Shards.Select(entity => entity.Value.Ask<T>(message' timeout).ContinueWith(t => (entity.Key' t.Result)' TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnRanToCompletion)); " is 211.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,HandleClusterState,The length of the statement  "            var members = ImmutableSortedSet<Member>.Empty.WithComparer(AgeOrdering).Union(state.Members.Where(m => m.Status == MemberStatus.Up && MatchingRole(m))); " is 153.
Long Statement,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,HandleTerminated,The length of the statement  "                        Context.System.Scheduler.ScheduleTellOnce(Settings.TunningParameters.ShardFailureBackoff' Self' new RestartShard(shard)' Self); " is 127.
Long Statement,Akka.Cluster.Sharding,HandOffStopper,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Props,The length of the statement  "                return Actor.Props.Create(() => new HandOffStopper(shard' replyTo' entities' stopMessage' handoffTimeout)).WithDeploy(Deploy.Local); " is 132.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "                case PersistentShardCoordinator.ShardRegionProxyRegistered o: return ActorRefMessageToProto(o.RegionProxy).ToByteArray(); " is 121.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "                case PersistentShardCoordinator.ShardRegionProxyTerminated o: return ActorRefMessageToProto(o.RegionProxy).ToByteArray(); " is 121.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,FromBinary,The length of the statement  "            throw new SerializationException($"Unimplemented deserialization of message with manifest [{manifest}] in [{this.GetType()}]"); " is 127.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,CoordinatorStateFromBinary,The length of the statement  "            var shards = ImmutableDictionary.CreateRange(state.Shards.Select(entry => new KeyValuePair<string' IActorRef>(entry.ShardId' ResolveActorRef(entry.RegionRef)))); " is 161.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,CoordinatorStateFromBinary,The length of the statement  "            var regionsZero = ImmutableDictionary.CreateRange(state.Regions.Select(region => new KeyValuePair<IActorRef' IImmutableList<string>>(ResolveActorRef(region)' ImmutableList<string>.Empty))); " is 189.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ClusterShardingStatsToProto,The length of the statement  "                p.Regions.Add(new ShardRegionWithAddress() { NodeAddress = AddressToProto(s.Key)' Stats = ShardRegionStatsToProto(s.Value)}); " is 125.
Complex Conditional,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Copy,The conditional expression  "shards == null && regions == null && regionProxies == null && unallocatedShards == null && rememberEntities == null"  is complex.
Magic Number,Akka.Cluster.Sharding,ClusterShardingGuardian,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingGuardian.cs,ClusterShardingGuardian,The following statement contains a magic number: Receive<Start>(start =>              {                  try                  {                      var settings = start.Settings;                      var encName = Uri.EscapeDataString(start.TypeName);                      var coordinatorSingletonManagerName = CoordinatorSingletonManagerName(encName);                      var coordinatorPath = CoordinatorPath(encName);                      var replicator = Replicator(settings);                        var shardRegion = Context.Child(encName).GetOrElse(() =>                      {                          if (Equals(Context.Child(coordinatorSingletonManagerName)' ActorRefs.Nobody))                          {                              var minBackoff = settings.TunningParameters.CoordinatorFailureBackoff;                              var maxBackoff = new TimeSpan(minBackoff.Ticks * 5);                              var coordinatorProps = settings.StateStoreMode == StateStoreMode.Persistence                                  ? PersistentShardCoordinator.Props(start.TypeName' settings' start.AllocationStrategy)                                  : DDataShardCoordinator.Props(start.TypeName' settings' start.AllocationStrategy' replicator' _majorityMinCap' settings.RememberEntities);                                var singletonProps = BackoffSupervisor.Props(coordinatorProps' "coordinator"' minBackoff' maxBackoff' 0.2' -1).WithDeploy(Deploy.Local);                              var singletonSettings = settings.CoordinatorSingletonSettings.WithSingletonName("singleton").WithRole(settings.Role);                              Context.ActorOf(ClusterSingletonManager.Props(singletonProps' PoisonPill.Instance' singletonSettings).WithDispatcher(Context.Props.Dispatcher)' coordinatorSingletonManagerName);                          }                          return Context.ActorOf(ShardRegion.Props(                              typeName: start.TypeName'                              entityProps: start.EntityProps'                              settings: settings'                              coordinatorPath: coordinatorPath'                              extractEntityId: start.ExtractEntityId'                              extractShardId: start.ExtractShardId'                              handOffStopMessage: start.HandOffStopMessage'                              replicator: replicator'                              majorityMinCap: _majorityMinCap).WithDispatcher(Context.Props.Dispatcher)' encName);                      });                        Sender.Tell(new Started(shardRegion));                  }                  catch (Exception ex)                  {                      //TODO: JVM version matches NonFatal. Can / should we do something similar?                      // don't restart                      // could be invalid ReplicatorSettings' or InvalidActorNameException                      // if it has already been started                      Sender.Tell(new Status.Failure(ex));                  }              });
Magic Number,Akka.Cluster.Sharding,ClusterShardingGuardian,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingGuardian.cs,ClusterShardingGuardian,The following statement contains a magic number: Receive<Start>(start =>              {                  try                  {                      var settings = start.Settings;                      var encName = Uri.EscapeDataString(start.TypeName);                      var coordinatorSingletonManagerName = CoordinatorSingletonManagerName(encName);                      var coordinatorPath = CoordinatorPath(encName);                      var replicator = Replicator(settings);                        var shardRegion = Context.Child(encName).GetOrElse(() =>                      {                          if (Equals(Context.Child(coordinatorSingletonManagerName)' ActorRefs.Nobody))                          {                              var minBackoff = settings.TunningParameters.CoordinatorFailureBackoff;                              var maxBackoff = new TimeSpan(minBackoff.Ticks * 5);                              var coordinatorProps = settings.StateStoreMode == StateStoreMode.Persistence                                  ? PersistentShardCoordinator.Props(start.TypeName' settings' start.AllocationStrategy)                                  : DDataShardCoordinator.Props(start.TypeName' settings' start.AllocationStrategy' replicator' _majorityMinCap' settings.RememberEntities);                                var singletonProps = BackoffSupervisor.Props(coordinatorProps' "coordinator"' minBackoff' maxBackoff' 0.2' -1).WithDeploy(Deploy.Local);                              var singletonSettings = settings.CoordinatorSingletonSettings.WithSingletonName("singleton").WithRole(settings.Role);                              Context.ActorOf(ClusterSingletonManager.Props(singletonProps' PoisonPill.Instance' singletonSettings).WithDispatcher(Context.Props.Dispatcher)' coordinatorSingletonManagerName);                          }                          return Context.ActorOf(ShardRegion.Props(                              typeName: start.TypeName'                              entityProps: start.EntityProps'                              settings: settings'                              coordinatorPath: coordinatorPath'                              extractEntityId: start.ExtractEntityId'                              extractShardId: start.ExtractShardId'                              handOffStopMessage: start.HandOffStopMessage'                              replicator: replicator'                              majorityMinCap: _majorityMinCap).WithDispatcher(Context.Props.Dispatcher)' encName);                      });                        Sender.Tell(new Started(shardRegion));                  }                  catch (Exception ex)                  {                      //TODO: JVM version matches NonFatal. Can / should we do something similar?                      // don't restart                      // could be invalid ReplicatorSettings' or InvalidActorNameException                      // if it has already been started                      Sender.Tell(new Status.Failure(ex));                  }              });
Magic Number,Akka.Cluster.Sharding,DDataShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\DDataShard.cs,DDataShard,The following statement contains a magic number: var idleInterval = TimeSpan.FromTicks(Settings.PassivateIdleEntityAfter.Ticks / 2);
Magic Number,Akka.Cluster.Sharding,PersistentShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,PersistentShard,The following statement contains a magic number: var idleInterval = TimeSpan.FromTicks(Settings.PassivateIdleEntityAfter.Ticks / 2);
Magic Number,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,GetHashCode,The following statement contains a magic number: int hashCode = 13;
Magic Number,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (v.Key?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (v.Key?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (v?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (v?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Sharding,ShardHome,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Ref?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Sharding,ShardHomeAllocated,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Region?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Sharding,Shard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Shard,The following statement contains a magic number: var idleInterval = TimeSpan.FromTicks(Settings.PassivateIdleEntityAfter.Ticks / 2);
Magic Number,Akka.Cluster.Sharding,ShardState,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,GetHashCode,The following statement contains a magic number: int hashCode = 13;
Magic Number,Akka.Cluster.Sharding,ShardState,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (v?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Sharding,ShardStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EntityCount;
Magic Number,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,WatchStateActors,The following statement contains a magic number: coordinator.Context.System.Scheduler.ScheduleTellOnce(TimeSpan.FromMilliseconds(500)' coordinator.Self' PersistentShardCoordinator.StateInitialized.Instance' ActorRefs.NoSender);
Magic Number,Akka.Cluster.Sharding,ShardRegion,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,AskAllShardsAsync,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(3);
Magic Number,Akka.Cluster.Sharding,StartEntityAck,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (ShardId?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,CoordinatorState,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              shards_.AddEntriesFrom(input' _repeated_shards_codec);              break;            }            case 18: {              regions_.AddEntriesFrom(input' _repeated_regions_codec);              break;            }            case 26: {              regionProxies_.AddEntriesFrom(input' _repeated_regionProxies_codec);              break;            }            case 34: {              unallocatedShards_.AddEntriesFrom(input' _repeated_unallocatedShards_codec);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,CoordinatorState,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              shards_.AddEntriesFrom(input' _repeated_shards_codec);              break;            }            case 18: {              regions_.AddEntriesFrom(input' _repeated_regions_codec);              break;            }            case 26: {              regionProxies_.AddEntriesFrom(input' _repeated_regionProxies_codec);              break;            }            case 34: {              unallocatedShards_.AddEntriesFrom(input' _repeated_unallocatedShards_codec);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,CoordinatorState,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              shards_.AddEntriesFrom(input' _repeated_shards_codec);              break;            }            case 18: {              regions_.AddEntriesFrom(input' _repeated_regions_codec);              break;            }            case 26: {              regionProxies_.AddEntriesFrom(input' _repeated_regionProxies_codec);              break;            }            case 34: {              unallocatedShards_.AddEntriesFrom(input' _repeated_unallocatedShards_codec);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,CoordinatorState,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              shards_.AddEntriesFrom(input' _repeated_shards_codec);              break;            }            case 18: {              regions_.AddEntriesFrom(input' _repeated_regions_codec);              break;            }            case 26: {              regionProxies_.AddEntriesFrom(input' _repeated_regionProxies_codec);              break;            }            case 34: {              unallocatedShards_.AddEntriesFrom(input' _repeated_unallocatedShards_codec);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardEntry,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardEntry,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardEntry,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 10: {                  ShardId = input.ReadString();                  break;                }                case 18: {                  RegionRef = input.ReadString();                  break;                }              }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardEntry,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 10: {                  ShardId = input.ReadString();                  break;                }                case 18: {                  RegionRef = input.ReadString();                  break;                }              }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ActorRefMessage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ActorRefMessage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Ref = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardIdMessage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardIdMessage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Shard = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardHomeAllocated,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardHomeAllocated,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardHomeAllocated,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Shard = input.ReadString();              break;            }            case 18: {              Region = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardHomeAllocated,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Shard = input.ReadString();              break;            }            case 18: {              Region = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardHome,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardHome,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardHome,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Shard = input.ReadString();              break;            }            case 18: {              Region = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardHome,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Shard = input.ReadString();              break;            }            case 18: {              Region = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,EntityState,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              entities_.AddEntriesFrom(input' _repeated_entities_codec);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,EntityStarted,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,EntityStarted,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              EntityId = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,EntityStopped,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,EntityStopped,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              EntityId = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Shard = input.ReadString();              break;            }            case 16: {              EntityCount = input.ReadInt32();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Shard = input.ReadString();              break;            }            case 16: {              EntityCount = input.ReadInt32();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardRegionStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              stats_.AddEntriesFrom(input' _map_stats_codec);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,StartEntity,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,StartEntity,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              EntityId = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,StartEntityAck,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,StartEntityAck,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,StartEntityAck,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              EntityId = input.ReadString();              break;            }            case 18: {              ShardId = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,StartEntityAck,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              EntityId = input.ReadString();              break;            }            case 18: {              ShardId = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,GetClusterShardingStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,GetClusterShardingStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (timeout_ == null) {                timeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(timeout_);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ClusterShardingStats,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              regions_.AddEntriesFrom(input' _repeated_regions_codec);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardRegionWithAddress,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardRegionWithAddress,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardRegionWithAddress,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (nodeAddress_ == null) {                nodeAddress_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(nodeAddress_);              break;            }            case 18: {              if (stats_ == null) {                stats_ = new global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardRegionStats();              }              input.ReadMessage(stats_);              break;            }          }
Magic Number,Akka.Cluster.Sharding.Serialization.Proto.Msg,ShardRegionWithAddress,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\Proto\ClusterShardingMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (nodeAddress_ == null) {                nodeAddress_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(nodeAddress_);              break;            }            case 18: {              if (stats_ == null) {                stats_ = new global::Akka.Cluster.Sharding.Serialization.Proto.Msg.ShardRegionStats();              }              input.ReadMessage(stats_);              break;            }          }
Missing Default,Akka.Cluster.Sharding,RebalanceWorker,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Receive,The following switch statement is missing a default case: switch (message)              {                  case PersistentShardCoordinator.BeginHandOffAck hoa when _shard == hoa.Shard:                      Log.Debug("BeginHandOffAck for shard [{0}] received from {1}."' _shard' Sender);                      Acked(Sender);                      return true;                  case Terminated t:                      Log.Debug("ShardRegion {0} terminated while waiting for BeginHandOffAck for shard [{1}]."' t.ActorRef' _shard);                      Acked(t.ActorRef);                      return true;                  case ReceiveTimeout _:                      Done(false);                      return true;              }
Missing Default,Akka.Cluster.Sharding,RebalanceWorker,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StoppingShard,The following switch statement is missing a default case: switch (message)              {                  case PersistentShardCoordinator.ShardStopped ms when _shard == ms.Shard:                      Done(true);                      return true;                  case ReceiveTimeout _:                      Done(false);                      return true;              }
Missing Default,Akka.Cluster.Sharding,PersistentShard,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,ReceiveRecover,The following switch statement is missing a default case: switch (message)              {                  case Shard.EntityStarted started:                      State = new Shard.ShardState(State.Entries.Add(started.EntityId));                      return true;                  case Shard.EntityStopped stopped:                      State = new Shard.ShardState(State.Entries.Remove(stopped.EntityId));                      return true;                  case SnapshotOffer offer when offer.Snapshot is Shard.ShardState:                      State = (Shard.ShardState)offer.Snapshot;                      return true;                  case RecoveryCompleted _:                      RestartRememberedEntities();                      this.Initialized();                      Log.Debug("PersistentShard recovery completed shard [{0}] with [{1}] entities"' ShardId' State.Entries.Count);                      return true;              }
Missing Default,Akka.Cluster.Sharding,PersistentShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,ReceiveRecover,The following switch statement is missing a default case: switch (message)              {                  case IDomainEvent evt:                      Log.Debug("ReceiveRecover {0}"' evt);                        switch (evt)                      {                          case ShardRegionRegistered _:                              CurrentState = CurrentState.Updated(evt);                              return true;                          case ShardRegionProxyRegistered _:                              CurrentState = CurrentState.Updated(evt);                              return true;                          case ShardRegionTerminated regionTerminated:                              if (CurrentState.Regions.ContainsKey(regionTerminated.Region))                                  CurrentState = CurrentState.Updated(evt);                              else                                  Log.Debug("ShardRegionTerminated but region {0} was not registered"' regionTerminated.Region);                              return true;                          case ShardRegionProxyTerminated proxyTerminated:                              if (CurrentState.RegionProxies.Contains(proxyTerminated.RegionProxy))                                  CurrentState = CurrentState.Updated(evt);                              return true;                          case ShardHomeAllocated _:                              CurrentState = CurrentState.Updated(evt);                              return true;                          case ShardHomeDeallocated _:                              CurrentState = CurrentState.Updated(evt);                              return true;                      }                      return false;                  case SnapshotOffer offer when offer.Snapshot is State:                      var state = offer.Snapshot as State;                      Log.Debug("ReceiveRecover SnapshotOffer {0}"' state);                      CurrentState = state.WithRememberEntities(Settings.RememberEntities);                      // Old versions of the state object may not have unallocatedShard set'                      // thus it will be null.                      if (state.UnallocatedShards == null)                          CurrentState = CurrentState.Copy(unallocatedShards: ImmutableHashSet<ShardId>.Empty);                        return true;                    case RecoveryCompleted _:                      CurrentState = CurrentState.WithRememberEntities(Settings.RememberEntities);                      this.WatchStateActors();                      return true;              }
Missing Default,Akka.Cluster.Sharding,PersistentShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,ReceiveRecover,The following switch statement is missing a default case: switch (evt)                      {                          case ShardRegionRegistered _:                              CurrentState = CurrentState.Updated(evt);                              return true;                          case ShardRegionProxyRegistered _:                              CurrentState = CurrentState.Updated(evt);                              return true;                          case ShardRegionTerminated regionTerminated:                              if (CurrentState.Regions.ContainsKey(regionTerminated.Region))                                  CurrentState = CurrentState.Updated(evt);                              else                                  Log.Debug("ShardRegionTerminated but region {0} was not registered"' regionTerminated.Region);                              return true;                          case ShardRegionProxyTerminated proxyTerminated:                              if (CurrentState.RegionProxies.Contains(proxyTerminated.RegionProxy))                                  CurrentState = CurrentState.Updated(evt);                              return true;                          case ShardHomeAllocated _:                              CurrentState = CurrentState.Updated(evt);                              return true;                          case ShardHomeDeallocated _:                              CurrentState = CurrentState.Updated(evt);                              return true;                      }
Missing Default,Akka.Cluster.Sharding,State,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The following switch statement is missing a default case: switch (e)                  {                      case ShardRegionRegistered message:                          if (Regions.ContainsKey(message.Region))                              throw new ArgumentException($"Region {message.Region} is already registered"' nameof(e));                            return Copy(regions: Regions.SetItem(message.Region' ImmutableList<ShardId>.Empty));                        case ShardRegionProxyRegistered message:                          if (RegionProxies.Contains(message.RegionProxy))                              throw new ArgumentException($"Region proxy {message.RegionProxy} is already registered"' nameof(e));                            return Copy(regionProxies: RegionProxies.Add(message.RegionProxy));                        case ShardRegionTerminated message:                          {                              if (!Regions.TryGetValue(message.Region' out var shardRegions))                                  throw new ArgumentException($"Terminated region {message.Region} not registered"' nameof(e));                                var newUnallocatedShards = RememberEntities ? UnallocatedShards.Union(shardRegions) : UnallocatedShards;                              return Copy(                                  regions: Regions.Remove(message.Region)'                                  shards: Shards.RemoveRange(shardRegions)'                                  unallocatedShards: newUnallocatedShards);                          }                        case ShardRegionProxyTerminated message:                          if (!RegionProxies.Contains(message.RegionProxy))                              throw new ArgumentException($"Terminated region proxy {message.RegionProxy} not registered"' nameof(e));                            return Copy(regionProxies: RegionProxies.Remove(message.RegionProxy));                        case ShardHomeAllocated message:                          {                              if (!Regions.TryGetValue(message.Region' out var shardRegions))                                  throw new ArgumentException($"Region {message.Region} not registered"' nameof(e));                              if (Shards.ContainsKey(message.Shard))                                  throw new ArgumentException($"Shard {message.Shard} is already allocated"' nameof(e));                                var newUnallocatedShards = RememberEntities ? UnallocatedShards.Remove(message.Shard) : UnallocatedShards;                              return Copy(                                  shards: Shards.SetItem(message.Shard' message.Region)'                                  regions: Regions.SetItem(message.Region' shardRegions.Add(message.Shard))'                                  unallocatedShards: newUnallocatedShards);                          }                      case ShardHomeDeallocated message:                          {                              if (!Shards.TryGetValue(message.Shard' out var region))                                  throw new ArgumentException($"Shard {message.Shard} not allocated"' nameof(e));                              if (!Regions.TryGetValue(region' out var shardRegions))                                  throw new ArgumentException($"Region {region} for shard {message.Shard} not registered"' nameof(e));                                var newUnallocatedShards = RememberEntities ? UnallocatedShards.Add(message.Shard) : UnallocatedShards;                              return Copy(                                  shards: Shards.Remove(message.Shard)'                                  regions: Regions.SetItem(region' shardRegions.Where(s => s != message.Shard).ToImmutableList())'                                  unallocatedShards: newUnallocatedShards);                          }                  }
Missing Default,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandleCommand,The following switch statement is missing a default case: switch (message)              {                  case Terminated t:                      shard.HandleTerminated(t.ActorRef);                      return true;                  case PersistentShardCoordinator.ICoordinatorMessage cm:                      shard.HandleCoordinatorMessage(cm);                      return true;                  case Shard.IShardCommand sc:                      shard.HandleShardCommand(sc);                      return true;                  case ShardRegion.StartEntity se:                      shard.HandleStartEntity(se);                      return true;                  case ShardRegion.StartEntityAck sea:                      shard.HandleStartEntityAck(sea);                      return true;                  case IShardRegionCommand src:                      shard.HandleShardRegionCommand(src);                      return true;                  case Shard.IShardQuery sq:                      shard.HandleShardRegionQuery(sq);                      return true;                  case ShardRegion.RestartShard _:                      return true;                  case Shard.PassivateIdleTick _:                      shard.PassivateIdleEntities();                      return true;                  case var _ when shard.ExtractEntityId(message).HasValue:                      shard.DeliverMessage(message' shard.Context.Sender);                      return true;              }
Missing Default,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandleShardRegionQuery,The following switch statement is missing a default case: switch (query)              {                  case Shard.GetCurrentShardState _:                      shard.Context.Sender.Tell(new Shard.CurrentShardState(shard.ShardId' shard.RefById.Keys.ToImmutableHashSet()));                      break;                  case Shard.GetShardStats _:                      shard.Context.Sender.Tell(new Shard.ShardStats(shard.ShardId' shard.State.Entries.Count));                      break;              }
Missing Default,Akka.Cluster.Sharding,Shards,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandleShardCommand,The following switch statement is missing a default case: switch (message)              {                  case Shard.RestartEntity restartEntity:                      shard.GetOrCreateEntity(restartEntity.EntityId);                      break;                  case Shard.RestartEntities restartEntities:                      shard.HandleRestartEntities(restartEntities.Entries);                      break;              }
Missing Default,Akka.Cluster.Sharding,RememberEntityStarter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Receive,The following switch statement is missing a default case: switch (message)              {                  case ShardRegion.StartEntityAck ack:                      _waitingForAck = _waitingForAck.Remove(ack.EntityId);                      // inform whoever requested the start that it happened                      _requestor.Tell(ack);                      if (_waitingForAck.Count == 0) Context.Stop(Self);                      return true;                  case Tick _:                      SendStart(_waitingForAck);                      return true;              }
Missing Default,Akka.Cluster.Sharding,ShardCoordinator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardCoordinator.cs,ReceiveTerminated,The following switch statement is missing a default case: switch (message)              {                  case Terminated terminated:                      var terminatedRef = terminated.ActorRef;                      if (coordinator.CurrentState.Regions.ContainsKey(terminatedRef))                      {                          if (coordinator.RemovalMargin != TimeSpan.Zero && terminated.AddressTerminated &&                              coordinator.AliveRegions.Contains(terminatedRef))                          {                              coordinator.Context.System.Scheduler.ScheduleTellOnce(coordinator.RemovalMargin' coordinator.Self'                                  new DelayedShardRegionTerminated(terminatedRef)' coordinator.Self);                              coordinator.RegionTerminationInProgress = coordinator.RegionTerminationInProgress.Add(terminatedRef);                          }                          else                              RegionTerminated(coordinator' terminatedRef);                      }                      else if (coordinator.CurrentState.RegionProxies.Contains(terminatedRef))                          RegionProxyTerminated(coordinator' terminatedRef);                      return true;                  case DelayedShardRegionTerminated msg:                      RegionTerminated(coordinator' msg.Region);                      return true;              }
Missing Default,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The following switch statement is missing a default case: switch (obj)              {                  case PersistentShardCoordinator.State o: return CoordinatorStateToProto(o).ToByteArray();                  case PersistentShardCoordinator.ShardRegionRegistered o: return ActorRefMessageToProto(o.Region).ToByteArray();                  case PersistentShardCoordinator.ShardRegionProxyRegistered o: return ActorRefMessageToProto(o.RegionProxy).ToByteArray();                  case PersistentShardCoordinator.ShardRegionTerminated o: return ActorRefMessageToProto(o.Region).ToByteArray();                  case PersistentShardCoordinator.ShardRegionProxyTerminated o: return ActorRefMessageToProto(o.RegionProxy).ToByteArray();                  case PersistentShardCoordinator.ShardHomeAllocated o: return ShardHomeAllocatedToProto(o).ToByteArray();                  case PersistentShardCoordinator.ShardHomeDeallocated o: return ShardIdMessageToProto(o.Shard).ToByteArray();                  case PersistentShardCoordinator.Register o: return ActorRefMessageToProto(o.ShardRegion).ToByteArray();                  case PersistentShardCoordinator.RegisterProxy o: return ActorRefMessageToProto(o.ShardRegionProxy).ToByteArray();                  case PersistentShardCoordinator.RegisterAck o: return ActorRefMessageToProto(o.Coordinator).ToByteArray();                  case PersistentShardCoordinator.GetShardHome o: return ShardIdMessageToProto(o.Shard).ToByteArray();                  case PersistentShardCoordinator.ShardHome o: return ShardHomeToProto(o).ToByteArray();                  case PersistentShardCoordinator.HostShard o: return ShardIdMessageToProto(o.Shard).ToByteArray();                  case PersistentShardCoordinator.ShardStarted o: return ShardIdMessageToProto(o.Shard).ToByteArray();                  case PersistentShardCoordinator.BeginHandOff o: return ShardIdMessageToProto(o.Shard).ToByteArray();                  case PersistentShardCoordinator.BeginHandOffAck o: return ShardIdMessageToProto(o.Shard).ToByteArray();                  case PersistentShardCoordinator.HandOff o: return ShardIdMessageToProto(o.Shard).ToByteArray();                  case PersistentShardCoordinator.ShardStopped o: return ShardIdMessageToProto(o.Shard).ToByteArray();                  case PersistentShardCoordinator.GracefulShutdownRequest o: return ActorRefMessageToProto(o.ShardRegion).ToByteArray();                  case Shard.ShardState o: return EntityStateToProto(o).ToByteArray();                  case Shard.EntityStarted o: return EntityStartedToProto(o).ToByteArray();                  case Shard.EntityStopped o: return EntityStoppedToProto(o).ToByteArray();                  case ShardRegion.StartEntity o: return StartEntityToProto(o).ToByteArray();                  case ShardRegion.StartEntityAck o: return StartEntityAckToProto(o).ToByteArray();                  case Shard.GetShardStats o: return Empty;                  case Shard.ShardStats o: return ShardStatsToProto(o).ToByteArray();                  case GetShardRegionStats o: return Empty;                  case ShardRegionStats o: return ShardRegionStatsToProto(o).ToByteArray();                  case GetClusterShardingStats o: return GetClusterShardingStatsToProto(o).ToByteArray();                  case ClusterShardingStats o: return ClusterShardingStatsToProto(o).ToByteArray();              }
Missing Default,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,Manifest,The following switch statement is missing a default case: switch (o)              {                  case Shard.ShardState _: return EntityStateManifest;                  case Shard.EntityStarted _: return EntityStartedManifest;                  case Shard.EntityStopped _: return EntityStoppedManifest;                  case PersistentShardCoordinator.State _: return CoordinatorStateManifest;                  case PersistentShardCoordinator.ShardRegionRegistered _: return ShardRegionRegisteredManifest;                  case PersistentShardCoordinator.ShardRegionProxyRegistered _: return ShardRegionProxyRegisteredManifest;                  case PersistentShardCoordinator.ShardRegionTerminated _: return ShardRegionTerminatedManifest;                  case PersistentShardCoordinator.ShardRegionProxyTerminated _: return ShardRegionProxyTerminatedManifest;                  case PersistentShardCoordinator.ShardHomeAllocated _: return ShardHomeAllocatedManifest;                  case PersistentShardCoordinator.ShardHomeDeallocated _: return ShardHomeDeallocatedManifest;                  case PersistentShardCoordinator.Register _: return RegisterManifest;                  case PersistentShardCoordinator.RegisterProxy _: return RegisterProxyManifest;                  case PersistentShardCoordinator.RegisterAck _: return RegisterAckManifest;                  case PersistentShardCoordinator.GetShardHome _: return GetShardHomeManifest;                  case PersistentShardCoordinator.ShardHome _: return ShardHomeManifest;                  case PersistentShardCoordinator.HostShard _: return HostShardManifest;                  case PersistentShardCoordinator.ShardStarted _: return ShardStartedManifest;                  case PersistentShardCoordinator.BeginHandOff _: return BeginHandOffManifest;                  case PersistentShardCoordinator.BeginHandOffAck _: return BeginHandOffAckManifest;                  case PersistentShardCoordinator.HandOff _: return HandOffManifest;                  case PersistentShardCoordinator.ShardStopped _: return ShardStoppedManifest;                  case PersistentShardCoordinator.GracefulShutdownRequest _: return GracefulShutdownReqManifest;                  case ShardRegion.StartEntity _: return StartEntityManifest;                  case ShardRegion.StartEntityAck _: return StartEntityAckManifest;                  case Shard.GetShardStats _: return GetShardStatsManifest;                  case Shard.ShardStats _: return ShardStatsManifest;                  case GetShardRegionStats _: return GetShardRegionStatsManifest;                  case ShardRegionStats _: return ShardRegionStatsManifest;                  case GetClusterShardingStats _: return GetClusterShardingStatsManifest;                  case ClusterShardingStats _: return ClusterShardingStatsManifest;              }
