Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DocsExamples.Streams,KillSwitchDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\KillSwitchDocTests.cs,Unique_kill_switch_must_control_graph_completion_with_shutdown,The length of the statement  "            var countingSrc = Source.From(Enumerable.Range(1' int.MaxValue)).Delay(1.Seconds()' DelayOverflowStrategy.Backpressure); " is 120.
Long Statement,DocsExamples.Streams,KillSwitchDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\KillSwitchDocTests.cs,Unique_kill_switch_must_control_graph_completion_with_abort,The length of the statement  "            var countingSrc = Source.From(Enumerable.Range(1' int.MaxValue)).Delay(1.Seconds()' DelayOverflowStrategy.Backpressure); " is 120.
Long Statement,DocsExamples.Streams,KillSwitchDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\KillSwitchDocTests.cs,Shared_kill_switch_must_control_graph_completion_with_shutdown,The length of the statement  "            var countingSrc = Source.From(Enumerable.Range(1' int.MaxValue)).Delay(1.Seconds()' DelayOverflowStrategy.Backpressure); " is 120.
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_batch_correctly,The following statement contains a magic number: buncher.Tell(new Queue(42));
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_batch_correctly,The following statement contains a magic number: buncher.Tell(new Queue(43));
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_batch_correctly,The following statement contains a magic number: ExpectMsg<Batch>().Obj.Should().BeEquivalentTo(ImmutableList.Create(42' 43));
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_batch_correctly,The following statement contains a magic number: ExpectMsg<Batch>().Obj.Should().BeEquivalentTo(ImmutableList.Create(42' 43));
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_batch_correctly,The following statement contains a magic number: buncher.Tell(new Queue(44));
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_batch_correctly,The following statement contains a magic number: buncher.Tell(new Queue(45));
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_batch_correctly,The following statement contains a magic number: ExpectMsg<Batch>().Obj.Should().BeEquivalentTo(ImmutableList.Create(44));
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_batch_correctly,The following statement contains a magic number: ExpectMsg<Batch>().Obj.Should().BeEquivalentTo(ImmutableList.Create(45));
Magic Number,DocsExamples.Actor.FiniteStateMachine,ExampleFSMActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\FiniteStateMachine\ExampleFSMActorTests.cs,Simple_finite_state_machine_must_not_batch_if_unitialized,The following statement contains a magic number: buncher.Tell(new Queue(42));
Magic Number,DocsExamples.Persistence.PersistentFSM,WebStoreCustomerFSMActor,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Persistence\WebStoreCustomerFSMActor.cs,WebStoreCustomerFSMActor,The following statement contains a magic number: When(Shopping.Instance' (evt' state) =>              {                  if (evt.FsmEvent is AddItem addItem)                  {                      return Stay()                          .Applying(new ItemAdded(addItem.Item))                          .ForMax(TimeSpan.FromSeconds(1));                  }                  else if (evt.FsmEvent is Buy)                  {                      return GoTo(Paid.Instance).Applying(OrderExecuted.Instance)                          .AndThen(cart =>                          {                              if (cart is NonEmptyShoppingCart nonShoppingCart)                              {                                  reportActor.Tell(new PurchaseWasMade(nonShoppingCart.Items));                                  SaveStateSnapshot();                              }                              else if (cart is EmptyShoppingCart)                              {                                  SaveStateSnapshot();                              }                          });                  }                  else if (evt.FsmEvent is Leave)                  {                      return Stop().Applying(OrderDiscarded.Instance)                          .AndThen(cart =>                          {                              reportActor.Tell(ShoppingCardDiscarded.Instance);                              SaveStateSnapshot();                          });                  }                  else if (evt.FsmEvent is GetCurrentCart)                  {                      return Stay().Replying(evt.StateData);                  }                  else if (evt.FsmEvent is FSMBase.StateTimeout)                  {                      return GoTo(Inactive.Instance).ForMax(TimeSpan.FromSeconds(2));                  }                    return Stay();              });
Magic Number,DocsExamples.Streams,FlowDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\FlowDocTests.cs,Source_prematerialization,The following statement contains a magic number: var matPoweredSource =                  Source.ActorRef<string>(bufferSize: 100' overflowStrategy: OverflowStrategy.Fail);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_merge,The following statement contains a magic number: IRunnableGraph<Sink<string' NotUsed>> runnableGraph =                  MergeHub.Source<string>(perProducerBufferSize: 16).To(consumer);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_broadcast,The following statement contains a magic number: IRunnableGraph<Source<string' NotUsed>> runnableGraph =                  producer.ToMaterialized(BroadcastHub.Sink<string>(bufferSize: 256)' Keep.Right);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_combination,The following statement contains a magic number: var (sink' source) = MergeHub                  .Source<string>(perProducerBufferSize: 16)                  .ToMaterialized(BroadcastHub.Sink<string>(bufferSize: 256)' Keep.Both)                  .Run(Materializer);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_combination,The following statement contains a magic number: var (sink' source) = MergeHub                  .Source<string>(perProducerBufferSize: 16)                  .ToMaterialized(BroadcastHub.Sink<string>(bufferSize: 256)' Keep.Both)                  .Run(Materializer);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_combination,The following statement contains a magic number: Flow<string' string' UniqueKillSwitch> busFlow = Flow.FromSinkAndSource(sink' source)                  .JoinMaterialized(KillSwitches.SingleBidi<string' string>()' Keep.Right)                  .BackpressureTimeout(TimeSpan.FromSeconds(3));
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub,The following statement contains a magic number: Source<string' NotUsed> producer = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "message")                  .MapMaterializedValue(_ => NotUsed.Instance)                  .ZipWith(Source.From(Enumerable.Range(1' 100))' (msg' i) => $"{msg}-{i}");
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub,The following statement contains a magic number: IRunnableGraph<Source<string' NotUsed>> runnableGraph =                  producer.ToMaterialized(PartitionHub.Sink<string>(                      (size' element) => Math.Abs(element.GetHashCode()) % size'                      startAfterNrOfConsumers: 2' bufferSize: 256)' Keep.Right);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub,The following statement contains a magic number: IRunnableGraph<Source<string' NotUsed>> runnableGraph =                  producer.ToMaterialized(PartitionHub.Sink<string>(                      (size' element) => Math.Abs(element.GetHashCode()) % size'                      startAfterNrOfConsumers: 2' bufferSize: 256)' Keep.Right);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_steful_partition_hub,The following statement contains a magic number: Source<string' NotUsed> producer = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "message")                  .MapMaterializedValue(_ => NotUsed.Instance)                  .ZipWith(Source.From(Enumerable.Range(1' 100))' (msg' i) => $"{msg}-{i}");
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_steful_partition_hub,The following statement contains a magic number: IRunnableGraph<Source<string' NotUsed>> runnableGraph =                  producer.ToMaterialized(PartitionHub.StatefulSink(RoundRobbin'                      startAfterNrOfConsumers: 2' bufferSize: 256)' Keep.Right);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_steful_partition_hub,The following statement contains a magic number: IRunnableGraph<Source<string' NotUsed>> runnableGraph =                  producer.ToMaterialized(PartitionHub.StatefulSink(RoundRobbin'                      startAfterNrOfConsumers: 2' bufferSize: 256)' Keep.Right);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub_routing_to_fastest_consumer,The following statement contains a magic number: Source<int' NotUsed> producer = Source.From(Enumerable.Range(0' 100));
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub_routing_to_fastest_consumer,The following statement contains a magic number: IRunnableGraph<Source<int' NotUsed>> runnableGraph =                  producer.ToMaterialized(PartitionHub.StatefulSink<int>(                      () => ((info' element) => info.ConsumerIds.Min(info.QueueSize))'                      startAfterNrOfConsumers: 2' bufferSize: 256)' Keep.Right);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub_routing_to_fastest_consumer,The following statement contains a magic number: IRunnableGraph<Source<int' NotUsed>> runnableGraph =                  producer.ToMaterialized(PartitionHub.StatefulSink<int>(                      () => ((info' element) => info.ConsumerIds.Min(info.QueueSize))'                      startAfterNrOfConsumers: 2' bufferSize: 256)' Keep.Right);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub_routing_to_fastest_consumer,The following statement contains a magic number: fromProducer.Throttle(10' TimeSpan.FromMilliseconds(100)' 10' ThrottleMode.Shaping)                  .RunForeach(msg => Console.WriteLine("Consumer2: " + msg)' Materializer);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub_routing_to_fastest_consumer,The following statement contains a magic number: fromProducer.Throttle(10' TimeSpan.FromMilliseconds(100)' 10' ThrottleMode.Shaping)                  .RunForeach(msg => Console.WriteLine("Consumer2: " + msg)' Materializer);
Magic Number,DocsExamples.Streams,HubsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\HubsDocTests.cs,Hubs_must_demonstrate_creating_a_dynamic_partition_hub_routing_to_fastest_consumer,The following statement contains a magic number: fromProducer.Throttle(10' TimeSpan.FromMilliseconds(100)' 10' ThrottleMode.Shaping)                  .RunForeach(msg => Console.WriteLine("Consumer2: " + msg)' Materializer);
Magic Number,DocsExamples.Streams,RestartDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\RestartDocTests.cs,Restart_stages_should_demonstrate_a_restart_with_backoff_source,The following statement contains a magic number: var restartSource = RestartSource.WithBackoff(() =>                  {                      // Create a source from a task                      return Source.FromTask(                          httpClient.GetAsync("http://example.com/eventstream") // Make a single request                      )                      .Select(c => c.Content.ReadAsStringAsync())                      .Select(c => c.Result);                  }'                   minBackoff: TimeSpan.FromSeconds(3)'                   maxBackoff: TimeSpan.FromSeconds(30)'                  randomFactor: 0.2 // adds 20% "noise" to vary the intervals slightly              );
Magic Number,DocsExamples.Streams,RestartDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\RestartDocTests.cs,Restart_stages_should_demonstrate_a_restart_with_backoff_source,The following statement contains a magic number: var restartSource = RestartSource.WithBackoff(() =>                  {                      // Create a source from a task                      return Source.FromTask(                          httpClient.GetAsync("http://example.com/eventstream") // Make a single request                      )                      .Select(c => c.Content.ReadAsStringAsync())                      .Select(c => c.Result);                  }'                   minBackoff: TimeSpan.FromSeconds(3)'                   maxBackoff: TimeSpan.FromSeconds(30)'                  randomFactor: 0.2 // adds 20% "noise" to vary the intervals slightly              );
Magic Number,DocsExamples.Streams,RestartDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\RestartDocTests.cs,Restart_stages_should_demonstrate_a_restart_with_backoff_source,The following statement contains a magic number: var restartSource = RestartSource.WithBackoff(() =>                  {                      // Create a source from a task                      return Source.FromTask(                          httpClient.GetAsync("http://example.com/eventstream") // Make a single request                      )                      .Select(c => c.Content.ReadAsStringAsync())                      .Select(c => c.Result);                  }'                   minBackoff: TimeSpan.FromSeconds(3)'                   maxBackoff: TimeSpan.FromSeconds(30)'                  randomFactor: 0.2 // adds 20% "noise" to vary the intervals slightly              );
Magic Number,DocsExamples.Streams,StreamRefsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamRefsDocTests.cs,SourceRef_must_propagate_source_from_another_system,The following statement contains a magic number: var offer = await sourceActor.Ask<LogsOffer>(new RequestLogs(1337));
Magic Number,DocsExamples.Streams,StreamRefsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamRefsDocTests.cs,SinkRef_must_receive_messages_from_another_system,The following statement contains a magic number: var ready = await receiver.Ask<MeasurementsSinkReady>(new PrepareUpload("id")' timeout: TimeSpan.FromSeconds(30));
Magic Number,DocsExamples.Streams,StreamRefsDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamRefsDocTests.cs,SinkRef_must_receive_messages_from_another_system,The following statement contains a magic number: Source.From(Enumerable.Range(1' 100))                  .Select(i => i.ToString())                  .RunWith(ready.SinkRef.Sink' Materializer);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_connection_must_bind_and_unbind,The following statement contains a magic number: Tcp.ServerBinding binding = await Sys.TcpStream()                  .BindAndHandle(echo' Materializer' "localhost"' 9000);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_connection_must_handle_connection,The following statement contains a magic number: Source<Tcp.IncomingConnection' Task<Tcp.ServerBinding>> connections =                  Sys.TcpStream().Bind("127.0.0.1"' 8888);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_connection_must_handle_connection,The following statement contains a magic number: connections.RunForeach(connection =>              {                  Console.WriteLine($"New connection from: {connection.RemoteAddress}");                    var echo = Flow.Create<ByteString>()                      .Via(Framing.Delimiter(                          ByteString.FromString("\n")'                          maximumFrameLength: 256'                          allowTruncation: true))                      .Select(c => c.ToString())                      .Select(c => c + "!!!\n")                      .Select(ByteString.FromString);                    connection.HandleWith(echo' Materializer);              }' Materializer);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_connection_must_close_incoming_connection,The following statement contains a magic number: Source<Tcp.IncomingConnection' Task<Tcp.ServerBinding>> connections =                  Sys.TcpStream().Bind("127.0.0.1"' 8888);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_must_initial_server_banner_echo_server,The following statement contains a magic number: var connections = Sys.TcpStream().Bind("127.0.0.1"' 8888);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_must_initial_server_banner_echo_server,The following statement contains a magic number: connections.RunForeach(connection =>              {                  // server logic' parses incoming commands                  var commandParser = Flow.Create<string>().TakeWhile(c => c != "BYE").Select(c => c + "!");                    var welcomeMessage = $"Welcome to: {connection.LocalAddress}' you are: {connection.RemoteAddress}!";                  var welcome = Source.Single(welcomeMessage);                    var serverLogic = Flow.Create<ByteString>()                      .Via(Framing.Delimiter(                          ByteString.FromString("\n")'                          maximumFrameLength: 256'                          allowTruncation: true))                      .Select(c => c.ToString())                      .Select(command =>                      {                          serverProbe.Tell(command);                          return command;                      })                      .Via(commandParser)                      .Merge(welcome)                      .Select(c => c + "\n")                      .Select(ByteString.FromString);                    connection.HandleWith(serverLogic' Materializer);              }' Materializer);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_must_initial_server_banner_echo_server,The following statement contains a magic number: var connection = Sys.TcpStream().OutgoingConnection("127.0.0.1"' 8888);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_must_initial_server_banner_echo_server,The following statement contains a magic number: var connection = Sys.TcpStream().OutgoingConnection("127.0.0.1"' 8888);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_must_initial_server_banner_echo_server,The following statement contains a magic number: var repl = Flow.Create<ByteString>()                      .Via(Framing.Delimiter(                          ByteString.FromString("\n")'                          maximumFrameLength: 256'                          allowTruncation: true))                      .Select(c => c.ToString())                      .Select(text =>                      {                          Output.WriteLine($"Server: {text}");                          return text;                      })                      .Select(text => ReadLine("> "))                      .Via(replParser);
Magic Number,DocsExamples.Streams,StreamTcpDocTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Streams\StreamTcpDocTests.cs,Simple_server_must_initial_server_banner_echo_server,The following statement contains a magic number: serverProbe.ExpectMsg("Hello world"' TimeSpan.FromSeconds(20));
Magic Number,DocsExamples.Testkit,ProbeSampleTest,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Testkit\ProbeSampleTest.cs,Test,The following statement contains a magic number: forwarder.Tell(43' TestActor);
Magic Number,DocsExamples.Testkit,ProbeSampleTest,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Testkit\ProbeSampleTest.cs,Test,The following statement contains a magic number: probe.ExpectMsg(43);
Magic Number,DocsExamples.Testkit,TestKitSampleTest,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Testkit\TestKitSampleTest.cs,Test,The following statement contains a magic number: Within(TimeSpan.FromSeconds(3)' () => {                  subject.Tell("hello"' this.TestActor);                    // This is a demo: would normally use expectMsgEquals().                  // Wait time is bounded by 3-second deadline above.                  AwaitCondition(() => probe.HasMessages);                    // response must have been enqueued to us before probe                  ExpectMsg("world"' TimeSpan.FromSeconds(0));                  // check that the probe we injected earlier got the msg                  probe.ExpectMsg("hello"' TimeSpan.FromSeconds(0));                    Assert.Equal(TestActor' probe.Sender);                                    // Will wait for the rest of the 3 seconds                  ExpectNoMsg();              }' EpsilonValueForWithins);
Magic Number,DocsExamples.Testkit,WithinSampleTest,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Testkit\WithinSampleTest.cs,WithinSample,The following statement contains a magic number: TestActor.Tell(42' ActorRefs.NoSender);
Magic Number,DocsExamples.Testkit,WithinSampleTest,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Testkit\WithinSampleTest.cs,WithinSample,The following statement contains a magic number: Within(0.Milliseconds()' 1.Seconds()' () =>              {                  Assert.Equal(42' ExpectMsg<int>());              });
Magic Number,DocsExamples.Utilities.CircuitBreakers,DangerousActor,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Utilities\CircuitBreakerDocSpec.cs,DangerousActor,The following statement contains a magic number: var breaker = new CircuitBreaker(                      maxFailures: 5'                      callTimeout: TimeSpan.FromSeconds(10)'                      resetTimeout: TimeSpan.FromMinutes(1))                  .OnOpen(NotifyMeOnOpen);
Magic Number,DocsExamples.Utilities.CircuitBreakers,DangerousActor,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Utilities\CircuitBreakerDocSpec.cs,DangerousActor,The following statement contains a magic number: var breaker = new CircuitBreaker(                      maxFailures: 5'                      callTimeout: TimeSpan.FromSeconds(10)'                      resetTimeout: TimeSpan.FromMinutes(1))                  .OnOpen(NotifyMeOnOpen);
Magic Number,DocsExamples.Utilities.CircuitBreakers,DangerousActorCallProtection,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Utilities\CircuitBreakerDocSpec.cs,DangerousActorCallProtection,The following statement contains a magic number: var breaker = new CircuitBreaker(                      maxFailures: 5'                      callTimeout: TimeSpan.FromSeconds(10)'                      resetTimeout: TimeSpan.FromMinutes(1))                  .OnOpen(NotifyMeOnOpen);
Magic Number,DocsExamples.Utilities.CircuitBreakers,DangerousActorCallProtection,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Utilities\CircuitBreakerDocSpec.cs,DangerousActorCallProtection,The following statement contains a magic number: var breaker = new CircuitBreaker(                      maxFailures: 5'                      callTimeout: TimeSpan.FromSeconds(10)'                      resetTimeout: TimeSpan.FromMinutes(1))                  .OnOpen(NotifyMeOnOpen);
Missing Default,DocsExamples.Actor.UntypedActorAPI,Follower,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Actors\UntypedActorAPI\Follower.cs,OnReceive,The following switch statement is missing a default case: switch (message)              {                  case ActorIdentity a when a.MessageId.Equals(identifyId) && a.Subject != null:                      Context.Watch(a.Subject);                      Context.Become(Active(a.Subject));                      break;                  case ActorIdentity a when a.MessageId.Equals(identifyId) && a.Subject == null:                      Context.Stop(Self);                      break;              }
Missing Default,DocsExamples.Networking.ClusterClient,ClientListener,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Networking\ClusterClient\ClientListener.cs,ReceiveWithContactPoints,The following switch statement is missing a default case: switch (message)                  {                      // Now do something with the up-to-date "cps"                      case ContactPoints cp:                          Context.Become(ReceiveWithContactPoints(cp.ContactPointsList));                          break;                      // Now do something with an up-to-date "contactPoints + cp"                      case ContactPointAdded cpa:                          Context.Become(ReceiveWithContactPoints(contactPoints.Add(cpa.ContactPoint)));                          break;                      // Now do something with an up-to-date "contactPoints - cp"                      case ContactPointRemoved cpr:                          Context.Become(ReceiveWithContactPoints(contactPoints.Remove(cpr.ContactPoint)));                          break;                  }
Missing Default,DocsExamples.Networking.ClusterClient,ReceptionistListener,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Networking\ClusterClient\ReceptionistListener.cs,ReceiveWithContactPoints,The following switch statement is missing a default case: switch (message)                  {                      // Now do something with the up-to-date "c"                      case ClusterClients cc:                          Context.Become(ReceiveWithContactPoints(cc.ClusterClientsList));                          break;                      // Now do something with an up-to-date "clusterClients + c"                      case ClusterClientUp ccu:                          Context.Become(ReceiveWithContactPoints(contactPoints.Add(ccu.ClusterClient)));                          break;                      // Now do something with an up-to-date "clusterClients - c"                      case ClusterClientUnreachable ccun:                          Context.Become(ReceiveWithContactPoints(contactPoints.Remove(ccun.ClusterClient)));                          break;                  }
Missing Default,DocsExamples.Networking.Serialization,MyOwnSerializer2,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Networking\Serialization\MyOwnSerializer2.cs,Manifest,The following switch statement is missing a default case: switch (obj)              {                  case Customer _: return CustomerManifest;                  case User _: return UserManifest;              }
Missing Default,DocsExamples.Networking.Serialization,MyOwnSerializer2,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Networking\Serialization\MyOwnSerializer2.cs,ToBinary,The following switch statement is missing a default case: switch (obj)              {                  case Customer c: return Encoding.UTF8.GetBytes(c.Name);                  case User c: return Encoding.UTF8.GetBytes(c.Name);              }
Missing Default,DocsExamples.Persistence.AtLeastOnceDelivery,ExampleAtLeastOnceDeliveryActor,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Persistence\AtLeastOnceDelivery\ExampleAtLeastOnceDeliveryActor.cs,UpdateState,The following switch statement is missing a default case: switch (evt)              {                  case MsgSent msgSent:                      Deliver(_destination' deliveryId => new Msg(deliveryId' msgSent.Message));                      break;                  case MsgConfirmed msgConfirmed:                      ConfirmDelivery(msgConfirmed.DeliveryId);                      break;              }
Missing Default,DocsExamples.Persistence.PersistentActor,PersistentActor,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Persistence\PersistentActor\PersistentActor.cs,OnRecover,The following switch statement is missing a default case: switch (message)                  {                      case Evt evt:                          UpdateState(evt);                          break;                      case SnapshotOffer snapshot when snapshot.Snapshot is ExampleState:                          _state = (ExampleState)snapshot.Snapshot;                          break;                  }
Missing Default,DocsExamples.Persistence.PersistentActor,PersistentActor,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Docs.Tests\Persistence\PersistentActor\PersistentActor.cs,OnCommand,The following switch statement is missing a default case: switch (message)                  {                      case Cmd cmd:                          Persist(new Evt($"{cmd.Data}-{NumEvents}")' UpdateState);                          Persist(new Evt($"{cmd.Data}-{NumEvents + 1}")' evt =>                          {                              UpdateState(evt);                              Context.System.EventStream.Publish(evt);                          });                          break;                      case "snap":                          SaveSnapshot(_state);                          break;                      case "print":                          Console.WriteLine(_state);                          break;                  }
