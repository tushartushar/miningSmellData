Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,Cyclomatic complexity of the method is 13
Magic Number,Akka.Benchmarks.Actor,ActorPathBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Actor\ActorPathBenchmarks.cs,Setup,The following statement contains a magic number: x = new RootActorPath(new Address("akka.tcp"' "system"' "127.0.0.1"' 1337)' "user");
Magic Number,Akka.Benchmarks.Actor,ActorPathBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Actor\ActorPathBenchmarks.cs,Setup,The following statement contains a magic number: y = new RootActorPath(new Address("akka.tcp"' "system"' "127.0.0.1"' 1337)' "system");
Magic Number,Akka.Benchmarks.Actor,AddressBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Actor\AddressBenchmarks.cs,Setup,The following statement contains a magic number: x = new Address("akka.tcp"' "test-system"' "10.62.0.101"' 4000);
Magic Number,Akka.Benchmarks.Actor,AddressBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Actor\AddressBenchmarks.cs,Setup,The following statement contains a magic number: y = new Address("akka.tcp"' "test-system"' "10.62.0.101"' 4123);
Magic Number,Akka.Benchmarks,ByteStringBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\IO\ByteStringBenchmarks.cs,Setup,The following statement contains a magic number: i < 10
Magic Number,Akka.Benchmarks,ByteStringBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\IO\ByteStringBenchmarks.cs,ByteString_multipart_slice,The following statement contains a magic number: return _multipart.Slice(10' 40);
Magic Number,Akka.Benchmarks,ByteStringBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\IO\ByteStringBenchmarks.cs,ByteString_multipart_slice,The following statement contains a magic number: return _multipart.Slice(10' 40);
Magic Number,Akka.Benchmarks,ByteStringBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\IO\ByteStringBenchmarks.cs,ByteString_multipart_has_substring,The following statement contains a magic number: byte[] array = { 6' 7' 8' 9 };
Magic Number,Akka.Benchmarks,ByteStringBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\IO\ByteStringBenchmarks.cs,ByteString_multipart_has_substring,The following statement contains a magic number: byte[] array = { 6' 7' 8' 9 };
Magic Number,Akka.Benchmarks,ByteStringBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\IO\ByteStringBenchmarks.cs,ByteString_multipart_has_substring,The following statement contains a magic number: byte[] array = { 6' 7' 8' 9 };
Magic Number,Akka.Benchmarks,ByteStringBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\IO\ByteStringBenchmarks.cs,ByteString_multipart_has_substring,The following statement contains a magic number: byte[] array = { 6' 7' 8' 9 };
Magic Number,Akka.Benchmarks.Serialization,SerializationBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Serialization\SerializationBenchmarks.cs,Setup,The following statement contains a magic number: message = new Message(123' Guid.NewGuid().ToString("D")' actorRef);
Magic Number,Akka.Benchmarks.Utils,ConsistentHashBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Setup,The following statement contains a magic number: testBinary = new byte[100];
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: a ^= (c >> 13);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: b ^= (a << 8);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: c ^= (b >> 13);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: a ^= (c >> 12);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: b ^= (a << 16);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: c ^= (b >> 5);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: a ^= (c >> 3);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: b ^= (a << 10);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Mix,The following statement contains a magic number: c ^= (b >> 15);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: a += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: a += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: a += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: b += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: b += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: b += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: c += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: c += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: c += (uint)data[i++] |                          ((uint)data[i++] << 8) |                          ((uint)data[i++] << 16) |                          ((uint)data[i++] << 24);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: i + 12 <= len
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: a += (uint)data[i++] << 8;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: a += (uint)data[i++] << 16;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: a += (uint)data[i++] << 24;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: b += (uint)data[i++] << 8;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: b += (uint)data[i++] << 16;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: b += (uint)data[i++] << 24;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: c += (uint)data[i++] << 8;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: c += (uint)data[i++] << 16;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: c += (uint)data[i++] << 24;
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: b += (uint)((u1 ^ (uint)u1) >> 32);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: a += (uint)((u2 ^ (uint)u2) >> 32);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: c += (uint)((u3 ^ (uint)u3) >> 32);
Magic Number,Akka.Benchmarks.Utils,Jenkins,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\ConsistentHashBenchmarks.cs,Hash,The following statement contains a magic number: c += 24;
Magic Number,Akka.Benchmarks.Utils,FastLazyBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\FastLazyBenchmarks.cs,Setup,The following statement contains a magic number: lazySafe = new Lazy<int>(() => 100' LazyThreadSafetyMode.ExecutionAndPublication);
Magic Number,Akka.Benchmarks.Utils,FastLazyBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\FastLazyBenchmarks.cs,Setup,The following statement contains a magic number: lazyUnsafe = new Lazy<int>(() => 100' LazyThreadSafetyMode.None);
Magic Number,Akka.Benchmarks.Utils,FastLazyBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\FastLazyBenchmarks.cs,Setup,The following statement contains a magic number: fastLazy = new FastLazy<int>(() => 100);
Magic Number,Akka.Benchmarks.Utils,FastLazyBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\FastLazyBenchmarks.cs,Setup,The following statement contains a magic number: fastLazyWithInit = new FastLazy<int' int>(state => state + 100' 1000);
Magic Number,Akka.Benchmarks.Utils,FastLazyBenchmarks,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\benchmark\Akka.Benchmarks\Utils\FastLazyBenchmarks.cs,Setup,The following statement contains a magic number: fastLazyWithInit = new FastLazy<int' int>(state => state + 100' 1000);
