Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Tutorials.Tutorial3,Device,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\Device.cs,OnReceive,The length of the statement  "                        Log.Warning($"Ignoring TrackDevice request for {req.GroupId}-{req.DeviceId}.This actor is responsible for {GroupId}-{DeviceId}."); " is 130.
Long Statement,Tutorials.Tutorial4,Device,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\Device.cs,OnReceive,The length of the statement  "                        Log.Warning($"Ignoring TrackDevice request for {req.GroupId}-{req.DeviceId}.This actor is responsible for {GroupId}-{DeviceId}."); " is 130.
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_empty_reading_if_no_temperature_is_known,The following statement contains a magic number: deviceActor.Tell(new ReadTemperature(requestId: 42)' probe.Ref);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_empty_reading_if_no_temperature_is_known,The following statement contains a magic number: response.RequestId.Should().Be(42);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new RecordTemperature(requestId: 1' value: 24.0)' probe.Ref);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new ReadTemperature(requestId: 2)' probe.Ref);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: response1.RequestId.Should().Be(2);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: response1.Value.Should().Be(24.0);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new RecordTemperature(requestId: 3' value: 55.0)' probe.Ref);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new RecordTemperature(requestId: 3' value: 55.0)' probe.Ref);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: probe.ExpectMsg<TemperatureRecorded>(s => s.RequestId == 3);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new ReadTemperature(requestId: 4)' probe.Ref);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: response2.RequestId.Should().Be(4);
Magic Number,Tutorials.Tutorial2,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: response2.Value.Should().Be(55.0);
Magic Number,Tutorials.Tutorial3,DeviceGroupSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceGroupSpec.cs,DeviceGroup_actor_must_be_able_to_register_a_device_actor,The following statement contains a magic number: deviceActor2.Tell(new RecordTemperature(requestId: 1' value: 2.0)' probe.Ref);
Magic Number,Tutorials.Tutorial3,DeviceGroupSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceGroupSpec.cs,DeviceGroup_actor_must_ignore_requests_for_wrong_groupId,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_ignore_wrong_registration_requests,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_ignore_wrong_registration_requests,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_empty_reading_if_no_temperature_is_known,The following statement contains a magic number: deviceActor.Tell(new ReadTemperature(requestId: 42)' probe.Ref);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_empty_reading_if_no_temperature_is_known,The following statement contains a magic number: response.RequestId.Should().Be(42);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new RecordTemperature(requestId: 1' value: 24.0)' probe.Ref);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new ReadTemperature(requestId: 2)' probe.Ref);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: response1.RequestId.Should().Be(2);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: response1.Value.Should().Be(24.0);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new RecordTemperature(requestId: 3' value: 55.0)' probe.Ref);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new RecordTemperature(requestId: 3' value: 55.0)' probe.Ref);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: probe.ExpectMsg<TemperatureRecorded>(s => s.RequestId == 3);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: deviceActor.Tell(new ReadTemperature(requestId: 4)' probe.Ref);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: response2.RequestId.Should().Be(4);
Magic Number,Tutorials.Tutorial3,DeviceSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceSpec.cs,Device_actor_must_reply_with_latest_temperature_reading,The following statement contains a magic number: response2.Value.Should().Be(55.0);
Magic Number,Tutorials.Tutorial4,DeviceGroup,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroup.cs,OnReceive,The following statement contains a magic number: switch (message)                  {                      case RequestTrackDevice trackMsg when trackMsg.GroupId.Equals(GroupId):                          if (deviceIdToActor.TryGetValue(trackMsg.DeviceId' out var actorRef))                          {                              actorRef.Forward(trackMsg);                          }                          else                          {                              Log.Info($"Creating device actor for {trackMsg.DeviceId}");                              var deviceActor = Context.ActorOf(Device.Props(trackMsg.GroupId' trackMsg.DeviceId)' $"device-{trackMsg.DeviceId}");                              Context.Watch(deviceActor);                              actorToDeviceId.Add(deviceActor' trackMsg.DeviceId);                              deviceIdToActor.Add(trackMsg.DeviceId' deviceActor);                              deviceActor.Forward(trackMsg);                          }                          break;                      case RequestTrackDevice trackMsg:                          Log.Warning($"Ignoring TrackDevice request for {trackMsg.GroupId}. This actor is responsible for {GroupId}.");                          break;                      case RequestDeviceList deviceList:                          Sender.Tell(new ReplyDeviceList(deviceList.RequestId' new HashSet<string>(deviceIdToActor.Keys)));                          break;                      case Terminated t:                          var deviceId = actorToDeviceId[t.ActorRef];                          Log.Info($"Device actor for {deviceId} has been terminated");                          actorToDeviceId.Remove(t.ActorRef);                          deviceIdToActor.Remove(deviceId);                          break;                      case RequestAllTemperatures r:                          Context.ActorOf(DeviceGroupQuery.Props(actorToDeviceId' r.RequestId' Sender' TimeSpan.FromSeconds(3)));                          break;                  }
Magic Number,Tutorials.Tutorial4,DeviceGroup,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroup.cs,OnReceive,The following statement contains a magic number: switch (message)                  {                      case RequestAllTemperatures r:                          Context.ActorOf(DeviceGroupQuery.Props(actorToDeviceId' r.RequestId' Sender' TimeSpan.FromSeconds(3)));                          break;                  }
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_temperature_value_for_working_devices,The following statement contains a magic number: var queryActor = Sys.ActorOf(DeviceGroupQuery.Props(                      actorToDeviceId: new Dictionary<IActorRef' string> { [device1.Ref] = "device1"' [device2.Ref] = "device2" }'                      requestId: 1'                      requester: requester.Ref'                      timeout: TimeSpan.FromSeconds(3)                  ));
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_temperature_value_for_working_devices,The following statement contains a magic number: queryActor.Tell(new RespondTemperature(requestId: 0' value: 2.0)' device2.Ref);
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_temperature_value_for_working_devices,The following statement contains a magic number: requester.ExpectMsg<RespondAllTemperatures>(msg =>                       msg.Temperatures["device1"].AsInstanceOf<Temperature>().Value == 1.0 &&                      msg.Temperatures["device2"].AsInstanceOf<Temperature>().Value == 2.0 &&                      msg.RequestId == 1);
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_TemperatureNotAvailable_for_devices_with_no_readings,The following statement contains a magic number: var queryActor = Sys.ActorOf(DeviceGroupQuery.Props(                      actorToDeviceId: new Dictionary<IActorRef' string> { [device1.Ref] = "device1"' [device2.Ref] = "device2" }'                      requestId: 1'                      requester: requester.Ref'                      timeout: TimeSpan.FromSeconds(3)                  ));
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_TemperatureNotAvailable_for_devices_with_no_readings,The following statement contains a magic number: queryActor.Tell(new RespondTemperature(requestId: 0' value: 2.0)' device2.Ref);
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_TemperatureNotAvailable_for_devices_with_no_readings,The following statement contains a magic number: requester.ExpectMsg<RespondAllTemperatures>(msg =>                      msg.Temperatures["device1"] is TemperatureNotAvailable &&                      msg.Temperatures["device2"].AsInstanceOf<Temperature>().Value == 2.0 &&                      msg.RequestId == 1);
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_return_DeviceNotAvailable_if_device_stops_before_answering,The following statement contains a magic number: var queryActor = Sys.ActorOf(DeviceGroupQuery.Props(                      actorToDeviceId: new Dictionary<IActorRef' string> { [device1.Ref] = "device1"' [device2.Ref] = "device2" }'                      requestId: 1'                      requester: requester.Ref'                      timeout: TimeSpan.FromSeconds(3)                  ));
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_temperature_reading_even_if_device_stops_after_answering,The following statement contains a magic number: var queryActor = Sys.ActorOf(DeviceGroupQuery.Props(                      actorToDeviceId: new Dictionary<IActorRef' string> { [device1.Ref] = "device1"' [device2.Ref] = "device2" }'                      requestId: 1'                      requester: requester.Ref'                      timeout: TimeSpan.FromSeconds(3)                  ));
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_temperature_reading_even_if_device_stops_after_answering,The following statement contains a magic number: queryActor.Tell(new RespondTemperature(requestId: 0' value: 2.0)' device2.Ref);
Magic Number,Tutorials.Tutorial4,DeviceGroupQuerySpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuerySpec.cs,DeviceGroupQuery_must_return_temperature_reading_even_if_device_stops_after_answering,The following statement contains a magic number: requester.ExpectMsg<RespondAllTemperatures>(msg =>                      msg.Temperatures["device1"].AsInstanceOf<Temperature>().Value == 1.0 &&                      msg.Temperatures["device2"].AsInstanceOf<Temperature>().Value == 2.0 &&                      msg.RequestId == 1);
Magic Number,Tutorials.Tutorial4,DeviceGroupSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupSpec.cs,DeviceGroup_actor_must_be_able_to_register_a_device_actor,The following statement contains a magic number: deviceActor2.Tell(new RecordTemperature(requestId: 1' value: 2.0)' probe.Ref);
Magic Number,Tutorials.Tutorial4,DeviceGroupSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupSpec.cs,DeviceGroup_actor_must_ignore_requests_for_wrong_groupId,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Tutorials.Tutorial4,DeviceGroupSpec,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupSpec.cs,DeviceGroup_actor_must_be_able_to_collect_temperatures_from_all_active_devices,The following statement contains a magic number: deviceActor2.Tell(new RecordTemperature(requestId: 1' value: 2.0)' probe.Ref);
Missing Default,Tutorials.Tutorial1,PrintMyActorRefActor,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial1\ActorHierarchyExperiments.cs,OnReceive,The following switch statement is missing a default case: switch (message)              {                  case "printit":                      IActorRef secondRef = Context.ActorOf(Props.Empty' "second-actor");                      Console.WriteLine($"Second: {secondRef}");                      break;              }
Missing Default,Tutorials.Tutorial1,StartStopActor1,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial1\ActorHierarchyExperiments.cs,OnReceive,The following switch statement is missing a default case: switch (message)              {                  case "stop":                      Context.Stop(Self);                      break;              }
Missing Default,Tutorials.Tutorial1,SupervisingActor,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial1\ActorHierarchyExperiments.cs,OnReceive,The following switch statement is missing a default case: switch (message)              {                  case "failChild":                      child.Tell("fail");                      break;              }
Missing Default,Tutorials.Tutorial1,SupervisedActor,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial1\ActorHierarchyExperiments.cs,OnReceive,The following switch statement is missing a default case: switch (message)              {                  case "fail":                      Console.WriteLine("supervised actor fails now");                      throw new Exception("I failed!");              }
Missing Default,Tutorials.Tutorial2,Device,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\Device.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RecordTemperature rec:                          Log.Info($"Recorded temperature reading {rec.Value} with {rec.RequestId}");                          _lastTemperatureReading = rec.Value;                          Sender.Tell(new TemperatureRecorded(rec.RequestId));                          break;                      case ReadTemperature read:                          Sender.Tell(new RespondTemperature(read.RequestId' _lastTemperatureReading));                          break;                  }
Missing Default,Tutorials.Tutorial2,Device,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial2\Device.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case MainDevice.ReadTemperature read:                          Sender.Tell(new RespondTemperature(read.RequestId' _lastTemperatureReading));                          break;                  }
Missing Default,Tutorials.Tutorial3,Device,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\Device.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestTrackDevice req when req.GroupId.Equals(GroupId) && req.DeviceId.Equals(DeviceId):                          Sender.Tell(DeviceRegistered.Instance);                          break;                      case RequestTrackDevice req:                          Log.Warning($"Ignoring TrackDevice request for {req.GroupId}-{req.DeviceId}.This actor is responsible for {GroupId}-{DeviceId}.");                          break;                      case RecordTemperature rec:                          Log.Info($"Recorded temperature reading {rec.Value} with {rec.RequestId}");                          _lastTemperatureReading = rec.Value;                          Sender.Tell(new TemperatureRecorded(rec.RequestId));                          break;                      case ReadTemperature read:                          Sender.Tell(new RespondTemperature(read.RequestId' _lastTemperatureReading));                          break;                  }
Missing Default,Tutorials.Tutorial3,DeviceGroup,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceGroup.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestTrackDevice trackMsg when trackMsg.GroupId.Equals(GroupId):                          if (deviceIdToActor.TryGetValue(trackMsg.DeviceId' out var actorRef))                          {                              actorRef.Forward(trackMsg);                          }                          else                          {                              Log.Info($"Creating device actor for {trackMsg.DeviceId}");                              var deviceActor = Context.ActorOf(Device.Props(trackMsg.GroupId' trackMsg.DeviceId)' $"device-{trackMsg.DeviceId}");                              Context.Watch(deviceActor);                              actorToDeviceId.Add(deviceActor' trackMsg.DeviceId);                              deviceIdToActor.Add(trackMsg.DeviceId' deviceActor);                              deviceActor.Forward(trackMsg);                          }                          break;                      case RequestTrackDevice trackMsg:                          Log.Warning($"Ignoring TrackDevice request for {trackMsg.GroupId}. This actor is responsible for {GroupId}.");                          break;                      case RequestDeviceList deviceList:                          Sender.Tell(new ReplyDeviceList(deviceList.RequestId' new HashSet<string>(deviceIdToActor.Keys)));                          break;                      case Terminated t:                          var deviceId = actorToDeviceId[t.ActorRef];                          Log.Info($"Device actor for {deviceId} has been terminated");                          actorToDeviceId.Remove(t.ActorRef);                          deviceIdToActor.Remove(deviceId);                          break;                  }
Missing Default,Tutorials.Tutorial3,DeviceGroup,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceGroup.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestTrackDevice trackMsg when trackMsg.GroupId.Equals(GroupId):                          if (deviceIdToActor.TryGetValue(trackMsg.DeviceId' out var actorRef))                          {                              actorRef.Forward(trackMsg);                          }                          else                          {                              Log.Info($"Creating device actor for {trackMsg.DeviceId}");                              var deviceActor = Context.ActorOf(Device.Props(trackMsg.GroupId' trackMsg.DeviceId)' $"device-{trackMsg.DeviceId}");                              deviceIdToActor.Add(trackMsg.DeviceId' deviceActor);                              deviceActor.Forward(trackMsg);                          }                          break;                      case RequestTrackDevice trackMsg:                          Log.Warning($"Ignoring TrackDevice request for {trackMsg.GroupId}. This actor is responsible for {GroupId}.");                          break;                  }
Missing Default,Tutorials.Tutorial3,DeviceGroup,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceGroup.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestTrackDevice trackMsg when trackMsg.GroupId.Equals(GroupId):                          if (deviceIdToActor.TryGetValue(trackMsg.DeviceId' out var actorRef))                          {                              actorRef.Forward(trackMsg);                          }                          else                          {                              Log.Info($"Creating device actor for {trackMsg.DeviceId}");                              var deviceActor = Context.ActorOf(Device.Props(trackMsg.GroupId' trackMsg.DeviceId)' $"device-{trackMsg.DeviceId}");                              Context.Watch(deviceActor);                              actorToDeviceId.Add(deviceActor' trackMsg.DeviceId);                              deviceIdToActor.Add(trackMsg.DeviceId' deviceActor);                              deviceActor.Forward(trackMsg);                          }                          break;                      case RequestTrackDevice trackMsg:                          Log.Warning($"Ignoring TrackDevice request for {trackMsg.GroupId}. This actor is responsible for {GroupId}.");                          break;                      case Terminated t:                          var deviceId = actorToDeviceId[t.ActorRef];                          Log.Info($"Device actor for {deviceId} has been terminated");                          actorToDeviceId.Remove(t.ActorRef);                          deviceIdToActor.Remove(deviceId);                          break;                  }
Missing Default,Tutorials.Tutorial3,DeviceManager,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial3\DeviceManager.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestTrackDevice trackMsg:                          if (groupIdToActor.TryGetValue(trackMsg.GroupId' out var actorRef))                          {                              actorRef.Forward(trackMsg);                          }                          else                          {                              Log.Info($"Creating device group actor for {trackMsg.GroupId}");                              var groupActor = Context.ActorOf(DeviceGroup.Props(trackMsg.GroupId)' $"group-{trackMsg.GroupId}");                              Context.Watch(groupActor);                              groupActor.Forward(trackMsg);                              groupIdToActor.Add(trackMsg.GroupId' groupActor);                              actorToGroupId.Add(groupActor' trackMsg.GroupId);                          }                          break;                      case Terminated t:                          var groupId = actorToGroupId[t.ActorRef];                          Log.Info($"Device group actor for {groupId} has been terminated");                          actorToGroupId.Remove(t.ActorRef);                          groupIdToActor.Remove(groupId);                          break;                  }
Missing Default,Tutorials.Tutorial4,Device,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\Device.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestTrackDevice req when req.GroupId.Equals(GroupId) && req.DeviceId.Equals(DeviceId):                          Sender.Tell(DeviceRegistered.Instance);                          break;                      case RequestTrackDevice req:                          Log.Warning($"Ignoring TrackDevice request for {req.GroupId}-{req.DeviceId}.This actor is responsible for {GroupId}-{DeviceId}.");                          break;                      case RecordTemperature rec:                          Log.Info($"Recorded temperature reading {rec.Value} with {rec.RequestId}");                          _lastTemperatureReading = rec.Value;                          Sender.Tell(new TemperatureRecorded(rec.RequestId));                          break;                      case ReadTemperature read:                          Sender.Tell(new RespondTemperature(read.RequestId' _lastTemperatureReading));                          break;                  }
Missing Default,Tutorials.Tutorial4,DeviceGroup,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroup.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestTrackDevice trackMsg when trackMsg.GroupId.Equals(GroupId):                          if (deviceIdToActor.TryGetValue(trackMsg.DeviceId' out var actorRef))                          {                              actorRef.Forward(trackMsg);                          }                          else                          {                              Log.Info($"Creating device actor for {trackMsg.DeviceId}");                              var deviceActor = Context.ActorOf(Device.Props(trackMsg.GroupId' trackMsg.DeviceId)' $"device-{trackMsg.DeviceId}");                              Context.Watch(deviceActor);                              actorToDeviceId.Add(deviceActor' trackMsg.DeviceId);                              deviceIdToActor.Add(trackMsg.DeviceId' deviceActor);                              deviceActor.Forward(trackMsg);                          }                          break;                      case RequestTrackDevice trackMsg:                          Log.Warning($"Ignoring TrackDevice request for {trackMsg.GroupId}. This actor is responsible for {GroupId}.");                          break;                      case RequestDeviceList deviceList:                          Sender.Tell(new ReplyDeviceList(deviceList.RequestId' new HashSet<string>(deviceIdToActor.Keys)));                          break;                      case Terminated t:                          var deviceId = actorToDeviceId[t.ActorRef];                          Log.Info($"Device actor for {deviceId} has been terminated");                          actorToDeviceId.Remove(t.ActorRef);                          deviceIdToActor.Remove(deviceId);                          break;                      case RequestAllTemperatures r:                          Context.ActorOf(DeviceGroupQuery.Props(actorToDeviceId' r.RequestId' Sender' TimeSpan.FromSeconds(3)));                          break;                  }
Missing Default,Tutorials.Tutorial4,DeviceGroup,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroup.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestAllTemperatures r:                          Context.ActorOf(DeviceGroupQuery.Props(actorToDeviceId' r.RequestId' Sender' TimeSpan.FromSeconds(3)));                          break;                  }
Missing Default,Tutorials.Tutorial4,DeviceGroupQuery,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceGroupQuery.cs,WaitingForReplies,The following switch statement is missing a default case: switch (message)                      {                          case RespondTemperature response when response.RequestId == 0:                              var deviceActor = Sender;                              ITemperatureReading reading = null;                              if (response.Value.HasValue)                              {                                  reading = new Temperature(response.Value.Value);                              }                              else                              {                                  reading = TemperatureNotAvailable.Instance;                              }                              ReceivedResponse(deviceActor' reading' stillWaiting' repliesSoFar);                              break;                          case Terminated t:                              ReceivedResponse(t.ActorRef' DeviceNotAvailable.Instance' stillWaiting' repliesSoFar);                              break;                          case CollectionTimeout _:                              var replies = new Dictionary<string' ITemperatureReading>(repliesSoFar);                              foreach (var actor in stillWaiting)                              {                                  var deviceId = ActorToDeviceId[actor];                                  replies.Add(deviceId' DeviceTimedOut.Instance);                              }                              Requester.Tell(new RespondAllTemperatures(RequestId' replies));                              Context.Stop(Self);                              break;                      }
Missing Default,Tutorials.Tutorial4,DeviceManager,C:\repos\akkadotnet_akka.net\docs\examples\Tutorials\Tutorial4\DeviceManager.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case RequestTrackDevice trackMsg:                          if (groupIdToActor.TryGetValue(trackMsg.GroupId' out var actorRef))                          {                              actorRef.Forward(trackMsg);                          }                          else                          {                              Log.Info($"Creating device group actor for {trackMsg.GroupId}");                              var groupActor = Context.ActorOf(DeviceGroup.Props(trackMsg.GroupId)' $"group-{trackMsg.GroupId}");                              Context.Watch(groupActor);                              groupActor.Forward(trackMsg);                              groupIdToActor.Add(trackMsg.GroupId' groupActor);                              actorToGroupId.Add(groupActor' trackMsg.GroupId);                          }                          break;                      case Terminated t:                          var groupId = actorToGroupId[t.ActorRef];                          Log.Info($"Device group actor for {groupId} has been terminated");                          actorToGroupId.Remove(t.ActorRef);                          groupIdToActor.Remove(groupId);                          break;                  }
