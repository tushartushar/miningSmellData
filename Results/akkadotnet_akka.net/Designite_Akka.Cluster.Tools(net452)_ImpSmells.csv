Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Cluster.Tools.Client,ClusterReceptionist,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,Receive,The method has 105 lines of code.
Long Method,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,DistributedPubSubMediator,The method has 242 lines of code.
Long Method,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The method has 477 lines of code.
Complex Method,Akka.Cluster.Tools.Client,ClusterClient,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClient.cs,Establishing,Cyclomatic complexity of the method is 13
Complex Method,Akka.Cluster.Tools.Client,ClusterReceptionist,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,Receive,Cyclomatic complexity of the method is 20
Complex Method,Akka.Cluster.Tools.PublishSubscribe.Internal,TopicLike,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\Topics.cs,DefaultReceive,Cyclomatic complexity of the method is 10
Complex Method,Akka.Cluster.Tools.PublishSubscribe.Internal,Topic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\Topics.cs,Business,Cyclomatic complexity of the method is 8
Complex Method,Akka.Cluster.Tools.Singleton,OldestChangedBuffer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\OldestChangedBuffer.cs,OnReceive,Cyclomatic complexity of the method is 8
Long Parameter List,Akka.Cluster.Tools.Client,ClusterClientSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,ClusterClientSettings,The method has 7 parameters. Parameters: initialContacts' establishingGetContactsInterval' refreshContactsInterval' heartbeatInterval' acceptableHeartbeatPause' bufferSize' reconnectTimeout
Long Parameter List,Akka.Cluster.Tools.Client,ClusterClientSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,Copy,The method has 7 parameters. Parameters: initialContacts' establishingGetContactsInterval' refreshContactsInterval' heartbeatInterval' acceptableHeartbeatPause' bufferSize' reconnectTimeout
Long Parameter List,Akka.Cluster.Tools.Client,ClusterReceptionistSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionistSettings.cs,ClusterReceptionistSettings,The method has 6 parameters. Parameters: role' numberOfContacts' responseTunnelReceiveTimeout' heartbeatInterval' acceptableHeartbeatPause' failureDetectionInterval
Long Parameter List,Akka.Cluster.Tools.Client,ClusterReceptionistSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionistSettings.cs,Copy,The method has 6 parameters. Parameters: role' numberOfContacts' responseTunnelReceiveTimeout' heartbeatInterval' acceptableHeartbeatPause' failureDetectionInterval
Long Parameter List,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubSettings.cs,DistributedPubSubSettings,The method has 5 parameters. Parameters: role' routingLogic' gossipInterval' removedTimeToLive' maxDeltaElements
Long Identifier,Akka.Cluster.Tools.Client,ClusterClientSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,ClusterClientSettings,The length of the parameter establishingGetContactsInterval is 31.
Long Identifier,Akka.Cluster.Tools.Client,ClusterClientSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,Copy,The length of the parameter establishingGetContactsInterval is 31.
Long Identifier,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,ClusterSingletonProxySettings,The length of the parameter singletonIdentificationInterval is 31.
Long Identifier,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,WithSingletonIdentificationInterval,The length of the parameter singletonIdentificationInterval is 31.
Long Identifier,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,Copy,The length of the parameter singletonIdentificationInterval is 31.
Long Statement,Akka.Cluster.Tools.Client,ClusterReceptionist,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,ResponseTunnel,The length of the statement  "                : Context.ActorOf(Actor.Props.Create(() => new ClientResponseTunnel(client' _settings.ResponseTunnelReceiveTimeout))' encName); " is 127.
Long Statement,Akka.Cluster.Tools.Client,ClusterReceptionistSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionistSettings.cs,Create,The length of the statement  "                throw new ArgumentException($"Actor system [{system.Name}] doesn't have `akka.cluster.client.receptionist` config set up"); " is 123.
Long Statement,Akka.Cluster.Tools.Client.Serialization,ClusterClientMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\Serialization\ClusterClientMessageSerializer.cs,ToBinary,The length of the statement  "            throw new ArgumentException($"Can't serialize object of type [{obj.GetType()}] in [{nameof(ClusterClientMessageSerializer)}]"); " is 127.
Long Statement,Akka.Cluster.Tools.Client.Serialization,ClusterClientMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\Serialization\ClusterClientMessageSerializer.cs,FromBinary,The length of the statement  "            throw new SerializationException($"Unimplemented deserialization of message with manifest [{manifest}] in serializer {nameof(ClusterClientMessageSerializer)}"); " is 160.
Long Statement,Akka.Cluster.Tools.Client.Serialization,ClusterClientMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\Serialization\ClusterClientMessageSerializer.cs,Manifest,The length of the statement  "            throw new ArgumentException($"Can't serialize object of type [{o.GetType()}] in [{nameof(ClusterClientMessageSerializer)}]"); " is 125.
Long Statement,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,PutToRegistry,The length of the statement  "                    new Bucket(_cluster.SelfAddress' v' ImmutableDictionary<string' ValueHolder>.Empty.Add(key' new ValueHolder(v' value)))); " is 121.
Long Statement,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,HandlePrune,The length of the statement  "                    .Where(kv => kv.Value.Ref.IsNobody() && (bucket.Version - kv.Value.Version) > _settings.RemovedTimeToLive.TotalMilliseconds) " is 124.
Long Statement,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,NewTopicActor,The length of the statement  "            var t = Context.ActorOf(Actor.Props.Create(() => new Topic(_settings.RemovedTimeToLive' _settings.RoutingLogic))' encodedTopic); " is 128.
Long Statement,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubSettings.cs,Create,The length of the statement  "            if (config == null) throw new ArgumentException("Actor system settings has no configuration for akka.cluster.pub-sub defined"); " is 127.
Long Statement,Akka.Cluster.Tools.PublishSubscribe.Serialization,DistributedPubSubMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs,ToBinary,The length of the statement  "            throw new ArgumentException($"Can't serialize object of type {obj.GetType()} with {nameof(DistributedPubSubMessageSerializer)}"); " is 129.
Long Statement,Akka.Cluster.Tools.PublishSubscribe.Serialization,DistributedPubSubMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs,FromBinary,The length of the statement  "            throw new SerializationException($"Unimplemented deserialization of message with manifest [{manifest}] in serializer {nameof(DistributedPubSubMessageSerializer)}"); " is 164.
Long Statement,Akka.Cluster.Tools.PublishSubscribe.Serialization,DistributedPubSubMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs,Manifest,The length of the statement  "            throw new ArgumentException($"Serializer {nameof(DistributedPubSubMessageSerializer)} cannot serialize message of type {o.GetType()}"); " is 135.
Long Statement,Akka.Cluster.Tools.PublishSubscribe.Serialization,DistributedPubSubMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs,DeltaToProto,The length of the statement  "                    valueHolder.Ref = Akka.Serialization.Serialization.SerializedActorPath(bucketContent.Value.Ref); // TODO: reuse the method from the core serializer " is 147.
Long Statement,Akka.Cluster.Tools.PublishSubscribe.Serialization,DistributedPubSubMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs,SendToAllFrom,The length of the statement  "            return new SendToAll(sendToAllProto.Path' _payloadSupport.PayloadFrom(sendToAllProto.Payload)' sendToAllProto.AllButSelf); " is 122.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,Props,The length of the statement  "            return Actor.Props.Create(() => new ClusterSingletonManager(singletonProps' terminationMessage' settings)).WithDeploy(Deploy.Local); " is 132.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,PreStart,The length of the statement  "            _cluster.Subscribe(Self' ClusterEvent.InitialStateAsEvents' typeof(ClusterEvent.MemberRemoved)' typeof(ClusterEvent.MemberDowned)); " is 131.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                            _oldestChangedBuffer = Context.ActorOf(Actor.Props.Create<OldestChangedBuffer>(_settings.Role).WithDispatcher(Context.Props.Dispatcher)); " is 137.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                                ? GoTo(ClusterSingletonState.BecomingOldest).Using(new BecomingOldestData(initialOldestState.Oldest.FindAll(u => !u.Equals(_selfUniqueAddress)))) " is 145.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                                : GoTo(ClusterSingletonState.Younger).Using(new YoungerData(initialOldestState.Oldest.FindAll(u => !u.Equals(_selfUniqueAddress)))); " is 132.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                        Log.Info("Younger observed OldestChanged: [{0} -> {1}]"' youngerData.Oldest.Head()?.Address' oldestChanged.Oldest?.Address); " is 124.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                else if (e.FsmEvent is MemberDowned memberDowned && memberDowned.Member.UniqueAddress.Equals(_cluster.SelfUniqueAddress)) " is 121.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                else if (e.FsmEvent is MemberDowned memberDowned && memberDowned.Member.UniqueAddress.Equals(_cluster.SelfUniqueAddress)) " is 121.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                    else if (becoming.PreviousOldest.Contains(delayed.Member.UniqueAddress) && becoming.PreviousOldest.All(a => _removed.ContainsKey(a))) " is 133.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                        return Stay().Using(new BecomingOldestData(becoming.PreviousOldest.FindAll(u => !u.Equals(delayed.Member.UniqueAddress)))); " is 123.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                        throw new ClusterSingletonManagerIsStuckException($"Becoming singleton oldest was stuck because previous oldest [{becomingOldest.PreviousOldest.Head()}] is unresponsive"); " is 171.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                else if (e.FsmEvent is MemberDowned memberDowned && e.StateData is OldestData od && memberDowned.Member.UniqueAddress.Equals(_cluster.SelfUniqueAddress)) " is 153.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                else if (e.FsmEvent is MemberDowned memberDowned && e.StateData is WasOldestData od && memberDowned.Member.UniqueAddress.Equals(_cluster.SelfUniqueAddress)) " is 156.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                if (to == ClusterSingletonState.BecomingOldest) SetTimer(HandOverRetryTimer' new HandOverRetry(1)' _settings.HandOverRetryInterval); " is 132.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManagerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManagerSettings.cs,Create,The length of the statement  "                    $"Cannot initialize {typeof(ClusterSingletonManagerSettings)}: akka.cluster.singleton configuration node was not provided"); " is 124.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,Create,The length of the statement  "                throw new ConfigurationException($"Cannot create {typeof(ClusterSingletonProxySettings)}: akka.cluster.singleton-proxy configuration node not found"); " is 150.
Long Statement,Akka.Cluster.Tools.Singleton,OldestChangedBuffer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\OldestChangedBuffer.cs,HandleInitial,The length of the statement  "            var safeToBeOldest = !oldest.Any(m => m.Status == MemberStatus.Down || m.Status == MemberStatus.Exiting || m.Status == MemberStatus.Leaving); " is 141.
Long Statement,Akka.Cluster.Tools.Singleton.Serialization,ClusterSingletonMessageSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\Serialization\ClusterSingletonMessageSerializer.cs,FromBinary,The length of the statement  "            throw new SerializationException($"Unimplemented deserialization of message with manifest [{manifest}] in [{GetType()}]"); " is 122.
Complex Conditional,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The conditional expression  "(_cluster.IsTerminated || _selfExited)                          && (wasOldestData.NewOldest == null || takeOverRetry.Count > _maxTakeOverRetries)"  is complex.
Complex Conditional,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The conditional expression  "e.StateData is WasOldestData data                              && data.NewOldest != null                              && !_selfExited                              && removed.Member.UniqueAddress.Equals(data.NewOldest)"  is complex.
Magic Number,Akka.Cluster.Tools.Client,ClusterClientSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,ClusterClientSettings,The following statement contains a magic number: bufferSize < 0 || bufferSize > 10000
Magic Number,Akka.Cluster.Tools.Client,ClusterReceptionist,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,ClusterReceptionist,The following statement contains a magic number: _virtualNodesFactor = 10;
Magic Number,Akka.Cluster.Tools.Client,Contacts,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,GetHashCode,The following statement contains a magic number: int hash = 19;
Magic Number,Akka.Cluster.Tools.Client,Contacts,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + foo.GetHashCode();
Magic Number,Akka.Cluster.Tools.Client,ClientResponseTunnel,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,IsAsk,The following statement contains a magic number: return pathElements.Count == 2 && pathElements[0] == "temp" && pathElements.Last().StartsWith("$");
Magic Number,Akka.Cluster.Tools.Client.Serialization.Proto.Msg,Contacts,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\Serialization\Proto\ClusterClientMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              contactPoints_.AddEntriesFrom(input' _repeated_contactPoints_codec);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Subscribe,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Group != null ? Group.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Subscribe,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Ref != null ? Ref.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Unsubscribe,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Group != null ? Group.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Unsubscribe,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Ref != null ? Ref.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Publish,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Message != null ? Message.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Publish,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ SendOneMessageToEachGroup.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Send,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Message != null ? Message.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Send,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ LocalAffinity.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe,SendToAll,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Message != null ? Message.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,SendToAll,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ExcludeSelf.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,DistributedPubSubMediator,The following statement contains a magic number: _pruneInterval = new TimeSpan(_settings.RemovedTimeToLive.Ticks / 2);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,NextVersion,The following statement contains a magic number: var current = DateTime.UtcNow.Ticks / 10000;
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Internal,Bucket,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\TopicMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Version.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Internal,Bucket,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\TopicMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Content != null ? Content.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Internal,ValueHolder,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\TopicMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Ref != null ? Ref.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Internal,Status,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\TopicMessages.cs,GetHashCode,The following statement contains a magic number: int hashCode = 13;
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Internal,Status,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\TopicMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * 17 + v.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Internal,Status,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\TopicMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * 17 + IsReplyToStatus.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Internal,TopicLike,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\Topics.cs,TopicLike,The following statement contains a magic number: PruneInterval = new TimeSpan(emptyTimeToLive.Ticks / 2);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Status,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Status,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              versions_.AddEntriesFrom(input' _repeated_versions_codec);              break;            }            case 16: {              ReplyToStatus = input.ReadBool();              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Status,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              versions_.AddEntriesFrom(input' _repeated_versions_codec);              break;            }            case 16: {              ReplyToStatus = input.ReadBool();              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Version,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Version,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Version,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 10: {                  if (address_ == null) {                    address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();                  }                  input.ReadMessage(address_);                  break;                }                case 16: {                  Timestamp = input.ReadInt64();                  break;                }              }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Version,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 10: {                  if (address_ == null) {                    address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();                  }                  input.ReadMessage(address_);                  break;                }                case 16: {                  Timestamp = input.ReadInt64();                  break;                }              }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Delta,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              buckets_.AddEntriesFrom(input' _repeated_buckets_codec);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,ValueHolder,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,ValueHolder,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,ValueHolder,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 8: {                  Version = input.ReadInt64();                  break;                }                case 18: {                  Ref = input.ReadString();                  break;                }              }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,ValueHolder,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 8: {                  Version = input.ReadInt64();                  break;                }                case 18: {                  Ref = input.ReadString();                  break;                }              }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Bucket,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Bucket,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Bucket,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 10: {                  if (owner_ == null) {                    owner_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();                  }                  input.ReadMessage(owner_);                  break;                }                case 16: {                  Version = input.ReadInt64();                  break;                }                case 26: {                  content_.AddEntriesFrom(input' _map_content_codec);                  break;                }              }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Bucket,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 10: {                  if (owner_ == null) {                    owner_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();                  }                  input.ReadMessage(owner_);                  break;                }                case 16: {                  Version = input.ReadInt64();                  break;                }                case 26: {                  content_.AddEntriesFrom(input' _map_content_codec);                  break;                }              }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Bucket,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 10: {                  if (owner_ == null) {                    owner_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();                  }                  input.ReadMessage(owner_);                  break;                }                case 16: {                  Version = input.ReadInt64();                  break;                }                case 26: {                  content_.AddEntriesFrom(input' _map_content_codec);                  break;                }              }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Send,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Send,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Send,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Send,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 16: {              LocalAffinity = input.ReadBool();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Send,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 16: {              LocalAffinity = input.ReadBool();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Send,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 16: {              LocalAffinity = input.ReadBool();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,SendToAll,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,SendToAll,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,SendToAll,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,SendToAll,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 16: {              AllButSelf = input.ReadBool();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,SendToAll,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 16: {              AllButSelf = input.ReadBool();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,SendToAll,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 16: {              AllButSelf = input.ReadBool();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Publish,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Publish,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Publish,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Topic = input.ReadString();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,Publish,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Topic = input.ReadString();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,SendToOneSubscriber,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Serialization.Proto.Msg,SendToOneSubscriber,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,ClusterSingletonManager,The following statement contains a magic number: _maxHandOverRetries = Math.Max(minRetries' n + 3);
Magic Number,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,ClusterSingletonManager,The following statement contains a magic number: _maxTakeOverRetries = Math.Max(1' _maxHandOverRetries - 3);
Magic Number,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,AddRemoved,The following statement contains a magic number: _removed = _removed.Add(node' Deadline.Now + TimeSpan.FromMinutes(15.0));
Magic Number,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The following statement contains a magic number: When(ClusterSingletonState.WasOldest' e =>              {                  if (e.FsmEvent is TakeOverRetry takeOverRetry && e.StateData is WasOldestData wasOldestData)                  {                      if ((_cluster.IsTerminated || _selfExited)                          && (wasOldestData.NewOldest == null || takeOverRetry.Count > _maxTakeOverRetries))                      {                          return wasOldestData.SingletonTerminated ? Stop() : GoToStopping(wasOldestData.Singleton);                      }                      else if (takeOverRetry.Count <= _maxTakeOverRetries)                      {                          if (_maxTakeOverRetries - takeOverRetry.Count <= 3)                              Log.Info("Retry [{0}]' sending TakeOverFromMe to [{1}]"' takeOverRetry.Count' wasOldestData.NewOldest?.Address);                          else                              Log.Debug("Retry [{0}]' sending TakeOverFromMe to [{1}]"' takeOverRetry.Count' wasOldestData.NewOldest?.Address);                            if (wasOldestData.NewOldest != null)                              Peer(wasOldestData.NewOldest.Address).Tell(TakeOverFromMe.Instance);                            SetTimer(TakeOverRetryTimer' new TakeOverRetry(takeOverRetry.Count + 1)' _settings.HandOverRetryInterval' false);                          return Stay();                      }                      else                      {                          throw new ClusterSingletonManagerIsStuckException($"Expected hand-over to [{wasOldestData.NewOldest}] never occurred");                      }                  }                  else if (e.FsmEvent is HandOverToMe && e.StateData is WasOldestData w)                  {                      return GoToHandingOver(w.Singleton' w.SingletonTerminated' Sender);                  }                  else if (e.FsmEvent is MemberRemoved removed)                  {                      if (removed.Member.UniqueAddress.Equals(_cluster.SelfUniqueAddress) && !_selfExited)                      {                          Log.Info("Self removed' stopping ClusterSingletonManager");                          return Stop();                      }                      else if (e.StateData is WasOldestData data                              && data.NewOldest != null                              && !_selfExited                              && removed.Member.UniqueAddress.Equals(data.NewOldest))                      {                          AddRemoved(removed.Member.UniqueAddress);                          return GoToHandingOver(data.Singleton' data.SingletonTerminated' null);                      }                  }                  else if (e.FsmEvent is Terminated t                      && e.StateData is WasOldestData oldestData                      && t.ActorRef.Equals(oldestData.Singleton))                  {                      Log.Info("Singleton actor [{0}] was terminated"' oldestData.Singleton.Path);                      return Stay().Using(new WasOldestData(oldestData.Singleton' true' oldestData.NewOldest));                  }                  else if (e.FsmEvent is SelfExiting)                  {                      SelfMemberExited();                      // complete _memberExitingProgress when HandOverDone                      Sender.Tell(Done.Instance); // reply to ask                      return Stay();                  }                  else if (e.FsmEvent is MemberDowned memberDowned && e.StateData is WasOldestData od && memberDowned.Member.UniqueAddress.Equals(_cluster.SelfUniqueAddress))                  {                      if (od.SingletonTerminated)                      {                          Log.Info("Self downed' stopping ClusterSingletonManager");                          return Stop();                      }                      else                      {                          Log.Info("Self downed' stopping");                          return GoToStopping(od.Singleton);                      }                  }                    return null;              });
Missing Default,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The following switch statement is missing a default case: switch (senderUniqueAddress)                      {                          case null:                              // from unknown node' ignore                              Log.Info("Ignoring TakeOver request from unknown node in BecomingOldest from [{0}]"' senderAddress);                              return Stay();                          case UniqueAddress _:                              {                                  switch (becomingOldestData.PreviousOldest.Head())                                  {                                      case UniqueAddress oldest:                                          if (oldest.Equals(senderUniqueAddress))                                              Sender.Tell(HandOverToMe.Instance);                                          else                                              Log.Info("Ignoring TakeOver request in BecomingOldest from [{0}]. Expected previous oldest [{1}]"'                                                  Sender.Path.Address' oldest.Address);                                          return Stay();                                      case null:                                          Sender.Tell(HandOverToMe.Instance);                                          becomingOldestData.PreviousOldest.Insert(0' senderUniqueAddress);                                          return Stay().Using(new BecomingOldestData(becomingOldestData.PreviousOldest));                                  }                              }                      }
Missing Default,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The following switch statement is missing a default case: switch (becomingOldestData.PreviousOldest.Head())                                  {                                      case UniqueAddress oldest:                                          if (oldest.Equals(senderUniqueAddress))                                              Sender.Tell(HandOverToMe.Instance);                                          else                                              Log.Info("Ignoring TakeOver request in BecomingOldest from [{0}]. Expected previous oldest [{1}]"'                                                  Sender.Path.Address' oldest.Address);                                          return Stay();                                      case null:                                          Sender.Tell(HandOverToMe.Instance);                                          becomingOldestData.PreviousOldest.Insert(0' senderUniqueAddress);                                          return Stay().Using(new BecomingOldestData(becomingOldestData.PreviousOldest));                                  }
Missing Default,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The following switch statement is missing a default case: switch (oldestChanged.Oldest)                      {                          case UniqueAddress a when a.Equals(_cluster.SelfUniqueAddress):                              // already oldest                              return Stay();                          case UniqueAddress a when !_selfExited && _removed.ContainsKey(a):                              // The member removal was not completed and the old removed node is considered                              // oldest again. Safest is to terminate the singleton instance and goto Younger.                              // This node will become oldest again when the other is removed again.                              return GoToHandingOver(oldestData.Singleton' oldestData.SingletonTerminated' null);                          case UniqueAddress a:                              // send TakeOver request in case the new oldest doesn't know previous oldest                              Peer(a.Address).Tell(TakeOverFromMe.Instance);                              SetTimer(TakeOverRetryTimer' new TakeOverRetry(1)' _settings.HandOverRetryInterval' repeat: false);                              return GoTo(ClusterSingletonState.WasOldest)                                  .Using(new WasOldestData(oldestData.Singleton' oldestData.SingletonTerminated' a));                          case null:                              // new oldest will initiate the hand-over                              SetTimer(TakeOverRetryTimer' new TakeOverRetry(1)' _settings.HandOverRetryInterval' repeat: false);                              return GoTo(ClusterSingletonState.WasOldest)                                  .Using(new WasOldestData(oldestData.Singleton' oldestData.SingletonTerminated' newOldest: null));                      }
