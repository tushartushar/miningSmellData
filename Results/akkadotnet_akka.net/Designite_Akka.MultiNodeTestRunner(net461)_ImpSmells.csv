Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,Main,The method has 250 lines of code.
Complex Method,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,Main,Cyclomatic complexity of the method is 16
Long Statement,Akka.MultiNodeTestRunner,Discovery,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Discovery.cs,RoleNames,The length of the statement  "            var roleProps = configProps.Where(p => p.PropertyType == roleType && p.Name != "Myself").Select(p => (RoleName)p.GetValue(configInstance)); " is 139.
Long Statement,Akka.MultiNodeTestRunner,Discovery,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Discovery.cs,RoleNames,The length of the statement  "            var roleFields = configFields.Where(f => f.FieldType == roleType && f.Name != "Myself").Select(f => (RoleName)f.GetValue(configInstance)); " is 138.
Long Statement,Akka.MultiNodeTestRunner,Discovery,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Discovery.cs,FindConfigConstructor,The length of the statement  "                    .FirstOrDefault(c => null != c.GetParameters().FirstOrDefault(p => p.ParameterType.GetTypeInfo().IsSubclassOf(baseConfigType))); " is 128.
Long Statement,Akka.MultiNodeTestRunner,Discovery,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Discovery.cs,FindConfigConstructor,The length of the statement  "            throw new ArgumentException($"[{configUser}] or one of its base classes must specify constructor' which first parameter is a subclass of {baseConfigType}"); " is 156.
Long Statement,Akka.MultiNodeTestRunner,Discovery,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Discovery.cs,ConfigConstructorParamValues,The length of the statement  "                : ctors.First().GetParameters().Select(p => p.ParameterType.GetTypeInfo().IsValueType ? Activator.CreateInstance(p.ParameterType) : null).ToArray(); " is 148.
Long Statement,Akka.MultiNodeTestRunner,Discovery,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Discovery.cs,ConfigConstructorParamValues,The length of the statement  "                : ctors.First().GetParameters().Select(p => p.ParameterType.IsValueType ? Activator.CreateInstance(p.ParameterType) : null).ToArray(); " is 134.
Long Statement,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,Main,The length of the statement  "                    coordinatorProps = Props.Create(() =>  new SinkCoordinator(new[] { new TeamCityMessageSink(Console.WriteLine' suiteName) })); " is 125.
Long Statement,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,Main,The length of the statement  "                    throw new ArgumentException($"Given reporter name '{reporter}' is not understood' valid reporters are: trx and teamcity"); " is 122.
Long Statement,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,Main,The length of the statement  "                                var dumpTask = timelineCollector.Ask<Done>(new TimelineLogCollectorActor.DumpToFile(Path.Combine(testOutputDir' "aggregated.txt"))); " is 132.
Long Statement,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,EnableAllSinks,The length of the statement  "                var jsonStoreProps = Props.Create(() => new FileSystemMessageSinkActor(new JsonPersistentTestRunStore()' fileName' !TeamCityFormattingOn' true)); " is 145.
Long Statement,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,EnableAllSinks,The length of the statement  "                var visualizerProps = Props.Create(() => new FileSystemMessageSinkActor(new VisualizerPersistentTestRunStore()' fileName' !TeamCityFormattingOn' true)); " is 152.
Magic Number,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,Main,The following statement contains a magic number: var listenPort = CommandLine.GetInt32OrDefault("multinode.listen-port"' 6577);
Magic Number,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(3));
Magic Number,Akka.MultiNodeTestRunner,Program,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(5));
Missing Default,Akka.MultiNodeTestRunner,Discovery,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.MultiNodeTestRunner\Discovery.cs,OnMessage,The following switch statement is missing a default case: switch (message)              {                  case ITestCaseDiscoveryMessage testCaseDiscoveryMessage:                      var testClass = testCaseDiscoveryMessage.TestClass.Class;                      if (testClass.IsAbstract) return true;  #if CORECLR                      var specType = testCaseDiscoveryMessage.TestAssembly.Assembly.GetType(testClass.Name).ToRuntimeType();  #else                      var testAssembly = Assembly.LoadFrom(testCaseDiscoveryMessage.TestAssembly.Assembly.AssemblyPath);                      var specType = testAssembly.GetType(testClass.Name);  #endif                      var roles = RoleNames(specType);                        var details = roles.Select((r' i) => new NodeTest                      {                          Node = i + 1'                          Role = r.Name'                          TestName = testClass.Name'                          TypeName = testClass.Name'                          MethodName = testCaseDiscoveryMessage.TestCase.TestMethod.Method.Name'                          SkipReason = testCaseDiscoveryMessage.TestCase.SkipReason'                      }).ToList();                      if (details.Any())                      {                          var dictKey = details.First().TestName;                          if (Tests.ContainsKey(dictKey))                              Tests[dictKey].AddRange(details);                          else                              Tests.Add(dictKey' details);                      }                      break;                  case IDiscoveryCompleteMessage discoveryComplete:                      Finished.Set();                      break;                  case ErrorMessage err:                      Errors.Add(err);                      break;              }
