Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The method has 101 lines of code.
Long Statement,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_replicate_values_when_all_nodes_connected,The length of the statement  "                    _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' WriteLocal.Instance' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref); " is 135.
Long Statement,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_read_write_to_majority_when_all_nodes_connected,The length of the statement  "                    _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' writeMajority' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref); " is 129.
Long Statement,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_replicate_values_after_partition,The length of the statement  "                    _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' WriteLocal.Instance' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref); " is 135.
Long Statement,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_write_to_majority_during_3_and_2_partition_and_read_from_majority_after_partition,The length of the statement  "                    _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' writeMajority' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref); " is 129.
Long Statement,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The length of the statement  "            _cluster.Subscribe(memberProbe.Ref' ClusterEvent.SubscriptionInitialStateMode.InitialStateAsEvents' typeof(ClusterEvent.MemberUp)); " is 131.
Long Statement,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The length of the statement  "                        counter.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{counter} shouldn't need prunning from {thirdUniqueAddress}"); " is 125.
Long Statement,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_check_that_remote_update_and_local_update_both_cause_a_change_event_to_emit_with_the_merged_data,The length of the statement  "                _replicator.Tell(Dsl.Update(KeyH' ORDictionary<string' Flag>.Empty' _writeTwo' x => x.SetItem(_cluster' "a"' Flag.False))); " is 123.
Long Statement,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_check_that_remote_update_and_local_update_both_cause_a_change_event_to_emit_with_the_merged_data,The length of the statement  "                _replicator.Tell(Dsl.Update(KeyH' ORDictionary<string' Flag>.Empty' _writeTwo' x => x.SetItem(_cluster' "a"' Flag.True))); " is 122.
Long Statement,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_check_that_remote_update_and_local_update_both_cause_a_change_event_to_emit_with_the_merged_data,The length of the statement  "                changedProbe.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyH)).Get(KeyH).Entries.SequenceEqual(ImmutableDictionary.CreateRange(new[] " is 130.
Long Statement,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_check_that_remote_update_and_local_update_both_cause_a_change_event_to_emit_with_the_merged_data,The length of the statement  "                _replicator.Tell(Dsl.Update(KeyH' ORDictionary<string' Flag>.Empty' _writeTwo' x => x.SetItem(_cluster' "b"' Flag.True))); " is 122.
Long Statement,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_check_that_remote_update_and_local_update_both_cause_a_change_event_to_emit_with_the_merged_data,The length of the statement  "                changedProbe.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyH)).Get(KeyH).Entries.SequenceEqual(ImmutableDictionary.CreateRange(new[] " is 130.
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,DurableDataSpec,The following statement contains a magic number: writeTwo = new WriteTo(2' timeout);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,DurableDataSpec,The following statement contains a magic number: readTwo = new ReadFrom(2' timeout);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_work_in_a_single_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  var r = NewReplicator(Sys);                  Within(TimeSpan.FromSeconds(10)' () =>                 {                     AwaitAssert(() =>                     {                         r.Tell(Dsl.GetReplicaCount);                         ExpectMsg(new ReplicaCount(1));                     });                 });                    r.Tell(Dsl.Get(keyA' ReadLocal.Instance));                  ExpectMsg(new NotFound(keyA' null));                    r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster)));                  r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster)));                  r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster)));                    ExpectMsg(new UpdateSuccess(keyA' null));                  ExpectMsg(new UpdateSuccess(keyA' null));                  ExpectMsg(new UpdateSuccess(keyA' null));                    Watch(r);                  Sys.Stop(r);                  ExpectTerminated(r);                    var r2 = default(IActorRef);                  AwaitAssert(() => r2 = NewReplicator(Sys)); // try until name is free                    // note that it will stash the commands until loading completed                  r2.Tell(Dsl.Get(keyA' ReadLocal.Instance));                  ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(3UL);                    Watch(r2);                  Sys.Stop(r2);                  ExpectTerminated(r2);                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_work_in_a_single_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  var r = NewReplicator(Sys);                  Within(TimeSpan.FromSeconds(10)' () =>                 {                     AwaitAssert(() =>                     {                         r.Tell(Dsl.GetReplicaCount);                         ExpectMsg(new ReplicaCount(1));                     });                 });                    r.Tell(Dsl.Get(keyA' ReadLocal.Instance));                  ExpectMsg(new NotFound(keyA' null));                    r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster)));                  r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster)));                  r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster)));                    ExpectMsg(new UpdateSuccess(keyA' null));                  ExpectMsg(new UpdateSuccess(keyA' null));                  ExpectMsg(new UpdateSuccess(keyA' null));                    Watch(r);                  Sys.Stop(r);                  ExpectTerminated(r);                    var r2 = default(IActorRef);                  AwaitAssert(() => r2 = NewReplicator(Sys)); // try until name is free                    // note that it will stash the commands until loading completed                  r2.Tell(Dsl.Get(keyA' ReadLocal.Instance));                  ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(3UL);                    Watch(r2);                  Sys.Stop(r2);                  ExpectTerminated(r2);                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_work_in_a_multi_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      r.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(2));                  });              });
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_work_in_a_multi_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      r.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(2));                  });              });
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_work_in_a_multi_node_cluster,The following statement contains a magic number: ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(2UL);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_work_in_a_multi_node_cluster,The following statement contains a magic number: ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(2UL);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_handle_Update_before_Load,The following statement contains a magic number: RunOn(() =>              {                  var sys1 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  var cluster1 = Akka.Cluster.Cluster.Get(sys1);                  var addr = cluster1.SelfAddress;                  try                  {                      cluster1.Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r = NewReplicator(sys1);                          Within(TimeSpan.FromSeconds(10)' () =>                          {                              AwaitAssert(() =>                              {                                  r.Tell(Dsl.GetReplicaCount);                                  ExpectMsg(new ReplicaCount(1));                              });                          });                            r.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg(new NotFound(keyA' null));                            r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                            ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyB' null));                            Watch(r);                          sys1.Stop(r);                          ExpectTerminated(r);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                    var sys2 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  try                  {                      Akka.Cluster.Cluster.Get(sys2).Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r2 = NewReplicator(sys2);                            // it should be possible to update while loading is in progress                          r2.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(Akka.Cluster.Cluster.Get(sys2))));                          ExpectMsg(new UpdateSuccess(keyB' null));                            // wait until all loaded                          AwaitAssert(() =>                          {                              r2.Tell(Dsl.GetKeyIds);                              ExpectMsg<GetKeysIdsResult>().Keys.ShouldBe(ImmutableHashSet.CreateRange(new [] { keyA.Id' keyB.Id }));                             });                            r2.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(3UL);                            r2.Tell(Dsl.Get(keyB' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyB).Value.ShouldBe(2UL);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_handle_Update_before_Load,The following statement contains a magic number: RunOn(() =>              {                  var sys1 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  var cluster1 = Akka.Cluster.Cluster.Get(sys1);                  var addr = cluster1.SelfAddress;                  try                  {                      cluster1.Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r = NewReplicator(sys1);                          Within(TimeSpan.FromSeconds(10)' () =>                          {                              AwaitAssert(() =>                              {                                  r.Tell(Dsl.GetReplicaCount);                                  ExpectMsg(new ReplicaCount(1));                              });                          });                            r.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg(new NotFound(keyA' null));                            r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                            ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyB' null));                            Watch(r);                          sys1.Stop(r);                          ExpectTerminated(r);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                    var sys2 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  try                  {                      Akka.Cluster.Cluster.Get(sys2).Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r2 = NewReplicator(sys2);                            // it should be possible to update while loading is in progress                          r2.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(Akka.Cluster.Cluster.Get(sys2))));                          ExpectMsg(new UpdateSuccess(keyB' null));                            // wait until all loaded                          AwaitAssert(() =>                          {                              r2.Tell(Dsl.GetKeyIds);                              ExpectMsg<GetKeysIdsResult>().Keys.ShouldBe(ImmutableHashSet.CreateRange(new [] { keyA.Id' keyB.Id }));                             });                            r2.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(3UL);                            r2.Tell(Dsl.Get(keyB' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyB).Value.ShouldBe(2UL);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_handle_Update_before_Load,The following statement contains a magic number: RunOn(() =>              {                  var sys1 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  var cluster1 = Akka.Cluster.Cluster.Get(sys1);                  var addr = cluster1.SelfAddress;                  try                  {                      cluster1.Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r = NewReplicator(sys1);                          Within(TimeSpan.FromSeconds(10)' () =>                          {                              AwaitAssert(() =>                              {                                  r.Tell(Dsl.GetReplicaCount);                                  ExpectMsg(new ReplicaCount(1));                              });                          });                            r.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg(new NotFound(keyA' null));                            r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                            ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyB' null));                            Watch(r);                          sys1.Stop(r);                          ExpectTerminated(r);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                    var sys2 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  try                  {                      Akka.Cluster.Cluster.Get(sys2).Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r2 = NewReplicator(sys2);                            // it should be possible to update while loading is in progress                          r2.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(Akka.Cluster.Cluster.Get(sys2))));                          ExpectMsg(new UpdateSuccess(keyB' null));                            // wait until all loaded                          AwaitAssert(() =>                          {                              r2.Tell(Dsl.GetKeyIds);                              ExpectMsg<GetKeysIdsResult>().Keys.ShouldBe(ImmutableHashSet.CreateRange(new [] { keyA.Id' keyB.Id }));                             });                            r2.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(3UL);                            r2.Tell(Dsl.Get(keyB' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyB).Value.ShouldBe(2UL);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_handle_Update_before_Load,The following statement contains a magic number: RunOn(() =>              {                  var sys1 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  var cluster1 = Akka.Cluster.Cluster.Get(sys1);                  var addr = cluster1.SelfAddress;                  try                  {                      cluster1.Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r = NewReplicator(sys1);                          Within(TimeSpan.FromSeconds(10)' () =>                          {                              AwaitAssert(() =>                              {                                  r.Tell(Dsl.GetReplicaCount);                                  ExpectMsg(new ReplicaCount(1));                              });                          });                            r.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg(new NotFound(keyA' null));                            r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                            ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyB' null));                            Watch(r);                          sys1.Stop(r);                          ExpectTerminated(r);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                    var sys2 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  try                  {                      Akka.Cluster.Cluster.Get(sys2).Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r2 = NewReplicator(sys2);                            // it should be possible to update while loading is in progress                          r2.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(Akka.Cluster.Cluster.Get(sys2))));                          ExpectMsg(new UpdateSuccess(keyB' null));                            // wait until all loaded                          AwaitAssert(() =>                          {                              r2.Tell(Dsl.GetKeyIds);                              ExpectMsg<GetKeysIdsResult>().Keys.ShouldBe(ImmutableHashSet.CreateRange(new [] { keyA.Id' keyB.Id }));                             });                            r2.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(3UL);                            r2.Tell(Dsl.Get(keyB' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyB).Value.ShouldBe(2UL);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurableDataSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurableDataSpec.cs,Durable_CRDT_should_handle_Update_before_Load,The following statement contains a magic number: RunOn(() =>              {                  var sys1 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  var cluster1 = Akka.Cluster.Cluster.Get(sys1);                  var addr = cluster1.SelfAddress;                  try                  {                      cluster1.Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r = NewReplicator(sys1);                          Within(TimeSpan.FromSeconds(10)' () =>                          {                              AwaitAssert(() =>                              {                                  r.Tell(Dsl.GetReplicaCount);                                  ExpectMsg(new ReplicaCount(1));                              });                          });                            r.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg(new NotFound(keyA' null));                            r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                          r.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster1)));                            ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyA' null));                          ExpectMsg(new UpdateSuccess(keyB' null));                            Watch(r);                          sys1.Stop(r);                          ExpectTerminated(r);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                    var sys2 = ActorSystem.Create("AdditionalSys"' Sys.Settings.Config);                  try                  {                      Akka.Cluster.Cluster.Get(sys2).Join(addr);                      /* new TestKit(sys1) with ImplicitSender */                      {                          var r2 = NewReplicator(sys2);                            // it should be possible to update while loading is in progress                          r2.Tell(Dsl.Update(keyB' GCounter.Empty' WriteLocal.Instance' c => c.Increment(Akka.Cluster.Cluster.Get(sys2))));                          ExpectMsg(new UpdateSuccess(keyB' null));                            // wait until all loaded                          AwaitAssert(() =>                          {                              r2.Tell(Dsl.GetKeyIds);                              ExpectMsg<GetKeysIdsResult>().Keys.ShouldBe(ImmutableHashSet.CreateRange(new [] { keyA.Id' keyB.Id }));                             });                            r2.Tell(Dsl.Get(keyA' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyA).Value.ShouldBe(3UL);                            r2.Tell(Dsl.Get(keyB' ReadLocal.Instance));                          ExpectMsg<GetSuccess>().Get(keyB).Value.ShouldBe(2UL);                      }                  }                  finally                  {                      sys1.Terminate().Wait(TimeSpan.FromSeconds(10));                  }                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,DurablePruningSpec,The following statement contains a magic number: timeout = Dilated(TimeSpan.FromSeconds(5));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () => AwaitAssert(() =>              {                  replicator.Tell(Dsl.GetReplicaCount);                  ExpectMsg(new ReplicaCount(4));                  replicator2.Tell(Dsl.GetReplicaCount' probe2.Ref);                  probe2.ExpectMsg(new ReplicaCount(4));              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () => AwaitAssert(() =>              {                  replicator.Tell(Dsl.GetReplicaCount);                  ExpectMsg(new ReplicaCount(4));                  replicator2.Tell(Dsl.GetReplicaCount' probe2.Ref);                  probe2.ExpectMsg(new ReplicaCount(4));              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () => AwaitAssert(() =>              {                  replicator.Tell(Dsl.GetReplicaCount);                  ExpectMsg(new ReplicaCount(4));                  replicator2.Tell(Dsl.GetReplicaCount' probe2.Ref);                  probe2.ExpectMsg(new ReplicaCount(4));              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: replicator2.Tell(Dsl.Update(keyA' GCounter.Empty' WriteLocal.Instance' c => c.Increment(cluster2' 2))' probe2.Ref);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>              {                  replicator.Tell(Dsl.Get(keyA' new ReadAll(TimeSpan.FromSeconds(1))));                  var counter1 = ExpectMsg<GetSuccess>().Get(keyA);                  counter1.Value.ShouldBe(10UL);                  counter1.State.Count.ShouldBe(4);              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>              {                  replicator.Tell(Dsl.Get(keyA' new ReadAll(TimeSpan.FromSeconds(1))));                  var counter1 = ExpectMsg<GetSuccess>().Get(keyA);                  counter1.Value.ShouldBe(10UL);                  counter1.State.Count.ShouldBe(4);              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>              {                  replicator.Tell(Dsl.Get(keyA' new ReadAll(TimeSpan.FromSeconds(1))));                  var counter1 = ExpectMsg<GetSuccess>().Get(keyA);                  counter1.Value.ShouldBe(10UL);                  counter1.State.Count.ShouldBe(4);              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>              {                  replicator2.Tell(Dsl.Get(keyA' new ReadAll(TimeSpan.FromSeconds(1)))' probe2.Ref);                  var counter2 = probe2.ExpectMsg<GetSuccess>().Get(keyA);                  counter2.Value.ShouldBe(10UL);                  counter2.State.Count.ShouldBe(4);              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>              {                  replicator2.Tell(Dsl.Get(keyA' new ReadAll(TimeSpan.FromSeconds(1)))' probe2.Ref);                  var counter2 = probe2.ExpectMsg<GetSuccess>().Get(keyA);                  counter2.Value.ShouldBe(10UL);                  counter2.State.Count.ShouldBe(4);              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>              {                  replicator2.Tell(Dsl.Get(keyA' new ReadAll(TimeSpan.FromSeconds(1)))' probe2.Ref);                  var counter2 = probe2.ExpectMsg<GetSuccess>().Get(keyA);                  counter2.Value.ShouldBe(10UL);                  counter2.State.Count.ShouldBe(4);              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () => AwaitAssert(() =>              {                  replicator.Tell(Dsl.GetReplicaCount);                  ExpectMsg(new ReplicaCount(3));              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () => AwaitAssert(() =>              {                  replicator.Tell(Dsl.GetReplicaCount);                  ExpectMsg(new ReplicaCount(3));              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() => sys2.Terminate().Wait(TimeSpan.FromSeconds(5))' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  var values = ImmutableHashSet<int>.Empty;                  AwaitAssert(() =>                  {                      replicator.Tell(Dsl.Get(keyA' ReadLocal.Instance));                      var counter3 = ExpectMsg<GetSuccess>().Get(keyA);                      var value = counter3.Value;                      values = values.Add((int) value);                      value.ShouldBe(10UL);                      counter3.State.Count.ShouldBe(3);                  });                  values.ShouldBe(ImmutableHashSet.Create(10));              });
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  var values = ImmutableHashSet<int>.Empty;                  AwaitAssert(() =>                  {                      replicator.Tell(Dsl.Get(keyA' ReadLocal.Instance));                      var counter3 = ExpectMsg<GetSuccess>().Get(keyA);                      var value = counter3.Value;                      values = values.Add((int) value);                      value.ShouldBe(10UL);                      counter3.State.Count.ShouldBe(3);                  });                  values.ShouldBe(ImmutableHashSet.Create(10));              });
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  var values = ImmutableHashSet<int>.Empty;                  AwaitAssert(() =>                  {                      replicator.Tell(Dsl.Get(keyA' ReadLocal.Instance));                      var counter3 = ExpectMsg<GetSuccess>().Get(keyA);                      var value = counter3.Value;                      values = values.Add((int) value);                      value.ShouldBe(10UL);                      counter3.State.Count.ShouldBe(3);                  });                  values.ShouldBe(ImmutableHashSet.Create(10));              });
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  var values = ImmutableHashSet<int>.Empty;                  AwaitAssert(() =>                  {                      replicator.Tell(Dsl.Get(keyA' ReadLocal.Instance));                      var counter3 = ExpectMsg<GetSuccess>().Get(keyA);                      var value = counter3.Value;                      values = values.Add((int) value);                      value.ShouldBe(10UL);                      counter3.State.Count.ShouldBe(3);                  });                  values.ShouldBe(ImmutableHashSet.Create(10));              });
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  var addr = cluster2.SelfAddress;                  var sys3 = ActorSystem.Create(Sys.Name' ConfigurationFactory.ParseString(@"                  ").WithFallback(Sys.Settings.Config));                  var cluster3 = Akka.Cluster.Cluster.Get(sys3);                  var replicator3 = StartReplicator(sys3);                  var probe3 = new TestProbe(sys3' new XunitAssertions());                  cluster3.Join(Node(first).Address);                    Within(TimeSpan.FromSeconds(10)' () =>                  {                      var values = ImmutableHashSet<int>.Empty;                      AwaitAssert(() =>                      {                          replicator3.Tell(Dsl.Get(keyA' ReadLocal.Instance)' probe3.Ref);                          var counter4 = probe3.ExpectMsg<GetSuccess>().Get(keyA);                          var value = counter4.Value;                          values.Add((int) value);                          value.ShouldBe(10UL);                          counter4.State.Count.ShouldBe(3);                      });                      values.ShouldBe(ImmutableHashSet.Create(10));                  });                    // after merging with others                  replicator3.Tell(Dsl.Get(keyA' new ReadAll(RemainingOrDefault)));                  var counter5 = ExpectMsg<GetSuccess>().Get(keyA);                  counter5.Value.ShouldBe(10UL);                  counter5.State.Count.ShouldBe(3);                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  var addr = cluster2.SelfAddress;                  var sys3 = ActorSystem.Create(Sys.Name' ConfigurationFactory.ParseString(@"                  ").WithFallback(Sys.Settings.Config));                  var cluster3 = Akka.Cluster.Cluster.Get(sys3);                  var replicator3 = StartReplicator(sys3);                  var probe3 = new TestProbe(sys3' new XunitAssertions());                  cluster3.Join(Node(first).Address);                    Within(TimeSpan.FromSeconds(10)' () =>                  {                      var values = ImmutableHashSet<int>.Empty;                      AwaitAssert(() =>                      {                          replicator3.Tell(Dsl.Get(keyA' ReadLocal.Instance)' probe3.Ref);                          var counter4 = probe3.ExpectMsg<GetSuccess>().Get(keyA);                          var value = counter4.Value;                          values.Add((int) value);                          value.ShouldBe(10UL);                          counter4.State.Count.ShouldBe(3);                      });                      values.ShouldBe(ImmutableHashSet.Create(10));                  });                    // after merging with others                  replicator3.Tell(Dsl.Get(keyA' new ReadAll(RemainingOrDefault)));                  var counter5 = ExpectMsg<GetSuccess>().Get(keyA);                  counter5.Value.ShouldBe(10UL);                  counter5.State.Count.ShouldBe(3);                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  var addr = cluster2.SelfAddress;                  var sys3 = ActorSystem.Create(Sys.Name' ConfigurationFactory.ParseString(@"                  ").WithFallback(Sys.Settings.Config));                  var cluster3 = Akka.Cluster.Cluster.Get(sys3);                  var replicator3 = StartReplicator(sys3);                  var probe3 = new TestProbe(sys3' new XunitAssertions());                  cluster3.Join(Node(first).Address);                    Within(TimeSpan.FromSeconds(10)' () =>                  {                      var values = ImmutableHashSet<int>.Empty;                      AwaitAssert(() =>                      {                          replicator3.Tell(Dsl.Get(keyA' ReadLocal.Instance)' probe3.Ref);                          var counter4 = probe3.ExpectMsg<GetSuccess>().Get(keyA);                          var value = counter4.Value;                          values.Add((int) value);                          value.ShouldBe(10UL);                          counter4.State.Count.ShouldBe(3);                      });                      values.ShouldBe(ImmutableHashSet.Create(10));                  });                    // after merging with others                  replicator3.Tell(Dsl.Get(keyA' new ReadAll(RemainingOrDefault)));                  var counter5 = ExpectMsg<GetSuccess>().Get(keyA);                  counter5.Value.ShouldBe(10UL);                  counter5.State.Count.ShouldBe(3);                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  var addr = cluster2.SelfAddress;                  var sys3 = ActorSystem.Create(Sys.Name' ConfigurationFactory.ParseString(@"                  ").WithFallback(Sys.Settings.Config));                  var cluster3 = Akka.Cluster.Cluster.Get(sys3);                  var replicator3 = StartReplicator(sys3);                  var probe3 = new TestProbe(sys3' new XunitAssertions());                  cluster3.Join(Node(first).Address);                    Within(TimeSpan.FromSeconds(10)' () =>                  {                      var values = ImmutableHashSet<int>.Empty;                      AwaitAssert(() =>                      {                          replicator3.Tell(Dsl.Get(keyA' ReadLocal.Instance)' probe3.Ref);                          var counter4 = probe3.ExpectMsg<GetSuccess>().Get(keyA);                          var value = counter4.Value;                          values.Add((int) value);                          value.ShouldBe(10UL);                          counter4.State.Count.ShouldBe(3);                      });                      values.ShouldBe(ImmutableHashSet.Create(10));                  });                    // after merging with others                  replicator3.Tell(Dsl.Get(keyA' new ReadAll(RemainingOrDefault)));                  var counter5 = ExpectMsg<GetSuccess>().Get(keyA);                  counter5.Value.ShouldBe(10UL);                  counter5.State.Count.ShouldBe(3);                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  var addr = cluster2.SelfAddress;                  var sys3 = ActorSystem.Create(Sys.Name' ConfigurationFactory.ParseString(@"                  ").WithFallback(Sys.Settings.Config));                  var cluster3 = Akka.Cluster.Cluster.Get(sys3);                  var replicator3 = StartReplicator(sys3);                  var probe3 = new TestProbe(sys3' new XunitAssertions());                  cluster3.Join(Node(first).Address);                    Within(TimeSpan.FromSeconds(10)' () =>                  {                      var values = ImmutableHashSet<int>.Empty;                      AwaitAssert(() =>                      {                          replicator3.Tell(Dsl.Get(keyA' ReadLocal.Instance)' probe3.Ref);                          var counter4 = probe3.ExpectMsg<GetSuccess>().Get(keyA);                          var value = counter4.Value;                          values.Add((int) value);                          value.ShouldBe(10UL);                          counter4.State.Count.ShouldBe(3);                      });                      values.ShouldBe(ImmutableHashSet.Create(10));                  });                    // after merging with others                  replicator3.Tell(Dsl.Get(keyA' new ReadAll(RemainingOrDefault)));                  var counter5 = ExpectMsg<GetSuccess>().Get(keyA);                  counter5.Value.ShouldBe(10UL);                  counter5.State.Count.ShouldBe(3);                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  var addr = cluster2.SelfAddress;                  var sys3 = ActorSystem.Create(Sys.Name' ConfigurationFactory.ParseString(@"                  ").WithFallback(Sys.Settings.Config));                  var cluster3 = Akka.Cluster.Cluster.Get(sys3);                  var replicator3 = StartReplicator(sys3);                  var probe3 = new TestProbe(sys3' new XunitAssertions());                  cluster3.Join(Node(first).Address);                    Within(TimeSpan.FromSeconds(10)' () =>                  {                      var values = ImmutableHashSet<int>.Empty;                      AwaitAssert(() =>                      {                          replicator3.Tell(Dsl.Get(keyA' ReadLocal.Instance)' probe3.Ref);                          var counter4 = probe3.ExpectMsg<GetSuccess>().Get(keyA);                          var value = counter4.Value;                          values.Add((int) value);                          value.ShouldBe(10UL);                          counter4.State.Count.ShouldBe(3);                      });                      values.ShouldBe(ImmutableHashSet.Create(10));                  });                    // after merging with others                  replicator3.Tell(Dsl.Get(keyA' new ReadAll(RemainingOrDefault)));                  var counter5 = ExpectMsg<GetSuccess>().Get(keyA);                  counter5.Value.ShouldBe(10UL);                  counter5.State.Count.ShouldBe(3);                }' first);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: counter6.Value.ShouldBe(10UL);
Magic Number,Akka.DistributedData.Tests.MultiNode,DurablePruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\DurablePruningSpec.cs,Pruning_of_durable_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: counter6.State.Count.ShouldBe(3);
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,JepsenInspiredInsertSpec,The following statement contains a magic number: _timeout = Dilated(TimeSpan.FromSeconds(3));
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_setup_cluster,The following statement contains a magic number: RunOn(() =>              {                  foreach (var node in _nodes)                      Join(node' N1);                    Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(_nodes.Count));                  }));              }' _nodes.ToArray());
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_replicate_values_when_all_nodes_connected,The following statement contains a magic number: RunOn(() =>              {                  var writeProbe = CreateTestProbe();                  var writeAcks = MyData.Select(i =>                  {                      SleepDelay();                      _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' WriteLocal.Instance' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref);                      return writeProbe.ReceiveOne(TimeSpan.FromSeconds(3));                  }).ToArray();                  var successWriteAcks = writeAcks.OfType<UpdateSuccess>().ToArray();                  var failureWriteAcks = writeAcks.OfType<IUpdateFailure>().ToArray();                  successWriteAcks.Select(x => (int)x.Request).ShouldBe(MyData.ToArray());                  successWriteAcks.Length.Should().Be(MyData.Count());                  failureWriteAcks.Should().BeEmpty();                  (successWriteAcks.Length + failureWriteAcks.Length).Should().Be(MyData.Count());                    // eventually all nodes will have the data                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          var readProbe = CreateTestProbe();                          _replicator.Tell(Dsl.Get(key' ReadLocal.Instance)' readProbe.Ref);                          var result = readProbe.ExpectMsg<GetSuccess>(g => Equals(g.Key' key)).Get(key);                          result.Elements.Should().BeEquivalentTo(_expectedData);                      });                  });              }' _nodes.ToArray());
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_replicate_values_when_all_nodes_connected,The following statement contains a magic number: RunOn(() =>              {                  var writeProbe = CreateTestProbe();                  var writeAcks = MyData.Select(i =>                  {                      SleepDelay();                      _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' WriteLocal.Instance' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref);                      return writeProbe.ReceiveOne(TimeSpan.FromSeconds(3));                  }).ToArray();                  var successWriteAcks = writeAcks.OfType<UpdateSuccess>().ToArray();                  var failureWriteAcks = writeAcks.OfType<IUpdateFailure>().ToArray();                  successWriteAcks.Select(x => (int)x.Request).ShouldBe(MyData.ToArray());                  successWriteAcks.Length.Should().Be(MyData.Count());                  failureWriteAcks.Should().BeEmpty();                  (successWriteAcks.Length + failureWriteAcks.Length).Should().Be(MyData.Count());                    // eventually all nodes will have the data                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          var readProbe = CreateTestProbe();                          _replicator.Tell(Dsl.Get(key' ReadLocal.Instance)' readProbe.Ref);                          var result = readProbe.ExpectMsg<GetSuccess>(g => Equals(g.Key' key)).Get(key);                          result.Elements.Should().BeEquivalentTo(_expectedData);                      });                  });              }' _nodes.ToArray());
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_replicate_values_after_partition,The following statement contains a magic number: RunOn(() =>              {                  SleepBeforePartition();                    foreach (var a in new List<RoleName> {N1' N4' N5})                      foreach (var b in new List<RoleName> {N2' N3})                          TestConductor.Blackhole(a' b' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(3));                    SleepDuringPartition();                    foreach (var a in new List<RoleName> { N1' N4' N5 })                      foreach (var b in new List<RoleName> { N2' N3 })                          TestConductor.PassThrough(a' b' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(3));                    EnterBarrier("partition-healed-3");              }' Controller);
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_replicate_values_after_partition,The following statement contains a magic number: RunOn(() =>              {                  SleepBeforePartition();                    foreach (var a in new List<RoleName> {N1' N4' N5})                      foreach (var b in new List<RoleName> {N2' N3})                          TestConductor.Blackhole(a' b' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(3));                    SleepDuringPartition();                    foreach (var a in new List<RoleName> { N1' N4' N5 })                      foreach (var b in new List<RoleName> { N2' N3 })                          TestConductor.PassThrough(a' b' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(3));                    EnterBarrier("partition-healed-3");              }' Controller);
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_replicate_values_after_partition,The following statement contains a magic number: RunOn(() =>              {                  var writeProbe = CreateTestProbe();                  var writeAcks = MyData.Select(i =>                  {                      SleepDelay();                      _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' WriteLocal.Instance' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref);                      return writeProbe.ReceiveOne(TimeSpan.FromSeconds(3));                  }).ToArray();                  var successWriteAcks = writeAcks.OfType<UpdateSuccess>().ToArray();                  var failureWriteAcks = writeAcks.OfType<IUpdateFailure>().ToArray();                  successWriteAcks.Select(x => (int)x.Request).Should().BeEquivalentTo(MyData.ToArray());                  successWriteAcks.Length.Should().Be(MyData.Count());                  failureWriteAcks.Should().BeEmpty();                  (successWriteAcks.Length + failureWriteAcks.Length).Should().Be(MyData.Count());                    EnterBarrier("partition-healed-3");                    // eventually all nodes will have the data                  Within(TimeSpan.FromSeconds(15)' () => AwaitAssert(() =>                  {                      var readProbe = CreateTestProbe();                      _replicator.Tell(Dsl.Get(key' ReadLocal.Instance)' readProbe.Ref);                      var result = readProbe.ExpectMsg<GetSuccess>(g => Equals(g.Key' key)).Get(key);                      result.Elements.Should().BeEquivalentTo(_expectedData);                  }));              }' _nodes.ToArray());
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_replicate_values_after_partition,The following statement contains a magic number: RunOn(() =>              {                  var writeProbe = CreateTestProbe();                  var writeAcks = MyData.Select(i =>                  {                      SleepDelay();                      _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' WriteLocal.Instance' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref);                      return writeProbe.ReceiveOne(TimeSpan.FromSeconds(3));                  }).ToArray();                  var successWriteAcks = writeAcks.OfType<UpdateSuccess>().ToArray();                  var failureWriteAcks = writeAcks.OfType<IUpdateFailure>().ToArray();                  successWriteAcks.Select(x => (int)x.Request).Should().BeEquivalentTo(MyData.ToArray());                  successWriteAcks.Length.Should().Be(MyData.Count());                  failureWriteAcks.Should().BeEmpty();                  (successWriteAcks.Length + failureWriteAcks.Length).Should().Be(MyData.Count());                    EnterBarrier("partition-healed-3");                    // eventually all nodes will have the data                  Within(TimeSpan.FromSeconds(15)' () => AwaitAssert(() =>                  {                      var readProbe = CreateTestProbe();                      _replicator.Tell(Dsl.Get(key' ReadLocal.Instance)' readProbe.Ref);                      var result = readProbe.ExpectMsg<GetSuccess>(g => Equals(g.Key' key)).Get(key);                      result.Elements.Should().BeEquivalentTo(_expectedData);                  }));              }' _nodes.ToArray());
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_write_to_majority_during_3_and_2_partition_and_read_from_majority_after_partition,The following statement contains a magic number: RunOn(() =>              {                  SleepBeforePartition();                    foreach (var a in new List<RoleName> { N1' N4' N5 })                      foreach (var b in new List<RoleName> { N2' N3 })                          TestConductor.Blackhole(a' b' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(3));                    SleepDuringPartition();                    foreach (var a in new List<RoleName> { N1' N4' N5 })                      foreach (var b in new List<RoleName> { N2' N3 })                          TestConductor.PassThrough(a' b' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(3));                    EnterBarrier("partition-healed-4");              }' Controller);
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_write_to_majority_during_3_and_2_partition_and_read_from_majority_after_partition,The following statement contains a magic number: RunOn(() =>              {                  SleepBeforePartition();                    foreach (var a in new List<RoleName> { N1' N4' N5 })                      foreach (var b in new List<RoleName> { N2' N3 })                          TestConductor.Blackhole(a' b' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(3));                    SleepDuringPartition();                    foreach (var a in new List<RoleName> { N1' N4' N5 })                      foreach (var b in new List<RoleName> { N2' N3 })                          TestConductor.PassThrough(a' b' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(3));                    EnterBarrier("partition-healed-4");              }' Controller);
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,Insert_from_5_nodes_should_write_to_majority_during_3_and_2_partition_and_read_from_majority_after_partition,The following statement contains a magic number: RunOn(() =>              {                  var writeProbe = CreateTestProbe();                  var writeAcks = MyData.Select(i =>                  {                      SleepDelay();                      _replicator.Tell(Dsl.Update(key' ORSet<int>.Empty' writeMajority' i' x => x.Add(_cluster.SelfUniqueAddress' i))' writeProbe.Ref);                      return writeProbe.ReceiveOne(_timeout.Add(TimeSpan.FromSeconds(1)));                  }).ToArray();                  var successWriteAcks = writeAcks.OfType<UpdateSuccess>().ToArray();                  var failureWriteAcks = writeAcks.OfType<IUpdateFailure>().ToArray();                    RunOn(() =>                  {                      successWriteAcks.Select(x => (int)x.Request).Should().BeEquivalentTo(MyData.ToArray());                      successWriteAcks.Length.Should().Be(MyData.Count());                      failureWriteAcks.Should().BeEmpty();                  }' N1' N4' N5);                    RunOn(() =>                  {                      // without delays all could theoretically have been written before the blackhole                      if (_delayMillis != 0)                          failureWriteAcks.Should().NotBeEmpty();                  }' N2' N3);                    (successWriteAcks.Length + failureWriteAcks.Length).Should().Be(MyData.Count());                    EnterBarrier("partition-healed-4");                    // on the 2 node side' read from majority of nodes is enough to read all writes                  RunOn(() =>                  {                      var readProbe = CreateTestProbe();                      _replicator.Tell(Dsl.Get(key' readMajority)' readProbe.Ref);                      var result = readProbe.ExpectMsg<GetSuccess>(g => Equals(g.Key' key)).Get(key);                      result.Elements.Should().BeEquivalentTo(_expectedData);                  }' N2' N3);                    // but on the 3 node side' read from majority doesn't mean that we are guaranteed to see                  // the writes from the other side' yet                    // eventually all nodes will have the data                  Within(TimeSpan.FromSeconds(15)' () => AwaitAssert(() =>                  {                      var readProbe = CreateTestProbe();                      _replicator.Tell(Dsl.Get(key' ReadLocal.Instance)' readProbe.Ref);                      var result = readProbe.ExpectMsg<GetSuccess>(g => Equals(g.Key' key)).Get(key);                      result.Elements.Should().BeEquivalentTo(_expectedData);                  }));              }' _nodes.ToArray());
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,SleepBeforePartition,The following statement contains a magic number: Thread.Sleep(_delayMillis * _totalCount / _nodeCount / 10);
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,SleepDuringPartition,The following statement contains a magic number: Thread.Sleep(Math.Max(5000' _delayMillis * _totalCount / _nodeCount / 2));
Magic Number,Akka.DistributedData.Tests.MultiNode,JepsenInspiredInsertSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\JepsenInspiredInsertSpec.cs,SleepDuringPartition,The following statement contains a magic number: Thread.Sleep(Math.Max(5000' _delayMillis * _totalCount / _nodeCount / 2));
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,ReplicatorChaosSpec,The following statement contains a magic number: _timeout = Dilated(TimeSpan.FromSeconds(3));
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(5));                  });              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(5));                  });              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 0; i < 5; i++)                  {                      _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                      _replicator.Tell(Dsl.Update(KeyB' PNCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                      _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' new WriteAll(_timeout)' x => x.Increment(_cluster' 1)));                  }                  ReceiveN(15).Select(x => x.GetType()).ToImmutableHashSet().ShouldBe(new[] { typeof(UpdateSuccess) });              }' First);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 0; i < 5; i++)                  {                      _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                      _replicator.Tell(Dsl.Update(KeyB' PNCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                      _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' new WriteAll(_timeout)' x => x.Increment(_cluster' 1)));                  }                  ReceiveN(15).Select(x => x.GetType()).ToImmutableHashSet().ShouldBe(new[] { typeof(UpdateSuccess) });              }' First);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyB' PNCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' new WriteAll(_timeout)' x => x.Increment(_cluster' 20)));                    ReceiveN(3).ToImmutableHashSet().ShouldBe(new[]                  {                      new UpdateSuccess(KeyA' null)'                      new UpdateSuccess(KeyB' null)'                      new UpdateSuccess(KeyC' null)                  });                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' WriteLocal.Instance' x => x.Add("e1").Add("e2")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' WriteLocal.Instance' x => x                      .Add(_cluster' "e1")                      .Add(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyB' PNCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' new WriteAll(_timeout)' x => x.Increment(_cluster' 20)));                    ReceiveN(3).ToImmutableHashSet().ShouldBe(new[]                  {                      new UpdateSuccess(KeyA' null)'                      new UpdateSuccess(KeyB' null)'                      new UpdateSuccess(KeyC' null)                  });                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' WriteLocal.Instance' x => x.Add("e1").Add("e2")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' WriteLocal.Instance' x => x                      .Add(_cluster' "e1")                      .Add(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyB' PNCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' new WriteAll(_timeout)' x => x.Increment(_cluster' 20)));                    ReceiveN(3).ToImmutableHashSet().ShouldBe(new[]                  {                      new UpdateSuccess(KeyA' null)'                      new UpdateSuccess(KeyB' null)'                      new UpdateSuccess(KeyC' null)                  });                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' WriteLocal.Instance' x => x.Add("e1").Add("e2")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' WriteLocal.Instance' x => x                      .Add(_cluster' "e1")                      .Add(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyB' PNCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' new WriteAll(_timeout)' x => x.Increment(_cluster' 20)));                    ReceiveN(3).ToImmutableHashSet().ShouldBe(new[]                  {                      new UpdateSuccess(KeyA' null)'                      new UpdateSuccess(KeyB' null)'                      new UpdateSuccess(KeyC' null)                  });                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' WriteLocal.Instance' x => x.Add("e1").Add("e2")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' WriteLocal.Instance' x => x                      .Add(_cluster' "e1")                      .Add(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyB' PNCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 20)));                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' new WriteAll(_timeout)' x => x.Increment(_cluster' 20)));                    ReceiveN(3).ToImmutableHashSet().ShouldBe(new[]                  {                      new UpdateSuccess(KeyA' null)'                      new UpdateSuccess(KeyB' null)'                      new UpdateSuccess(KeyC' null)                  });                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' WriteLocal.Instance' x => x.Add("e1").Add("e2")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' WriteLocal.Instance' x => x                      .Add(_cluster' "e1")                      .Add(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyD' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 40)));                  ExpectMsg(new UpdateSuccess(KeyD' null));                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' WriteLocal.Instance' x => x.Add("e2").Add("e3")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' WriteLocal.Instance' x => x                      .Add(_cluster' "e2")                      .Add(_cluster' "e3")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Fourth);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyX' GCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 50)));                  ExpectMsg(new UpdateSuccess(KeyX' null));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DeleteSuccess(KeyX));              }' Fifth);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyX' GCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 50)));                  ExpectMsg(new UpdateSuccess(KeyX' null));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DeleteSuccess(KeyX));              }' Fifth);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: AssertValue(KeyA' 25);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: AssertValue(KeyB' 15);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: AssertValue(KeyC' 25);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_replicate_data_in_initial_phase,The following statement contains a magic number: AssertValue(KeyD' 40);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyA' null));              }' First);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 2)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' new WriteTo(2' _timeout)' x => x.Add("e4")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' new WriteTo(2' _timeout)' x => x.Remove(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 2)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' new WriteTo(2' _timeout)' x => x.Add("e4")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' new WriteTo(2' _timeout)' x => x.Remove(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 2)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' new WriteTo(2' _timeout)' x => x.Add("e4")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' new WriteTo(2' _timeout)' x => x.Remove(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 2)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                    _replicator.Tell(Dsl.Update(KeyE' GSet<string>.Empty' new WriteTo(2' _timeout)' x => x.Add("e4")));                  ExpectMsg(new UpdateSuccess(KeyE' null));                    _replicator.Tell(Dsl.Update(KeyF' ORSet<string>.Empty' new WriteTo(2' _timeout)' x => x.Remove(_cluster' "e2")));                  ExpectMsg(new UpdateSuccess(KeyF' null));              }' Third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyD' GCounter.Empty' new WriteTo(2' _timeout)' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyD' null));              }' Fourth);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  AssertValue(KeyA' 26);                  AssertValue(KeyB' 15);                  AssertValue(KeyD' 41);                  AssertValue(KeyE' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3"}));                  AssertValue(KeyF' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3" }));              }' side1);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  AssertValue(KeyA' 26);                  AssertValue(KeyB' 15);                  AssertValue(KeyD' 41);                  AssertValue(KeyE' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3"}));                  AssertValue(KeyF' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3" }));              }' side1);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  AssertValue(KeyA' 26);                  AssertValue(KeyB' 15);                  AssertValue(KeyD' 41);                  AssertValue(KeyE' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3"}));                  AssertValue(KeyF' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3" }));              }' side1);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  AssertValue(KeyA' 27);                  AssertValue(KeyB' 15);                  AssertValue(KeyD' 41);                  AssertValue(KeyE' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3"' "e4" }));                  AssertValue(KeyF' ImmutableHashSet.CreateRange(new[] { "e1"' "e3" }));              }' side2);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  AssertValue(KeyA' 27);                  AssertValue(KeyB' 15);                  AssertValue(KeyD' 41);                  AssertValue(KeyE' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3"' "e4" }));                  AssertValue(KeyF' ImmutableHashSet.CreateRange(new[] { "e1"' "e3" }));              }' side2);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() =>              {                  AssertValue(KeyA' 27);                  AssertValue(KeyB' 15);                  AssertValue(KeyD' 41);                  AssertValue(KeyE' ImmutableHashSet.CreateRange(new[] { "e1"' "e2"' "e3"' "e4" }));                  AssertValue(KeyF' ImmutableHashSet.CreateRange(new[] { "e1"' "e3" }));              }' side2);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_be_available_during_network_split,The following statement contains a magic number: RunOn(() => TestConductor.Exit(Fourth' 0).Wait(TimeSpan.FromSeconds(5))' First);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_converge_after_partition,The following statement contains a magic number: AssertValue(KeyA' 28);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_converge_after_partition,The following statement contains a magic number: AssertValue(KeyB' 15);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_converge_after_partition,The following statement contains a magic number: AssertValue(KeyC' 25);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,Replicator_in_chaotic_cluster_should_converge_after_partition,The following statement contains a magic number: AssertValue(KeyD' 41);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,AssertValue,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>              {                  _replicator.Tell(Dsl.Get(key' ReadLocal.Instance));                  var g = ExpectMsg<GetSuccess>().Get(key);                  object value;                  if (g is GCounter) value = ((GCounter)g).Value;                  else if (g is PNCounter) value = ((PNCounter)g).Value;                  else if (g is GSet<string>) value = ((GSet<string>)g).Elements;                  else if (g is ORSet<string>) value = ((ORSet<string>)g).Elements;                  else throw new ArgumentException("input doesn't match");                    value.ShouldBe(expected);              }));
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorChaosSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorChaosSpec.cs,AssertDeleted,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () =>              {                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.Get(key' ReadLocal.Instance));                      ExpectMsg(new DataDeleted(key));                  });              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,ReplicatorPruningSpec,The following statement contains a magic number: _timeout = Dilated(TimeSpan.FromSeconds(3));
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () =>              {                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(3));                  });              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () =>              {                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(3));                  });              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: _replicator.Tell(Dsl.Update(KeyA' GCounter.Empty' new WriteAll(_timeout)' x => x.Increment(_cluster' 3)));
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: oldCounter.Value.Should().Be(9);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: oldMap["x"].Should().Be(3);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: oldMap["y"].Should().Be(3);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () => AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(2));                  }));              }' First' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () => AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(2));                  }));              }' First' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var counter = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyA)).Get(KeyA);                          counter.Value.ShouldBe(9UL);                          counter.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{counter} shouldn't need prunning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyB' ReadLocal.Instance));                          var set = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyB)).Get(KeyB);                          set.Elements.Should().BeEquivalentTo(new[] { "c"' "b"' "a" });                          set.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{set} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var map = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyC)).Get(KeyC);                          map["x"].Should().Be(3);                          map["y"].Should().Be(3);                          map.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{map} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });              }' First' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var counter = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyA)).Get(KeyA);                          counter.Value.ShouldBe(9UL);                          counter.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{counter} shouldn't need prunning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyB' ReadLocal.Instance));                          var set = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyB)).Get(KeyB);                          set.Elements.Should().BeEquivalentTo(new[] { "c"' "b"' "a" });                          set.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{set} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var map = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyC)).Get(KeyC);                          map["x"].Should().Be(3);                          map["y"].Should().Be(3);                          map.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{map} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });              }' First' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var counter = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyA)).Get(KeyA);                          counter.Value.ShouldBe(9UL);                          counter.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{counter} shouldn't need prunning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyB' ReadLocal.Instance));                          var set = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyB)).Get(KeyB);                          set.Elements.Should().BeEquivalentTo(new[] { "c"' "b"' "a" });                          set.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{set} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var map = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyC)).Get(KeyC);                          map["x"].Should().Be(3);                          map["y"].Should().Be(3);                          map.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{map} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });              }' First' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var counter = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyA)).Get(KeyA);                          counter.Value.ShouldBe(9UL);                          counter.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{counter} shouldn't need prunning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyB' ReadLocal.Instance));                          var set = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyB)).Get(KeyB);                          set.Elements.Should().BeEquivalentTo(new[] { "c"' "b"' "a" });                          set.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{set} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var map = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyC)).Get(KeyC);                          map["x"].Should().Be(3);                          map["y"].Should().Be(3);                          map.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{map} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });              }' First' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var counter = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyA)).Get(KeyA);                          counter.Value.ShouldBe(9UL);                          counter.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{counter} shouldn't need prunning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyB' ReadLocal.Instance));                          var set = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyB)).Get(KeyB);                          set.Elements.Should().BeEquivalentTo(new[] { "c"' "b"' "a" });                          set.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{set} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var map = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyC)).Get(KeyC);                          map["x"].Should().Be(3);                          map["y"].Should().Be(3);                          map.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{map} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });              }' First' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var counter = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyA)).Get(KeyA);                          counter.Value.ShouldBe(9UL);                          counter.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{counter} shouldn't need prunning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyB' ReadLocal.Instance));                          var set = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyB)).Get(KeyB);                          set.Elements.Should().BeEquivalentTo(new[] { "c"' "b"' "a" });                          set.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{set} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var map = ExpectMsg<GetSuccess>(msg => Equals(msg.Key' KeyC)).Get(KeyC);                          map["x"].Should().Be(3);                          map["y"].Should().Be(3);                          map.NeedPruningFrom(thirdUniqueAddress).Should().BeFalse($"{map} shouldn't need pruning from {thirdUniqueAddress}");                      });                  });              }' First' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() => UpdateAfterPruning(expectedValue: 10)' First);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() => UpdateAfterPruning(expectedValue: 11)' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: ExpectNoMsg(_maxPruningDissemination.Add(TimeSpan.FromSeconds(3)));
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() => UpdateAfterPruning(expectedValue: 12)' First);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorPruningSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorPruningSpec.cs,Pruning_of_CRDT_should_move_data_from_removed_node,The following statement contains a magic number: RunOn(() => UpdateAfterPruning(expectedValue: 13)' Second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,ReplicatorSpec,The following statement contains a magic number: var settings = ReplicatorSettings.Create(Sys)                  .WithGossipInterval(TimeSpan.FromSeconds(1.0))                  .WithMaxDeltaElements(10);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,ReplicatorSpec,The following statement contains a magic number: _timeOut = Dilated(TimeSpan.FromSeconds(3.0));
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,ReplicatorSpec,The following statement contains a magic number: _writeTwo = new WriteTo(2' _timeOut);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,ReplicatorSpec,The following statement contains a magic number: _readTwo = new ReadFrom(2' _timeOut);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_single_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(5.0)' () =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(1));                  });                    var changedProbe = CreateTestProbe();                  _replicator.Tell(Dsl.Subscribe(KeyA' changedProbe.Ref));                  _replicator.Tell(Dsl.Subscribe(KeyX' changedProbe.Ref));                    _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new NotFound(KeyA' null));                    var c3 = GCounter.Empty.Increment(_cluster' 3);                  var update = Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 3));                  _replicator.Tell(update);                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c3));                  changedProbe.ExpectMsg(new Changed(KeyA' c3));                    var changedProbe2 = CreateTestProbe();                  _replicator.Tell(new Subscribe(KeyA' changedProbe2.Ref));                  changedProbe2.ExpectMsg(new Changed(KeyA' c3));                      var c4 = c3.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeTwo' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateTimeout(KeyA' null)' _timeOut.Add(TimeSpan.FromSeconds(1)));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c4));                  changedProbe.ExpectMsg(new Changed(KeyA' c4));                    var c5 = c4.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeMajority' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readMajority));                  ExpectMsg(new GetSuccess(KeyA' null' c5));                  changedProbe.ExpectMsg(new Changed(KeyA' c5));                    var c6 = c5.Increment(_cluster);                  _replicator.Tell(Dsl.Update(KeyA' _writeAll' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readAll));                  ExpectMsg(new GetSuccess(KeyA' null' c6));                  changedProbe.ExpectMsg(new Changed(KeyA' c6));                    var c9 = GCounter.Empty.Increment(_cluster' 9);                  _replicator.Tell(Dsl.Update(KeyX' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 9)));                  ExpectMsg(new UpdateSuccess(KeyX' null));                  changedProbe.ExpectMsg(new Changed(KeyX' c9));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DeleteSuccess(KeyX));                  changedProbe.ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' ReadLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' _readAll));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Update(KeyX' WriteLocal.Instance' x => x.Increment(_cluster)));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                    _replicator.Tell(Dsl.GetKeyIds);                  ExpectMsg(new GetKeysIdsResult(ImmutableHashSet<string>.Empty.Add("A")));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_single_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(5.0)' () =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(1));                  });                    var changedProbe = CreateTestProbe();                  _replicator.Tell(Dsl.Subscribe(KeyA' changedProbe.Ref));                  _replicator.Tell(Dsl.Subscribe(KeyX' changedProbe.Ref));                    _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new NotFound(KeyA' null));                    var c3 = GCounter.Empty.Increment(_cluster' 3);                  var update = Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 3));                  _replicator.Tell(update);                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c3));                  changedProbe.ExpectMsg(new Changed(KeyA' c3));                    var changedProbe2 = CreateTestProbe();                  _replicator.Tell(new Subscribe(KeyA' changedProbe2.Ref));                  changedProbe2.ExpectMsg(new Changed(KeyA' c3));                      var c4 = c3.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeTwo' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateTimeout(KeyA' null)' _timeOut.Add(TimeSpan.FromSeconds(1)));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c4));                  changedProbe.ExpectMsg(new Changed(KeyA' c4));                    var c5 = c4.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeMajority' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readMajority));                  ExpectMsg(new GetSuccess(KeyA' null' c5));                  changedProbe.ExpectMsg(new Changed(KeyA' c5));                    var c6 = c5.Increment(_cluster);                  _replicator.Tell(Dsl.Update(KeyA' _writeAll' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readAll));                  ExpectMsg(new GetSuccess(KeyA' null' c6));                  changedProbe.ExpectMsg(new Changed(KeyA' c6));                    var c9 = GCounter.Empty.Increment(_cluster' 9);                  _replicator.Tell(Dsl.Update(KeyX' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 9)));                  ExpectMsg(new UpdateSuccess(KeyX' null));                  changedProbe.ExpectMsg(new Changed(KeyX' c9));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DeleteSuccess(KeyX));                  changedProbe.ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' ReadLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' _readAll));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Update(KeyX' WriteLocal.Instance' x => x.Increment(_cluster)));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                    _replicator.Tell(Dsl.GetKeyIds);                  ExpectMsg(new GetKeysIdsResult(ImmutableHashSet<string>.Empty.Add("A")));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_single_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(5.0)' () =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(1));                  });                    var changedProbe = CreateTestProbe();                  _replicator.Tell(Dsl.Subscribe(KeyA' changedProbe.Ref));                  _replicator.Tell(Dsl.Subscribe(KeyX' changedProbe.Ref));                    _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new NotFound(KeyA' null));                    var c3 = GCounter.Empty.Increment(_cluster' 3);                  var update = Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 3));                  _replicator.Tell(update);                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c3));                  changedProbe.ExpectMsg(new Changed(KeyA' c3));                    var changedProbe2 = CreateTestProbe();                  _replicator.Tell(new Subscribe(KeyA' changedProbe2.Ref));                  changedProbe2.ExpectMsg(new Changed(KeyA' c3));                      var c4 = c3.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeTwo' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateTimeout(KeyA' null)' _timeOut.Add(TimeSpan.FromSeconds(1)));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c4));                  changedProbe.ExpectMsg(new Changed(KeyA' c4));                    var c5 = c4.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeMajority' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readMajority));                  ExpectMsg(new GetSuccess(KeyA' null' c5));                  changedProbe.ExpectMsg(new Changed(KeyA' c5));                    var c6 = c5.Increment(_cluster);                  _replicator.Tell(Dsl.Update(KeyA' _writeAll' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readAll));                  ExpectMsg(new GetSuccess(KeyA' null' c6));                  changedProbe.ExpectMsg(new Changed(KeyA' c6));                    var c9 = GCounter.Empty.Increment(_cluster' 9);                  _replicator.Tell(Dsl.Update(KeyX' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 9)));                  ExpectMsg(new UpdateSuccess(KeyX' null));                  changedProbe.ExpectMsg(new Changed(KeyX' c9));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DeleteSuccess(KeyX));                  changedProbe.ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' ReadLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' _readAll));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Update(KeyX' WriteLocal.Instance' x => x.Increment(_cluster)));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                    _replicator.Tell(Dsl.GetKeyIds);                  ExpectMsg(new GetKeysIdsResult(ImmutableHashSet<string>.Empty.Add("A")));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_single_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(5.0)' () =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(1));                  });                    var changedProbe = CreateTestProbe();                  _replicator.Tell(Dsl.Subscribe(KeyA' changedProbe.Ref));                  _replicator.Tell(Dsl.Subscribe(KeyX' changedProbe.Ref));                    _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new NotFound(KeyA' null));                    var c3 = GCounter.Empty.Increment(_cluster' 3);                  var update = Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 3));                  _replicator.Tell(update);                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c3));                  changedProbe.ExpectMsg(new Changed(KeyA' c3));                    var changedProbe2 = CreateTestProbe();                  _replicator.Tell(new Subscribe(KeyA' changedProbe2.Ref));                  changedProbe2.ExpectMsg(new Changed(KeyA' c3));                      var c4 = c3.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeTwo' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateTimeout(KeyA' null)' _timeOut.Add(TimeSpan.FromSeconds(1)));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c4));                  changedProbe.ExpectMsg(new Changed(KeyA' c4));                    var c5 = c4.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeMajority' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readMajority));                  ExpectMsg(new GetSuccess(KeyA' null' c5));                  changedProbe.ExpectMsg(new Changed(KeyA' c5));                    var c6 = c5.Increment(_cluster);                  _replicator.Tell(Dsl.Update(KeyA' _writeAll' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readAll));                  ExpectMsg(new GetSuccess(KeyA' null' c6));                  changedProbe.ExpectMsg(new Changed(KeyA' c6));                    var c9 = GCounter.Empty.Increment(_cluster' 9);                  _replicator.Tell(Dsl.Update(KeyX' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 9)));                  ExpectMsg(new UpdateSuccess(KeyX' null));                  changedProbe.ExpectMsg(new Changed(KeyX' c9));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DeleteSuccess(KeyX));                  changedProbe.ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' ReadLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' _readAll));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Update(KeyX' WriteLocal.Instance' x => x.Increment(_cluster)));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                    _replicator.Tell(Dsl.GetKeyIds);                  ExpectMsg(new GetKeysIdsResult(ImmutableHashSet<string>.Empty.Add("A")));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_single_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(5.0)' () =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(1));                  });                    var changedProbe = CreateTestProbe();                  _replicator.Tell(Dsl.Subscribe(KeyA' changedProbe.Ref));                  _replicator.Tell(Dsl.Subscribe(KeyX' changedProbe.Ref));                    _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new NotFound(KeyA' null));                    var c3 = GCounter.Empty.Increment(_cluster' 3);                  var update = Dsl.Update(KeyA' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 3));                  _replicator.Tell(update);                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c3));                  changedProbe.ExpectMsg(new Changed(KeyA' c3));                    var changedProbe2 = CreateTestProbe();                  _replicator.Tell(new Subscribe(KeyA' changedProbe2.Ref));                  changedProbe2.ExpectMsg(new Changed(KeyA' c3));                      var c4 = c3.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeTwo' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateTimeout(KeyA' null)' _timeOut.Add(TimeSpan.FromSeconds(1)));                  _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                  ExpectMsg(new GetSuccess(KeyA' null' c4));                  changedProbe.ExpectMsg(new Changed(KeyA' c4));                    var c5 = c4.Increment(_cluster);                  // too strong consistency level                  _replicator.Tell(Dsl.Update(KeyA' _writeMajority' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readMajority));                  ExpectMsg(new GetSuccess(KeyA' null' c5));                  changedProbe.ExpectMsg(new Changed(KeyA' c5));                    var c6 = c5.Increment(_cluster);                  _replicator.Tell(Dsl.Update(KeyA' _writeAll' x => x.Increment(_cluster)));                  ExpectMsg(new UpdateSuccess(KeyA' null));                  _replicator.Tell(Dsl.Get(KeyA' _readAll));                  ExpectMsg(new GetSuccess(KeyA' null' c6));                  changedProbe.ExpectMsg(new Changed(KeyA' c6));                    var c9 = GCounter.Empty.Increment(_cluster' 9);                  _replicator.Tell(Dsl.Update(KeyX' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 9)));                  ExpectMsg(new UpdateSuccess(KeyX' null));                  changedProbe.ExpectMsg(new Changed(KeyX' c9));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DeleteSuccess(KeyX));                  changedProbe.ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' ReadLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Get(KeyX' _readAll));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Update(KeyX' WriteLocal.Instance' x => x.Increment(_cluster)));                  ExpectMsg(new DataDeleted(KeyX));                  _replicator.Tell(Dsl.Delete(KeyX' WriteLocal.Instance));                  ExpectMsg(new DataDeleted(KeyX));                    _replicator.Tell(Dsl.GetKeyIds);                  ExpectMsg(new GetKeysIdsResult(ImmutableHashSet<string>.Empty.Add("A")));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_replicate_values_to_new_node,The following statement contains a magic number: RunOn(() =>                  Within(TimeSpan.FromSeconds(10)' () =>                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.GetReplicaCount);                          ExpectMsg(new ReplicaCount(2));                      }))'              _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_replicate_values_to_new_node,The following statement contains a magic number: RunOn(() =>                  Within(TimeSpan.FromSeconds(10)' () =>                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.GetReplicaCount);                          ExpectMsg(new ReplicaCount(2));                      }))'              _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_replicate_values_to_new_node,The following statement contains a magic number: RunOn(() =>              {                  var changedProbe = CreateTestProbe();                  _replicator.Tell(Dsl.Subscribe(KeyA' changedProbe.Ref));                  // "A" should be replicated via gossip to the new node                  Within(TimeSpan.FromSeconds(5)' () =>                      AwaitAssert(() =>                      {                          //TODO: received message is NotFound(A) instead of GetSuccess                          // for some reason result is returned before CRDT gets replicated                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyA)).Get(KeyA);                          c.Value.ShouldBe(6UL);                      }));                  var c2 = changedProbe.ExpectMsg<Changed>(g => Equals(g.Key' KeyA)).Get(KeyA);                  c2.Value.ShouldBe(6UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_replicate_values_to_new_node,The following statement contains a magic number: RunOn(() =>              {                  var changedProbe = CreateTestProbe();                  _replicator.Tell(Dsl.Subscribe(KeyA' changedProbe.Ref));                  // "A" should be replicated via gossip to the new node                  Within(TimeSpan.FromSeconds(5)' () =>                      AwaitAssert(() =>                      {                          //TODO: received message is NotFound(A) instead of GetSuccess                          // for some reason result is returned before CRDT gets replicated                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyA)).Get(KeyA);                          c.Value.ShouldBe(6UL);                      }));                  var c2 = changedProbe.ExpectMsg<Changed>(g => Equals(g.Key' KeyA)).Get(KeyA);                  c2.Value.ShouldBe(6UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_replicate_values_to_new_node,The following statement contains a magic number: RunOn(() =>              {                  var changedProbe = CreateTestProbe();                  _replicator.Tell(Dsl.Subscribe(KeyA' changedProbe.Ref));                  // "A" should be replicated via gossip to the new node                  Within(TimeSpan.FromSeconds(5)' () =>                      AwaitAssert(() =>                      {                          //TODO: received message is NotFound(A) instead of GetSuccess                          // for some reason result is returned before CRDT gets replicated                          _replicator.Tell(Dsl.Get(KeyA' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyA)).Get(KeyA);                          c.Value.ShouldBe(6UL);                      }));                  var c2 = changedProbe.ExpectMsg<Changed>(g => Equals(g.Key' KeyA)).Get(KeyA);                  c2.Value.ShouldBe(6UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_2_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  // start with 20 on both nodes                  _replicator.Tell(Dsl.Update(KeyB' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 20)));                  ExpectMsg(new UpdateSuccess(KeyB' null));                    // add 1 on both nodes using WriteTwo                  _replicator.Tell(Dsl.Update(KeyB' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyB' null));                    // the total' after replication should be 42                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.Get(KeyB' _readTwo));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyB)).Get(KeyB);                      c.Value.ShouldBe(42UL);                  });              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_2_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  // start with 20 on both nodes                  _replicator.Tell(Dsl.Update(KeyB' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 20)));                  ExpectMsg(new UpdateSuccess(KeyB' null));                    // add 1 on both nodes using WriteTwo                  _replicator.Tell(Dsl.Update(KeyB' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyB' null));                    // the total' after replication should be 42                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.Get(KeyB' _readTwo));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyB)).Get(KeyB);                      c.Value.ShouldBe(42UL);                  });              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_2_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  // add 1 on both nodes using WriteAll                  _replicator.Tell(Dsl.Update(KeyB' GCounter.Empty' _writeAll' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyB' null));                    // the total' after replication should be 44                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.Get(KeyB' _readAll));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyB)).Get(KeyB);                      c.Value.ShouldBe(44UL);                  });              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_work_in_2_node_cluster,The following statement contains a magic number: RunOn(() =>              {                  // add 1 on both nodes using WriteMajority                  _replicator.Tell(Dsl.Update(KeyB' GCounter.Empty' _writeMajority' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyB' null));                    // the total' after replication should be 46                  AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.Get(KeyB' _readMajority));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyB)).Get(KeyB);                      c.Value.ShouldBe(46UL);                  });              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    _replicator.Tell(Dsl.Update(KeyY' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyY' null));                    _replicator.Tell(Dsl.Update(KeyZ' GCounter.Empty' _writeMajority' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyZ' null));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    _replicator.Tell(Dsl.Update(KeyY' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyY' null));                    _replicator.Tell(Dsl.Update(KeyZ' GCounter.Empty' _writeMajority' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyZ' null));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    _replicator.Tell(Dsl.Update(KeyY' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyY' null));                    _replicator.Tell(Dsl.Update(KeyZ' GCounter.Empty' _writeMajority' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyZ' null));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    _replicator.Tell(Dsl.Update(KeyY' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyY' null));                    _replicator.Tell(Dsl.Update(KeyZ' GCounter.Empty' _writeMajority' x => x.Increment(_cluster' 30)));                  ExpectMsg(new UpdateSuccess(KeyZ' null));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c30 = ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyC)).Get(KeyC);                  c30.Value.ShouldBe(30UL);                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    // replicate with gossip after WriteLocal                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Delete(KeyY' WriteLocal.Instance' 777));                  ExpectMsg(new DeleteSuccess(KeyY' 777));                    _replicator.Tell(Dsl.Get(KeyZ' _readMajority));                  ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyZ)).Get(KeyZ).Value.ShouldBe(30UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c30 = ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyC)).Get(KeyC);                  c30.Value.ShouldBe(30UL);                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    // replicate with gossip after WriteLocal                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Delete(KeyY' WriteLocal.Instance' 777));                  ExpectMsg(new DeleteSuccess(KeyY' 777));                    _replicator.Tell(Dsl.Get(KeyZ' _readMajority));                  ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyZ)).Get(KeyZ).Value.ShouldBe(30UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c30 = ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyC)).Get(KeyC);                  c30.Value.ShouldBe(30UL);                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    // replicate with gossip after WriteLocal                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Delete(KeyY' WriteLocal.Instance' 777));                  ExpectMsg(new DeleteSuccess(KeyY' 777));                    _replicator.Tell(Dsl.Get(KeyZ' _readMajority));                  ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyZ)).Get(KeyZ).Value.ShouldBe(30UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c30 = ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyC)).Get(KeyC);                  c30.Value.ShouldBe(30UL);                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    // replicate with gossip after WriteLocal                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Delete(KeyY' WriteLocal.Instance' 777));                  ExpectMsg(new DeleteSuccess(KeyY' 777));                    _replicator.Tell(Dsl.Get(KeyZ' _readMajority));                  ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyZ)).Get(KeyZ).Value.ShouldBe(30UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c30 = ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyC)).Get(KeyC);                  c30.Value.ShouldBe(30UL);                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    // replicate with gossip after WriteLocal                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Delete(KeyY' WriteLocal.Instance' 777));                  ExpectMsg(new DeleteSuccess(KeyY' 777));                    _replicator.Tell(Dsl.Get(KeyZ' _readMajority));                  ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyZ)).Get(KeyZ).Value.ShouldBe(30UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c30 = ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyC)).Get(KeyC);                  c30.Value.ShouldBe(30UL);                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(30UL);                    // replicate with gossip after WriteLocal                  _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Delete(KeyY' WriteLocal.Instance' 777));                  ExpectMsg(new DeleteSuccess(KeyY' 777));                    _replicator.Tell(Dsl.Get(KeyZ' _readMajority));                  ExpectMsg<GetSuccess>(c => Equals(c.Key' KeyZ)).Get(KeyZ).Value.ShouldBe(30UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  // KeyC and deleted KeyY should be replicated via gossip to the other node                  Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                          c.Value.ShouldBe(31UL);                            _replicator.Tell(Dsl.Get(KeyY' ReadLocal.Instance));                          ExpectMsg(new DataDeleted(KeyY));                      });                  });                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  // KeyC and deleted KeyY should be replicated via gossip to the other node                  Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                          c.Value.ShouldBe(31UL);                            _replicator.Tell(Dsl.Get(KeyY' ReadLocal.Instance));                          ExpectMsg(new DataDeleted(KeyY));                      });                  });                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  // KeyC and deleted KeyY should be replicated via gossip to the other node                  Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                          c.Value.ShouldBe(31UL);                            _replicator.Tell(Dsl.Get(KeyY' ReadLocal.Instance));                          ExpectMsg(new DataDeleted(KeyY));                      });                  });                  changedProbe.ExpectMsg<Changed>(c => Equals(c.Key' KeyC)).Get(KeyC).Value.ShouldBe(31UL);              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c31 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                  c31.Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                          c.Value.ShouldBe(33UL);                      });                  });              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c31 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                  c31.Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                          c.Value.ShouldBe(33UL);                      });                  });              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_be_replicated_after_successful_update,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                  var c31 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                  c31.Value.ShouldBe(31UL);                    _replicator.Tell(Dsl.Update(KeyC' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateSuccess(KeyC' null));                    Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          _replicator.Tell(Dsl.Get(KeyC' ReadLocal.Instance));                          var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyC)).Get(KeyC);                          c.Value.ShouldBe(33UL);                      });                  });              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_partition,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyD' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 40)));                  ExpectMsg(new UpdateSuccess(KeyD' null));                    TestConductor.Blackhole(_first' _second' ThrottleTransportAdapter.Direction.Both)                      .Wait(TimeSpan.FromSeconds(10));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_partition,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyD' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 40)));                  ExpectMsg(new UpdateSuccess(KeyD' null));                    TestConductor.Blackhole(_first' _second' ThrottleTransportAdapter.Direction.Both)                      .Wait(TimeSpan.FromSeconds(10));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_partition,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyD' ReadLocal.Instance));                  var c40 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyD)).Get(KeyD);                  c40.Value.ShouldBe(40UL);                    _replicator.Tell(Dsl.Update(KeyD' GCounter.Empty.Increment(_cluster' 1)' _writeTwo' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateTimeout(KeyD' null)' _timeOut.Add(TimeSpan.FromSeconds(1)));                  _replicator.Tell(Dsl.Update(KeyD' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 1)));                  ExpectMsg(new UpdateTimeout(KeyD' null)' _timeOut.Add(TimeSpan.FromSeconds(1)));              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_partition,The following statement contains a magic number: RunOn(() =>              {                  //TODO: for some reason this RunOn never gets called                  for (ulong i = 1; i <= 30UL; i++)                  {                      var n = i;                      var keydn = new GCounterKey("D" + n);                      _replicator.Tell(Dsl.Update(keydn' GCounter.Empty' WriteLocal.Instance' x => x.Increment(_cluster' n)));                      ExpectMsg(new UpdateSuccess(keydn' null));                  }              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_partition,The following statement contains a magic number: RunOn(() =>              {                  TestConductor.PassThrough(_first' _second' ThrottleTransportAdapter.Direction.Both)                      .Wait(TimeSpan.FromSeconds(5));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_partition,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyD' _readTwo));                  var c44 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyD)).Get(KeyD);                  c44.Value.ShouldBe(44UL);                    Within(TimeSpan.FromSeconds(10)' () =>                      AwaitAssert(() =>                      {                          for (ulong i = 1; i <= 30UL; i++)                          {                              var keydn = new GCounterKey("D" + i);                              _replicator.Tell(Dsl.Get(keydn' ReadLocal.Instance));                              ExpectMsg<GetSuccess>(g => Equals(g.Key' keydn)).Get(keydn).Value.ShouldBe(i);                          }                      }));              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_partition,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyD' _readTwo));                  var c44 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyD)).Get(KeyD);                  c44.Value.ShouldBe(44UL);                    Within(TimeSpan.FromSeconds(10)' () =>                      AwaitAssert(() =>                      {                          for (ulong i = 1; i <= 30UL; i++)                          {                              var keydn = new GCounterKey("D" + i);                              _replicator.Tell(Dsl.Get(keydn' ReadLocal.Instance));                              ExpectMsg<GetSuccess>(g => Equals(g.Key' keydn)).Get(keydn).Value.ShouldBe(i);                          }                      }));              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_partition,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyD' _readTwo));                  var c44 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyD)).Get(KeyD);                  c44.Value.ShouldBe(44UL);                    Within(TimeSpan.FromSeconds(10)' () =>                      AwaitAssert(() =>                      {                          for (ulong i = 1; i <= 30UL; i++)                          {                              var keydn = new GCounterKey("D" + i);                              _replicator.Tell(Dsl.Get(keydn' ReadLocal.Instance));                              ExpectMsg<GetSuccess>(g => Equals(g.Key' keydn)).Get(keydn).Value.ShouldBe(i);                          }                      }));              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(3));                  }));              }' _first' _second' _third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () => AwaitAssert(() =>                  {                      _replicator.Tell(Dsl.GetReplicaCount);                      ExpectMsg(new ReplicaCount(3));                  }));              }' _first' _second' _third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' x => x.Increment(_cluster' 50)));                  ExpectMsg(new UpdateSuccess(KeyE' null));              }' _first' _second' _third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyE' _readMajority));                  var c150 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c150.Value.ShouldBe(150UL);              }' _first' _second' _third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  TestConductor.Blackhole(_first' _third' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(5));                  TestConductor.Blackhole(_second' _third' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(5));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  TestConductor.Blackhole(_first' _third' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(5));                  TestConductor.Blackhole(_second' _third' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(5));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  // ReadMajority should retrieve the previous update from second' before applying the modification                  var probe1 = CreateTestProbe();                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe2.Ref);                  probe2.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' data =>                  {                      probe1.Ref.Tell(data.Value);                      return data.Increment(_cluster' 1);                  })' probe2.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe3.Ref);                  probe1.ExpectMsg(151);                  probe2.ExpectMsg(new UpdateSuccess(KeyE' null));                  var c152 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c152.Value.ShouldBe(152UL);              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  // ReadMajority should retrieve the previous update from second' before applying the modification                  var probe1 = CreateTestProbe();                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe2.Ref);                  probe2.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' data =>                  {                      probe1.Ref.Tell(data.Value);                      return data.Increment(_cluster' 1);                  })' probe2.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe3.Ref);                  probe1.ExpectMsg(151);                  probe2.ExpectMsg(new UpdateSuccess(KeyE' null));                  var c152 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c152.Value.ShouldBe(152UL);              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  var probe1 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe1.Ref);                  probe1.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 153' x => x.Increment(_cluster' 1))' probe1.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 154' x => x.Increment(_cluster' 1))' probe2.Ref);                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 155' x => x.Increment(_cluster' 1))' probe3.Ref);                  var probe5 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe5.Ref);                  probe1.ExpectMsg(new UpdateSuccess(KeyE' 153));                  probe2.ExpectMsg(new UpdateSuccess(KeyE' 154));                  probe3.ExpectMsg(new UpdateSuccess(KeyE' 155));                  var c155 = probe5.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c155.Value.ShouldBe(155UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  var probe1 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe1.Ref);                  probe1.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 153' x => x.Increment(_cluster' 1))' probe1.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 154' x => x.Increment(_cluster' 1))' probe2.Ref);                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 155' x => x.Increment(_cluster' 1))' probe3.Ref);                  var probe5 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe5.Ref);                  probe1.ExpectMsg(new UpdateSuccess(KeyE' 153));                  probe2.ExpectMsg(new UpdateSuccess(KeyE' 154));                  probe3.ExpectMsg(new UpdateSuccess(KeyE' 155));                  var c155 = probe5.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c155.Value.ShouldBe(155UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  var probe1 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe1.Ref);                  probe1.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 153' x => x.Increment(_cluster' 1))' probe1.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 154' x => x.Increment(_cluster' 1))' probe2.Ref);                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 155' x => x.Increment(_cluster' 1))' probe3.Ref);                  var probe5 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe5.Ref);                  probe1.ExpectMsg(new UpdateSuccess(KeyE' 153));                  probe2.ExpectMsg(new UpdateSuccess(KeyE' 154));                  probe3.ExpectMsg(new UpdateSuccess(KeyE' 155));                  var c155 = probe5.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c155.Value.ShouldBe(155UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  var probe1 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe1.Ref);                  probe1.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 153' x => x.Increment(_cluster' 1))' probe1.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 154' x => x.Increment(_cluster' 1))' probe2.Ref);                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 155' x => x.Increment(_cluster' 1))' probe3.Ref);                  var probe5 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe5.Ref);                  probe1.ExpectMsg(new UpdateSuccess(KeyE' 153));                  probe2.ExpectMsg(new UpdateSuccess(KeyE' 154));                  probe3.ExpectMsg(new UpdateSuccess(KeyE' 155));                  var c155 = probe5.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c155.Value.ShouldBe(155UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  var probe1 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe1.Ref);                  probe1.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 153' x => x.Increment(_cluster' 1))' probe1.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 154' x => x.Increment(_cluster' 1))' probe2.Ref);                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 155' x => x.Increment(_cluster' 1))' probe3.Ref);                  var probe5 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe5.Ref);                  probe1.ExpectMsg(new UpdateSuccess(KeyE' 153));                  probe2.ExpectMsg(new UpdateSuccess(KeyE' 154));                  probe3.ExpectMsg(new UpdateSuccess(KeyE' 155));                  var c155 = probe5.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c155.Value.ShouldBe(155UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  var probe1 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe1.Ref);                  probe1.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 153' x => x.Increment(_cluster' 1))' probe1.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 154' x => x.Increment(_cluster' 1))' probe2.Ref);                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 155' x => x.Increment(_cluster' 1))' probe3.Ref);                  var probe5 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe5.Ref);                  probe1.ExpectMsg(new UpdateSuccess(KeyE' 153));                  probe2.ExpectMsg(new UpdateSuccess(KeyE' 154));                  probe3.ExpectMsg(new UpdateSuccess(KeyE' 155));                  var c155 = probe5.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c155.Value.ShouldBe(155UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  var probe1 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe1.Ref);                  probe1.ExpectMsg<GetSuccess>();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 153' x => x.Increment(_cluster' 1))' probe1.Ref);                    // verify read your own writes' without waiting for the UpdateSuccess reply                  // note that the order of the replies are not defined' and therefore we use separate probes                  var probe2 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 154' x => x.Increment(_cluster' 1))' probe2.Ref);                  var probe3 = CreateTestProbe();                  _replicator.Tell(Dsl.Update(KeyE' GCounter.Empty' _writeMajority' 155' x => x.Increment(_cluster' 1))' probe3.Ref);                  var probe5 = CreateTestProbe();                  _replicator.Tell(Dsl.Get(KeyE' _readMajority)' probe5.Ref);                  probe1.ExpectMsg(new UpdateSuccess(KeyE' 153));                  probe2.ExpectMsg(new UpdateSuccess(KeyE' 154));                  probe3.ExpectMsg(new UpdateSuccess(KeyE' 155));                  var c155 = probe5.ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c155.Value.ShouldBe(155UL);              }' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyE2' _readAll' 998));                  ExpectMsg(new GetFailure(KeyE2' 998)' _timeOut.Add(TimeSpan.FromSeconds(1)));                  _replicator.Tell(Dsl.Get(KeyE2' Dsl.ReadLocal));                  ExpectMsg(new NotFound(KeyE2' null));              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyE2' _readAll' 998));                  ExpectMsg(new GetFailure(KeyE2' 998)' _timeOut.Add(TimeSpan.FromSeconds(1)));                  _replicator.Tell(Dsl.Get(KeyE2' Dsl.ReadLocal));                  ExpectMsg(new NotFound(KeyE2' null));              }' _first' _second);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  TestConductor.PassThrough(_first' _third' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(5));                  TestConductor.PassThrough(_second' _third' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(5));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  TestConductor.PassThrough(_first' _third' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(5));                  TestConductor.PassThrough(_second' _third' ThrottleTransportAdapter.Direction.Both).Wait(TimeSpan.FromSeconds(5));              }' _first);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_support_majority_quorum_write_and_read_with_3_nodes_with_1_unreachable,The following statement contains a magic number: RunOn(() =>              {                  _replicator.Tell(Dsl.Get(KeyE' _readMajority));                    var c155 = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyE)).Get(KeyE);                  c155.Value.ShouldBe(155UL);              }' _third);
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_many_concurrent_updates,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var c = GCounter.Empty;                      for (ulong i = 0; i < 100UL; i++)                      {                          c = c.Increment(_cluster' i);                          _replicator.Tell(Dsl.Update(KeyF' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 1)));                      }                        var results = ReceiveN(100);                      results.All(x => x is UpdateSuccess).ShouldBeTrue();                  }' _first' _second' _third);                    EnterBarrier("100-updates-done");                    RunOn(() =>                  {                      _replicator.Tell(Dsl.Get(KeyF' _readTwo));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyF)).Get(KeyF);                      c.Value.ShouldBe(3 * 100UL);                  }' _first' _second' _third);                    EnterBarrierAfterTestStep();              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_many_concurrent_updates,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var c = GCounter.Empty;                      for (ulong i = 0; i < 100UL; i++)                      {                          c = c.Increment(_cluster' i);                          _replicator.Tell(Dsl.Update(KeyF' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 1)));                      }                        var results = ReceiveN(100);                      results.All(x => x is UpdateSuccess).ShouldBeTrue();                  }' _first' _second' _third);                    EnterBarrier("100-updates-done");                    RunOn(() =>                  {                      _replicator.Tell(Dsl.Get(KeyF' _readTwo));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyF)).Get(KeyF);                      c.Value.ShouldBe(3 * 100UL);                  }' _first' _second' _third);                    EnterBarrierAfterTestStep();              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_many_concurrent_updates,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var c = GCounter.Empty;                      for (ulong i = 0; i < 100UL; i++)                      {                          c = c.Increment(_cluster' i);                          _replicator.Tell(Dsl.Update(KeyF' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 1)));                      }                        var results = ReceiveN(100);                      results.All(x => x is UpdateSuccess).ShouldBeTrue();                  }' _first' _second' _third);                    EnterBarrier("100-updates-done");                    RunOn(() =>                  {                      _replicator.Tell(Dsl.Get(KeyF' _readTwo));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyF)).Get(KeyF);                      c.Value.ShouldBe(3 * 100UL);                  }' _first' _second' _third);                    EnterBarrierAfterTestStep();              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_many_concurrent_updates,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var c = GCounter.Empty;                      for (ulong i = 0; i < 100UL; i++)                      {                          c = c.Increment(_cluster' i);                          _replicator.Tell(Dsl.Update(KeyF' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 1)));                      }                        var results = ReceiveN(100);                      results.All(x => x is UpdateSuccess).ShouldBeTrue();                  }' _first' _second' _third);                    EnterBarrier("100-updates-done");                    RunOn(() =>                  {                      _replicator.Tell(Dsl.Get(KeyF' _readTwo));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyF)).Get(KeyF);                      c.Value.ShouldBe(3 * 100UL);                  }' _first' _second' _third);                    EnterBarrierAfterTestStep();              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_converge_after_many_concurrent_updates,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var c = GCounter.Empty;                      for (ulong i = 0; i < 100UL; i++)                      {                          c = c.Increment(_cluster' i);                          _replicator.Tell(Dsl.Update(KeyF' GCounter.Empty' _writeTwo' x => x.Increment(_cluster' 1)));                      }                        var results = ReceiveN(100);                      results.All(x => x is UpdateSuccess).ShouldBeTrue();                  }' _first' _second' _third);                    EnterBarrier("100-updates-done");                    RunOn(() =>                  {                      _replicator.Tell(Dsl.Get(KeyF' _readTwo));                      var c = ExpectMsg<GetSuccess>(g => Equals(g.Key' KeyF)).Get(KeyF);                      c.Value.ShouldBe(3 * 100UL);                  }' _first' _second' _third);                    EnterBarrierAfterTestStep();              });
Magic Number,Akka.DistributedData.Tests.MultiNode,ReplicatorSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\contrib\cluster\Akka.DistributedData.Tests.MultiNode\ReplicatorSpec.cs,Cluster_CRDT_should_avoid_duplicate_change_events_for_same_data,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () =>                  changedProbe.ExpectMsg<Changed>(c => c.Get(KeyI).Elements.ShouldBe(ImmutableHashSet.Create("a"))));
