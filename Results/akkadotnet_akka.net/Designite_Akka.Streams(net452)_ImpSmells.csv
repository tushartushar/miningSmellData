Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Streams.Dsl,UnzipWithStageLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\UnzipWith.cs,UnzipWithStageLogic,The method has 110 lines of code.
Long Method,Akka.Streams.Implementation,StreamLayout,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,Validate,The method has 103 lines of code.
Long Method,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,FuseGroup,The method has 136 lines of code.
Long Method,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Descend,The method has 166 lines of code.
Complex Method,Akka.Streams.Actors,ActorPublisher<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorPublisher.cs,AroundReceive,Cyclomatic complexity of the method is 17
Complex Method,Akka.Streams.Actors,ActorSubscriber,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorSubscriber.cs,AroundReceive,Cyclomatic complexity of the method is 9
Complex Method,Akka.Streams.Dsl,UnzipWithStageLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\UnzipWith.cs,OnPush,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,DoParse,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Dsl,HubLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,OnEvent,Cyclomatic complexity of the method is 11
Complex Method,Akka.Streams.Dsl,PartitionSinkLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,OnEvent,Cyclomatic complexity of the method is 12
Complex Method,Akka.Streams.Implementation,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorRefBackpressureSinkStage.cs,BufferElement,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Implementation,ActorRefSourceActor<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorRefSourceActor.cs,ReceiveElement,Cyclomatic complexity of the method is 10
Complex Method,Akka.Streams.Implementation,JsonObjectParser,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\JsonObjectParser.cs,Proceed,Cyclomatic complexity of the method is 13
Complex Method,Akka.Streams.Implementation,StreamLayout,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,Validate,Cyclomatic complexity of the method is 21
Complex Method,Akka.Streams.Implementation,VirtualProcessor<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,TryOnSubscribe,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Implementation,VirtualProcessor<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,OnError,Cyclomatic complexity of the method is 11
Complex Method,Akka.Streams.Implementation,VirtualProcessor<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,OnComplete,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Implementation,VirtualProcessor<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,OnNext,Cyclomatic complexity of the method is 13
Complex Method,Akka.Streams.Implementation,MaterializerSession,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,MaterializeModule,Cyclomatic complexity of the method is 10
Complex Method,Akka.Streams.Implementation,MaterializerSession,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,ResolveMaterialized,Cyclomatic complexity of the method is 9
Complex Method,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,Receive,Cyclomatic complexity of the method is 24
Complex Method,Akka.Streams.Implementation.Fusing,ActorGraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,Receive,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,FuseGroup,Cyclomatic complexity of the method is 12
Complex Method,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Descend,Cyclomatic complexity of the method is 18
Complex Method,Akka.Streams.Implementation.Fusing,BuildStructuralInfo,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,AddModule,Cyclomatic complexity of the method is 11
Complex Method,Akka.Streams.Implementation.Fusing,GraphAssembly,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphAssembly.cs,Materialize,Cyclomatic complexity of the method is 12
Complex Method,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,ProcessEvent,Cyclomatic complexity of the method is 9
Complex Method,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,PushOne,Cyclomatic complexity of the method is 9
Complex Method,Akka.Streams.Implementation.IO,ConnectionSourceStageLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,Receive,Cyclomatic complexity of the method is 10
Complex Method,Akka.Streams.Implementation.IO,TcpStreamLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,Connected,Cyclomatic complexity of the method is 12
Complex Method,Akka.Streams.Serialization,StreamRefSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\StreamRefSerializer.cs,Manifest,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Serialization,StreamRefSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\StreamRefSerializer.cs,ToBinary,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Serialization,StreamRefSerializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\StreamRefSerializer.cs,FromBinary,Cyclomatic complexity of the method is 8
Long Parameter List,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,ActorMaterializerSettings,The method has 12 parameters. Parameters: initialInputBufferSize' maxInputBufferSize' dispatcher' supervisionDecider' subscriptionTimeoutSettings' streamRefSettings' isDebugLogging' outputBurstLimit' isFuzzingMode' isAutoFusing' maxFixedBufferSize' syncProcessingLimit
Long Parameter List,Akka.Streams,FanInShape<T0;T1;T2;T3;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanInShape.cs,FanInShape,The method has 5 parameters. Parameters: outlet' in0' in1' in2' in3
Long Parameter List,Akka.Streams,FanInShape<T0;T1;T2;T3;T4;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanInShape.cs,FanInShape,The method has 6 parameters. Parameters: outlet' in0' in1' in2' in3' in4
Long Parameter List,Akka.Streams,FanInShape<T0;T1;T2;T3;T4;T5;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanInShape.cs,FanInShape,The method has 7 parameters. Parameters: outlet' in0' in1' in2' in3' in4' in5
Long Parameter List,Akka.Streams,FanInShape<T0;T1;T2;T3;T4;T5;T6;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanInShape.cs,FanInShape,The method has 8 parameters. Parameters: outlet' in0' in1' in2' in3' in4' in5' in6
Long Parameter List,Akka.Streams,FanInShape<T0;T1;T2;T3;T4;T5;T6;T7;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanInShape.cs,FanInShape,The method has 9 parameters. Parameters: outlet' in0' in1' in2' in3' in4' in5' in6' in7
Long Parameter List,Akka.Streams,FanInShape<T0;T1;T2;T3;T4;T5;T6;T7;T8;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanInShape.cs,FanInShape,The method has 10 parameters. Parameters: outlet' in0' in1' in2' in3' in4' in5' in6' in7' in8
Long Parameter List,Akka.Streams,FanOutShape<TIn;T0;T1;T2;T3>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanOutShape.cs,FanOutShape,The method has 5 parameters. Parameters: inlet' out0' out1' out2' out3
Long Parameter List,Akka.Streams,FanOutShape<TIn;T0;T1;T2;T3;T4>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanOutShape.cs,FanOutShape,The method has 6 parameters. Parameters: inlet' out0' out1' out2' out3' out4
Long Parameter List,Akka.Streams,FanOutShape<TIn;T0;T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanOutShape.cs,FanOutShape,The method has 7 parameters. Parameters: inlet' out0' out1' out2' out3' out4' out5
Long Parameter List,Akka.Streams,FanOutShape<TIn;T0;T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanOutShape.cs,FanOutShape,The method has 8 parameters. Parameters: inlet' out0' out1' out2' out3' out4' out5' out6
Long Parameter List,Akka.Streams,FanOutShape<TIn;T0;T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanOutShape.cs,FanOutShape,The method has 9 parameters. Parameters: inlet' out0' out1' out2' out3' out4' out5' out6' out7
Long Parameter List,Akka.Streams,FanOutShape<TIn;T0;T1;T2;T3;T4;T5;T6;T7;T8>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\FanOutShape.cs,FanOutShape,The method has 10 parameters. Parameters: inlet' out0' out1' out2' out3' out4' out5' out6' out7' out8
Long Parameter List,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The method has 5 parameters. Parameters: g0' g1' g2' combineMaterializers' buildBlock
Long Parameter List,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The method has 6 parameters. Parameters: g0' g1' g2' g3' combineMaterializers' buildBlock
Long Parameter List,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The method has 7 parameters. Parameters: g0' g1' g2' g3' g4' combineMaterializers' buildBlock
Long Parameter List,Akka.Streams.Dsl,FlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\FlowOperations.cs,BatchWeighted,The method has 5 parameters. Parameters: flow' max' costFunction' seed' aggregate
Long Parameter List,Akka.Streams.Dsl,FlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\FlowOperations.cs,Throttle,The method has 5 parameters. Parameters: flow' elements' per' maximumBurst' mode
Long Parameter List,Akka.Streams.Dsl,FlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\FlowOperations.cs,Throttle,The method has 6 parameters. Parameters: flow' cost' per' maximumBurst' calculateCost' mode
Long Parameter List,Akka.Streams.Dsl,RestartSource,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,WithBackoff,The method has 5 parameters. Parameters: sourceFactory' minBackoff' maxBackoff' randomFactor' maxRestarts
Long Parameter List,Akka.Streams.Dsl,RestartSource,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,OnFailuresWithBackoff,The method has 5 parameters. Parameters: sourceFactory' minBackoff' maxBackoff' randomFactor' maxRestarts
Long Parameter List,Akka.Streams.Dsl,RestartWithBackoffSource<T;TMat>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,RestartWithBackoffSource,The method has 6 parameters. Parameters: sourceFactory' minBackoff' maxBackoff' randomFactor' onlyOnFailures' maxRestarts
Long Parameter List,Akka.Streams.Dsl,RestartSink,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,WithBackoff,The method has 5 parameters. Parameters: sinkFactory' minBackoff' maxBackoff' randomFactor' maxRestarts
Long Parameter List,Akka.Streams.Dsl,RestartWithBackoffSink<T;TMat>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,RestartWithBackoffSink,The method has 5 parameters. Parameters: sinkFactory' minBackoff' maxBackoff' randomFactor' maxRestarts
Long Parameter List,Akka.Streams.Dsl,RestartFlow,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,WithBackoff,The method has 5 parameters. Parameters: flowFactory' minBackoff' maxBackoff' randomFactor' maxRestarts
Long Parameter List,Akka.Streams.Dsl,RestartFlow,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,OnFailuresWithBackoff,The method has 5 parameters. Parameters: flowFactory' minBackoff' maxBackoff' randomFactor' maxRestarts
Long Parameter List,Akka.Streams.Dsl,RestartWithBackoffFlow<TIn;TOut;TMat>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,RestartWithBackoffFlow,The method has 6 parameters. Parameters: flowFactory' minBackoff' maxBackoff' randomFactor' onlyOnFailures' maxRestarts
Long Parameter List,Akka.Streams.Dsl,RestartWithBackoffLogic<TShape;TIn;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Restart.cs,RestartWithBackoffLogic,The method has 9 parameters. Parameters: name' shape' inlet' outlet' minBackoff' maxBackoff' randomFactor' onlyOnFailures' maxRestarts
Long Parameter List,Akka.Streams.Dsl,Sink,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Sink.cs,ActorRefWithAck,The method has 5 parameters. Parameters: actorRef' onInitMessage' ackMessage' onCompleteMessage' onFailureMessage
Long Parameter List,Akka.Streams.Dsl,Source,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Source.cs,FromEvent,The method has 5 parameters. Parameters: conversion' addHandler' removeHandler' maxBufferCapacity' overflowStrategy
Long Parameter List,Akka.Streams.Dsl,SourceOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SourceOperations.cs,BatchWeighted,The method has 5 parameters. Parameters: flow' max' costFunction' seed' aggregate
Long Parameter List,Akka.Streams.Dsl,SourceOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SourceOperations.cs,Throttle,The method has 5 parameters. Parameters: flow' elements' per' maximumBurst' mode
Long Parameter List,Akka.Streams.Dsl,SourceOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SourceOperations.cs,Throttle,The method has 6 parameters. Parameters: flow' cost' per' maximumBurst' calculateCost' mode
Long Parameter List,Akka.Streams.Dsl,SubFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SubFlowOperations.cs,BatchWeighted,The method has 5 parameters. Parameters: flow' max' costFunction' seed' aggregate
Long Parameter List,Akka.Streams.Dsl,SubFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SubFlowOperations.cs,Throttle,The method has 5 parameters. Parameters: flow' elements' per' maximumBurst' mode
Long Parameter List,Akka.Streams.Dsl,SubFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SubFlowOperations.cs,Throttle,The method has 6 parameters. Parameters: flow' cost' per' maximumBurst' calculateCost' mode
Long Parameter List,Akka.Streams.Dsl,TcpExt,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Tcp.cs,Bind,The method has 6 parameters. Parameters: host' port' backlog' options' halfClose' idleTimeout
Long Parameter List,Akka.Streams.Dsl,TcpExt,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Tcp.cs,BindAndHandle,The method has 8 parameters. Parameters: handler' materializer' host' port' backlog' options' halfClose' idleTimeout
Long Parameter List,Akka.Streams.Dsl,TcpExt,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Tcp.cs,OutgoingConnection,The method has 6 parameters. Parameters: remoteAddress' localAddress' options' halfClose' connectionTimeout' idleTimeout
Long Parameter List,Akka.Streams.Dsl.Internal,InternalFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Internal\InternalFlowOperations.cs,BatchWeighted,The method has 5 parameters. Parameters: flow' max' costFunction' seed' aggregate
Long Parameter List,Akka.Streams.Dsl.Internal,InternalFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Internal\InternalFlowOperations.cs,Throttle,The method has 5 parameters. Parameters: flow' elements' per' maximumBurst' mode
Long Parameter List,Akka.Streams.Dsl.Internal,InternalFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Internal\InternalFlowOperations.cs,Throttle,The method has 6 parameters. Parameters: flow' cost' per' maximumBurst' calculateCost' mode
Long Parameter List,Akka.Streams.Implementation,ActorMaterializerImpl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorMaterializerImpl.cs,ActorMaterializerImpl,The method has 6 parameters. Parameters: system' settings' dispatchers' supervisor' haveShutDown' flowNames
Long Parameter List,Akka.Streams.Implementation,ActorRefBackpressureSinkStage<TIn>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorRefBackpressureSinkStage.cs,ActorRefBackpressureSinkStage,The method has 5 parameters. Parameters: actorRef' onInitMessage' ackMessage' onCompleteMessage' onFailureMessage
Long Parameter List,Akka.Streams.Implementation,FanoutOutputs<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\FanoutProcessorImpl.cs,FanoutOutputs,The method has 5 parameters. Parameters: maxBufferSize' initialBufferSize' self' pump' afterShutdown
Long Parameter List,Akka.Streams.Implementation,CompositeModule,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,CompositeModule,The method has 6 parameters. Parameters: subModules' shape' downstreams' upstreams' materializedValueComputation' attributes
Long Parameter List,Akka.Streams.Implementation,StructuralInfoModule,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,StructuralInfoModule,The method has 9 parameters. Parameters: subModules' shape' downstreams' upstreams' inOwners' outOwners' materializedValues' materializedValueComputation' attributes
Long Parameter List,Akka.Streams.Implementation,FusedModule,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,FusedModule,The method has 7 parameters. Parameters: subModules' shape' downstreams' upstreams' materializedValueComputation' attributes' info
Long Parameter List,Akka.Streams.Implementation,Throttle<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Throttle.cs,Throttle,The method has 5 parameters. Parameters: cost' per' maximumBurst' costCalculation' mode
Long Parameter List,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,GraphInterpreterShell,The method has 6 parameters. Parameters: assembly' connections' logics' shape' settings' materializer
Long Parameter List,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Descend,The method has 5 parameters. Parameters: module' inheritedAttributes' structInfo' openGroup' indent
Long Parameter List,Akka.Streams.Implementation.Fusing,BuildStructuralInfo,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,AddModule,The method has 5 parameters. Parameters: module' group' inheritedAttributes' indent' oldShape
Long Parameter List,Akka.Streams.Implementation.Fusing,GraphAssembly,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphAssembly.cs,GraphAssembly,The method has 6 parameters. Parameters: stages' originalAttributes' inlets' inletOwners' outlets' outletOwners
Long Parameter List,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,GraphInterpreter,The method has 8 parameters. Parameters: assembly' materializer' log' logics' connections' onAsyncInput' fuzzingMode' context
Long Parameter List,Akka.Streams.Implementation.Fusing,Connection,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,Connection,The method has 7 parameters. Parameters: id' inOwnerId' inOwner' outOwnerId' outOwner' inHandler' outHandler
Long Parameter List,Akka.Streams.Implementation.IO,FilePublisher,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\FilePublisher.cs,Props,The method has 6 parameters. Parameters: f' completionPromise' chunkSize' startPosition' initialBuffer' maxBuffer
Long Parameter List,Akka.Streams.Implementation.IO,FilePublisher,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\FilePublisher.cs,FilePublisher,The method has 5 parameters. Parameters: f' completionPromise' chunkSize' startPosition' maxBuffer
Long Parameter List,Akka.Streams.Implementation.IO,FileSubscriber,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\FileSubscriber.cs,Props,The method has 5 parameters. Parameters: f' completionPromise' bufferSize' startPosition' fileMode
Long Parameter List,Akka.Streams.Implementation.IO,FileSubscriber,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\FileSubscriber.cs,FileSubscriber,The method has 5 parameters. Parameters: f' completionPromise' bufferSize' startPosition' fileMode
Long Parameter List,Akka.Streams.Implementation.IO,FileSink,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\IOSinks.cs,FileSink,The method has 5 parameters. Parameters: f' startPosition' fileMode' attributes' shape
Long Parameter List,Akka.Streams.Implementation.IO,FileSource,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\IOSources.cs,FileSource,The method has 5 parameters. Parameters: f' chunkSize' startPosition' attributes' shape
Long Parameter List,Akka.Streams.Implementation.IO,ConnectionSourceStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,ConnectionSourceStage,The method has 7 parameters. Parameters: tcpManager' endpoint' backlog' options' halfClose' idleTimeout' bindShutdownTimeout
Long Parameter List,Akka.Streams.Implementation.IO,OutgoingConnectionStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,OutgoingConnectionStage,The method has 6 parameters. Parameters: tcpManager' remoteAddress' localAddress' options' halfClose' connectionTimeout
Long Parameter List,Akka.Streams.Stage,GraphStageLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Stage\GraphStage.cs,PassAlong,The method has 5 parameters. Parameters: from' to' doFinish' doFail' doPull
Long Parameter List,Akka.Streams.Stage,Reading<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Stage\GraphStage.cs,Reading,The method has 6 parameters. Parameters: inlet' n' previous' andThen' onComplete' logic
Long Parameter List,Akka.Streams.Stage,EmittingSingle<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Stage\GraphStage.cs,EmittingSingle,The method has 5 parameters. Parameters: out' element' previous' andThen' logic
Long Parameter List,Akka.Streams.Stage,EmittingIterator<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Stage\GraphStage.cs,EmittingIterator,The method has 5 parameters. Parameters: out' enumerator' previous' andThen' logic
Long Parameter List,Akka.Streams.Stage,PassAlongHandler<TOut;TIn>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Stage\GraphStage.cs,PassAlongHandler,The method has 5 parameters. Parameters: from' to' logic' doFinish' doFail
Long Identifier,Akka.Streams.Dsl,StreamRefSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\StreamRefs.cs,StreamRefSettings,The length of the parameter finalTerminationSignalDeadline is 30.
Long Identifier,Akka.Streams.Dsl,StreamRefSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\StreamRefs.cs,Copy,The length of the parameter finalTerminationSignalDeadline is 30.
Long Identifier,Akka.Streams.Implementation,ReactiveStreamsCompliance,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ReactiveStreamsCompliance.cs,,The length of the parameter CanNotSubscribeTheSameSubscriberMultipleTimes is 45.
Long Identifier,Akka.Streams.Implementation,ReactiveStreamsCompliance,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ReactiveStreamsCompliance.cs,,The length of the parameter NumberOfElementsInRequestMustBePositiveMsg is 42.
Long Identifier,Akka.Streams.Implementation,ReactiveStreamsCompliance,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ReactiveStreamsCompliance.cs,,The length of the parameter NumberOfElementsInRequestMustBePositiveException is 48.
Long Identifier,Akka.Streams.Implementation,ReactiveStreamsCompliance,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ReactiveStreamsCompliance.cs,,The length of the parameter CanNotSubscribeTheSameSubscriberMultipleTimesException is 54.
Long Identifier,Akka.Streams.Implementation,ReactiveStreamsCompliance,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ReactiveStreamsCompliance.cs,,The length of the parameter SubscriptionMustNotBeNullException is 34.
Long Identifier,Akka.Streams.Implementation.Fusing,SubstreamHandler,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\StreamOfStreams.cs,,The length of the parameter _willCompleteAfterInitialElement is 32.
Long Identifier,Akka.Streams.Implementation.IO,ConnectionSourceStageLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,,The length of the parameter _connectionFlowsAwaitingInitialization is 38.
Long Identifier,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,,The length of the parameter _remoteCumulativeDemandReceived is 31.
Long Identifier,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,,The length of the parameter _remoteCumulativeDemandConsumed is 31.
Long Identifier,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,,The length of the parameter _completedBeforeRemoteConnected is 31.
Long Identifier,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,,The length of the parameter _failedWithAwaitingPartnerTermination is 37.
Long Statement,Akka.Streams,ActorMaterializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The length of the statement  "                supervisor: context.ActorOf(StreamSupervisor.Props(settings' haveShutDown).WithDispatcher(settings.Dispatcher)' StreamSupervisor.NextName())' " is 141.
Long Statement,Akka.Streams,ActorMaterializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,ActorSystemOf,The length of the statement  "            throw new ArgumentException($"ActorRefFactory context must be a ActorSystem or ActorContext' got [{context.GetType()}]"); " is 121.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithInputBuffer,The length of the statement  "            return new ActorMaterializerSettings(initialSize' maxSize' Dispatcher' SupervisionDecider' SubscriptionTimeoutSettings' StreamRefSettings' IsDebugLogging' OutputBurstLimit' IsFuzzingMode' IsAutoFusing' MaxFixedBufferSize' SyncProcessingLimit); " is 243.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithDispatcher,The length of the statement  "            return new ActorMaterializerSettings(InitialInputBufferSize' MaxInputBufferSize' dispatcher' SupervisionDecider' SubscriptionTimeoutSettings' StreamRefSettings' IsDebugLogging' OutputBurstLimit' IsFuzzingMode' IsAutoFusing' MaxFixedBufferSize' SyncProcessingLimit); " is 265.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithSupervisionStrategy,The length of the statement  "            return new ActorMaterializerSettings(InitialInputBufferSize' MaxInputBufferSize' Dispatcher' decider' SubscriptionTimeoutSettings' StreamRefSettings' IsDebugLogging' OutputBurstLimit' IsFuzzingMode' IsAutoFusing' MaxFixedBufferSize' SyncProcessingLimit); " is 254.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithDebugLogging,The length of the statement  "            return new ActorMaterializerSettings(InitialInputBufferSize' MaxInputBufferSize' Dispatcher' SupervisionDecider' SubscriptionTimeoutSettings' StreamRefSettings' isEnabled' OutputBurstLimit' IsFuzzingMode' IsAutoFusing' MaxFixedBufferSize' SyncProcessingLimit); " is 260.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithFuzzingMode,The length of the statement  "            return new ActorMaterializerSettings(InitialInputBufferSize' MaxInputBufferSize' Dispatcher' SupervisionDecider' SubscriptionTimeoutSettings' StreamRefSettings' IsDebugLogging' OutputBurstLimit' isFuzzingMode' IsAutoFusing' MaxFixedBufferSize' SyncProcessingLimit); " is 265.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithAutoFusing,The length of the statement  "            return new ActorMaterializerSettings(InitialInputBufferSize' MaxInputBufferSize' Dispatcher' SupervisionDecider' SubscriptionTimeoutSettings' StreamRefSettings' IsDebugLogging' OutputBurstLimit' IsFuzzingMode' isAutoFusing' MaxFixedBufferSize' SyncProcessingLimit); " is 265.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithMaxFixedBufferSize,The length of the statement  "            return new ActorMaterializerSettings(InitialInputBufferSize' MaxInputBufferSize' Dispatcher' SupervisionDecider' SubscriptionTimeoutSettings' StreamRefSettings' IsDebugLogging' OutputBurstLimit' IsFuzzingMode' IsAutoFusing' maxFixedBufferSize' SyncProcessingLimit); " is 265.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithSyncProcessingLimit,The length of the statement  "            return new ActorMaterializerSettings(InitialInputBufferSize' MaxInputBufferSize' Dispatcher' SupervisionDecider' SubscriptionTimeoutSettings' StreamRefSettings' IsDebugLogging' OutputBurstLimit' IsFuzzingMode' IsAutoFusing' MaxFixedBufferSize' limit); " is 251.
Long Statement,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,WithSubscriptionTimeoutSettings,The length of the statement  "            return new ActorMaterializerSettings(InitialInputBufferSize' MaxInputBufferSize' Dispatcher' SupervisionDecider' settings' StreamRefSettings' IsDebugLogging' OutputBurstLimit' IsFuzzingMode' IsAutoFusing' MaxFixedBufferSize' SyncProcessingLimit); " is 246.
Long Statement,Akka.Streams,StreamSubscriptionTimeoutSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The length of the statement  "                case "no": case "off": case "false": case "noop": mode = StreamSubscriptionTimeoutTerminationMode.NoopTermination; break; " is 121.
Long Statement,Akka.Streams,StreamSubscriptionTimeoutSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The length of the statement  "                default: throw new ArgumentException("akka.stream.materializer.subscribtion-timeout.mode was not defined or has invalid value. Valid values are: no' off' false' noop' warn' cancel"); " is 182.
Long Statement,Akka.Streams,FanInShape<TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\FanInShape.cs,CopyFromPorts,The length of the statement  "            if (outlets.Length != 1) throw new ArgumentException($"Proposed outlets [{string.Join("' "' outlets)}] do not fit FanInShape"); " is 127.
Long Statement,Akka.Streams,FanInShape<TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\FanInShape.cs,CopyFromPorts,The length of the statement  "            if (inlets.Length != Inlets.Length) throw new ArgumentException($"Proposed inlets [{string.Join("' "' inlets)}] do not fit FanInShape"); " is 136.
Long Statement,Akka.Streams,BidiShape<TIn1;TOut1;TIn2;TOut2>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Shape.cs,CopyFromPorts,The length of the statement  "            if (inlets.Length != 2) throw new ArgumentException($"Proposed inlets [{string.Join("' "' inlets)}] don't fit BidiShape"); " is 122.
Long Statement,Akka.Streams,BidiShape<TIn1;TOut1;TIn2;TOut2>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Shape.cs,CopyFromPorts,The length of the statement  "            if (outlets.Length != 2) throw new ArgumentException($"Proposed outlets [{string.Join("' "' outlets)}] don't fit BidiShape"); " is 125.
Long Statement,Akka.Streams,BidiShape<TIn1;TOut1;TIn2;TOut2>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Shape.cs,CopyFromPorts,The length of the statement  "            return new BidiShape<TIn1' TOut1' TIn2' TOut2>((Inlet<TIn1>)inlets[0]' (Outlet<TOut1>)outlets[0]' (Inlet<TIn2>)inlets[1]' (Outlet<TOut2>)outlets[1]); " is 149.
Long Statement,Akka.Streams.Actors,ActorPublisher<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorPublisher.cs,AroundPreStart,The length of the statement  "                Context.System.Scheduler.ScheduleTellOnce(SubscriptionTimeout' Self' SubscriptionTimeoutExceeded.Instance' Self' _scheduledSubscriptionTimeout); " is 144.
Long Statement,Akka.Streams.Actors,ActorSubscriberImpl<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorSubscriber.cs,OnSubscribe,The length of the statement  "            if (subscription == null) throw new ArgumentNullException(nameof(subscription)' "OnSubscribe requires subscription to be defined"); " is 131.
Long Statement,Akka.Streams.Actors,ActorSubscriberImpl<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorSubscriber.cs,OnNext,The length of the statement  "            if (element == null) throw new ArgumentNullException(nameof(element)' "OnNext requires provided element not to be null"); " is 121.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape0 = builder.Add<TShape0' TMat0' Func<TMat1' Func<TMat2' TMatOut>>>(g0' m0 => (m1 => (m2 => combineMaterializers(m0' m1' m2)))); " is 136.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape1 = builder.Add<TShape1' Func<TMat1' Func<TMat2' TMatOut>>' TMat1' Func<TMat2' TMatOut>>(g1' (f' m1) => f(m1)); " is 120.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape0 = builder.Add<TShape0' TMat0' Func<TMat1' Func<TMat2' Func<TMat3' TMatOut>>>>(g0' m0 => (m1 => (m2 => (m3 => combineMaterializers(m0' m1' m2' m3))))); " is 161.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape1 = builder.Add<TShape1' Func<TMat1' Func<TMat2' Func<TMat3' TMatOut>>>' TMat1' Func<TMat2' Func<TMat3' TMatOut>>>(g1' (f' m1) => f(m1)); " is 146.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape2 = builder.Add<TShape2' Func<TMat2' Func<TMat3' TMatOut>>' TMat2' Func<TMat3' TMatOut>>(g2' (f' m2) => f(m2)); " is 120.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape0 = builder.Add<TShape0' TMat0' Func<TMat1' Func<TMat2' Func<TMat3' Func<TMat4' TMatOut>>>>>(g0' m0 => (m1 => (m2 => (m3 => (m4 => combineMaterializers(m0' m1' m2' m3' m4)))))); " is 186.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape1 = builder.Add<TShape1' Func<TMat1' Func<TMat2' Func<TMat3' Func<TMat4' TMatOut>>>>' TMat1' Func<TMat2' Func<TMat3' Func<TMat4' TMatOut>>>>(g1' (f' m1) => f(m1)); " is 172.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape2 = builder.Add<TShape2' Func<TMat2' Func<TMat3' Func<TMat4' TMatOut>>>' TMat2' Func<TMat3' Func<TMat4' TMatOut>>>(g2' (f' m2) => f(m2)); " is 146.
Long Statement,Akka.Streams.Dsl,GraphDsl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\GraphApply.cs,Create,The length of the statement  "            var shape3 = builder.Add<TShape3' Func<TMat3' Func<TMat4' TMatOut>>' TMat3' Func<TMat4' TMatOut>>(g3' (f' m3) => f(m3)); " is 120.
Long Statement,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,PushAll,The length of the statement  "                Push(_stage.Out' _stage.Zipper(Grab(_stage.In0)' Grab(_stage.In1)' Grab(_stage.In2)' Grab(_stage.In3)' Grab(_stage.In4))); " is 122.
Long Statement,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,PushAll,The length of the statement  "                Push(_stage.Out' _stage.Zipper(Grab(_stage.In0)' Grab(_stage.In1)' Grab(_stage.In2)' Grab(_stage.In3)' Grab(_stage.In4)' Grab(_stage.In5))); " is 140.
Long Statement,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,PushAll,The length of the statement  "                Push(_stage.Out' _stage.Zipper(Grab(_stage.In0)' Grab(_stage.In1)' Grab(_stage.In2)' Grab(_stage.In3)' Grab(_stage.In4)' Grab(_stage.In5)' Grab(_stage.In6))); " is 158.
Long Statement,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,PushAll,The length of the statement  "                Push(_stage.Out' _stage.Zipper(Grab(_stage.In0)' Grab(_stage.In1)' Grab(_stage.In2)' Grab(_stage.In3)' Grab(_stage.In4)' Grab(_stage.In5)' Grab(_stage.In6)' Grab(_stage.In7))); " is 176.
Long Statement,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,PushAll,The length of the statement  "                Push(_stage.Out' _stage.Zipper(Grab(_stage.In0)' Grab(_stage.In1)' Grab(_stage.In2)' Grab(_stage.In3)' Grab(_stage.In4)' Grab(_stage.In5)' Grab(_stage.In6)' Grab(_stage.In7)' Grab(_stage.In8))); " is 194.
Long Statement,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,DoParse,The length of the statement  "                            FailStage(new FramingException($"Read {_buffer.Count} bytes which is more than {_stage._maximumLineBytes} without seeing a line terminator")); " is 142.
Long Statement,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,DoParse,The length of the statement  "                                FailStage(new FramingException($"Read {_buffer.Count} bytes which is more than {_stage._maximumLineBytes} without seeing a line terminator")); " is 142.
Long Statement,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,OnPush,The length of the statement  "                            $"partitioner must return an index in the range [0'{_stage._outputPorts - 1}]. returned: [{index}] for input [{element.GetType().Name}].")); " is 140.
Long Statement,Akka.Streams.Dsl,BidiFlow<TIn1;TOut1;TIn2;TOut2;TMat>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\BidiFlow.cs,AtopMat,The length of the statement  "                .ReplaceShape(new BidiShape<TIn1' TOut12' TIn21' TOut2>(Shape.Inlet1' (Outlet<TOut12>)outs[0]' (Inlet<TIn21>)ins[1]' Shape.Outlet2))); " is 134.
Long Statement,Akka.Streams.Dsl,BidiFlow<TIn1;TOut1;TIn2;TOut2;TMat>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\BidiFlow.cs,JoinMat,The length of the statement  "                .ReplaceShape(new FlowShape<TIn1' TOut2>((Inlet<TIn1>)Shape.Inlets.First()' (Outlet<TOut2>)Shape.Outlets.ElementAt(1)))); " is 121.
Long Statement,Akka.Streams.Dsl,FlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\FlowOperations.cs,SplitWhen,The length of the statement  "            return flow.SplitWhen(substreamCancelStrategy' predicate' (f' s) => ((Flow<TIn' Source<TOut' NotUsed>' TMat>) f).To(s)); " is 120.
Long Statement,Akka.Streams.Dsl,FlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\FlowOperations.cs,SplitAfter,The length of the statement  "            return flow.SplitAfter(substreamCancelStrategy' predicate' (f' s) => ((Flow<TIn' Source<TOut' NotUsed>' TMat>) f).To(s)); " is 121.
Long Statement,Akka.Streams.Dsl,Builder<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\GraphDsl.cs,Add,The length of the statement  "                _moduleInProgress = _moduleInProgress.Compose<TMat'TMat2'TMat2>(copy.TransformMaterializedValue(transform)' Keep.Right); " is 120.
Long Statement,Akka.Streams.Dsl,Keep,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Keep.cs,IsRight,The length of the statement  "            return fn.GetMethodInfo().IsGenericMethod && fn.GetMethodInfo().GetGenericMethodDefinition().MethodHandle.Value == KeepRightMethodhandle.Value; " is 143.
Long Statement,Akka.Streams.Dsl,Keep,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Keep.cs,IsRight,The length of the statement  "            return fn.GetMethodInfo().IsGenericMethod && fn.GetMethodInfo().GetGenericMethodDefinition().Equals(KeepRightMethodInfo); " is 121.
Long Statement,Akka.Streams.Dsl,Keep,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Keep.cs,IsLeft,The length of the statement  "            return fn.GetMethodInfo().IsGenericMethod && fn.GetMethodInfo().GetGenericMethodDefinition().MethodHandle.Value == KeepLeftMethodhandle.Value; " is 142.
Long Statement,Akka.Streams.Dsl,Keep,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Keep.cs,IsLeft,The length of the statement  "            return fn.GetMethodInfo().IsGenericMethod && fn.GetMethodInfo().GetGenericMethodDefinition().Equals(KeepLeftMethodInfo); " is 120.
Long Statement,Akka.Streams.Dsl,Source,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Source.cs,ActorPublisher,The length of the statement  "            return new Source<T' IActorRef>(new ActorPublisherSource<T>(props' DefaultAttributes.ActorPublisherSource' Shape<T>("ActorPublisherSource"))); " is 142.
Long Statement,Akka.Streams.Dsl,Source,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Source.cs,ActorRef,The length of the statement  "            if (overflowStrategy == OverflowStrategy.Backpressure) throw new NotSupportedException("Backpressure overflow strategy is not supported"); " is 138.
Long Statement,Akka.Streams.Dsl,Source,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Source.cs,ActorRef,The length of the statement  "            return new Source<T' IActorRef>(new ActorRefSource<T>(bufferSize' overflowStrategy' DefaultAttributes.ActorRefSource' Shape<T>("ActorRefSource"))); " is 147.
Long Statement,Akka.Streams.Dsl,SourceGen,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SourceGen.cs,UnfoldFlow,The length of the statement  "            return UnfoldFlowGraph(new FanOut2UnfoldingStage<(TState' TOut)' TState' TOut>(shape => new UnfoldFlowGraphStageLogic<TState' TOut>(shape' seed' timeout))' flow); " is 162.
Long Statement,Akka.Streams.Dsl,SourceGen,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SourceGen.cs,UnfoldFlowWith,The length of the statement  "            return UnfoldFlowGraph(new FanOut2UnfoldingStage<TFlowOut' TState' TOut>(shape => new UnfoldFlowWithGraphStageLogic<TFlowOut' TState' TOut>(shape' seed' unfoldWith' timeout))' flow); " is 182.
Long Statement,Akka.Streams.Dsl,StreamRefSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\StreamRefs.cs,Create,The length of the statement  "            if (config == null) throw new ArgumentNullException(nameof(config)' "`akka.stream.materializer.stream-ref` was not present"); " is 125.
Long Statement,Akka.Streams.Dsl,SubFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SubFlowOperations.cs,PrefixAndTail,The length of the statement  "            return (SubFlow<(IImmutableList<TOut>' Source<TOut' NotUsed>)' TMat' TClosed>)InternalFlowOperations.PrefixAndTail(flow' n); " is 124.
Long Statement,Akka.Streams.Dsl,SubFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\SubFlowOperations.cs,Throttle,The length of the statement  "            return (SubFlow<TOut' TMat' TClosed>)InternalFlowOperations.Throttle(flow' cost' per' maximumBurst' calculateCost' mode); " is 121.
Long Statement,Akka.Streams.Dsl,UnfoldFlowGraphStageLogic<TIn;TState;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\UnfoldFlow.cs,OnDownstreamFinish,The length of the statement  "                        FailStage(new InvalidOperationException($"unfoldFlow source's inner flow canceled only upstream' while downstream remain available for {_timeout}")); " is 149.
Long Statement,Akka.Streams.Implementation,ExtendedActorMaterializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorMaterializerImpl.cs,ActorOf,The length of the statement  "                    return ((ActorCell)repointableActorRef.Underlying).AttachChild(props.WithDispatcher(dispatcher)' isSystemService: false' name: name); " is 133.
Long Statement,Akka.Streams.Implementation,ExtendedActorMaterializer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorMaterializerImpl.cs,ActorOf,The length of the statement  "                var f = repointableActorRef.Ask<IActorRef>(new StreamSupervisor.Materialize(props.WithDispatcher(dispatcher)' name)' timeout); " is 126.
Long Statement,Akka.Streams.Implementation,ActorMaterializerSession,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorMaterializerImpl.cs,MaterializeGraph,The length of the statement  "                var t = graph.Assembly.Materialize(effectiveAttributes' graph.MaterializedValueIds' materializedValues' RegisterSource); " is 120.
Long Statement,Akka.Streams.Implementation,ActorMaterializerSession,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorMaterializerImpl.cs,MaterializeGraph,The length of the statement  "                var shell = new GraphInterpreterShell(graph.Assembly' connections' logics' graph.Shape' calculatedSettings' _materializer); " is 123.
Long Statement,Akka.Streams.Implementation,ActorMaterializerSession,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorMaterializerImpl.cs,MaterializeGraph,The length of the statement  "                    : _materializer.ActorOf(ActorGraphInterpreter.Props(shell)' StageName(effectiveAttributes)' calculatedSettings.Dispatcher); " is 123.
Long Statement,Akka.Streams.Implementation,BatchingInputBuffer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorProcessor.cs,OnSubscribe,The length of the statement  "            if (subscription == null) throw new ArgumentNullException(nameof(subscription)' "OnSubscribe require subscription not to be null"); " is 131.
Long Statement,Akka.Streams.Implementation,ActorSubscription,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorPublisher.cs,Create,The length of the statement  "            return (IActorSubscription) Activator.CreateInstance(subscriptionType' implementor' UntypedSubscriber.ToTyped(subscriber)); " is 123.
Long Statement,Akka.Streams.Implementation,ActorRefSourceActor<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorRefSourceActor.cs,DrainBufferThenComplete,The length of the statement  "                    "Dropping element because Status.Success received already' only draining already buffered elements: [{0}] (pending: [{1}])"' " is 124.
Long Statement,Akka.Streams.Implementation,Materialized,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Sinks.cs,OfferAsync,The length of the statement  "                var promise = TaskEx.NonBlockingTaskCompletionSource<IQueueOfferResult>(); // new TaskCompletionSource<IQueueOfferResult>(); " is 124.
Long Statement,Akka.Streams.Implementation,QueueSource<TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Sources.cs,CreateLogicAndMaterializedValue,The length of the statement  "            return new LogicAndMaterializedValue<ISourceQueueWithComplete<TOut>>(logic' new Materialized(t => logic.Invoke(t)' completion)); " is 128.
Long Statement,Akka.Streams.Implementation,CompositeModule,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,ToString,The length of the statement  "                   $"\n    {string.Join("\n    "' SubModules.Select(m => m.Attributes.GetNameLifted() ?? m.ToString().Replace("\n"' "\n    ")))}" + " is 128.
Long Statement,Akka.Streams.Implementation,FusedModule,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,ToString,The length of the statement  "                   $"\n    {string.Join("\n    "' SubModules.Select(m => m.Attributes.GetNameLifted() ?? m.ToString().Replace("\n"' "\n    ")))}" + " is 128.
Long Statement,Akka.Streams.Implementation,MaterializerSession,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,EnterScope,The length of the statement  "            _materializedValueSources.AddFirst(new Dictionary<StreamLayout.IMaterializedValueNode' LinkedList<IMaterializedValueSource>>()); " is 128.
Long Statement,Akka.Streams.Implementation,SubscriberManagement<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\SubscriberManagement.cs,MoreRequested,The length of the statement  "                        ReactiveStreamsCompliance.TryOnError(subscription.Subscriber' ReactiveStreamsCompliance.NumberOfElementsInRequestMustBePositiveException); " is 138.
Long Statement,Akka.Streams.Implementation,Pumps,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Transfer.cs,WaitForUpstream,The length of the statement  "            self.TransferState = new WaitingForUpstreamSubscription(waitForUpstream' new TransferPhase(self.TransferState' self.CurrentAction)); " is 132.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,Init,The length of the statement  "                var output = (ActorGraphInterpreter.IActorOutputBoundary) typeof(ActorGraphInterpreter.ActorOutputBoundary<>).Instantiate(outputType' Self' this' i); " is 149.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,Receive,The length of the statement  "                            $"Streaming actor has been already stopped processing (normally)' but not all of its inputs or outputs have been subscribed in [{_settings.SubscriptionTimeoutSettings.Timeout}]. Aborting actor now.")); " is 201.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,GetLogger,The length of the statement  "            return new BusLogging(Materializer.System.EventStream' Self.ToString()' typeof(GraphInterpreterShell)' new DefaultLogMessageFormatter()); " is 137.
Long Statement,Akka.Streams.Implementation.Fusing,EnumeratorInterpreter<TIn;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\EnumeratorInterpreter.cs,Init,The length of the statement  "            var tup = assembly.Materialize(Attributes.None' assembly.Stages.Select(x => x.Module).ToArray()' new Dictionary<IModule' object>()' _ => { }); " is 142.
Long Statement,Akka.Streams.Implementation.Fusing,EnumeratorInterpreter<TIn;TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\EnumeratorInterpreter.cs,Init,The length of the statement  "                onAsyncInput: (_1' _2' _3) => throw new NotSupportedException("IteratorInterpreter does not support asynchronous events.")' " is 123.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Aggressive,The length of the statement  "            // First perform normalization by descending the module tree and recording information in the BuildStructuralInfo instance. " is 123.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Aggressive,The length of the statement  "            // Extract the full topological information from the builder before removing assembly-internal (fused) wirings in the next step. " is 128.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,FuseGroup,The length of the statement  "                if ((copy = enumerator.Current as CopiedModule) != null && (graphStageModule = copy.CopyOf as GraphStageModule) != null) " is 120.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,FuseGroup,The length of the statement  "                if ((copy = enumerator.Current as CopiedModule) != null && (graphStageModule = copy.CopyOf as GraphStageModule) != null) " is 120.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,FuseGroup,The length of the statement  "            var asyncAttrs = IsAsync((CopiedModule) firstModule) ? new Attributes(Attributes.AsyncBoundary.Instance) : Attributes.None; " is 123.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,FuseGroup,The length of the statement  "            return new GraphModule(new GraphAssembly(stages' attributes' ins' inOwners' outs' outOwners)' shape' attr' materializedValueIds); " is 129.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Descend,The length of the statement  "                    $"entering {module.GetType().Name} (hash={module.GetHashCode()}' async={isAsync}' name={module.Attributes.GetNameLifted()}' dispatcher={GetDispatcher(module)})"); " is 162.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Descend,The length of the statement  "                            $"subMat\n  {string.Empty.PadLeft(indent*2)}{string.Join("\n  " + string.Empty.PadLeft(indent*2)' subMat.Select(p => $"{p.Key.GetType().Name}[{p.Key.GetHashCode()}] -> {p.Value}"))}"); " is 184.
Long Statement,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,RewriteMaterializer,The length of the statement  "                var result = new Combine(combine.Combinator' RewriteMaterializer(subMat' combine.Left' mapping)' RewriteMaterializer(subMat' combine.Right' mapping)); " is 150.
Long Statement,Akka.Streams.Implementation.Fusing,BuildStructuralInfo,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Dump,The length of the statement  "            NewInputs.ForEach(kvp => Console.WriteLine($"    {kvp.Key} ({Hash(kvp.Key)}) -> {string.Join("'"' kvp.Value.Select(Hash))}")); " is 126.
Long Statement,Akka.Streams.Implementation.Fusing,BuildStructuralInfo,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Dump,The length of the statement  "            NewInputs.ForEach(kvp => Console.WriteLine($"    {kvp.Key} ({Hash(kvp.Key)}) -> {string.Join("'"' kvp.Value.Select(Hash))}")); " is 126.
Long Statement,Akka.Streams.Implementation.Fusing,GraphAssembly,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphAssembly.cs,Create,The length of the statement  "            if (connectionsCount <= 0) throw new ArgumentException($"Sum of inlets ({inletsCount}) and outlets ({outletsCount}) must be > 0"); " is 130.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,Execute,The length of the statement  "            if (IsDebug) Console.WriteLine($"{Name} ---------------- {QueueStatus()} (running={RunningStagesCount}' shutdown={ShutdownCounters()})"); " is 137.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,ProcessEvent,The length of the statement  "            // this must be the state after returning without delivering any signals' to avoid double-finalization of some unlucky stage " is 124.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,ProcessEvent,The length of the statement  "                if (IsDebug) Console.WriteLine($"{Name} CANCEL {InOwnerName(connection)} -> {OutOwnerName(connection)} ({connection.OutHandler}) [{OutLogicName(connection)}]"); " is 160.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,ProcessEvent,The length of the statement  "                    if (IsDebug) Console.WriteLine($"{Name} COMPLETE {OutOwnerName(connection)} -> {InOwnerName(connection)} ({connection.InHandler}) [{InLogicName(connection)}]"); " is 160.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,ProcessPush,The length of the statement  "            //if (IsDebug) Console.WriteLine($"{Name} PUSH {OutOwnerName(connection)} -> {InOwnerName(connection)}'  {connection.Slot} ({connection.InHandler}) [{InLogicName(connection)}]"); " is 178.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,ProcessPull,The length of the statement  "            //if (IsDebug) Console.WriteLine($"{Name} PULL {InOwnerName(connection)} -> {OutOwnerName(connection)}' ({connection.OutHandler}) [{OutLogicName(connection)}]"); " is 161.
Long Statement,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,Enqueue,The length of the statement  "            if (IsDebug && _queueTail - _queueHead > _mask) throw new Exception($"{Name} internal queue full ({QueueStatus()}) + {connection}"); " is 132.
Long Statement,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,PreStart,The length of the statement  "                            "Log stage can only provide LoggingAdapter when used with ActorMaterializer! Provide a LoggingAdapter explicitly or use the actor based flow materializer."' " is 156.
Long Statement,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,OnPushStrategy,The length of the statement  "                        return () => { FailStage(new BufferOverflowException($"Buffer overflow for Delay combinator (max capacity was: {_size})!")); }; " is 127.
Long Statement,Akka.Streams.Implementation.Fusing,SubSink<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\StreamOfStreams.cs,DispatchCommand,The length of the statement  "                case SubSink.RequestOneScheduledBeforeMaterialization _ when newState == SubSink.CancelScheduledBeforeMaterialization.Instance: " is 127.
Long Statement,Akka.Streams.Implementation.IO,FileSubscriber,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\FileSubscriber.cs,Props,The length of the statement  "            return Actor.Props.Create(()=> new FileSubscriber(f' completionPromise' bufferSize' startPosition' fileMode)).WithDeploy(Deploy.Local); " is 135.
Long Statement,Akka.Streams.Implementation.IO,InputStreamPublisher,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\InputStreamPublisher.cs,Props,The length of the statement  "            return Actor.Props.Create(()=> new InputStreamPublisher(inputstream' completionSource' chunkSize)).WithDeploy(Deploy.Local); " is 124.
Long Statement,Akka.Streams.Implementation.IO,FileSink,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\IOSinks.cs,Create,The length of the statement  "            var dispatcher = context.EffectiveAttributes.GetAttribute(DefaultAttributes.IODispatcher.AttributeList.First()) as ActorAttributes.Dispatcher; " is 142.
Long Statement,Akka.Streams.Implementation.IO,FileSource,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\IOSources.cs,Create,The length of the statement  "            var props = FilePublisher.Props(_f' ioResultPromise' _chunkSize' _startPosition' settings.InitialInputBufferSize' settings.MaxInputBufferSize); " is 143.
Long Statement,Akka.Streams.Implementation.IO,FileSource,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\IOSources.cs,Create,The length of the statement  "            var dispatcher = context.EffectiveAttributes.GetAttribute(DefaultAttributes.IODispatcher.GetAttribute<ActorAttributes.Dispatcher>()); " is 133.
Long Statement,Akka.Streams.Implementation.IO,ConnectionSourceStageLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,PreStart,The length of the statement  "                _stage._tcpManager.Tell(new Tcp.Bind(StageActor.Ref' _stage._endpoint' _stage._backlog' _stage._options' pullMode: true)' StageActor.Ref); " is 138.
Long Statement,Akka.Streams.Implementation.IO,IncomingConnectionStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,CreateLogic,The length of the statement  "            return new TcpConnectionStage.TcpStreamLogic(Shape' new TcpConnectionStage.Inbound(_connection' _halfClose)' _remoteAddress); " is 125.
Long Statement,Akka.Streams.Implementation.IO,TcpStreamLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,PreStart,The length of the statement  "                    _connection.Tell(new Tcp.Register(StageActor.Ref' keepOpenOnPeerClosed: true' useResumeWriting: false)' StageActor.Ref); " is 120.
Long Statement,Akka.Streams.Implementation.IO,TcpStreamLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,Connecting,The length of the statement  "                        _connection.Tell(new Tcp.Register(StageActor.Ref' keepOpenOnPeerClosed: true' useResumeWriting: false)' StageActor.Ref); " is 120.
Long Statement,Akka.Streams.Implementation.IO,TcpStreamLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,Connected,The length of the statement  "                else if (msg is Tcp.CommandFailed) FailStage(new StreamTcpException($"Tcp command {((Tcp.CommandFailed)msg).Cmd} failed")); " is 123.
Long Statement,Akka.Streams.Implementation.IO,TcpStreamLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,Connected,The length of the statement  "                else if (msg is Tcp.ErrorClosed) FailStage(new StreamTcpException($"The connection closed with error: {((Tcp.ErrorClosed)msg).Cause}")); " is 136.
Long Statement,Akka.Streams.Implementation.IO,OutgoingConnectionStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,CreateLogicAndMaterializedValue,The length of the statement  "            var logic = new TcpConnectionStage.TcpStreamLogic(Shape' new TcpConnectionStage.Outbound(_tcpManager' new Tcp.Connect(_remoteAddress' _localAddress' _options' _connectionTimeout' pullMode: true)' localAddressPromise' _halfClose)' _remoteAddress); " is 246.
Long Statement,Akka.Streams.Implementation.IO,TcpIdleTimeout,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\TcpStages.cs,Create,The length of the statement  "            var fromNetTimeout = toNetTimeout.Reversed(); // now the bottom flow transforms the exception' the top one doesn't (since that one is "fromNet")  " is 144.
Long Statement,Akka.Streams.Implementation.StreamRef,SinkRefStageImpl<TIn>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,CreateLogicAndMaterializedValue,The length of the statement  "            return new LogicAndMaterializedValue<Task<ISourceRef<TIn>>>(new Logic(this' promise' inheritedAttributes)' promise.Task); " is 121.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,PreStart,The length of the statement  "                    ObserveAndValidateSender(initialPartnerRef' "Illegal initialPartnerRef! This would be a bug in the SinkRef usage or impl."); " is 124.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,InitialReceive,The length of the statement  "                            Log.Debug("Received cumulative demand [{0}]' consumable demand: [{1}]"' demand.SeqNr' _remoteCumulativeDemandReceived - _remoteCumulativeDemandConsumed); " is 153.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,OnTimer,The length of the statement  "                    var ex = new StreamRefSubscriptionTimeoutException($"[{StageActorName}] Remote side did not subscribe (materialize) handed out Sink reference [${_promise.Task.Result}]' " + " is 172.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,OnTimer,The length of the statement  "                    throw ex; // this will also log the exception' unlike failStage; this should fail rarely' but would be good to have it "loud" " is 125.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,OnUpstreamFailure,The length of the statement  "                    SetKeepGoing(true); // we will terminate once partner ref has Terminated (to avoid racing Terminated with completion message) " is 125.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,OnUpstreamFinish,The length of the statement  "                    SetKeepGoing(true); // we will terminate once partner ref has Terminated (to avoid racing Terminated with completion message) " is 125.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,InitialReceive,The length of the statement  "                        FailStage(new RemoteStreamRefActorTerminatedException($"Remote stream ({sender.Path}) failed' reason: {failure.Message}")); " is 123.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,InitialReceive,The length of the statement  "                            // the other (sending) side terminates by default once it gets a Terminated signal so no special handling is needed there. " is 122.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,InitialReceive,The length of the statement  "                                $"Received UNEXPECTED Terminated({terminated.ActorRef}) message! This actor was NOT our trusted remote partner' which was: {_partnerRef}. Tearing down.")); " is 155.
Long Statement,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,OnReceiveElement,The length of the statement  "                    throw new IllegalStateException($"Attempted to overflow buffer! Capacity: {_receiveBuffer.Capacity}' incoming element: {payload}' localRemainingRequested: {_localRemainingRequested}' localCumulativeDemand: {_localCumulativeDemand}"); " is 233.
Long Statement,Akka.Streams.Implementation.StreamRef,SourceRefStageImpl<TOut>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SourceRefImpl.cs,CreateLogicAndMaterializedValue,The length of the statement  "            return new LogicAndMaterializedValue<Task<ISinkRef<TOut>>>(new Logic(this' promise' inheritedAttributes)' promise.Task); " is 120.
Complex Conditional,Akka.Streams.Dsl,PartitionSinkLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,TryPull,The conditional expression  "_initialized && !IsClosed(_hub.In) && !HasBeenPulled(_hub.In) && !IsFull"  is complex.
Complex Conditional,Akka.Streams.Implementation,JsonObjectParser,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\JsonObjectParser.cs,SeekObject,The conditional expression  "_pos != -1 && (_pos < bufferSize && _pos < _maximumObjectLength) && !_completedObject"  is complex.
Virtual Method Call from Constructor,Akka.Streams.Implementation,ActorMaterializerImpl,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorMaterializerImpl.cs,ActorMaterializerImpl,The constructor "ActorMaterializerImpl" calls a virtual method "HasPath".
Virtual Method Call from Constructor,Akka.Streams.Implementation,InputBunch,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\FanIn.cs,InputBunch,The constructor "InputBunch" calls a virtual method "OnDepleted".
Virtual Method Call from Constructor,Akka.Streams.Implementation,InputBunch,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\FanIn.cs,InputBunch,The constructor "InputBunch" calls a virtual method "OnCompleteWhenNoInput".
Virtual Method Call from Constructor,Akka.Streams.Implementation,InputBunch,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\FanIn.cs,InputBunch,The constructor "InputBunch" calls a virtual method "OnError".
Virtual Method Call from Constructor,Akka.Streams.Implementation,Unzip<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\FanOut.cs,Unzip,The constructor "Unzip" calls a virtual method "DequeueInputElement".
Virtual Method Call from Constructor,Akka.Streams.Stage,SubSinkInlet<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Stage\GraphStage.cs,SubSinkInlet,The constructor "SubSinkInlet" calls a virtual method "OnPush".
Virtual Method Call from Constructor,Akka.Streams.Stage,SubSinkInlet<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Stage\GraphStage.cs,SubSinkInlet,The constructor "SubSinkInlet" calls a virtual method "OnUpstreamFinish".
Virtual Method Call from Constructor,Akka.Streams.Stage,SubSinkInlet<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Stage\GraphStage.cs,SubSinkInlet,The constructor "SubSinkInlet" calls a virtual method "OnUpstreamFailure".
Empty Catch Block,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,TryAbort,The method has an empty catch block.
Magic Number,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The following statement contains a magic number: return new ActorMaterializerSettings(                  initialInputBufferSize: config.GetInt("initial-input-buffer-size"' 4)'                  maxInputBufferSize: config.GetInt("max-input-buffer-size"' 16)'                  dispatcher: config.GetString("dispatcher"' string.Empty)'                  supervisionDecider: Deciders.StoppingDecider'                  subscriptionTimeoutSettings: StreamSubscriptionTimeoutSettings.Create(config)'                  isDebugLogging: config.GetBoolean("debug-logging")'                  outputBurstLimit: config.GetInt("output-burst-limit"' 1000)'                  isFuzzingMode: config.GetBoolean("debug.fuzzing-mode")'                  isAutoFusing: config.GetBoolean("auto-fusing"' true)'                  maxFixedBufferSize: config.GetInt("max-fixed-buffer-size"' 1000000000)'                  syncProcessingLimit: config.GetInt("sync-processing-limit"' 1000)'                  streamRefSettings: StreamRefSettings.Create(config.GetConfig("stream-ref") ?? Config.Empty));
Magic Number,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The following statement contains a magic number: return new ActorMaterializerSettings(                  initialInputBufferSize: config.GetInt("initial-input-buffer-size"' 4)'                  maxInputBufferSize: config.GetInt("max-input-buffer-size"' 16)'                  dispatcher: config.GetString("dispatcher"' string.Empty)'                  supervisionDecider: Deciders.StoppingDecider'                  subscriptionTimeoutSettings: StreamSubscriptionTimeoutSettings.Create(config)'                  isDebugLogging: config.GetBoolean("debug-logging")'                  outputBurstLimit: config.GetInt("output-burst-limit"' 1000)'                  isFuzzingMode: config.GetBoolean("debug.fuzzing-mode")'                  isAutoFusing: config.GetBoolean("auto-fusing"' true)'                  maxFixedBufferSize: config.GetInt("max-fixed-buffer-size"' 1000000000)'                  syncProcessingLimit: config.GetInt("sync-processing-limit"' 1000)'                  streamRefSettings: StreamRefSettings.Create(config.GetConfig("stream-ref") ?? Config.Empty));
Magic Number,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The following statement contains a magic number: return new ActorMaterializerSettings(                  initialInputBufferSize: config.GetInt("initial-input-buffer-size"' 4)'                  maxInputBufferSize: config.GetInt("max-input-buffer-size"' 16)'                  dispatcher: config.GetString("dispatcher"' string.Empty)'                  supervisionDecider: Deciders.StoppingDecider'                  subscriptionTimeoutSettings: StreamSubscriptionTimeoutSettings.Create(config)'                  isDebugLogging: config.GetBoolean("debug-logging")'                  outputBurstLimit: config.GetInt("output-burst-limit"' 1000)'                  isFuzzingMode: config.GetBoolean("debug.fuzzing-mode")'                  isAutoFusing: config.GetBoolean("auto-fusing"' true)'                  maxFixedBufferSize: config.GetInt("max-fixed-buffer-size"' 1000000000)'                  syncProcessingLimit: config.GetInt("sync-processing-limit"' 1000)'                  streamRefSettings: StreamRefSettings.Create(config.GetConfig("stream-ref") ?? Config.Empty));
Magic Number,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The following statement contains a magic number: return new ActorMaterializerSettings(                  initialInputBufferSize: config.GetInt("initial-input-buffer-size"' 4)'                  maxInputBufferSize: config.GetInt("max-input-buffer-size"' 16)'                  dispatcher: config.GetString("dispatcher"' string.Empty)'                  supervisionDecider: Deciders.StoppingDecider'                  subscriptionTimeoutSettings: StreamSubscriptionTimeoutSettings.Create(config)'                  isDebugLogging: config.GetBoolean("debug-logging")'                  outputBurstLimit: config.GetInt("output-burst-limit"' 1000)'                  isFuzzingMode: config.GetBoolean("debug.fuzzing-mode")'                  isAutoFusing: config.GetBoolean("auto-fusing"' true)'                  maxFixedBufferSize: config.GetInt("max-fixed-buffer-size"' 1000000000)'                  syncProcessingLimit: config.GetInt("sync-processing-limit"' 1000)'                  streamRefSettings: StreamRefSettings.Create(config.GetConfig("stream-ref") ?? Config.Empty));
Magic Number,Akka.Streams,ActorMaterializerSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The following statement contains a magic number: return new ActorMaterializerSettings(                  initialInputBufferSize: config.GetInt("initial-input-buffer-size"' 4)'                  maxInputBufferSize: config.GetInt("max-input-buffer-size"' 16)'                  dispatcher: config.GetString("dispatcher"' string.Empty)'                  supervisionDecider: Deciders.StoppingDecider'                  subscriptionTimeoutSettings: StreamSubscriptionTimeoutSettings.Create(config)'                  isDebugLogging: config.GetBoolean("debug-logging")'                  outputBurstLimit: config.GetInt("output-burst-limit"' 1000)'                  isFuzzingMode: config.GetBoolean("debug.fuzzing-mode")'                  isAutoFusing: config.GetBoolean("auto-fusing"' true)'                  maxFixedBufferSize: config.GetInt("max-fixed-buffer-size"' 1000000000)'                  syncProcessingLimit: config.GetInt("sync-processing-limit"' 1000)'                  streamRefSettings: StreamRefSettings.Create(config.GetConfig("stream-ref") ?? Config.Empty));
Magic Number,Akka.Streams,StreamSubscriptionTimeoutSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,Create,The following statement contains a magic number: return new StreamSubscriptionTimeoutSettings(                  mode: mode'                  timeout: c.GetTimeSpan("timeout"' TimeSpan.FromSeconds(5)));
Magic Number,Akka.Streams,StreamSubscriptionTimeoutSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\ActorMaterializer.cs,GetHashCode,The following statement contains a magic number: return ((int)Mode * 397) ^ Timeout.GetHashCode();
Magic Number,Akka.Streams,InputBuffer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Attributes.cs,GetHashCode,The following statement contains a magic number: return (Initial*397) ^ Max;
Magic Number,Akka.Streams,LogLevels,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Attributes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (int) OnFinish;
Magic Number,Akka.Streams,LogLevels,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Attributes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (int) OnFailure;
Magic Number,Akka.Streams,BidiShape<TIn1;TOut1;TIn2;TOut2>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Shape.cs,CopyFromPorts,The following statement contains a magic number: inlets.Length != 2
Magic Number,Akka.Streams,BidiShape<TIn1;TOut1;TIn2;TOut2>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Shape.cs,CopyFromPorts,The following statement contains a magic number: outlets.Length != 2
Magic Number,Akka.Streams.Actors,WatermarkRequestStrategy,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\RequestStrategies.cs,WatermarkRequestStrategy,The following statement contains a magic number: LowWatermark = Math.Max(1' highWatermark / 2);
Magic Number,Akka.Streams.Dsl,Framing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Framing.cs,LengthField,The following statement contains a magic number: fieldLength < 1 || fieldLength > 4
Magic Number,Akka.Streams.Dsl,Framing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Framing.cs,SimpleFramingProtocolDecoder,The following statement contains a magic number: return LengthField(4' maximumMessageLength + 4' 0' ByteOrder.BigEndian).Select(b => b.Slice(4));
Magic Number,Akka.Streams.Dsl,Framing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Framing.cs,SimpleFramingProtocolDecoder,The following statement contains a magic number: return LengthField(4' maximumMessageLength + 4' 0' ByteOrder.BigEndian).Select(b => b.Slice(4));
Magic Number,Akka.Streams.Dsl,Framing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Framing.cs,SimpleFramingProtocolDecoder,The following statement contains a magic number: return LengthField(4' maximumMessageLength + 4' 0' ByteOrder.BigEndian).Select(b => b.Slice(4));
Magic Number,Akka.Streams.Dsl,MergeHub<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,MergeHub,The following statement contains a magic number: DemandThreshold = perProducerBufferSize / 2 + perProducerBufferSize % 2;
Magic Number,Akka.Streams.Dsl,MergeHub<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,MergeHub,The following statement contains a magic number: DemandThreshold = perProducerBufferSize / 2 + perProducerBufferSize % 2;
Magic Number,Akka.Streams.Dsl,HubLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,HubLogic,The following statement contains a magic number: _consumerWheel = Enumerable.Repeat(0' stage._bufferSize * 2)                      .Select(_ => ImmutableList<Consumer>.Empty)                      .ToArray();
Magic Number,Akka.Streams.Dsl,BroadcastHub<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,BroadcastHub,The following statement contains a magic number: bufferSize > 4095
Magic Number,Akka.Streams.Dsl,BroadcastHub<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,BroadcastHub,The following statement contains a magic number: _wheelMask = bufferSize * 2 - 1;
Magic Number,Akka.Streams.Dsl,BroadcastHub<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,BroadcastHub,The following statement contains a magic number: _demandThreshold = bufferSize / 2 + bufferSize % 2;
Magic Number,Akka.Streams.Dsl,BroadcastHub<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,BroadcastHub,The following statement contains a magic number: _demandThreshold = bufferSize / 2 + bufferSize % 2;
Magic Number,Akka.Streams.Dsl,PartitionSinkLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,PartitionSinkLogic,The following statement contains a magic number: _demandThreshold = hub._bufferSize / 2 + hub._bufferSize % 2;
Magic Number,Akka.Streams.Dsl,PartitionSinkLogic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Hub.cs,PartitionSinkLogic,The following statement contains a magic number: _demandThreshold = hub._bufferSize / 2 + hub._bufferSize % 2;
Magic Number,Akka.Streams.Dsl,Source,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Source.cs,CombineMaterialized,The following statement contains a magic number: var secondPartiallyCombined = GraphDsl.Create(second' (b' secondShape) =>              {                  var c = b.Add(strategy(2));                  b.From(secondShape).To(c.In(1));                  return new FlowShape<T' TOut2>(c.In(0)' c.Out);              });
Magic Number,Akka.Streams.Dsl,StreamConverters,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\StreamConverters.cs,AsInputStream,The following statement contains a magic number: readTimeout = readTimeout ?? TimeSpan.FromSeconds(5);
Magic Number,Akka.Streams.Dsl,StreamRefSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\StreamRefs.cs,Create,The following statement contains a magic number: return new StreamRefSettings(                  bufferCapacity: config.GetInt("buffer-capacity"' 32)'                  demandRedeliveryInterval: config.GetTimeSpan("demand-redelivery-interval"' TimeSpan.FromSeconds(1))'                  subscriptionTimeout: config.GetTimeSpan("subscription-timeout"' TimeSpan.FromSeconds(30))'                  finalTerminationSignalDeadline: config.GetTimeSpan("final-termination-signal-deadline"' TimeSpan.FromSeconds(2)));
Magic Number,Akka.Streams.Dsl,StreamRefSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\StreamRefs.cs,Create,The following statement contains a magic number: return new StreamRefSettings(                  bufferCapacity: config.GetInt("buffer-capacity"' 32)'                  demandRedeliveryInterval: config.GetTimeSpan("demand-redelivery-interval"' TimeSpan.FromSeconds(1))'                  subscriptionTimeout: config.GetTimeSpan("subscription-timeout"' TimeSpan.FromSeconds(30))'                  finalTerminationSignalDeadline: config.GetTimeSpan("final-termination-signal-deadline"' TimeSpan.FromSeconds(2)));
Magic Number,Akka.Streams.Dsl,StreamRefSettings,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\StreamRefs.cs,Create,The following statement contains a magic number: return new StreamRefSettings(                  bufferCapacity: config.GetInt("buffer-capacity"' 32)'                  demandRedeliveryInterval: config.GetTimeSpan("demand-redelivery-interval"' TimeSpan.FromSeconds(1))'                  subscriptionTimeout: config.GetTimeSpan("subscription-timeout"' TimeSpan.FromSeconds(30))'                  finalTerminationSignalDeadline: config.GetTimeSpan("final-termination-signal-deadline"' TimeSpan.FromSeconds(2)));
Magic Number,Akka.Streams.Dsl.Internal,InternalFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Internal\InternalFlowOperations.cs,InterleaveGraph,The following statement contains a magic number: return GraphDsl.Create(graph' (builder' shape) =>              {                  // TODO Use Dsl.Interleave.Create                  var interleave = builder.Add(new Interleave<T1' T2>(2' segmentSize));                  var r = builder.From(shape);                  r.To(interleave.In(1));                  return new FlowShape<T1' T2>(interleave.In(0)' interleave.Out);              });
Magic Number,Akka.Streams.Dsl.Internal,InternalFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Internal\InternalFlowOperations.cs,MergeGraph,The following statement contains a magic number: return GraphDsl.Create(other' (builder' shape) =>              {                  var merge = builder.Add(new Merge<TIn' TOut>(2' eagerComplete));                  var r = builder.From(shape);                  r.To(merge.In(1));                  return new FlowShape<TIn' TOut>(merge.In(0)' merge.Out);              });
Magic Number,Akka.Streams.Dsl.Internal,InternalFlowOperations,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Dsl\Internal\InternalFlowOperations.cs,AlsoToGraph,The following statement contains a magic number: return GraphDsl.Create(that' (b' r) =>              {                  var broadcast = b.Add(new Broadcast<TOut>(2));                  b.From(broadcast.Out(1)).To(r);                  return new FlowShape<TOut' TOut>(broadcast.In' broadcast.Out(0));              });
Magic Number,Akka.Streams.Implementation,ActorRefBackpressureSinkStage<TIn>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorRefBackpressureSinkStage.cs,CreateLogic,The following statement contains a magic number: var maxBuffer = inheritedAttributes.GetAttribute(new Attributes.InputBuffer(16' 16)).Max;
Magic Number,Akka.Streams.Implementation,ActorRefBackpressureSinkStage<TIn>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorRefBackpressureSinkStage.cs,CreateLogic,The following statement contains a magic number: var maxBuffer = inheritedAttributes.GetAttribute(new Attributes.InputBuffer(16' 16)).Max;
Magic Number,Akka.Streams.Implementation,Buffer,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Buffers.cs,Create,The following statement contains a magic number: return Create<T>(size' m?.Settings.MaxFixedBufferSize ?? 1000000000);
Magic Number,Akka.Streams.Implementation,ResizableMultiReaderRingBuffer<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ResizableMultiReaderRingBuffer.cs,ResizableMultiReaderRingBuffer,The following statement contains a magic number: (maxSize & (maxSize - 1)) != 0 || maxSize <= 0 || maxSize > int.MaxValue / 2
Magic Number,Akka.Streams.Implementation,QueueSink<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Sinks.cs,CreateLogicAndMaterializedValue,The following statement contains a magic number: var maxBuffer = inheritedAttributes.GetAttribute(new Attributes.InputBuffer(16' 16)).Max;
Magic Number,Akka.Streams.Implementation,QueueSink<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Sinks.cs,CreateLogicAndMaterializedValue,The following statement contains a magic number: var maxBuffer = inheritedAttributes.GetAttribute(new Attributes.InputBuffer(16' 16)).Max;
Magic Number,Akka.Streams.Implementation,StreamLayout,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,Validate,The following statement contains a magic number: var indent = string.Empty.PadLeft(level*2);
Magic Number,Akka.Streams.Implementation,MaterializerSession,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,MaterializeModule,The following statement contains a magic number: var resolved = ResolveMaterialized(module.MaterializedValueComputation' materializedValues' 2);
Magic Number,Akka.Streams.Implementation,MaterializerSession,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamLayout.cs,MaterializeModule,The following statement contains a magic number: ResolveMaterialized(node' materializedValues' 4);
Magic Number,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,GraphInterpreterShell,The following statement contains a magic number: _abortLimit = _shellEventLimit * 2;
Magic Number,Akka.Streams.Implementation.Fusing,BatchingActorInputBoundary,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,BatchingActorInputBoundary,The following statement contains a magic number: _requestBatchSize = Math.Max(1' _inputBuffer.Length/2);
Magic Number,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,FuseGroup,The following statement contains a magic number: var inlets = ImmutableArray.CreateBuilder<Inlet>(2);
Magic Number,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,FuseGroup,The following statement contains a magic number: var outlets = ImmutableArray.CreateBuilder<Outlet>(2);
Magic Number,Akka.Streams.Implementation.Fusing,Fusing,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\Fusing.cs,Descend,The following statement contains a magic number: Log(indent'                                  $"dissolving graph module {module.ToString().Replace("\n"' $"\n{string.Empty.PadLeft(indent*2)}")}");
Magic Number,Akka.Streams.Implementation.Fusing,GraphInterpreter,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphInterpreter.cs,GraphInterpreter,The following statement contains a magic number: _eventQueue = new Connection[1 << (32 - (assembly.ConnectionCount - 1).NumberOfLeadingZeros())];
Magic Number,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,OnTimer,The following statement contains a magic number: waitTime > 10
Magic Number,Akka.Streams.Implementation.IO,InputStreamSinkStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\InputStreamSinkStage.cs,CreateLogicAndMaterializedValue,The following statement contains a magic number: var maxBuffer = inheritedAttributes.GetAttribute(new Attributes.InputBuffer(16' 16)).Max;
Magic Number,Akka.Streams.Implementation.IO,InputStreamSinkStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\InputStreamSinkStage.cs,CreateLogicAndMaterializedValue,The following statement contains a magic number: var maxBuffer = inheritedAttributes.GetAttribute(new Attributes.InputBuffer(16' 16)).Max;
Magic Number,Akka.Streams.Implementation.IO,InputStreamSinkStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\InputStreamSinkStage.cs,CreateLogicAndMaterializedValue,The following statement contains a magic number: _dataQueue = new BlockingCollection<IStreamToAdapterMessage>(maxBuffer + 2);
Magic Number,Akka.Streams.Implementation.IO,OutputStreamSourceStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\OutputStreamSourceStage.cs,CreateLogicAndMaterializedValue,The following statement contains a magic number: var maxBuffer = inheritedAttributes.GetAttribute(new Attributes.InputBuffer(16' 16)).Max;
Magic Number,Akka.Streams.Implementation.IO,OutputStreamSourceStage,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\IO\OutputStreamSourceStage.cs,CreateLogicAndMaterializedValue,The following statement contains a magic number: var maxBuffer = inheritedAttributes.GetAttribute(new Attributes.InputBuffer(16' 16)).Max;
Magic Number,Akka.Streams.Serialization.Proto.Msg,EventType,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Streams.Serialization.Proto.Msg,EventType,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              TypeName = input.ReadString();                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,SinkRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Streams.Serialization.Proto.Msg,SinkRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Streams.Serialization.Proto.Msg,SinkRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              if (targetRef_ == null)                              {                                  targetRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();                              }                              input.ReadMessage(targetRef_);                              break;                          }                      case 18:                          {                              if (eventType_ == null)                              {                                  eventType_ = new global::Akka.Streams.Serialization.Proto.Msg.EventType();                              }                              input.ReadMessage(eventType_);                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,SinkRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              if (targetRef_ == null)                              {                                  targetRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();                              }                              input.ReadMessage(targetRef_);                              break;                          }                      case 18:                          {                              if (eventType_ == null)                              {                                  eventType_ = new global::Akka.Streams.Serialization.Proto.Msg.EventType();                              }                              input.ReadMessage(eventType_);                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,SourceRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Streams.Serialization.Proto.Msg,SourceRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Streams.Serialization.Proto.Msg,SourceRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              if (originRef_ == null)                              {                                  originRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();                              }                              input.ReadMessage(originRef_);                              break;                          }                      case 18:                          {                              if (eventType_ == null)                              {                                  eventType_ = new global::Akka.Streams.Serialization.Proto.Msg.EventType();                              }                              input.ReadMessage(eventType_);                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,SourceRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              if (originRef_ == null)                              {                                  originRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();                              }                              input.ReadMessage(originRef_);                              break;                          }                      case 18:                          {                              if (eventType_ == null)                              {                                  eventType_ = new global::Akka.Streams.Serialization.Proto.Msg.EventType();                              }                              input.ReadMessage(eventType_);                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,ActorRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Streams.Serialization.Proto.Msg,ActorRef,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              Path = input.ReadString();                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,Payload,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Streams.Serialization.Proto.Msg,Payload,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Streams.Serialization.Proto.Msg,Payload,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Streams.Serialization.Proto.Msg,Payload,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              EnclosedMessage = input.ReadBytes();                              break;                          }                      case 16:                          {                              SerializerId = input.ReadInt32();                              break;                          }                      case 26:                          {                              MessageManifest = input.ReadBytes();                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,Payload,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              EnclosedMessage = input.ReadBytes();                              break;                          }                      case 16:                          {                              SerializerId = input.ReadInt32();                              break;                          }                      case 26:                          {                              MessageManifest = input.ReadBytes();                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,Payload,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              EnclosedMessage = input.ReadBytes();                              break;                          }                      case 16:                          {                              SerializerId = input.ReadInt32();                              break;                          }                      case 26:                          {                              MessageManifest = input.ReadBytes();                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,OnSubscribeHandshake,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Streams.Serialization.Proto.Msg,OnSubscribeHandshake,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              if (targetRef_ == null)                              {                                  targetRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();                              }                              input.ReadMessage(targetRef_);                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,CumulativeDemand,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Streams.Serialization.Proto.Msg,CumulativeDemand,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 8:                          {                              SeqNr = input.ReadInt64();                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,SequencedOnNext,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Streams.Serialization.Proto.Msg,SequencedOnNext,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Streams.Serialization.Proto.Msg,SequencedOnNext,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 8:                          {                              SeqNr = input.ReadInt64();                              break;                          }                      case 18:                          {                              if (payload_ == null)                              {                                  payload_ = new global::Akka.Streams.Serialization.Proto.Msg.Payload();                              }                              input.ReadMessage(payload_);                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,SequencedOnNext,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 8:                          {                              SeqNr = input.ReadInt64();                              break;                          }                      case 18:                          {                              if (payload_ == null)                              {                                  payload_ = new global::Akka.Streams.Serialization.Proto.Msg.Payload();                              }                              input.ReadMessage(payload_);                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,RemoteStreamFailure,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Streams.Serialization.Proto.Msg,RemoteStreamFailure,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 10:                          {                              Cause = input.ReadBytes();                              break;                          }                  }
Magic Number,Akka.Streams.Serialization.Proto.Msg,RemoteStreamCompleted,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Streams.Serialization.Proto.Msg,RemoteStreamCompleted,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Serialization\Proto\StreamRefMessages.g.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          input.SkipLastField();                          break;                      case 8:                          {                              SeqNr = input.ReadInt64();                              break;                          }                  }
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: x |= (x >> 2);
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: x |= (x >> 4);
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: x |= (x >> 8);
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: x |= (x >> 16);
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: x = ((x >> 2) & 0x33333333) + (x & 0x33333333);
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: x = ((x >> 4) + x) & 0x0f0f0f0f;
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: x += x >> 8;
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: x += x >> 16;
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfLeadingZeros,The following statement contains a magic number: return sizeof (int)*8 - x;
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfTrailingZeros,The following statement contains a magic number: return 32;
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfTrailingZeros,The following statement contains a magic number: x = (((x >> 2) & 0x33333333) + (x & 0x33333333));
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfTrailingZeros,The following statement contains a magic number: x = (((x >> 4) + x) & 0x0f0f0f0f);
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfTrailingZeros,The following statement contains a magic number: x += (x >> 8);
Magic Number,Akka.Streams.Util,Int32Extensions,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Util\Int32Extensions.cs,NumberOfTrailingZeros,The following statement contains a magic number: x += (x >> 16);
Missing Default,Akka.Streams.Actors,ActorPublisher<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorPublisher.cs,OnNext,The following switch statement is missing a default case: switch (_lifecycleState)              {                  case LifecycleState.Active:                  case LifecycleState.PreSubscriber:                      if (_demand > 0)                      {                          _demand--;                          ReactiveStreamsCompliance.TryOnNext(_subscriber' element);                      }                      else                      {                          throw new IllegalStateException(                              "OnNext is not allowed when the stream has not requested elements' total demand was 0");                      }                      break;                  case LifecycleState.ErrorEmitted:                      throw new IllegalStateException("OnNext must not be called after OnError");                  case LifecycleState.Completed:                  case LifecycleState.CompleteThenStop:                      throw new IllegalStateException("OnNext must not be called after OnComplete");                  case LifecycleState.Canceled: break;              }
Missing Default,Akka.Streams.Actors,ActorPublisher<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorPublisher.cs,OnComplete,The following switch statement is missing a default case: switch (_lifecycleState)              {                  case LifecycleState.Active:                  case LifecycleState.PreSubscriber:                      _lifecycleState = LifecycleState.Completed;                      _onError = null;                      if (_subscriber != null)                      {                          // otherwise onComplete will be called when the subscription arrives                          try                          {                              ReactiveStreamsCompliance.TryOnComplete(_subscriber);                          }                          finally                          {                              _subscriber = null;                          }                      }                      break;                  case LifecycleState.ErrorEmitted: throw new IllegalStateException("OnComplete must not be called after OnError");                  case LifecycleState.Completed:                  case LifecycleState.CompleteThenStop: throw new IllegalStateException("OnComplete must only be called once");                  case LifecycleState.Canceled: break;              }
Missing Default,Akka.Streams.Actors,ActorPublisher<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorPublisher.cs,OnError,The following switch statement is missing a default case: switch (_lifecycleState)              {                  case LifecycleState.Active:                  case LifecycleState.PreSubscriber:                      _lifecycleState = LifecycleState.ErrorEmitted;                      _onError = new OnErrorBlock(cause' false);                      if (_subscriber != null)                      {                          // otherwise onError will be called when the subscription arrives                          try                          {                              ReactiveStreamsCompliance.TryOnError(_subscriber' cause);                          }                          finally                          {                              _subscriber = null;                          }                      }                      break;                  case LifecycleState.ErrorEmitted: throw new IllegalStateException("OnError must only be called once");                  case LifecycleState.Completed:                  case LifecycleState.CompleteThenStop: throw new IllegalStateException("OnError must not be called after OnComplete");                  case LifecycleState.Canceled: break;              }
Missing Default,Akka.Streams.Actors,ActorPublisher<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Actors\ActorPublisher.cs,AroundReceive,The following switch statement is missing a default case: switch (_lifecycleState)                  {                      case LifecycleState.PreSubscriber:                          _scheduledSubscriptionTimeout.Cancel();                          _subscriber = subscriber;                          _lifecycleState = LifecycleState.Active;                          ReactiveStreamsCompliance.TryOnSubscribe(subscriber' new ActorPublisherSubscription(Self));                          break;                      case LifecycleState.ErrorEmitted:                          if (_onError.Stop) Context.Stop(Self);                          ReactiveStreamsCompliance.TryOnSubscribe(subscriber' CancelledSubscription.Instance);                          ReactiveStreamsCompliance.TryOnError(subscriber' _onError.Cause);                          break;                      case LifecycleState.Completed:                          ReactiveStreamsCompliance.TryOnSubscribe(subscriber' CancelledSubscription.Instance);                          ReactiveStreamsCompliance.TryOnComplete(subscriber);                          break;                      case LifecycleState.CompleteThenStop:                          Context.Stop(Self);                          ReactiveStreamsCompliance.TryOnSubscribe(subscriber' CancelledSubscription.Instance);                          ReactiveStreamsCompliance.TryOnComplete(subscriber);                          break;                      case LifecycleState.Active:                      case LifecycleState.Canceled:                          if(_subscriber == subscriber)                              ReactiveStreamsCompliance.RejectDuplicateSubscriber(subscriber);                          else                              ReactiveStreamsCompliance.RejectAdditionalSubscriber(subscriber' "ActorPublisher");                          break;                  }
Missing Default,Akka.Streams.Dsl,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\CodeGen\Dsl\ZipWith.cs,OnCommand,The following switch statement is missing a default case: switch (command)                      {                          case HubCompleted c when c.Failure != null:                              FailStage(c.Failure);                              break;                          case HubCompleted _:                              CompleteStage();                              break;                          case Wakeup _:                              if (IsAvailable(_source._out))                                  OnPull();                              break;                          case Initialize _:                              if (IsAvailable(_source._out) && _hubCallback != null)                                  OnPull();                              break;                      }
Missing Default,Akka.Streams.Implementation,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorRefBackpressureSinkStage.cs,BufferElement,The following switch statement is missing a default case: switch (_stage._overflowStrategy)                      {                          case OverflowStrategy.DropHead:                              _buffer.DropHead();                              EnqueueAndSuccess(offer);                              break;                          case OverflowStrategy.DropTail:                              _buffer.DropTail();                              EnqueueAndSuccess(offer);                              break;                          case OverflowStrategy.DropBuffer:                              _buffer.Clear();                              EnqueueAndSuccess(offer);                              break;                          case OverflowStrategy.DropNew:                              offer.CompletionSource.NonBlockingTrySetResult(QueueOfferResult.Dropped.Instance);                              break;                          case OverflowStrategy.Fail:                              var bufferOverflowException =                                  new BufferOverflowException($"Buffer overflow (max capacity was: {_stage._maxBuffer})!");                              offer.CompletionSource.NonBlockingTrySetResult(new QueueOfferResult.Failure(bufferOverflowException));                              _completion.SetException(bufferOverflowException);                              FailStage(bufferOverflowException);                              break;                          case OverflowStrategy.Backpressure:                              if (_pendingOffer != null)                                  offer.CompletionSource.NonBlockingTrySetException(                                      new IllegalStateException(                                          "You have to wait for previous offer to be resolved to send another request."));                              else                                  _pendingOffer = offer;                              break;                      }
Missing Default,Akka.Streams.Implementation,ActorRefSourceActor<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\ActorRefSourceActor.cs,ReceiveElement,The following switch statement is missing a default case: switch (OverflowStrategy)                      {                          case OverflowStrategy.DropHead:                              Log.Debug("Dropping the head element because buffer is full and overflowStrategy is: [DropHead]");                              Buffer.DropHead();                              Buffer.Enqueue(message);                              break;                          case OverflowStrategy.DropTail:                              Log.Debug("Dropping the tail element because buffer is full and overflowStrategy is: [DropTail]");                              Buffer.DropTail();                              Buffer.Enqueue(message);                              break;                          case OverflowStrategy.DropBuffer:                              Log.Debug("Dropping all the buffered elements because buffer is full and overflowStrategy is: [DropBuffer]");                              Buffer.Clear();                              Buffer.Enqueue(message);                              break;                          case OverflowStrategy.DropNew:                              // do not enqueue new element if the buffer is full                              Log.Debug("Dropping the new element because buffer is full and overflowStrategy is: [DropNew]");                              break;                          case OverflowStrategy.Fail:                              Log.Error("Failing because buffer is full and overflowStrategy is: [Fail]");                              OnErrorThenStop(new BufferOverflowException($"Buffer overflow' max capacity was ({BufferSize})"));                              break;                          case OverflowStrategy.Backpressure:                              // there is a precondition check in Source.actorRefSource factory method                              Log.Debug("Backpressuring because buffer is full and overflowStrategy is: [Backpressure]");                              break;                      }
Missing Default,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,Receive,The following switch statement is missing a default case: switch (e)                  {                      case ActorGraphInterpreter.ExposedPublisher exposedPublisher:                          _outputs[exposedPublisher.Id].ExposedPublisher(exposedPublisher.Publisher);                          _publishersPending--;                          if (CanShutdown)                              _interpreterCompleted = true;                          break;                        case ActorGraphInterpreter.OnSubscribe onSubscribe:                          ReactiveStreamsCompliance.TryCancel(onSubscribe.Subscription);                          _subscribersPending--;                          if (CanShutdown)                              _interpreterCompleted = true;                          break;                        case ActorGraphInterpreter.Abort _:                          TryAbort(new TimeoutException(                              $"Streaming actor has been already stopped processing (normally)' but not all of its inputs or outputs have been subscribed in [{_settings.SubscriptionTimeoutSettings.Timeout}]. Aborting actor now."));                          break;                  }
Missing Default,Akka.Streams.Implementation.Fusing,GraphInterpreterShell,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\ActorGraphInterpreter.cs,Receive,The following switch statement is missing a default case: switch (e)              {                  case ActorGraphInterpreter.OnNext onNext:                      if (IsDebug) Console.WriteLine($"{Interpreter.Name}  OnNext {onNext.Event} id={onNext.Id}");                      _inputs[onNext.Id].OnNext(onNext.Event);                      return RunBatch(eventLimit);                    case ActorGraphInterpreter.RequestMore requestMore:                      if (IsDebug) Console.WriteLine($"{Interpreter.Name}  Request {requestMore.Demand} id={requestMore.Id}");                      _outputs[requestMore.Id].RequestMore(requestMore.Demand);                      return RunBatch(eventLimit);                    case ActorGraphInterpreter.Resume _:                      if (IsDebug) Console.WriteLine($"{Interpreter.Name}  Resume");                      if (Interpreter.IsSuspended)                          return RunBatch(eventLimit);                      return eventLimit;                    case ActorGraphInterpreter.AsyncInput asyncInput:                      Interpreter.RunAsyncInput(asyncInput.Logic' asyncInput.Event' asyncInput.Handler);                      if (eventLimit == 1 && _interpreter.IsSuspended)                      {                          SendResume(true);                          return 0;                      }                      return RunBatch(eventLimit - 1);                    case ActorGraphInterpreter.OnError onError:                      if (IsDebug) Console.WriteLine($"{Interpreter.Name}  OnError id={onError.Id}");                      _inputs[onError.Id].OnError(onError.Cause);                      return RunBatch(eventLimit);                    case ActorGraphInterpreter.OnComplete onComplete:                      if (IsDebug) Console.WriteLine($"{Interpreter.Name}  OnComplete id={onComplete.Id}");                      _inputs[onComplete.Id].OnComplete();                      return RunBatch(eventLimit);                    case ActorGraphInterpreter.OnSubscribe onSubscribe:                      if (IsDebug) Console.WriteLine($"{Interpreter.Name}  OnSubscribe id={onSubscribe.Id}");                      _subscribersPending--;                      _inputs[onSubscribe.Id].OnSubscribe(onSubscribe.Subscription);                      return RunBatch(eventLimit);                    case ActorGraphInterpreter.Cancel cancel:                      if (IsDebug) Console.WriteLine($"{Interpreter.Name}  Cancel id={cancel.Id}");                      _outputs[cancel.Id].Cancel();                      return RunBatch(eventLimit);                    case ActorGraphInterpreter.SubscribePending subscribePending:                      _outputs[subscribePending.Id].SubscribePending();                      return eventLimit;                    case ActorGraphInterpreter.ExposedPublisher exposedPublisher:                      _publishersPending--;                      _outputs[exposedPublisher.Id].ExposedPublisher(exposedPublisher.Publisher);                      return eventLimit;              }
Missing Default,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,DoSupervision,The following switch statement is missing a default case: switch (_decider(ex))                  {                      case Directive.Stop:                          FailStage(ex);                          break;                      case Directive.Resume:                          SafePull();                          break;                      case Directive.Restart:                          OnRestart();                          SafePull();                          break;                  }
Missing Default,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,OnPush,The following switch statement is missing a default case: switch (_decider(ex))                      {                          case Directive.Stop:                              FailStage(ex);                              break;                          case Directive.Restart:                              OnRestart();                              break;                          case Directive.Resume:                              break;                      }
Missing Default,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,OnPush,The following switch statement is missing a default case: switch (_decider(ex))                          {                              case Directive.Stop:                                  FailStage(ex);                                  break;                              case Directive.Restart:                                  RestartState();                                  break;                              case Directive.Resume:                                  break;                          }
Missing Default,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,OnPush,The following switch statement is missing a default case: switch (_decider(ex))                          {                              case Directive.Stop:                                  FailStage(ex);                                  break;                              case Directive.Restart:                                  RestartState();                                  break;                              case Directive.Resume:                                  break;                          }
Missing Default,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,OnPull,The following switch statement is missing a default case: switch (_decider(ex))                              {                                  case Directive.Stop:                                      FailStage(ex);                                      break;                                  case Directive.Restart:                                      RestartState();                                      if (!HasBeenPulled(_shape.Inlet)) Pull(_shape.Inlet);                                      break;                                  case Directive.Resume:                                      break;                              }
Missing Default,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,Flush,The following switch statement is missing a default case: switch (_decider(ex))                          {                              case Directive.Stop:                                  FailStage(ex);                                  break;                              case Directive.Restart:                                  RestartState();                                  break;                              case Directive.Resume:                                  _pending = Option<TIn>.None;                                  break;                          }
Missing Default,Akka.Streams.Implementation.Fusing,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\GraphStages.cs,SetCallback,The following switch statement is missing a default case: switch (status.Value)                  {                      case SubSink.Uninitialized _:                          if(!status.CompareAndSet(SubSink.Uninitialized.Instance' /* Materialized */ GetAsyncCallback(callback)))                              SetCallback(callback);                          break;                      case SubSink.CommandScheduledBeforeMaterialization command:                          if (status.CompareAndSet(command' /* Materialized */ GetAsyncCallback(callback)))                          {                              // between those two lines a new command might have been scheduled' but that will go through the                              // async interface' so that the ordering is still kept                              callback(command.Command);                          }                          else                              SetCallback(callback);                          break;                      case Action<SubSink.ICommand> _: /* Materialized */                          FailStage(new IllegalStateException("Substream Source cannot be materialized more than once"));                          break;                  }
Missing Default,Akka.Streams.Implementation.Fusing,SubSink<T>,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\Fusing\StreamOfStreams.cs,DispatchCommand,The following switch statement is missing a default case: switch (_status.Value)              {                  case Action<SubSink.ICommand> callback: callback(newState.Command); break;                  case SubSink.Uninitialized _:                      if(!_status.CompareAndSet(SubSink.Uninitialized.Instance' newState))                          DispatchCommand(newState); // changed to materialized in the meantime                      break;                  case SubSink.RequestOneScheduledBeforeMaterialization _ when newState == SubSink.CancelScheduledBeforeMaterialization.Instance:                      // cancellation is allowed to replace pull                      if(!_status.CompareAndSet(SubSink.RequestOneScheduledBeforeMaterialization.Instance' newState))                          DispatchCommand(SubSink.RequestOneScheduledBeforeMaterialization.Instance);                      break;                  case SubSink.CommandScheduledBeforeMaterialization command:                      throw new IllegalStateException($"{newState.Command} on subsink is illegal when {command.Command} is still pending");              }
Missing Default,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,InitialReceive,The following switch statement is missing a default case: switch (message)                  {                      case Terminated terminated when Equals(terminated.ActorRef' PartnerRef):                          if (_failedWithAwaitingPartnerTermination == null)                          {                              // other side has terminated (in response to a completion message) so we can safely terminate                              CompleteStage();                          }                          else                          {                              FailStage(_failedWithAwaitingPartnerTermination);                          }                          break;                      case CumulativeDemand demand:                          // the other side may attempt to "double subscribe"' which we want to fail eagerly since we're 1:1 pairings                          ObserveAndValidateSender(sender' "Illegal sender for CumulativeDemand");                          if (_remoteCumulativeDemandReceived < demand.SeqNr)                          {                              _remoteCumulativeDemandReceived = demand.SeqNr;                              Log.Debug("Received cumulative demand [{0}]' consumable demand: [{1}]"' demand.SeqNr' _remoteCumulativeDemandReceived - _remoteCumulativeDemandConsumed);                          }                          TryPull();                          break;                  }
Missing Default,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,ObserveAndValidateSender,The following switch statement is missing a default case: switch (_completedBeforeRemoteConnected)                      {                          case Status.Failure failure:                              Log.Warning("Stream already terminated with exception before remote side materialized' failing now.");                              partner.Tell(new RemoteStreamFailure(failure.Cause.ToString())' Self);                              _failedWithAwaitingPartnerTermination = failure.Cause;                              SetKeepGoing(true);                              break;                          case Status.Success _:                              Log.Warning("Stream already completed before remote side materialized' failing now.");                              partner.Tell(new RemoteStreamCompleted(_remoteCumulativeDemandConsumed)' Self);                              _failedWithAwaitingPartnerTermination = null;                              SetKeepGoing(true);                              break;                          case null:                              if (!Equals(partner' PartnerRef))                              {                                  var ex = new InvalidPartnerActorException(partner' PartnerRef' failureMessage);                                  partner.Tell(new RemoteStreamFailure(ex.ToString())' Self);                                  throw ex;                              }                              break;                      }
Missing Default,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,OnTimer,The following switch statement is missing a default case: switch (timerKey)                  {                      case SubscriptionTimeoutKey:                          var ex = new StreamRefSubscriptionTimeoutException(                              // we know the future has been competed by now' since it is in preStart                              $"[{StageActorName}] Remote side did not subscribe (materialize) handed out Sink reference [{_promise.Task.Result}]'" +                              $"within subscription timeout: {SubscriptionTimeout.Timeout}!");                          throw ex;                      case DemandRedeliveryTimerKey:                          Log.Debug("[{0}] Scheduled re-delivery of demand until [{1}]"' StageActorName' _localCumulativeDemand);                          PartnerRef.Tell(new CumulativeDemand(_localCumulativeDemand)' Self);                          ScheduleDemandRedelivery();                          break;                      case TerminationDeadlineTimerKey:                          FailStage(new RemoteStreamRefActorTerminatedException(                              $"Remote partner [{PartnerRef}] has terminated unexpectedly and no clean completion/failure message was received " +                              $"(possible reasons: network partition or subscription timeout triggered termination of partner). Tearing down."));                          break;                  }
Missing Default,Akka.Streams.Implementation.StreamRef,Logic,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Streams\Implementation\StreamRef\SinkRefImpl.cs,InitialReceive,The following switch statement is missing a default case: switch (message)                  {                      case OnSubscribeHandshake handshake:                          CancelTimer(SubscriptionTimeoutKey);                          ObserveAndValidateSender(sender' "Illegal sender in OnSubscribeHandshake");                          Log.Debug("[{0}] Received handshake {1} from {2}"' StageActorName' message' sender);                          TriggerCumulativeDemand();                          break;                      case SequencedOnNext onNext:                          ObserveAndValidateSender(sender' "Illegal sender in SequencedOnNext");                          ObserveAndValidateSequenceNr(onNext.SeqNr' "Illegal sequence nr in SequencedOnNext");                          Log.Debug("[{0}] Received seq {1} from {2}"' StageActorName' message' sender);                          OnReceiveElement(onNext.Payload);                          TriggerCumulativeDemand();                          break;                      case RemoteStreamCompleted completed:                          ObserveAndValidateSender(sender' "Illegal sender in RemoteStreamCompleted");                          ObserveAndValidateSequenceNr(completed.SeqNr' "Illegal sequence nr in RemoteStreamCompleted");                          Log.Debug("[{0}] The remote stream has completed' completing as well..."' StageActorName);                          _stageActor.Unwatch(sender);                          _completed = true;                          TryPush();                          break;                      case RemoteStreamFailure failure:                          ObserveAndValidateSender(sender' "Illegal sender in RemoteStreamFailure");                          Log.Warning("[{0}] The remote stream has failed' failing (reason: {1})"' StageActorName' failure.Message);                          _stageActor.Unwatch(sender);                          FailStage(new RemoteStreamRefActorTerminatedException($"Remote stream ({sender.Path}) failed' reason: {failure.Message}"));                          break;                      case Terminated terminated:                          if (Equals(_partnerRef' terminated.ActorRef))                              // we need to start a delayed shutdown in case we were network partitioned and the final signal complete/fail                              // will never reach us; so after the given timeout we need to forcefully terminate this side of the stream ref                              // the other (sending) side terminates by default once it gets a Terminated signal so no special handling is needed there.                              ScheduleOnce(TerminationDeadlineTimerKey' Settings.FinalTerminationSignalDeadline);                          else                              FailStage(new RemoteStreamRefActorTerminatedException(                                  $"Received UNEXPECTED Terminated({terminated.ActorRef}) message! This actor was NOT our trusted remote partner' which was: {_partnerRef}. Tearing down."));                            break;                  }
