Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FaultTolerance,CounterService,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,Cyclomatic complexity of the method is 8
Long Statement,FaultTolerance,Worker,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The length of the statement  "		counterService.Ask<CurrentCount> ("GetCurrentCount"' TimeSpan.FromSeconds (5)).ContinueWith (t => new Progress (100.0 * t.Result.Count / totalCount)).PipeTo (progressListener); " is 176.
Magic Number,FaultTolerance,Listener,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,PreRestart,The following statement contains a magic number: Context.SetReceiveTimeout (TimeSpan.FromSeconds (15));  
Magic Number,FaultTolerance,Listener,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (message is Progress) {  	var progress = (Progress)message;  	log.Info ("Current progress: {0:N}%"' progress.Percent);  	if (progress.Percent >= 100) {  		log.Info ("That's all' shutting down");  		Context.System.Terminate ();  	}  } else if (message == ReceiveTimeout.Instance) {  	// No progress within 15 seconds' ServiceUnavailable  	log.Error ("Shutting down due to unavailable service");  	Context.System.Terminate ();  } else {  	Unhandled (message);  }  
Magic Number,FaultTolerance,Listener,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (progress.Percent >= 100) {  	log.Info ("That's all' shutting down");  	Context.System.Terminate ();  }  
Magic Number,FaultTolerance,Worker,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (message.Equals ("Start") && progressListener == null) {  	progressListener = Sender;  	Context.System.Scheduler.ScheduleTellRepeatedlyCancelable (TimeSpan.Zero' TimeSpan.FromSeconds (1)' Self' "Do"' Self);  } else if (message.Equals ("Do")) {  	counterService.Tell (new Increment (1));  	counterService.Tell (new Increment (1));  	counterService.Tell (new Increment (1));  	// Send current progress to the initial sender  	counterService.Ask<CurrentCount> ("GetCurrentCount"' TimeSpan.FromSeconds (5)).ContinueWith (t => new Progress (100.0 * t.Result.Count / totalCount)).PipeTo (progressListener);  } else {  	Unhandled (message);  }  
Magic Number,FaultTolerance,Worker,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (message.Equals ("Start") && progressListener == null) {  	progressListener = Sender;  	Context.System.Scheduler.ScheduleTellRepeatedlyCancelable (TimeSpan.Zero' TimeSpan.FromSeconds (1)' Self' "Do"' Self);  } else if (message.Equals ("Do")) {  	counterService.Tell (new Increment (1));  	counterService.Tell (new Increment (1));  	counterService.Tell (new Increment (1));  	// Send current progress to the initial sender  	counterService.Ask<CurrentCount> ("GetCurrentCount"' TimeSpan.FromSeconds (5)).ContinueWith (t => new Progress (100.0 * t.Result.Count / totalCount)).PipeTo (progressListener);  } else {  	Unhandled (message);  }  
Magic Number,FaultTolerance,Worker,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (message.Equals ("Do")) {  	counterService.Tell (new Increment (1));  	counterService.Tell (new Increment (1));  	counterService.Tell (new Increment (1));  	// Send current progress to the initial sender  	counterService.Ask<CurrentCount> ("GetCurrentCount"' TimeSpan.FromSeconds (5)).ContinueWith (t => new Progress (100.0 * t.Result.Count / totalCount)).PipeTo (progressListener);  } else {  	Unhandled (message);  }  
Magic Number,FaultTolerance,Worker,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (message.Equals ("Do")) {  	counterService.Tell (new Increment (1));  	counterService.Tell (new Increment (1));  	counterService.Tell (new Increment (1));  	// Send current progress to the initial sender  	counterService.Ask<CurrentCount> ("GetCurrentCount"' TimeSpan.FromSeconds (5)).ContinueWith (t => new Progress (100.0 * t.Result.Count / totalCount)).PipeTo (progressListener);  } else {  	Unhandled (message);  }  
Magic Number,FaultTolerance,Worker,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: counterService.Ask<CurrentCount> ("GetCurrentCount"' TimeSpan.FromSeconds (5)).ContinueWith (t => new Progress (100.0 * t.Result.Count / totalCount)).PipeTo (progressListener);  
Magic Number,FaultTolerance,Worker,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: counterService.Ask<CurrentCount> ("GetCurrentCount"' TimeSpan.FromSeconds (5)).ContinueWith (t => new Progress (100.0 * t.Result.Count / totalCount)).PipeTo (progressListener);  
Magic Number,FaultTolerance,CounterService,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,SupervisorStrategy,The following statement contains a magic number: return new OneForOneStrategy (3' TimeSpan.FromSeconds (5)' ex => {  	if (ex is StorageException)  		return Directive.Restart;  	return Directive.Escalate;  });  
Magic Number,FaultTolerance,CounterService,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,SupervisorStrategy,The following statement contains a magic number: return new OneForOneStrategy (3' TimeSpan.FromSeconds (5)' ex => {  	if (ex is StorageException)  		return Directive.Restart;  	return Directive.Escalate;  });  
Magic Number,FaultTolerance,CounterService,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (entry != null && entry.Key == key && counter == null) {  	// Reply from Storage of the initial value' now we can create the Counter  	counter = Context.ActorOf (Props.Create<Counter> (key' entry.Value));  	// Tell the counter to use current storage  	counter.Tell (new UseStorage (storage));  	// and send the buffered backlog to the counter  	foreach (var e in backlog)  		counter.Tell (e.Message' e.Sender);  	backlog.Clear ();  } else if (message is Increment || message.Equals ("GetCurrentCount")) {  	ForwardOrPlaceInBacklog (message);  } else if (message is Terminated) {  	// After 3 restarts the storage child is stopped.  	// We receive Terminated because we watch the child' see InitStorage.  	storage = null;  	// Tell the counter that there is no storage for the moment  	counter.Tell (new UseStorage (null));  	// Try to re-establish storage after while  	Context.System.Scheduler.ScheduleTellOnceCancelable (TimeSpan.FromSeconds (10)' Self' "Reconnect"' Self);  } else if (message.Equals ("Reconnect")) {  	// Re-establish storage after the scheduled delay  	InitStorage ();  } else {  	Unhandled (message);  }  
Magic Number,FaultTolerance,CounterService,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (message is Increment || message.Equals ("GetCurrentCount")) {  	ForwardOrPlaceInBacklog (message);  } else if (message is Terminated) {  	// After 3 restarts the storage child is stopped.  	// We receive Terminated because we watch the child' see InitStorage.  	storage = null;  	// Tell the counter that there is no storage for the moment  	counter.Tell (new UseStorage (null));  	// Try to re-establish storage after while  	Context.System.Scheduler.ScheduleTellOnceCancelable (TimeSpan.FromSeconds (10)' Self' "Reconnect"' Self);  } else if (message.Equals ("Reconnect")) {  	// Re-establish storage after the scheduled delay  	InitStorage ();  } else {  	Unhandled (message);  }  
Magic Number,FaultTolerance,CounterService,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: if (message is Terminated) {  	// After 3 restarts the storage child is stopped.  	// We receive Terminated because we watch the child' see InitStorage.  	storage = null;  	// Tell the counter that there is no storage for the moment  	counter.Tell (new UseStorage (null));  	// Try to re-establish storage after while  	Context.System.Scheduler.ScheduleTellOnceCancelable (TimeSpan.FromSeconds (10)' Self' "Reconnect"' Self);  } else if (message.Equals ("Reconnect")) {  	// Re-establish storage after the scheduled delay  	InitStorage ();  } else {  	Unhandled (message);  }  
Magic Number,FaultTolerance,CounterService,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,OnReceive,The following statement contains a magic number: Context.System.Scheduler.ScheduleTellOnceCancelable (TimeSpan.FromSeconds (10)' Self' "Reconnect"' Self);  
Magic Number,FaultTolerance,DummyDB,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,Save,The following statement contains a magic number: if (11 <= value && value <= 14)  	throw new StorageException ("Simulated store failure: " + value);  
Magic Number,FaultTolerance,DummyDB,F:\newReposMay17\akkadotnet_akka.net\src\examples\FaultTolerance\Program.cs,Save,The following statement contains a magic number: if (11 <= value && value <= 14)  	throw new StorageException ("Simulated store failure: " + value);  
