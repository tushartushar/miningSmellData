Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Akka.Persistence.TestKit.Tests,CounterActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Persistence.TestKit.Tests\Actors\CounterActor.cs,CounterActor_internal_state_will_be_lost_if_underlying_persistence_store_is_not_available,The following statement contains a magic number: await WithJournalWrite(write => write.Fail()' async () =>               {                  var counterProps = Props.Create(() => new CounterActor("test"));                  var actor = ActorOf(counterProps' "counter");                                    Watch(actor);                  actor.Tell("inc"' TestActor);                  ExpectMsg<Terminated>(TimeSpan.FromSeconds(3));                    // need to restart actor                  actor = ActorOf(counterProps' "counter1");                  actor.Tell("read"' TestActor);                    var value = ExpectMsg<int>(TimeSpan.FromSeconds(3));                  value.ShouldBe(0);              });
Magic Number,Akka.Persistence.TestKit.Tests,CounterActorTests,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Persistence.TestKit.Tests\Actors\CounterActor.cs,CounterActor_internal_state_will_be_lost_if_underlying_persistence_store_is_not_available,The following statement contains a magic number: await WithJournalWrite(write => write.Fail()' async () =>               {                  var counterProps = Props.Create(() => new CounterActor("test"));                  var actor = ActorOf(counterProps' "counter");                                    Watch(actor);                  actor.Tell("inc"' TestActor);                  ExpectMsg<Terminated>(TimeSpan.FromSeconds(3));                    // need to restart actor                  actor = ActorOf(counterProps' "counter1");                  actor.Tell("read"' TestActor);                    var value = ExpectMsg<int>(TimeSpan.FromSeconds(3));                  value.ShouldBe(0);              });
Magic Number,Akka.Persistence.TestKit.Tests,JournalInterceptorsSpecs,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Persistence.TestKit.Tests\JournalInterceptorsSpecs.cs,delay_must_call_next_interceptor_after_specified_delay,The following statement contains a magic number: var duration = TimeSpan.FromMilliseconds(100);
Magic Number,Akka.Persistence.TestKit.Tests,SnapshotStoreInterceptorsSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Persistence.TestKit.Tests\SnapshotStoreInterceptorsSpec.cs,delay_must_call_next_interceptor_after_specified_delay,The following statement contains a magic number: var duration = TimeSpan.FromMilliseconds(100);
Magic Number,Akka.Persistence.TestKit.Tests,TestJournalSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Persistence.TestKit.Tests\TestJournalSpec.cs,must_return_ack_after_new_write_interceptor_is_set,The following statement contains a magic number: ExpectMsg<TestJournal.Ack>(TimeSpan.FromSeconds(3));
Magic Number,Akka.Persistence.TestKit.Tests,TestSnapshotStoreSpec,D:\research\architectureSmells\repos\akkadotnet_akka.net\src\core\Akka.Persistence.TestKit.Tests\TestSnapshotStoreSpec.cs,after_load_behavior_was_executed_store_is_back_to_pass_mode,The following statement contains a magic number: await actor.GracefulStop(TimeSpan.FromSeconds(3));
