Implementation smell,Namespace,Class,File,Method,Description
Long Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The method has 222 lines of code.
Long Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The method has 177 lines of code.
Long Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The method has 281 lines of code.
Long Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateCertificates,The method has 118 lines of code.
Long Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The method has 154 lines of code.
Complex Method,EVEMon.XmlGenerator,Database,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Database.cs,Types,Cyclomatic complexity of the method is 8
Complex Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,Cyclomatic complexity of the method is 11
Complex Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,Cyclomatic complexity of the method is 34
Complex Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,Cyclomatic complexity of the method is 8
Complex Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateCertificates,Cyclomatic complexity of the method is 9
Complex Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,Cyclomatic complexity of the method is 8
Complex Method,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateGeography,Cyclomatic complexity of the method is 8
Long Parameter List,EVEMon.XmlGenerator,eveGraphics,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,CreateeveGraphics,The method has 5 parameters. Parameters: graphicID' graphicFile' description' obsolete' graphicName
Long Parameter List,EVEMon.XmlGenerator,eveLocations,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,CreateeveLocations,The method has 5 parameters. Parameters: locationID' locationName' x' y' z
Long Parameter List,EVEMon.XmlGenerator,eveOwners,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,CreateeveOwners,The method has 5 parameters. Parameters: ownerID' ownerName' deleted' typeID' rowDate
Long Parameter List,EVEMon.XmlGenerator,invItems,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,CreateinvItems,The method has 6 parameters. Parameters: itemID' typeID' ownerID' locationID' flagID' quantity
Long Identifier,EVEMon.XmlGenerator,EveStaticDataEntities,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,AddTocrpNPCCorporationResearchFields,The length of the parameter crpNPCCorporationResearchFields is 31.
Long Identifier,EVEMon.XmlGenerator,EveStaticDataEntities,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,AddToinvControlTowerResourcePurposes,The length of the parameter invControlTowerResourcePurposes is 31.
Long Identifier,EVEMon.XmlGenerator,EveStaticDataEntities,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,AddToramAssemblyLineTypeDetailPerCategory,The length of the parameter ramAssemblyLineTypeDetailPerCategory is 36.
Long Identifier,EVEMon.XmlGenerator,EveStaticDataEntities,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,AddToramAssemblyLineTypeDetailPerGroup,The length of the parameter ramAssemblyLineTypeDetailPerGroup is 33.
Long Identifier,EVEMon.XmlGenerator,EveStaticDataEntities,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,,The length of the parameter _crpNPCCorporationResearchFields is 32.
Long Identifier,EVEMon.XmlGenerator,EveStaticDataEntities,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,,The length of the parameter _invControlTowerResourcePurposes is 32.
Long Identifier,EVEMon.XmlGenerator,EveStaticDataEntities,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,,The length of the parameter _ramAssemblyLineTypeDetailPerCategory is 37.
Long Identifier,EVEMon.XmlGenerator,EveStaticDataEntities,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,,The length of the parameter _ramAssemblyLineTypeDetailPerGroup is 34.
Long Identifier,EVEMon.XmlGenerator,crpNPCCorporationResearchFields,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,CreatecrpNPCCorporationResearchFields,The length of the parameter crpNPCCorporationResearchFields is 31.
Long Identifier,EVEMon.XmlGenerator,dgmEffects,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,,The length of the parameter _npcActivationChanceAttributeID is 31.
Long Identifier,EVEMon.XmlGenerator,dgmEffects,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,,The length of the parameter _fittingUsageChanceAttributeID is 30.
Long Identifier,EVEMon.XmlGenerator,invControlTowerResourcePurposes,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,CreateinvControlTowerResourcePurposes,The length of the parameter invControlTowerResourcePurposes is 31.
Long Identifier,EVEMon.XmlGenerator,ramAssemblyLineTypeDetailPerCategory,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,CreateramAssemblyLineTypeDetailPerCategory,The length of the parameter ramAssemblyLineTypeDetailPerCategory is 36.
Long Identifier,EVEMon.XmlGenerator,ramAssemblyLineTypeDetailPerGroup,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\EveStaticData.Designer.cs,CreateramAssemblyLineTypeDetailPerGroup,The length of the parameter ramAssemblyLineTypeDetailPerGroup is 33.
Long Statement,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The length of the statement  "                if (srcGroup.ParentID == DBConstants.SkillHardwiringImplantGroupID || srcGroup.ParentID == DBConstants.AttributeEnhancersImplantsGroupID) " is 137.
Long Statement,EVEMon.XmlGenerator,Util,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Util.cs,Copy,The length of the statement  "                    Console.WriteLine(String.Format(@"*** {0}\{1}\{2}"' fi.Directory.Parent.Parent.Name' fi.Directory.Parent.Name' fi.Directory.Name)); " is 131.
Complex Conditional,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The conditional expression  "srcItem.MarketGroupID == DBConstants.MiningBargesGroupID                  || srcItem.MarketGroupID == DBConstants.ExhumersGroupID                  || srcItem.MarketGroupID == DBConstants.IndustrialsGroupID                  || srcItem.MarketGroupID == DBConstants.CapitalIndustrialsGroupID"  is complex.
Magic Number,EVEMon.XmlGenerator,RelationSet<T>,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\RelationSet.cs,GetKey,The following statement contains a magic number: return (((long)left) << 32) | (uint)right;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[9].DisplayName = "Structure HP";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[263].DisplayName = "Shield HP";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[265].DisplayName = "Armor HP";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[38].DisplayName = "Cargo Capacity";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[48].DisplayName = "CPU";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[11].DisplayName = "Powergrid";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[271].DisplayName = "EM Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[272].DisplayName = "Explosive Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[273].DisplayName = "Kinetic Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[274].DisplayName = "Thermal Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[267].DisplayName = "EM Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[268].DisplayName = "Explosive Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[269].DisplayName = "Kinetic Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[270].DisplayName = "Thermal Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[974].DisplayName = "EM Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[975].DisplayName = "Explosive Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[976].DisplayName = "Kinetic Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[977].DisplayName = "Thermal Resistance";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[6].DisplayName = "Activation cost";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[30].DisplayName = "Powergrid usage";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[68].DisplayName = "Shield Bonus";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[87].DisplayName = "Shield Transfer Range";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[116].DisplayName = "Explosive damage";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[424].DisplayName = "CPU Output Bonus";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1082].DisplayName = "CPU Penalty";
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1132].CategoryID = 1;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1547].CategoryID = 1;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[908].CategoryID = 4;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[908].CategoryID = 4;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1692].CategoryID = 9;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1692].CategoryID = 9;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[30].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[50].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[161].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[70].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[4].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[6].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[55].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[144].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[479].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[552].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[560].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1082].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1153].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1272].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[1416].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[73].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[556].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[676].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[677].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[780].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: s_attributeTypes[669].HigherIsBetter = false;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateProperties,The following statement contains a magic number: foreach (DgmAttributeCategory srcCategory in s_attributeCategories)              {                  var category = new SerializablePropertyCategory();                  categories.Add(category);                    category.Description = srcCategory.Description;                  category.Name = srcCategory.Name;                    // Export attributes                  var properties = new List<SerializableProperty>();                    foreach (var srcProp in s_attributeTypes.Where(x => x.CategoryID == srcCategory.ID))                  {                      UpdatePercentDone(s_propGenTotal);                        var prop = new SerializableProperty();                      properties.Add(prop);                        prop.DefaultValue = srcProp.DefaultValue;                      prop.Description = srcProp.Description;                      prop.HigherIsBetter = srcProp.HigherIsBetter;                      prop.Name = (String.IsNullOrEmpty(srcProp.DisplayName) ? srcProp.Name : srcProp.DisplayName);                      prop.ID = srcProp.ID;                        // Unit                      if (srcProp.UnitID == null)                      {                          prop.Unit = String.Empty;                      }                      else                      {                          prop.Unit = s_units[srcProp.UnitID.Value].DisplayName;                          prop.UnitID = srcProp.UnitID.Value;                      }                        // Ship warp speed unit                      if (srcProp.ID == DBConstants.ShipWarpSpeedPropertyID)                          prop.Unit = "AU/S";                        // Icon                      prop.Icon = (srcProp.IconID.HasValue ? s_icons[srcProp.IconID.Value].Icon : String.Empty);                        // Reordering some properties                      int index = properties.IndexOf(prop);                      switch (srcProp.ID)                      {                          case 9:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 37:                              pProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 38:                              properties.Insert(1' prop);                              properties.RemoveAt(index + 1);                              break;                          case 48:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 70:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 161:                              properties.Insert(3' prop);                              properties.RemoveAt(index + 1);                              break;                          case 422:                              gProperties.Insert(0' prop);                              properties.RemoveAt(index);                              break;                          case 479:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 482:                              properties.Insert(0' prop);                              properties.RemoveAt(index + 1);                              break;                          case 564:                              properties.Insert(4' prop);                              properties.RemoveAt(index + 1);                              break;                          case 633:                              gProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 974:                              properties.Insert(5' prop);                              properties.RemoveAt(index + 1);                              break;                          case 975:                              properties.Insert(6' prop);                              properties.RemoveAt(index + 1);                              break;                          case 976:                              properties.Insert(7' prop);                              properties.RemoveAt(index + 1);                              break;                          case 977:                              properties.Insert(8' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1132:                              properties.Insert(2' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1137:                              properties.Insert(10' prop);                              properties.RemoveAt(index + 1);                              break;                          case 1281:                              pProperties.Insert(1' prop);                              properties.RemoveAt(index);                              break;                          case 1547:                              properties.Insert(11' prop);                              properties.RemoveAt(index + 1);                              break;                          default:                              break;                      }                        // New ID                      newID = Math.Max(newID' srcProp.ID);                  }                  category.Properties = properties.ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_injectedMarketGroups = new List<InvMarketGroup>                                           {                                               new InvMarketGroup                                                   {                                                       Name = "Various Non-Market"'                                                       Description = "Non-Market Items"'                                                       ID = DBConstants.RootNonMarketGroupID'                                                       ParentID = null'                                                       IconID = null                                                   }'                                               new InvMarketGroup                                                   {                                                       Name = "Unique Designs"'                                                       Description = "Ships of a unique design"'                                                       ID = DBConstants.RootUniqueDesignsGroupID'                                                       ParentID = DBConstants.ShipsGroupID'                                                       IconID = 1443                                                   }'                                               new InvMarketGroup                                                   {                                                       Name = "Unique Shuttles"'                                                       Description = "Fast ships of a unique design"'                                                       ID = DBConstants.UniqueDesignShuttlesGroupID'                                                       ParentID = DBConstants.RootUniqueDesignsGroupID'                                                       IconID = null                                                   }'                                               new InvMarketGroup                                                   {                                                       Name = "Unique Battleships"'                                                       Description = "Battleships ships of a unique design"'                                                       ID = DBConstants.UniqueDesignBattleshipsGroupID'                                                       ParentID = DBConstants.RootUniqueDesignsGroupID'                                                       IconID = null                                                   }'                                           };
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[11].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[12].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[13].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[2014].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[2015].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[2016].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[2017].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[2063].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[30889].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[27029].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: s_types[32077].Published = true;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following statement contains a magic number: foreach (InvType srcItem in s_types.Where(x => x.Published && x.MarketGroupID == null))              {                  // Set some ships market group and race                  switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }                    // Set some items market group to support blueprints                  if (srcItem.ID > 28685 && srcItem.ID < 28694)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                    // Adding planets to support attribute browsing for command centers                  if (srcItem.GroupID == DBConstants.PlanetGroupID)                      srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: int baseWarpSpeed = 3;
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (DgmTypeAttribute srcProp in s_typeAttributes.Where(x => x.ItemID == srcItem.ID))              {                  var propIntValue = (srcProp.ValueInt.HasValue ? srcProp.ValueInt.Value : (int) srcProp.ValueFloat.Value);                    // Is it a prereq skill ?                  int prereqIndex = Array.IndexOf(DBConstants.RequiredSkillPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqSkills[prereqIndex] = propIntValue;                      continue;                  }                    // Is it a prereq level ?                  prereqIndex = Array.IndexOf(DBConstants.RequiredSkillLevelPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqLevels[prereqIndex] = propIntValue;                      continue;                  }                    // Launcher group ?                  int launcherIndex = Array.IndexOf(DBConstants.LauncherGroupIDs' srcProp.AttributeID);                  if (launcherIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Charge group ?                  int chargeIndex = Array.IndexOf(DBConstants.ChargeGroupIDs' srcProp.AttributeID);                  if (chargeIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // CanFitShip group ?                  int canFitShipIndex = Array.IndexOf(DBConstants.CanFitShipGroupIDs' srcProp.AttributeID);                  if (canFitShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // ModuleShip group ?                  int moduleShipIndex = Array.IndexOf(DBConstants.ModuleShipGroupIDs' srcProp.AttributeID);                  if (moduleShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // SpecialisationAsteroid group ?                  int specialisationAsteroidIndex = Array.IndexOf(DBConstants.SpecialisationAsteroidGroupIDs'                                                                  srcProp.AttributeID);                  if (specialisationAsteroidIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Reaction group ?                  int reactionIndex = Array.IndexOf(DBConstants.ReactionGroupIDs' srcProp.AttributeID);                  if (reactionIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // PosCargobayAccept group ?                  int posCargobayAcceptIndex = Array.IndexOf(DBConstants.PosCargobayAcceptGroupIDs' srcProp.AttributeID);                  if (posCargobayAcceptIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Get the warp speed multiplier                  if (srcProp.AttributeID == DBConstants.WarpSpeedMultiplierPropertyID)                      warpSpeedMultiplier = srcProp.ValueFloat.Value;                    // We calculate the Ships Warp Speed                  if (srcProp.AttributeID == DBConstants.ShipWarpSpeedPropertyID)                      props.Add(new SerializablePropertyValue                                      {ID = srcProp.AttributeID' Value = (baseWarpSpeed*warpSpeedMultiplier).ToString()});                    // Other props                  props.Add(new SerializablePropertyValue                                  {ID = srcProp.AttributeID' Value = srcProp.FormatPropertyValue()});                    // Is metalevel property ?                  if (srcProp.AttributeID == DBConstants.MetaLevelPropertyID)                      item.MetaLevel = propIntValue;                                    // Is techlevel property ?                  if (srcProp.AttributeID == DBConstants.TechLevelPropertyID)                  {                      switch (propIntValue)                      {                          default:                          case 1:                              item.MetaGroup = ItemMetaGroup.T1;                              break;                          case 2:                              item.MetaGroup = ItemMetaGroup.T2;                              break;                          case 3:                              item.MetaGroup = ItemMetaGroup.T3;                              break;                      }                  }                    // Is metagroup property ?                  if (srcProp.AttributeID == DBConstants.MetaGroupPropertyID)                  {                      switch (propIntValue)                      {                          case 3:                              item.MetaGroup = ItemMetaGroup.Storyline;                              break;                          case 4:                              item.MetaGroup = ItemMetaGroup.Faction;                              break;                          case 5:                              item.MetaGroup = ItemMetaGroup.Officer;                              break;                          case 6:                              item.MetaGroup = ItemMetaGroup.Deadspace;                              break;                          default:                              item.MetaGroup = ItemMetaGroup.None;                              break;                      }                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (DgmTypeAttribute srcProp in s_typeAttributes.Where(x => x.ItemID == srcItem.ID))              {                  var propIntValue = (srcProp.ValueInt.HasValue ? srcProp.ValueInt.Value : (int) srcProp.ValueFloat.Value);                    // Is it a prereq skill ?                  int prereqIndex = Array.IndexOf(DBConstants.RequiredSkillPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqSkills[prereqIndex] = propIntValue;                      continue;                  }                    // Is it a prereq level ?                  prereqIndex = Array.IndexOf(DBConstants.RequiredSkillLevelPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqLevels[prereqIndex] = propIntValue;                      continue;                  }                    // Launcher group ?                  int launcherIndex = Array.IndexOf(DBConstants.LauncherGroupIDs' srcProp.AttributeID);                  if (launcherIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Charge group ?                  int chargeIndex = Array.IndexOf(DBConstants.ChargeGroupIDs' srcProp.AttributeID);                  if (chargeIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // CanFitShip group ?                  int canFitShipIndex = Array.IndexOf(DBConstants.CanFitShipGroupIDs' srcProp.AttributeID);                  if (canFitShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // ModuleShip group ?                  int moduleShipIndex = Array.IndexOf(DBConstants.ModuleShipGroupIDs' srcProp.AttributeID);                  if (moduleShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // SpecialisationAsteroid group ?                  int specialisationAsteroidIndex = Array.IndexOf(DBConstants.SpecialisationAsteroidGroupIDs'                                                                  srcProp.AttributeID);                  if (specialisationAsteroidIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Reaction group ?                  int reactionIndex = Array.IndexOf(DBConstants.ReactionGroupIDs' srcProp.AttributeID);                  if (reactionIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // PosCargobayAccept group ?                  int posCargobayAcceptIndex = Array.IndexOf(DBConstants.PosCargobayAcceptGroupIDs' srcProp.AttributeID);                  if (posCargobayAcceptIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Get the warp speed multiplier                  if (srcProp.AttributeID == DBConstants.WarpSpeedMultiplierPropertyID)                      warpSpeedMultiplier = srcProp.ValueFloat.Value;                    // We calculate the Ships Warp Speed                  if (srcProp.AttributeID == DBConstants.ShipWarpSpeedPropertyID)                      props.Add(new SerializablePropertyValue                                      {ID = srcProp.AttributeID' Value = (baseWarpSpeed*warpSpeedMultiplier).ToString()});                    // Other props                  props.Add(new SerializablePropertyValue                                  {ID = srcProp.AttributeID' Value = srcProp.FormatPropertyValue()});                    // Is metalevel property ?                  if (srcProp.AttributeID == DBConstants.MetaLevelPropertyID)                      item.MetaLevel = propIntValue;                                    // Is techlevel property ?                  if (srcProp.AttributeID == DBConstants.TechLevelPropertyID)                  {                      switch (propIntValue)                      {                          default:                          case 1:                              item.MetaGroup = ItemMetaGroup.T1;                              break;                          case 2:                              item.MetaGroup = ItemMetaGroup.T2;                              break;                          case 3:                              item.MetaGroup = ItemMetaGroup.T3;                              break;                      }                  }                    // Is metagroup property ?                  if (srcProp.AttributeID == DBConstants.MetaGroupPropertyID)                  {                      switch (propIntValue)                      {                          case 3:                              item.MetaGroup = ItemMetaGroup.Storyline;                              break;                          case 4:                              item.MetaGroup = ItemMetaGroup.Faction;                              break;                          case 5:                              item.MetaGroup = ItemMetaGroup.Officer;                              break;                          case 6:                              item.MetaGroup = ItemMetaGroup.Deadspace;                              break;                          default:                              item.MetaGroup = ItemMetaGroup.None;                              break;                      }                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (DgmTypeAttribute srcProp in s_typeAttributes.Where(x => x.ItemID == srcItem.ID))              {                  var propIntValue = (srcProp.ValueInt.HasValue ? srcProp.ValueInt.Value : (int) srcProp.ValueFloat.Value);                    // Is it a prereq skill ?                  int prereqIndex = Array.IndexOf(DBConstants.RequiredSkillPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqSkills[prereqIndex] = propIntValue;                      continue;                  }                    // Is it a prereq level ?                  prereqIndex = Array.IndexOf(DBConstants.RequiredSkillLevelPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqLevels[prereqIndex] = propIntValue;                      continue;                  }                    // Launcher group ?                  int launcherIndex = Array.IndexOf(DBConstants.LauncherGroupIDs' srcProp.AttributeID);                  if (launcherIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Charge group ?                  int chargeIndex = Array.IndexOf(DBConstants.ChargeGroupIDs' srcProp.AttributeID);                  if (chargeIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // CanFitShip group ?                  int canFitShipIndex = Array.IndexOf(DBConstants.CanFitShipGroupIDs' srcProp.AttributeID);                  if (canFitShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // ModuleShip group ?                  int moduleShipIndex = Array.IndexOf(DBConstants.ModuleShipGroupIDs' srcProp.AttributeID);                  if (moduleShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // SpecialisationAsteroid group ?                  int specialisationAsteroidIndex = Array.IndexOf(DBConstants.SpecialisationAsteroidGroupIDs'                                                                  srcProp.AttributeID);                  if (specialisationAsteroidIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Reaction group ?                  int reactionIndex = Array.IndexOf(DBConstants.ReactionGroupIDs' srcProp.AttributeID);                  if (reactionIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // PosCargobayAccept group ?                  int posCargobayAcceptIndex = Array.IndexOf(DBConstants.PosCargobayAcceptGroupIDs' srcProp.AttributeID);                  if (posCargobayAcceptIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Get the warp speed multiplier                  if (srcProp.AttributeID == DBConstants.WarpSpeedMultiplierPropertyID)                      warpSpeedMultiplier = srcProp.ValueFloat.Value;                    // We calculate the Ships Warp Speed                  if (srcProp.AttributeID == DBConstants.ShipWarpSpeedPropertyID)                      props.Add(new SerializablePropertyValue                                      {ID = srcProp.AttributeID' Value = (baseWarpSpeed*warpSpeedMultiplier).ToString()});                    // Other props                  props.Add(new SerializablePropertyValue                                  {ID = srcProp.AttributeID' Value = srcProp.FormatPropertyValue()});                    // Is metalevel property ?                  if (srcProp.AttributeID == DBConstants.MetaLevelPropertyID)                      item.MetaLevel = propIntValue;                                    // Is techlevel property ?                  if (srcProp.AttributeID == DBConstants.TechLevelPropertyID)                  {                      switch (propIntValue)                      {                          default:                          case 1:                              item.MetaGroup = ItemMetaGroup.T1;                              break;                          case 2:                              item.MetaGroup = ItemMetaGroup.T2;                              break;                          case 3:                              item.MetaGroup = ItemMetaGroup.T3;                              break;                      }                  }                    // Is metagroup property ?                  if (srcProp.AttributeID == DBConstants.MetaGroupPropertyID)                  {                      switch (propIntValue)                      {                          case 3:                              item.MetaGroup = ItemMetaGroup.Storyline;                              break;                          case 4:                              item.MetaGroup = ItemMetaGroup.Faction;                              break;                          case 5:                              item.MetaGroup = ItemMetaGroup.Officer;                              break;                          case 6:                              item.MetaGroup = ItemMetaGroup.Deadspace;                              break;                          default:                              item.MetaGroup = ItemMetaGroup.None;                              break;                      }                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (DgmTypeAttribute srcProp in s_typeAttributes.Where(x => x.ItemID == srcItem.ID))              {                  var propIntValue = (srcProp.ValueInt.HasValue ? srcProp.ValueInt.Value : (int) srcProp.ValueFloat.Value);                    // Is it a prereq skill ?                  int prereqIndex = Array.IndexOf(DBConstants.RequiredSkillPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqSkills[prereqIndex] = propIntValue;                      continue;                  }                    // Is it a prereq level ?                  prereqIndex = Array.IndexOf(DBConstants.RequiredSkillLevelPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqLevels[prereqIndex] = propIntValue;                      continue;                  }                    // Launcher group ?                  int launcherIndex = Array.IndexOf(DBConstants.LauncherGroupIDs' srcProp.AttributeID);                  if (launcherIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Charge group ?                  int chargeIndex = Array.IndexOf(DBConstants.ChargeGroupIDs' srcProp.AttributeID);                  if (chargeIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // CanFitShip group ?                  int canFitShipIndex = Array.IndexOf(DBConstants.CanFitShipGroupIDs' srcProp.AttributeID);                  if (canFitShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // ModuleShip group ?                  int moduleShipIndex = Array.IndexOf(DBConstants.ModuleShipGroupIDs' srcProp.AttributeID);                  if (moduleShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // SpecialisationAsteroid group ?                  int specialisationAsteroidIndex = Array.IndexOf(DBConstants.SpecialisationAsteroidGroupIDs'                                                                  srcProp.AttributeID);                  if (specialisationAsteroidIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Reaction group ?                  int reactionIndex = Array.IndexOf(DBConstants.ReactionGroupIDs' srcProp.AttributeID);                  if (reactionIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // PosCargobayAccept group ?                  int posCargobayAcceptIndex = Array.IndexOf(DBConstants.PosCargobayAcceptGroupIDs' srcProp.AttributeID);                  if (posCargobayAcceptIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Get the warp speed multiplier                  if (srcProp.AttributeID == DBConstants.WarpSpeedMultiplierPropertyID)                      warpSpeedMultiplier = srcProp.ValueFloat.Value;                    // We calculate the Ships Warp Speed                  if (srcProp.AttributeID == DBConstants.ShipWarpSpeedPropertyID)                      props.Add(new SerializablePropertyValue                                      {ID = srcProp.AttributeID' Value = (baseWarpSpeed*warpSpeedMultiplier).ToString()});                    // Other props                  props.Add(new SerializablePropertyValue                                  {ID = srcProp.AttributeID' Value = srcProp.FormatPropertyValue()});                    // Is metalevel property ?                  if (srcProp.AttributeID == DBConstants.MetaLevelPropertyID)                      item.MetaLevel = propIntValue;                                    // Is techlevel property ?                  if (srcProp.AttributeID == DBConstants.TechLevelPropertyID)                  {                      switch (propIntValue)                      {                          default:                          case 1:                              item.MetaGroup = ItemMetaGroup.T1;                              break;                          case 2:                              item.MetaGroup = ItemMetaGroup.T2;                              break;                          case 3:                              item.MetaGroup = ItemMetaGroup.T3;                              break;                      }                  }                    // Is metagroup property ?                  if (srcProp.AttributeID == DBConstants.MetaGroupPropertyID)                  {                      switch (propIntValue)                      {                          case 3:                              item.MetaGroup = ItemMetaGroup.Storyline;                              break;                          case 4:                              item.MetaGroup = ItemMetaGroup.Faction;                              break;                          case 5:                              item.MetaGroup = ItemMetaGroup.Officer;                              break;                          case 6:                              item.MetaGroup = ItemMetaGroup.Deadspace;                              break;                          default:                              item.MetaGroup = ItemMetaGroup.None;                              break;                      }                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (DgmTypeAttribute srcProp in s_typeAttributes.Where(x => x.ItemID == srcItem.ID))              {                  var propIntValue = (srcProp.ValueInt.HasValue ? srcProp.ValueInt.Value : (int) srcProp.ValueFloat.Value);                    // Is it a prereq skill ?                  int prereqIndex = Array.IndexOf(DBConstants.RequiredSkillPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqSkills[prereqIndex] = propIntValue;                      continue;                  }                    // Is it a prereq level ?                  prereqIndex = Array.IndexOf(DBConstants.RequiredSkillLevelPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqLevels[prereqIndex] = propIntValue;                      continue;                  }                    // Launcher group ?                  int launcherIndex = Array.IndexOf(DBConstants.LauncherGroupIDs' srcProp.AttributeID);                  if (launcherIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Charge group ?                  int chargeIndex = Array.IndexOf(DBConstants.ChargeGroupIDs' srcProp.AttributeID);                  if (chargeIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // CanFitShip group ?                  int canFitShipIndex = Array.IndexOf(DBConstants.CanFitShipGroupIDs' srcProp.AttributeID);                  if (canFitShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // ModuleShip group ?                  int moduleShipIndex = Array.IndexOf(DBConstants.ModuleShipGroupIDs' srcProp.AttributeID);                  if (moduleShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // SpecialisationAsteroid group ?                  int specialisationAsteroidIndex = Array.IndexOf(DBConstants.SpecialisationAsteroidGroupIDs'                                                                  srcProp.AttributeID);                  if (specialisationAsteroidIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Reaction group ?                  int reactionIndex = Array.IndexOf(DBConstants.ReactionGroupIDs' srcProp.AttributeID);                  if (reactionIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // PosCargobayAccept group ?                  int posCargobayAcceptIndex = Array.IndexOf(DBConstants.PosCargobayAcceptGroupIDs' srcProp.AttributeID);                  if (posCargobayAcceptIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Get the warp speed multiplier                  if (srcProp.AttributeID == DBConstants.WarpSpeedMultiplierPropertyID)                      warpSpeedMultiplier = srcProp.ValueFloat.Value;                    // We calculate the Ships Warp Speed                  if (srcProp.AttributeID == DBConstants.ShipWarpSpeedPropertyID)                      props.Add(new SerializablePropertyValue                                      {ID = srcProp.AttributeID' Value = (baseWarpSpeed*warpSpeedMultiplier).ToString()});                    // Other props                  props.Add(new SerializablePropertyValue                                  {ID = srcProp.AttributeID' Value = srcProp.FormatPropertyValue()});                    // Is metalevel property ?                  if (srcProp.AttributeID == DBConstants.MetaLevelPropertyID)                      item.MetaLevel = propIntValue;                                    // Is techlevel property ?                  if (srcProp.AttributeID == DBConstants.TechLevelPropertyID)                  {                      switch (propIntValue)                      {                          default:                          case 1:                              item.MetaGroup = ItemMetaGroup.T1;                              break;                          case 2:                              item.MetaGroup = ItemMetaGroup.T2;                              break;                          case 3:                              item.MetaGroup = ItemMetaGroup.T3;                              break;                      }                  }                    // Is metagroup property ?                  if (srcProp.AttributeID == DBConstants.MetaGroupPropertyID)                  {                      switch (propIntValue)                      {                          case 3:                              item.MetaGroup = ItemMetaGroup.Storyline;                              break;                          case 4:                              item.MetaGroup = ItemMetaGroup.Faction;                              break;                          case 5:                              item.MetaGroup = ItemMetaGroup.Officer;                              break;                          case 6:                              item.MetaGroup = ItemMetaGroup.Deadspace;                              break;                          default:                              item.MetaGroup = ItemMetaGroup.None;                              break;                      }                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (DgmTypeAttribute srcProp in s_typeAttributes.Where(x => x.ItemID == srcItem.ID))              {                  var propIntValue = (srcProp.ValueInt.HasValue ? srcProp.ValueInt.Value : (int) srcProp.ValueFloat.Value);                    // Is it a prereq skill ?                  int prereqIndex = Array.IndexOf(DBConstants.RequiredSkillPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqSkills[prereqIndex] = propIntValue;                      continue;                  }                    // Is it a prereq level ?                  prereqIndex = Array.IndexOf(DBConstants.RequiredSkillLevelPropertyIDs' srcProp.AttributeID);                  if (prereqIndex >= 0)                  {                      prereqLevels[prereqIndex] = propIntValue;                      continue;                  }                    // Launcher group ?                  int launcherIndex = Array.IndexOf(DBConstants.LauncherGroupIDs' srcProp.AttributeID);                  if (launcherIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Charge group ?                  int chargeIndex = Array.IndexOf(DBConstants.ChargeGroupIDs' srcProp.AttributeID);                  if (chargeIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // CanFitShip group ?                  int canFitShipIndex = Array.IndexOf(DBConstants.CanFitShipGroupIDs' srcProp.AttributeID);                  if (canFitShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // ModuleShip group ?                  int moduleShipIndex = Array.IndexOf(DBConstants.ModuleShipGroupIDs' srcProp.AttributeID);                  if (moduleShipIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // SpecialisationAsteroid group ?                  int specialisationAsteroidIndex = Array.IndexOf(DBConstants.SpecialisationAsteroidGroupIDs'                                                                  srcProp.AttributeID);                  if (specialisationAsteroidIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Reaction group ?                  int reactionIndex = Array.IndexOf(DBConstants.ReactionGroupIDs' srcProp.AttributeID);                  if (reactionIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // PosCargobayAccept group ?                  int posCargobayAcceptIndex = Array.IndexOf(DBConstants.PosCargobayAcceptGroupIDs' srcProp.AttributeID);                  if (posCargobayAcceptIndex >= 0)                  {                      props.Add(new SerializablePropertyValue                                      {                                          ID = srcProp.AttributeID'                                          Value = s_groups[propIntValue].Name                                      });                      continue;                  }                    // Get the warp speed multiplier                  if (srcProp.AttributeID == DBConstants.WarpSpeedMultiplierPropertyID)                      warpSpeedMultiplier = srcProp.ValueFloat.Value;                    // We calculate the Ships Warp Speed                  if (srcProp.AttributeID == DBConstants.ShipWarpSpeedPropertyID)                      props.Add(new SerializablePropertyValue                                      {ID = srcProp.AttributeID' Value = (baseWarpSpeed*warpSpeedMultiplier).ToString()});                    // Other props                  props.Add(new SerializablePropertyValue                                  {ID = srcProp.AttributeID' Value = srcProp.FormatPropertyValue()});                    // Is metalevel property ?                  if (srcProp.AttributeID == DBConstants.MetaLevelPropertyID)                      item.MetaLevel = propIntValue;                                    // Is techlevel property ?                  if (srcProp.AttributeID == DBConstants.TechLevelPropertyID)                  {                      switch (propIntValue)                      {                          default:                          case 1:                              item.MetaGroup = ItemMetaGroup.T1;                              break;                          case 2:                              item.MetaGroup = ItemMetaGroup.T2;                              break;                          case 3:                              item.MetaGroup = ItemMetaGroup.T3;                              break;                      }                  }                    // Is metagroup property ?                  if (srcProp.AttributeID == DBConstants.MetaGroupPropertyID)                  {                      switch (propIntValue)                      {                          case 3:                              item.MetaGroup = ItemMetaGroup.Storyline;                              break;                          case 4:                              item.MetaGroup = ItemMetaGroup.Faction;                              break;                          case 5:                              item.MetaGroup = ItemMetaGroup.Officer;                              break;                          case 6:                              item.MetaGroup = ItemMetaGroup.Deadspace;                              break;                          default:                              item.MetaGroup = ItemMetaGroup.None;                              break;                      }                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == srcItem.ID && item.MetaGroup == ItemMetaGroup.Empty))              {                  switch (relation.MetaGroupID)                  {                      case 1:                          item.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          item.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          item.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          item.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          item.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          item.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          item.MetaGroup = ItemMetaGroup.T3;                          break;                      default:                          item.MetaGroup = ItemMetaGroup.None;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == srcItem.ID && item.MetaGroup == ItemMetaGroup.Empty))              {                  switch (relation.MetaGroupID)                  {                      case 1:                          item.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          item.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          item.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          item.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          item.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          item.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          item.MetaGroup = ItemMetaGroup.T3;                          break;                      default:                          item.MetaGroup = ItemMetaGroup.None;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == srcItem.ID && item.MetaGroup == ItemMetaGroup.Empty))              {                  switch (relation.MetaGroupID)                  {                      case 1:                          item.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          item.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          item.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          item.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          item.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          item.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          item.MetaGroup = ItemMetaGroup.T3;                          break;                      default:                          item.MetaGroup = ItemMetaGroup.None;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == srcItem.ID && item.MetaGroup == ItemMetaGroup.Empty))              {                  switch (relation.MetaGroupID)                  {                      case 1:                          item.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          item.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          item.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          item.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          item.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          item.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          item.MetaGroup = ItemMetaGroup.T3;                          break;                      default:                          item.MetaGroup = ItemMetaGroup.None;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == srcItem.ID && item.MetaGroup == ItemMetaGroup.Empty))              {                  switch (relation.MetaGroupID)                  {                      case 1:                          item.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          item.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          item.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          item.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          item.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          item.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          item.MetaGroup = ItemMetaGroup.T3;                          break;                      default:                          item.MetaGroup = ItemMetaGroup.None;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateItem,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == srcItem.ID && item.MetaGroup == ItemMetaGroup.Empty))              {                  switch (relation.MetaGroupID)                  {                      case 1:                          item.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          item.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          item.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          item.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          item.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          item.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          item.MetaGroup = ItemMetaGroup.T3;                          break;                      default:                          item.MetaGroup = ItemMetaGroup.None;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateSkills,The following statement contains a magic number: foreach (InvGroup group in s_groups.Where(x => x.CategoryID == 16 && x.ID != 505).OrderBy(x => x.Name))              {                  var skillGroup = new SerializableSkillGroup                                       {                                           ID = group.ID'                                           Name = group.Name'                                       };                    // Export skills                  var listOfSkillsInGroup = new List<SerializableSkill>();                    foreach (InvType skill in s_types.Where(x => x.GroupID == group.ID))                  {                      UpdatePercentDone(s_skillGenTotal);                        var singleSkill = new SerializableSkill                                            {                                                ID = skill.ID'                                                Name = skill.Name'                                                Description = skill.Description'                                                Public = skill.Published'                                                Cost = (long) skill.BasePrice'                                            };                        // Export skill atributes                      var skillAttributes = new Dictionary<int' int>();                        foreach (DgmTypeAttribute attribute in s_typeAttributes.Where(x => x.ItemID == skill.ID))                      {                          skillAttributes.Add(attribute.AttributeID' attribute.GetIntValue());                      }                        if (skillAttributes.ContainsKey(275) && skillAttributes[275] > 0)                      {                          singleSkill.Rank = skillAttributes[275];                      }                      else                      {                          singleSkill.Rank = 1;                      }                        singleSkill.PrimaryAttribute = skillAttributes.ContainsKey(180)                                                         ? IntToEveAttribute(skillAttributes[180])                                                         : EveAttribute.None;                      singleSkill.SecondaryAttribute = skillAttributes.ContainsKey(181)                                                           ? IntToEveAttribute(skillAttributes[181])                                                           : EveAttribute.None;                      singleSkill.CanTrainOnTrial = skillAttributes.ContainsKey(1047) && skillAttributes[1047] == 0                                                        ? true                                                        : false;                        // Export prerequesities                      var listOfPrerequisites = new List<SerializableSkillPrerequisite>();                        for (int i = 0; i < DBConstants.RequiredSkillPropertyIDs.Length; i++)                      {                          if (skillAttributes.ContainsKey(DBConstants.RequiredSkillPropertyIDs[i]) &&                              skillAttributes.ContainsKey(DBConstants.RequiredSkillLevelPropertyIDs[i]))                          {                              var j = i;                              InvType prereqSkill =                                  s_types.First(x => x.ID == skillAttributes[DBConstants.RequiredSkillPropertyIDs[j]]);                                var preReq = new SerializableSkillPrerequisite                                               {                                                   ID = prereqSkill.ID'                                                   Level = skillAttributes[DBConstants.RequiredSkillLevelPropertyIDs[i]]'                                               };                                if (prereqSkill != null)                                  preReq.Name = prereqSkill.Name;                                // Add prerequisites                              listOfPrerequisites.Add(preReq);                          }                      }                        // Add prerequesites to skill                      singleSkill.Prereqs = listOfPrerequisites.ToArray();                        // Add skill                      listOfSkillsInGroup.Add(singleSkill);                  }                    // Add skills in skill group                  skillGroup.Skills = listOfSkillsInGroup.OrderBy(x => x.Name).ToArray();                    // Add skill group                  listOfSkillGroups.Add(skillGroup);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,IntToEveAttribute,The following statement contains a magic number: switch (attributeValue)              {                  case 164:                      return EveAttribute.Charisma;                  case 165:                      return EveAttribute.Intelligence;                  case 166:                      return EveAttribute.Memory;                  case 167:                      return EveAttribute.Perception;                  case 168:                      return EveAttribute.Willpower;                  default:                      return EveAttribute.None;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,IntToEveAttribute,The following statement contains a magic number: switch (attributeValue)              {                  case 164:                      return EveAttribute.Charisma;                  case 165:                      return EveAttribute.Intelligence;                  case 166:                      return EveAttribute.Memory;                  case 167:                      return EveAttribute.Perception;                  case 168:                      return EveAttribute.Willpower;                  default:                      return EveAttribute.None;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,IntToEveAttribute,The following statement contains a magic number: switch (attributeValue)              {                  case 164:                      return EveAttribute.Charisma;                  case 165:                      return EveAttribute.Intelligence;                  case 166:                      return EveAttribute.Memory;                  case 167:                      return EveAttribute.Perception;                  case 168:                      return EveAttribute.Willpower;                  default:                      return EveAttribute.None;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,IntToEveAttribute,The following statement contains a magic number: switch (attributeValue)              {                  case 164:                      return EveAttribute.Charisma;                  case 165:                      return EveAttribute.Intelligence;                  case 166:                      return EveAttribute.Memory;                  case 167:                      return EveAttribute.Perception;                  case 168:                      return EveAttribute.Willpower;                  default:                      return EveAttribute.None;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,IntToEveAttribute,The following statement contains a magic number: switch (attributeValue)              {                  case 164:                      return EveAttribute.Charisma;                  case 165:                      return EveAttribute.Intelligence;                  case 166:                      return EveAttribute.Memory;                  case 167:                      return EveAttribute.Perception;                  case 168:                      return EveAttribute.Willpower;                  default:                      return EveAttribute.None;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateCertificates,The following statement contains a magic number: foreach (CrtCategories category in s_crtCategories.OrderBy(x => x.CategoryName))              {                  var crtCategory = new SerializableCertificateCategory                                        {                                            ID = category.ID'                                            Name = category.CategoryName'                                            Description = category.Description                                        };                    // Export certificates classes                  var listOfCertClasses = new List<SerializableCertificateClass>();                    int categoryID = 0;                  foreach (CrtClasses certClass in s_crtClasses)                  {                      // Exclude unused classes                      int id = certClass.ID;                      if (id == 104 || id == 106 || id == 111)                          continue;                        var crtClasses = new SerializableCertificateClass                                           {                                               ID = certClass.ID'                                               Name = certClass.ClassName'                                               Description = certClass.Description                                           };                        // Export certificates                      var listOfCertificates = new List<SerializableCertificate>();                        foreach (var certificate in s_certificates.Where(x => x.ClassID == certClass.ID))                      {                          UpdatePercentDone(s_certGenTotal);                            var crtCertificates = new SerializableCertificate                                                    {                                                        ID = certificate.ID'                                                        Grade = GetGrade(certificate.Grade)'                                                        Description = certificate.Description                                                    };                            // Export prerequesities                          var listOfPrereq = new List<SerializableCertificatePrerequisite>();                            foreach (CrtRelationships relationship in s_crtRelationships                              .Where(x => x.ChildID == certificate.ID))                          {                              var crtPrerequisites = new SerializableCertificatePrerequisite                                                         {                                                             ID = relationship.ID'                                                         };                                  if (relationship.ParentTypeID != null) // prereq is a skill                              {                                  var skill = s_types.First(x => x.ID == relationship.ParentTypeID);                                  crtPrerequisites.Kind = SerializableCertificatePrerequisiteKind.Skill;                                  crtPrerequisites.Name = skill.Name;                                  crtPrerequisites.Level = relationship.ParentLevel.ToString();                              }                              else // prereq is a certificate                              {                                  CrtCertificates cert = s_certificates.First(x => x.ID == relationship.ParentID);                                  CrtClasses crtClass = s_crtClasses.First(x => x.ID == cert.ClassID);                                  crtPrerequisites.Kind = SerializableCertificatePrerequisiteKind.Certificate;                                  crtPrerequisites.Name = crtClass.ClassName;                                  crtPrerequisites.Level = GetGrade(cert.Grade).ToString();                              }                                // Add prerequisite                              listOfPrereq.Add(crtPrerequisites);                          }                            // Export recommendations                          var listOfRecom = new List<SerializableCertificateRecommendation>();                            foreach (CrtRecommendations recommendation in s_crtRecommendations                              .Where(x => x.CertificateID == certificate.ID))                          {                              // Finds the ships name                              InvType shipName = s_types.First(x => x.ID == recommendation.ShipTypeID);                                var crtRecommendations = new SerializableCertificateRecommendation                                                           {                                                               ID = recommendation.ID'                                                               Ship = shipName.Name'                                                               Level = recommendation.Level                                                           };                                // Add recommendation                              listOfRecom.Add(crtRecommendations);                          }                              //Add prerequisites to certificate                          crtCertificates.Prerequisites = listOfPrereq.ToArray();                            // Add recommendations to certificate                          crtCertificates.Recommendations = listOfRecom.ToArray();                            // Add certificate                          listOfCertificates.Add(crtCertificates);                            // Storing the certificate categoryID for use in classes                          categoryID = certificate.CategoryID;                      }                        // Grouping certificates according to their classes                      if (categoryID == category.ID)                      {                          // Add certificates to classes                          crtClasses.Certificates = listOfCertificates.OrderBy(x => x.Grade).ToArray();                            // Add certificate class                          listOfCertClasses.Add(crtClasses);                      }                  }                    // Add classes to categories                  crtCategory.Classes = listOfCertClasses.ToArray();                    // Add category                  listOfCertCategories.Add(crtCategory);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateCertificates,The following statement contains a magic number: foreach (CrtCategories category in s_crtCategories.OrderBy(x => x.CategoryName))              {                  var crtCategory = new SerializableCertificateCategory                                        {                                            ID = category.ID'                                            Name = category.CategoryName'                                            Description = category.Description                                        };                    // Export certificates classes                  var listOfCertClasses = new List<SerializableCertificateClass>();                    int categoryID = 0;                  foreach (CrtClasses certClass in s_crtClasses)                  {                      // Exclude unused classes                      int id = certClass.ID;                      if (id == 104 || id == 106 || id == 111)                          continue;                        var crtClasses = new SerializableCertificateClass                                           {                                               ID = certClass.ID'                                               Name = certClass.ClassName'                                               Description = certClass.Description                                           };                        // Export certificates                      var listOfCertificates = new List<SerializableCertificate>();                        foreach (var certificate in s_certificates.Where(x => x.ClassID == certClass.ID))                      {                          UpdatePercentDone(s_certGenTotal);                            var crtCertificates = new SerializableCertificate                                                    {                                                        ID = certificate.ID'                                                        Grade = GetGrade(certificate.Grade)'                                                        Description = certificate.Description                                                    };                            // Export prerequesities                          var listOfPrereq = new List<SerializableCertificatePrerequisite>();                            foreach (CrtRelationships relationship in s_crtRelationships                              .Where(x => x.ChildID == certificate.ID))                          {                              var crtPrerequisites = new SerializableCertificatePrerequisite                                                         {                                                             ID = relationship.ID'                                                         };                                  if (relationship.ParentTypeID != null) // prereq is a skill                              {                                  var skill = s_types.First(x => x.ID == relationship.ParentTypeID);                                  crtPrerequisites.Kind = SerializableCertificatePrerequisiteKind.Skill;                                  crtPrerequisites.Name = skill.Name;                                  crtPrerequisites.Level = relationship.ParentLevel.ToString();                              }                              else // prereq is a certificate                              {                                  CrtCertificates cert = s_certificates.First(x => x.ID == relationship.ParentID);                                  CrtClasses crtClass = s_crtClasses.First(x => x.ID == cert.ClassID);                                  crtPrerequisites.Kind = SerializableCertificatePrerequisiteKind.Certificate;                                  crtPrerequisites.Name = crtClass.ClassName;                                  crtPrerequisites.Level = GetGrade(cert.Grade).ToString();                              }                                // Add prerequisite                              listOfPrereq.Add(crtPrerequisites);                          }                            // Export recommendations                          var listOfRecom = new List<SerializableCertificateRecommendation>();                            foreach (CrtRecommendations recommendation in s_crtRecommendations                              .Where(x => x.CertificateID == certificate.ID))                          {                              // Finds the ships name                              InvType shipName = s_types.First(x => x.ID == recommendation.ShipTypeID);                                var crtRecommendations = new SerializableCertificateRecommendation                                                           {                                                               ID = recommendation.ID'                                                               Ship = shipName.Name'                                                               Level = recommendation.Level                                                           };                                // Add recommendation                              listOfRecom.Add(crtRecommendations);                          }                              //Add prerequisites to certificate                          crtCertificates.Prerequisites = listOfPrereq.ToArray();                            // Add recommendations to certificate                          crtCertificates.Recommendations = listOfRecom.ToArray();                            // Add certificate                          listOfCertificates.Add(crtCertificates);                            // Storing the certificate categoryID for use in classes                          categoryID = certificate.CategoryID;                      }                        // Grouping certificates according to their classes                      if (categoryID == category.ID)                      {                          // Add certificates to classes                          crtClasses.Certificates = listOfCertificates.OrderBy(x => x.Grade).ToArray();                            // Add certificate class                          listOfCertClasses.Add(crtClasses);                      }                  }                    // Add classes to categories                  crtCategory.Classes = listOfCertClasses.ToArray();                    // Add category                  listOfCertCategories.Add(crtCategory);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateCertificates,The following statement contains a magic number: foreach (CrtCategories category in s_crtCategories.OrderBy(x => x.CategoryName))              {                  var crtCategory = new SerializableCertificateCategory                                        {                                            ID = category.ID'                                            Name = category.CategoryName'                                            Description = category.Description                                        };                    // Export certificates classes                  var listOfCertClasses = new List<SerializableCertificateClass>();                    int categoryID = 0;                  foreach (CrtClasses certClass in s_crtClasses)                  {                      // Exclude unused classes                      int id = certClass.ID;                      if (id == 104 || id == 106 || id == 111)                          continue;                        var crtClasses = new SerializableCertificateClass                                           {                                               ID = certClass.ID'                                               Name = certClass.ClassName'                                               Description = certClass.Description                                           };                        // Export certificates                      var listOfCertificates = new List<SerializableCertificate>();                        foreach (var certificate in s_certificates.Where(x => x.ClassID == certClass.ID))                      {                          UpdatePercentDone(s_certGenTotal);                            var crtCertificates = new SerializableCertificate                                                    {                                                        ID = certificate.ID'                                                        Grade = GetGrade(certificate.Grade)'                                                        Description = certificate.Description                                                    };                            // Export prerequesities                          var listOfPrereq = new List<SerializableCertificatePrerequisite>();                            foreach (CrtRelationships relationship in s_crtRelationships                              .Where(x => x.ChildID == certificate.ID))                          {                              var crtPrerequisites = new SerializableCertificatePrerequisite                                                         {                                                             ID = relationship.ID'                                                         };                                  if (relationship.ParentTypeID != null) // prereq is a skill                              {                                  var skill = s_types.First(x => x.ID == relationship.ParentTypeID);                                  crtPrerequisites.Kind = SerializableCertificatePrerequisiteKind.Skill;                                  crtPrerequisites.Name = skill.Name;                                  crtPrerequisites.Level = relationship.ParentLevel.ToString();                              }                              else // prereq is a certificate                              {                                  CrtCertificates cert = s_certificates.First(x => x.ID == relationship.ParentID);                                  CrtClasses crtClass = s_crtClasses.First(x => x.ID == cert.ClassID);                                  crtPrerequisites.Kind = SerializableCertificatePrerequisiteKind.Certificate;                                  crtPrerequisites.Name = crtClass.ClassName;                                  crtPrerequisites.Level = GetGrade(cert.Grade).ToString();                              }                                // Add prerequisite                              listOfPrereq.Add(crtPrerequisites);                          }                            // Export recommendations                          var listOfRecom = new List<SerializableCertificateRecommendation>();                            foreach (CrtRecommendations recommendation in s_crtRecommendations                              .Where(x => x.CertificateID == certificate.ID))                          {                              // Finds the ships name                              InvType shipName = s_types.First(x => x.ID == recommendation.ShipTypeID);                                var crtRecommendations = new SerializableCertificateRecommendation                                                           {                                                               ID = recommendation.ID'                                                               Ship = shipName.Name'                                                               Level = recommendation.Level                                                           };                                // Add recommendation                              listOfRecom.Add(crtRecommendations);                          }                              //Add prerequisites to certificate                          crtCertificates.Prerequisites = listOfPrereq.ToArray();                            // Add recommendations to certificate                          crtCertificates.Recommendations = listOfRecom.ToArray();                            // Add certificate                          listOfCertificates.Add(crtCertificates);                            // Storing the certificate categoryID for use in classes                          categoryID = certificate.CategoryID;                      }                        // Grouping certificates according to their classes                      if (categoryID == category.ID)                      {                          // Add certificates to classes                          crtClasses.Certificates = listOfCertificates.OrderBy(x => x.Grade).ToArray();                            // Add certificate class                          listOfCertClasses.Add(crtClasses);                      }                  }                    // Add classes to categories                  crtCategory.Classes = listOfCertClasses.ToArray();                    // Add category                  listOfCertCategories.Add(crtCategory);              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GetGrade,The following statement contains a magic number: switch (gradeValue)              {                  case 1:                      return CertificateGrade.Basic;                  case 2:                      return CertificateGrade.Standard;                  case 3:                      return CertificateGrade.Improved;                  case 5:                      return CertificateGrade.Elite;                  default:                      throw new NotImplementedException();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GetGrade,The following statement contains a magic number: switch (gradeValue)              {                  case 1:                      return CertificateGrade.Basic;                  case 2:                      return CertificateGrade.Standard;                  case 3:                      return CertificateGrade.Improved;                  case 5:                      return CertificateGrade.Elite;                  default:                      throw new NotImplementedException();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GetGrade,The following statement contains a magic number: switch (gradeValue)              {                  case 1:                      return CertificateGrade.Basic;                  case 2:                      return CertificateGrade.Standard;                  case 3:                      return CertificateGrade.Improved;                  case 5:                      return CertificateGrade.Elite;                  default:                      throw new NotImplementedException();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: s_injectedMarketGroups.Add(new InvMarketGroup                                             {                                                 Name = "Various Non-Market"'                                                 Description = "Various blueprints not in EVE market"'                                                 ID = DBConstants.BlueprintRootNonMarketGroupID'                                                 ParentID = DBConstants.BlueprintsGroupID'                                                 IconID = 2703                                             });
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: s_injectedMarketGroups.Add(new InvMarketGroup                                             {                                                 Name = "Tech I"'                                                 Description = "Tech I blueprints not in EVE market"'                                                 ID = DBConstants.BlueprintNonMarketTechIGroupID'                                                 ParentID = DBConstants.BlueprintRootNonMarketGroupID'                                                 IconID = 2703                                             });
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: s_injectedMarketGroups.Add(new InvMarketGroup                                             {                                                 Name = "Tech II"'                                                 Description = "Tech II blueprints not in EVE market"'                                                 ID = DBConstants.BlueprintNonMarketTechIIGroupID'                                                 ParentID = DBConstants.BlueprintRootNonMarketGroupID'                                                 IconID = 2703                                             });
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: s_injectedMarketGroups.Add(new InvMarketGroup                                             {                                                 Name = "Storyline"'                                                 Description = "Storyline blueprints not in EVE market"'                                                 ID = DBConstants.BlueprintNonMarketStorylineGroupID'                                                 ParentID = DBConstants.BlueprintRootNonMarketGroupID'                                                 IconID = 2703                                             });
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: s_injectedMarketGroups.Add(new InvMarketGroup                                             {                                                 Name = "Faction"'                                                 Description = "Faction blueprints not in EVE market"'                                                 ID = DBConstants.BlueprintNonMarketFactionGroupID'                                                 ParentID = DBConstants.BlueprintRootNonMarketGroupID'                                                 IconID = 2703                                             });
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: s_injectedMarketGroups.Add(new InvMarketGroup                                             {                                                 Name = "Officer"'                                                 Description = "Officer blueprints not in EVE market"'                                                 ID = DBConstants.BlueprintNonMarketOfficerGroupID'                                                 ParentID = DBConstants.BlueprintRootNonMarketGroupID'                                                 IconID = 2703                                             });
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: s_injectedMarketGroups.Add(new InvMarketGroup                                             {                                                 Name = "Tech III"'                                                 Description = "Tech III blueprints not in EVE market"'                                                 ID = DBConstants.BlueprintNonMarketTechIIIGroupID'                                                 ParentID = DBConstants.BlueprintRootNonMarketGroupID'                                                 IconID = 2703                                             });
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null))              {                  switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null && !x.Name.Contains("TEST")                                                          && s_blueprintTypes.Any(y => y.ID == x.ID) &&                                                          s_types.Any(z => z.ID == s_blueprintTypes[x.ID].ProductTypeID)                                                          && s_types[s_blueprintTypes[x.ID].ProductTypeID].Published))              {                  UpdatePercentDone(s_blueprintGenTotal);                    foreach (InvMetaType relation in s_metaTypes                      .Where(x => x.ItemID == s_blueprintTypes[item.ID].ProductTypeID))                  {                      switch (relation.MetaGroupID)                      {                          case 2:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                              break;                          case 3:                              item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                              break;                          case 4:                              item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                              break;                          case 5:                              item.MarketGroupID = DBConstants.BlueprintNonMarketOfficerGroupID;                              break;                          case 14:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                              break;                      }                  }                    if (item.MarketGroupID == null)                      item.MarketGroupID = DBConstants.BlueprintNonMarketTechIGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null && !x.Name.Contains("TEST")                                                          && s_blueprintTypes.Any(y => y.ID == x.ID) &&                                                          s_types.Any(z => z.ID == s_blueprintTypes[x.ID].ProductTypeID)                                                          && s_types[s_blueprintTypes[x.ID].ProductTypeID].Published))              {                  UpdatePercentDone(s_blueprintGenTotal);                    foreach (InvMetaType relation in s_metaTypes                      .Where(x => x.ItemID == s_blueprintTypes[item.ID].ProductTypeID))                  {                      switch (relation.MetaGroupID)                      {                          case 2:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                              break;                          case 3:                              item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                              break;                          case 4:                              item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                              break;                          case 5:                              item.MarketGroupID = DBConstants.BlueprintNonMarketOfficerGroupID;                              break;                          case 14:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                              break;                      }                  }                    if (item.MarketGroupID == null)                      item.MarketGroupID = DBConstants.BlueprintNonMarketTechIGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null && !x.Name.Contains("TEST")                                                          && s_blueprintTypes.Any(y => y.ID == x.ID) &&                                                          s_types.Any(z => z.ID == s_blueprintTypes[x.ID].ProductTypeID)                                                          && s_types[s_blueprintTypes[x.ID].ProductTypeID].Published))              {                  UpdatePercentDone(s_blueprintGenTotal);                    foreach (InvMetaType relation in s_metaTypes                      .Where(x => x.ItemID == s_blueprintTypes[item.ID].ProductTypeID))                  {                      switch (relation.MetaGroupID)                      {                          case 2:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                              break;                          case 3:                              item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                              break;                          case 4:                              item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                              break;                          case 5:                              item.MarketGroupID = DBConstants.BlueprintNonMarketOfficerGroupID;                              break;                          case 14:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                              break;                      }                  }                    if (item.MarketGroupID == null)                      item.MarketGroupID = DBConstants.BlueprintNonMarketTechIGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null && !x.Name.Contains("TEST")                                                          && s_blueprintTypes.Any(y => y.ID == x.ID) &&                                                          s_types.Any(z => z.ID == s_blueprintTypes[x.ID].ProductTypeID)                                                          && s_types[s_blueprintTypes[x.ID].ProductTypeID].Published))              {                  UpdatePercentDone(s_blueprintGenTotal);                    foreach (InvMetaType relation in s_metaTypes                      .Where(x => x.ItemID == s_blueprintTypes[item.ID].ProductTypeID))                  {                      switch (relation.MetaGroupID)                      {                          case 2:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                              break;                          case 3:                              item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                              break;                          case 4:                              item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                              break;                          case 5:                              item.MarketGroupID = DBConstants.BlueprintNonMarketOfficerGroupID;                              break;                          case 14:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                              break;                      }                  }                    if (item.MarketGroupID == null)                      item.MarketGroupID = DBConstants.BlueprintNonMarketTechIGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following statement contains a magic number: foreach (InvType item in s_types.Where(x => x.MarketGroupID == null && !x.Name.Contains("TEST")                                                          && s_blueprintTypes.Any(y => y.ID == x.ID) &&                                                          s_types.Any(z => z.ID == s_blueprintTypes[x.ID].ProductTypeID)                                                          && s_types[s_blueprintTypes[x.ID].ProductTypeID].Published))              {                  UpdatePercentDone(s_blueprintGenTotal);                    foreach (InvMetaType relation in s_metaTypes                      .Where(x => x.ItemID == s_blueprintTypes[item.ID].ProductTypeID))                  {                      switch (relation.MetaGroupID)                      {                          case 2:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                              break;                          case 3:                              item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                              break;                          case 4:                              item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                              break;                          case 5:                              item.MarketGroupID = DBConstants.BlueprintNonMarketOfficerGroupID;                              break;                          case 14:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                              break;                      }                  }                    if (item.MarketGroupID == null)                      item.MarketGroupID = DBConstants.BlueprintNonMarketTechIGroupID;              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == s_blueprintTypes[srcBlueprint.ID].ProductTypeID))              {                  switch (relation.MetaGroupID)                  {                      default:                      case 1:                          blueprint.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          blueprint.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          blueprint.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          blueprint.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          blueprint.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          blueprint.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          blueprint.MetaGroup = ItemMetaGroup.T3;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == s_blueprintTypes[srcBlueprint.ID].ProductTypeID))              {                  switch (relation.MetaGroupID)                  {                      default:                      case 1:                          blueprint.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          blueprint.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          blueprint.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          blueprint.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          blueprint.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          blueprint.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          blueprint.MetaGroup = ItemMetaGroup.T3;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == s_blueprintTypes[srcBlueprint.ID].ProductTypeID))              {                  switch (relation.MetaGroupID)                  {                      default:                      case 1:                          blueprint.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          blueprint.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          blueprint.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          blueprint.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          blueprint.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          blueprint.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          blueprint.MetaGroup = ItemMetaGroup.T3;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == s_blueprintTypes[srcBlueprint.ID].ProductTypeID))              {                  switch (relation.MetaGroupID)                  {                      default:                      case 1:                          blueprint.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          blueprint.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          blueprint.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          blueprint.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          blueprint.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          blueprint.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          blueprint.MetaGroup = ItemMetaGroup.T3;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == s_blueprintTypes[srcBlueprint.ID].ProductTypeID))              {                  switch (relation.MetaGroupID)                  {                      default:                      case 1:                          blueprint.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          blueprint.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          blueprint.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          blueprint.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          blueprint.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          blueprint.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          blueprint.MetaGroup = ItemMetaGroup.T3;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,The following statement contains a magic number: foreach (InvMetaType relation in s_metaTypes                  .Where(x => x.ItemID == s_blueprintTypes[srcBlueprint.ID].ProductTypeID))              {                  switch (relation.MetaGroupID)                  {                      default:                      case 1:                          blueprint.MetaGroup = ItemMetaGroup.T1;                          break;                      case 2:                          blueprint.MetaGroup = ItemMetaGroup.T2;                          break;                      case 3:                          blueprint.MetaGroup = ItemMetaGroup.Storyline;                          break;                      case 4:                          blueprint.MetaGroup = ItemMetaGroup.Faction;                          break;                      case 5:                          blueprint.MetaGroup = ItemMetaGroup.Officer;                          break;                      case 6:                          blueprint.MetaGroup = ItemMetaGroup.Deadspace;                          break;                      case 14:                          blueprint.MetaGroup = ItemMetaGroup.T3;                          break;                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,The following statement contains a magic number: foreach (int relationItemID in s_metaTypes                  .Where(x => x.ParentItemID == blueprint.ProduceItemID && x.MetaGroupID == 2)                  .Select(x => x.ItemID))              {                  // Look for a blueprint that produces the related item                  foreach (int variationItemID in s_blueprintTypes                      .Where(x => x.ProductTypeID == relationItemID).Select(x => x.ID))                  {                      // Add the variation blueprint                      inventionBlueprint.Add(s_types[variationItemID].ID);                  }              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateGeography,The following statement contains a magic number: foreach (MapRegion srcRegion in s_regions)              {                  var region = new SerializableRegion                                   {                                       ID = srcRegion.ID'                                       Name = srcRegion.Name                                   };                  regions.Add(region);                    // Constellations                  var constellations = new List<SerializableConstellation>();                  foreach (MapConstellation srcConstellation in s_constellations.Where(x => x.RegionID == srcRegion.ID))                  {                      var constellation = new SerializableConstellation                                              {                                                  ID = srcConstellation.ID'                                                  Name = srcConstellation.Name                                              };                      constellations.Add(constellation);                        // Systems                      const double baseDistance = 1.0E14;                      var systems = new List<SerializableSolarSystem>();                      foreach (                          MapSolarSystem srcSystem in s_solarSystems.Where(x => x.ConstellationID == srcConstellation.ID))                      {                          var system = new SerializableSolarSystem                                           {                                               ID = srcSystem.ID'                                               Name = srcSystem.Name'                                               X = (int) (srcSystem.X/baseDistance)'                                               Y = (int) (srcSystem.Y/baseDistance)'                                               Z = (int) (srcSystem.Z/baseDistance)'                                               SecurityLevel = srcSystem.SecurityLevel                                           };                          systems.Add(system);                            // Stations                          var stations = new List<SerializableStation>();                          foreach (StaStation srcStation in s_stations.Where(x => x.SolarSystemID == srcSystem.ID))                          {                              UpdatePercentDone(s_geoGen);                                // Agents                              var stationAgents = new List<SerializableAgent>();                              foreach (AgtAgents srcAgent in s_agents.Where(x => x.LocationID == srcStation.ID))                              {                                  var agent = new SerializableAgent                                                  {                                                      ID = srcAgent.ID'                                                      Level = srcAgent.Level'                                                      Quality = srcAgent.Quality'                                                      Name = s_names.FirstOrDefault(x => x.ID == srcAgent.ID).Name                                                  };                                  stationAgents.Add(agent);                              }                                var station = new SerializableStation                                                {                                                    ID = srcStation.ID'                                                    Name = srcStation.Name'                                                    CorporationID = srcStation.CorporationID'                                                    CorporationName = s_names.FirstOrDefault(x => x.ID == srcStation.CorporationID).Name'                                                    ReprocessingEfficiency = srcStation.ReprocessingEfficiency'                                                    ReprocessingStationsTake = srcStation.ReprocessingStationsTake'                                                    Agents = stationAgents.ToArray()                                                };                              stations.Add(station);                          }                          system.Stations = stations.OrderBy(x => x.Name).ToArray();                      }                      constellation.Systems = systems.OrderBy(x => x.Name).ToArray();                  }                  region.Constellations = constellations.OrderBy(x => x.Name).ToArray();              }
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,UpdatePercentDone,The following statement contains a magic number: var percent = (int) ((s_counter/total)*100);
Magic Number,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,UpdateProgress,The following statement contains a magic number: s_text = String.Format("{0}%"' (int) ((s_tablesCount/s_totalTablesCount)*100));
Missing Default,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,GenerateItems,The following switch statement is missing a default case: switch (srcItem.ID)                  {                      case 13202: // Megathron Federate Issue                      case 26840: // Raven State Issue                      case 26842: // Tempest Tribal Issue                          srcItem.MarketGroupID = DBConstants.UniqueDesignBattleshipsGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                      case 21097: // Goru's Shuttle                      case 21628: // Guristas Shuttle                      case 30842: // Interbus Shuttle                          srcItem.MarketGroupID = DBConstants.UniqueDesignShuttlesGroupID;                          srcItem.RaceID = (int)Race.Faction;                          break;                            // Set some items market group to support blueprints                      case 21815:                      case 23882:                      case 24289:                      case 27029:                      case 27038:                      case 29203:                      case 29226:                      case 10260:                      case 19758:                      case 10257:                      case 10258:                      case 32077:                      case 30424:                      case 30839:                      case 30422:                      case 30342:                      case 30420:                      case 30328:                      case 21054:                      case 17761:                      case 23883:                      case 29202:                      case 21510:                      case 22335:                      case 22333:                      case 22337:                      case 22339:                      case 22923:                      case 22329:                      case 22327:                      case 22325:                      case 22331:                          srcItem.MarketGroupID = DBConstants.RootNonMarketGroupID;                          break;                  }
Missing Default,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following switch statement is missing a default case: switch (item.ID)                  {                      case 22924: // 'Wild' Miner I Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                          break;                      case 2837: // Adrestia Blueprint                      case 3533: // Echelon Blueprint                      case 17704: // Imperial Navy Slicer Blueprint                      case 17620: // Caldari Navy Hookbill Blueprint                      case 17842: // Federation Navy Comet Blueprint                      case 17813: // Republic Fleet Firetail Blueprint                      case 17737: // Nightmare Blueprint                      case 17739: // Machariel Blueprint                      case 17933: // Dramiel Blueprint                      case 17927: // Cruor Blueprint                      case 17925: // Succubus Blueprint                      case 17929: // Daredevil Blueprint                      case 17721: // Cynabal Blueprint                      case 17923: // Ashimmu Blueprint                      case 17719: // Phantasm Blueprint                      case 21098: // Goru's Shuttle Blueprint                      case 21629: // Guristas Shuttle Blueprint                      case 21842: // Gallente Mining Laser Blueprint                      case 30843: // Interbus Shuttle Blueprint                      case 32208: // Freki Blueprint                      case 32210: // Mimir Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                          break;                      case 29987: // Legion Blueprint                      case 30227: // Legion Defensive - Adaptive Augmenter Blueprint                      case 30037: // Legion Electronics - Energy Parasitic Complex Blueprint                      case 30170: // Legion Engineering - Power Core Multiplier Blueprint                      case 30392: // Legion Offensive - Drone Synthesis Projector Blueprint                      case 30077: // Legion Propulsion - Chassis Optimization Blueprint                      case 29991: // Loki Blueprint                      case 30242: // Loki Defensive - Adaptive Shielding Blueprint                      case 30067: // Loki Electronics - Immobility Drivers Blueprint                      case 30160: // Loki Engineering - Power Core Multiplier Blueprint                      case 30407: // Loki Offensive - Turret Concurrence Registry Blueprint                      case 30107: // Loki Propulsion - Chassis Optimization Blueprint                      case 29989: // Proteus Blueprint                      case 30237: // Proteus Defensive - Adaptive Augmenter Blueprint                      case 30057: // Proteus Electronics - Friction Extension Processor Blueprint                      case 30150: // Proteus Engineering - Power Core Multiplier Blueprint                      case 30402: // Proteus Offensive - Dissonic Encoding Platform Blueprint                      case 30097: // Proteus Propulsion - Wake Limiter Blueprint                      case 29985: // Tengu Blueprint                      case 30232: // Tengu Defensive - Adaptive Shielding Blueprint                      case 30047: // Tengu Electronics - Obfuscation Manifold Blueprint                      case 30140: // Tengu Engineering - Power Core Multiplier Blueprint                      case 30397: // Tengu Offensive - Accelerated Ejection Bay Blueprint                      case 30087: // Tengu Propulsion - Intercalated Nanofibers Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                          break;                      case 32078: // Small EW Drone Range Augmentor II Blueprint                          item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                          break;                  }
Missing Default,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,ConfigureNullMarketBlueprint,The following switch statement is missing a default case: switch (relation.MetaGroupID)                      {                          case 2:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIGroupID;                              break;                          case 3:                              item.MarketGroupID = DBConstants.BlueprintNonMarketStorylineGroupID;                              break;                          case 4:                              item.MarketGroupID = DBConstants.BlueprintNonMarketFactionGroupID;                              break;                          case 5:                              item.MarketGroupID = DBConstants.BlueprintNonMarketOfficerGroupID;                              break;                          case 14:                              item.MarketGroupID = DBConstants.BlueprintNonMarketTechIIIGroupID;                              break;                      }
Missing Default,EVEMon.XmlGenerator,Program,C:\repos\evemuproject_evemu_incursion\playertools\evemon\src\Tools\XmlGenerator\Program.cs,CreateBlueprint,The following switch statement is missing a default case: switch (srcBlueprint.MarketGroupID)              {                  case DBConstants.BlueprintNonMarketStorylineGroupID:                      blueprint.MetaGroup = ItemMetaGroup.Storyline;                      break;                  case DBConstants.BlueprintNonMarketFactionGroupID:                      blueprint.MetaGroup = ItemMetaGroup.Faction;                      break;                  case DBConstants.BlueprintNonMarketTechIIIGroupID:                      blueprint.MetaGroup = ItemMetaGroup.T3;                      break;                  case DBConstants.BlueprintNonMarketTechIIGroupID:                      blueprint.MetaGroup = ItemMetaGroup.T2;                      break;              }
