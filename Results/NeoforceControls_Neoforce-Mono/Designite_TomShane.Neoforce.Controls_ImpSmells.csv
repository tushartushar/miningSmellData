Implementation smell,Namespace,Class,File,Method,Description
Long Method,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,DrawPart,The method has 116 lines of code.
Long Method,TomShane.Neoforce.Controls,KeyboardLayout,C:\repos\NeoforceControls_Neoforce-Mono\KeyboardLayout.cs,KeyToString,The method has 134 lines of code.
Long Method,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,ClientArea_Draw,The method has 108 lines of code.
Long Method,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,OnKeyPress,The method has 233 lines of code.
Long Method,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Extract,The method has 162 lines of code.
Long Method,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The method has 106 lines of code.
Complex Method,TomShane.Neoforce.Controls,ArchiveManager,C:\repos\NeoforceControls_Neoforce-Mono\ArchiveManager.cs,GetAssetNames,Cyclomatic complexity of the method is 9
Complex Method,TomShane.Neoforce.Controls,ArchiveManager,C:\repos\NeoforceControls_Neoforce-Mono\ArchiveManager.cs,GetDirectories,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,ClientArea_Draw,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Container,C:\repos\NeoforceControls_Neoforce-Mono\Container.cs,AdjustMargins,Cyclomatic complexity of the method is 10
Complex Method,TomShane.Neoforce.Controls,Container,C:\repos\NeoforceControls_Neoforce-Mono\Container.cs,CalcScrolling,Cyclomatic complexity of the method is 13
Complex Method,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,OnKeyPress,Cyclomatic complexity of the method is 10
Complex Method,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,OnGamePadPress,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,Show,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Dispose,Cyclomatic complexity of the method is 10
Complex Method,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,GetClippingRect,Cyclomatic complexity of the method is 14
Complex Method,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,PrepareTexture,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,PerformResize,Cyclomatic complexity of the method is 14
Complex Method,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,UpdateGamePad,Cyclomatic complexity of the method is 10
Complex Method,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,UpdateKeys,Cyclomatic complexity of the method is 9
Complex Method,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,UpdateButtons,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,Dispose,Cyclomatic complexity of the method is 12
Complex Method,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,MouseDownProcess,Cyclomatic complexity of the method is 13
Complex Method,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,MouseMoveProcess,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,LoadSkin,Cyclomatic complexity of the method is 12
Complex Method,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,LoadControls,Cyclomatic complexity of the method is 9
Complex Method,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,LoadLayers,Cyclomatic complexity of the method is 10
Complex Method,TomShane.Neoforce.Controls,TabControl,C:\repos\NeoforceControls_Neoforce-Mono\TabControl.cs,DrawControl,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,ClientArea_Draw,Cyclomatic complexity of the method is 15
Complex Method,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,CharAtPos,Cyclomatic complexity of the method is 8
Complex Method,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,OnKeyPress,Cyclomatic complexity of the method is 11
Complex Method,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,Cyclomatic complexity of the method is 10
Complex Method,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,Cyclomatic complexity of the method is 9
Complex Method,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,Cyclomatic complexity of the method is 11
Long Parameter List,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,DrawPart,The method has 5 parameters. Parameters: renderer' rect' pos' style' all
Long Parameter List,TomShane.Neoforce.Controls,KeyEventArgs,C:\repos\NeoforceControls_Neoforce-Mono\EventArgs.cs,KeyEventArgs,The method has 5 parameters. Parameters: key' control' shift' alt' caps
Long Parameter List,TomShane.Neoforce.Controls,NativeMethods,C:\repos\NeoforceControls_Neoforce-Mono\NativeMethods.cs,LoadImage,The method has 6 parameters. Parameters: instance' fileName' type' width' height' load
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,Draw,The method has 5 parameters. Parameters: texture' left' top' source' color
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 5 parameters. Parameters: font' text' left' top' color
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 5 parameters. Parameters: font' text' rect' color' alignment
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 6 parameters. Parameters: font' text' rect' color' alignment' ellipsis
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 5 parameters. Parameters: control' layer' text' rect' state
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 5 parameters. Parameters: control' layer' text' rect' margins
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 6 parameters. Parameters: control' layer' text' rect' state' margins
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 7 parameters. Parameters: control' layer' text' rect' margins' ox' oy
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 8 parameters. Parameters: control' layer' text' rect' state' margins' ox' oy
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 8 parameters. Parameters: control' layer' text' rect' margins' ox' oy' ellipsis
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 9 parameters. Parameters: control' layer' text' rect' state' margins' ox' oy' ellipsis
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The method has 8 parameters. Parameters: font' text' rect' color' alignment' offsetX' offsetY' ellipsis
Long Parameter List,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,GetSourceArea,The method has 5 parameters. Parameters: imageSize' partSize' margins' alignment' index
Long Parameter List,TomShane.Neoforce.Controls,SkinStates,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,SkinStates,The method has 5 parameters. Parameters: enabled' hovered' pressed' focused' disabled
Long Parameter List,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,ReadAttribute,The method has 6 parameters. Parameters: retval' inherited' element' attrib' defval' needed
Long Parameter List,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,ReadAttributeInt,The method has 6 parameters. Parameters: retval' inherited' element' attrib' defval' needed
Long Parameter List,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,ReadAttributeBool,The method has 6 parameters. Parameters: retval' inherited' element' attrib' defval' needed
Long Parameter List,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,ReadAttributeByte,The method has 6 parameters. Parameters: retval' inherited' element' attrib' defval' needed
Long Parameter List,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,ReadAttributeColor,The method has 6 parameters. Parameters: retval' inherited' element' attrib' defval' needed
Long Parameter List,TomShane.Neoforce.Controls,TabPage,C:\repos\NeoforceControls_Neoforce-Mono\TabControl.cs,CalcRect,The method has 5 parameters. Parameters: prev' font' margins' offset' first
Long Identifier,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,,The length of the parameter ZipEntryDataDescriptorSignature is 31.
Long Identifier,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,,The length of the parameter _TrimVolumeFromFullyQualifiedPaths is 34.
Long Identifier,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The length of the parameter EndOfCentralDirectorySignature is 30.
Long Identifier,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,,The length of the parameter _TrimVolumeFromFullyQualifiedPaths is 34.
Long Statement,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The length of the statement  "                    ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4); " is 130.
Long Statement,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,SendMessage,The length of the statement  "                if ((k.Key == Microsoft.Xna.Framework.Input.Keys.Enter || g.Button == GamePadActions.Press) && message != null && message != "") " is 128.
Long Statement,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The length of the statement  "                    renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col); " is 151.
Long Statement,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,AutoSize,The length of the statement  "                Width = LineWidth() + (Skin.Layers["Control"].ContentMargins.Horizontal - Skin.OriginMargins.Horizontal) + font.OffsetX; " is 120.
Long Statement,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,Update,The length of the statement  "            if (timer != 0 && time - timer >= Manager.MenuDelay && ItemIndex >= 0 && Items[ItemIndex].Items.Count > 0 && ChildMenu == null) " is 127.
Long Statement,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,Input_MouseDown,The length of the statement  "            else if ((RootMenu is MainMenu) && RootMenu.ChildMenu != null && !(RootMenu.ChildMenu as ContextMenu).CheckArea(e.Position.X' e.Position.Y) && Visible) " is 151.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawChildControls,The length of the statement  "                    if (((c.Root == c.Parent && !c.Detached) || c.Root != c.Parent) && AbsoluteRect.Intersects(c.AbsoluteRect) && c.visible) " is 120.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawChildControls,The length of the statement  "                        Rectangle rect = new Rectangle(c.OriginLeft - root.AbsoluteLeft' c.OriginTop - root.AbsoluteTop' c.OriginWidth' c.OriginHeight); " is 128.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Render,The length of the statement  "                    renderer.Draw(target' OriginLeft' OriginTop' new Rectangle(0' 0' OriginWidth' OriginHeight)' Color.FromNonPremultiplied(255' 255' 255' Alpha)); " is 143.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawOutline,The length of the statement  "                    r = new Rectangle(OutlineRect.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' OutlineRect.Top + (parent.AbsoluteTop - root.AbsoluteTop)' OutlineRect.Width' OutlineRect.Height); " is 178.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawOutline,The length of the statement  "                    r = new Rectangle(r.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' r.Top + (parent.AbsoluteTop - root.AbsoluteTop)' r.Width' r.Height); " is 138.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,CheckLayer,The length of the statement  "                throw new Exception("Unable to read skin layer \"" + layer + "\" for control \"" + Utilities.DeriveControlName(this) + "\"."); " is 126.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,CheckLayer,The length of the statement  "                throw new Exception("Unable to read skin layer with index \"" + layer.ToString() + "\" for control \"" + Utilities.DeriveControlName(this) + "\"."); " is 148.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,ClickProcess,The length of the statement  "            else if (timer - doubleClickTimer <= Manager.DoubleClickTime && (ex.Button == doubleClickButton && ex.Button != MouseButton.None)) " is 130.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,ToolTipUpdate,The length of the statement  "            if (Manager.ToolTipsEnabled && toolTip != null && tooltipTimer > 0 && (TimeSpan.FromTicks(DateTime.Now.Ticks).TotalMilliseconds - tooltipTimer) >= Manager.ToolTipDelay) " is 168.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,GetResizeCursor,The length of the statement  "                        return ((resizeEdge & Anchors.Left) == Anchors.Left && (resizeEdge & Anchors.Top) == Anchors.Top) ? Manager.Skin.Cursors["DiagonalLeft"].Resource : Cursor; " is 155.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,GetResizeCursor,The length of the statement  "                        return ((resizeEdge & Anchors.Bottom) == Anchors.Bottom && (resizeEdge & Anchors.Right) == Anchors.Right) ? Manager.Skin.Cursors["DiagonalLeft"].Resource : Cursor; " is 163.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,GetResizeCursor,The length of the statement  "                        return ((resizeEdge & Anchors.Top) == Anchors.Top && (resizeEdge & Anchors.Right) == Anchors.Right) ? Manager.Skin.Cursors["DiagonalRight"].Resource : Cursor; " is 158.
Long Statement,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,GetResizeCursor,The length of the statement  "                        return ((resizeEdge & Anchors.Bottom) == Anchors.Bottom && (resizeEdge & Anchors.Left) == Anchors.Left) ? Manager.Skin.Cursors["DiagonalRight"].Resource : Cursor; " is 162.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      lc.Text.Font.Resource = Manager.Skin.Fonts[Manager.Skin.Controls["Dialog"].Layers["TopPanel"].Attributes["CaptFont"].Value].Resource; " is 133.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      lc.Text.Colors.Enabled = Utilities.ParseColor(Manager.Skin.Controls["Dialog"].Layers["TopPanel"].Attributes["CaptFontColor"].Value); " is 132.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      ld.Text.Font.Resource = Manager.Skin.Fonts[Manager.Skin.Controls["Dialog"].Layers["TopPanel"].Attributes["DescFont"].Value].Resource; " is 133.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      ld.Text.Colors.Enabled = Utilities.ParseColor(Manager.Skin.Controls["Dialog"].Layers["TopPanel"].Attributes["DescFontColor"].Value); " is 132.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      pnlTop.BevelStyle = Utilities.ParseBevelStyle(Manager.Skin.Controls["Dialog"].Layers["TopPanel"].Attributes["BevelStyle"].Value); " is 129.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      lblCapt.Height = Manager.Skin.Fonts[Manager.Skin.Controls["Dialog"].Layers["TopPanel"].Attributes["CaptFont"].Value].Height;             " is 124.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      lblDesc.Height = Manager.Skin.Fonts[Manager.Skin.Controls["Dialog"].Layers["TopPanel"].Attributes["DescFont"].Value].Height; " is 124.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      pnlBottom.Color = Utilities.ParseColor(Manager.Skin.Controls["Dialog"].Layers["BottomPanel"].Attributes["Color"].Value); " is 120.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      pnlBottom.BevelMargin = int.Parse(Manager.Skin.Controls["Dialog"].Layers["BottomPanel"].Attributes["BevelMargin"].Value); " is 121.
Long Statement,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The length of the statement  "      pnlBottom.BevelStyle = Utilities.ParseBevelStyle(Manager.Skin.Controls["Dialog"].Layers["BottomPanel"].Attributes["BevelStyle"].Value);       " is 135.
Long Statement,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The length of the statement  "                Rectangle bg = new Rectangle(r.Left + offset.X' (r.Top - (int)(size.Y / 2)) + offset.Y' (int)size.X + layer.ContentMargins.Horizontal' (int)size.Y); " is 148.
Long Statement,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The length of the statement  "                renderer.DrawString(this' layer' Text' new Rectangle(r.Left' r.Top - (int)(size.Y / 2)' (int)(size.X)' (int)size.Y)' true' 0' 0' false); " is 136.
Long Statement,TomShane.Neoforce.Controls,GroupPanel,C:\repos\NeoforceControls_Neoforce-Mono\GroupPanel.cs,DrawControl,The length of the statement  "        renderer.DrawString(this' layer' Text' new Rectangle(rect.Left' rect.Top + layer.ContentMargins.Top' rect.Width' Skin.ClientMargins.Top - layer.ContentMargins.Horizontal)' false' offset.X' offset.Y' false); " is 206.
Long Statement,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,RecalcPosition,The length of the statement  "      return new Point((int)((pos.X - InputOffset.X) / InputOffset.RatioX)' (int)((pos.Y - InputOffset.Y) / InputOffset.RatioY)); " is 123.
Long Statement,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,BuildMouseEvent,The length of the statement  "      e.State = new MouseState(e.Position.X' e.Position.Y' e.State.ScrollWheelValue' e.State.LeftButton' e.State.MiddleButton' e.State.RightButton' e.State.XButton1' e.State.XButton2);       " is 178.
Long Statement,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,UpdateMouse,The length of the statement  "          MouseScrollDirection direction = state.ScrollWheelValue < mouseState.ScrollWheelValue ? MouseScrollDirection.Down : MouseScrollDirection.Up; " is 140.
Long Statement,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,DrawPane,The length of the statement  "                        e.Renderer.DrawString(this' Skin.Layers["Control"]' items[i].ToString()' new Rectangle(e.Rectangle.Left' e.Rectangle.Top - d + ((i - v) * h)' e.Rectangle.Width' h)' false); " is 172.
Long Statement,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,DrawPane,The length of the statement  "                        e.Renderer.DrawString(this' sel' items[s].ToString()' new Rectangle(e.Rectangle.Left' e.Rectangle.Top + pos' e.Rectangle.Width' h)' false); " is 139.
Long Statement,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,TrackItem,The length of the statement  "                if (i >= 0 && i < Items.Count && i >= (int)Math.Floor((float)sbVert.Value / 10f) && i < (int)Math.Ceiling((float)(sbVert.Value + sbVert.PageSize) / 10f)) ItemIndex = i; " is 168.
Long Statement,TomShane.Neoforce.Controls,MainMenu,C:\repos\NeoforceControls_Neoforce-Mono\MainMenu.cs,OnMouseMove,The length of the statement  "      if (ItemIndex >= 0 && (i == -1 || i != ItemIndex) && Items[ItemIndex].Items != null && Items[ItemIndex].Items.Count > 0 && ChildMenu != null) " is 141.
Long Statement,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,CreateRenderTarget,The length of the statement  "            return new RenderTarget2D(GraphicsDevice' width' height' false' SurfaceFormat.Color' DepthFormat.None' GraphicsDevice.PresentationParameters.MultiSampleCount' _RenderTargetUsage); " is 179.
Long Statement,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,Draw,The length of the statement  "                throw new Exception("Manager.RenderTarget has to be specified. Assign a render target or set Manager.AutoCreateRenderTarget property to true."); " is 144.
Long Statement,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,TabNextControl,The length of the statement  "            while ((OrderList[i].Root != control.Root || !OrderList[i].CanFocus || OrderList[i].IsRoot || !OrderList[i].Enabled) && i != start); " is 132.
Long Statement,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,TabPrevControl,The length of the statement  "            while ((OrderList[i].Root != control.Root || !OrderList[i].CanFocus || OrderList[i].IsRoot || !OrderList[i].Enabled) && i != start); " is 132.
Long Statement,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,MouseUpProcess,The length of the statement  "                if (CheckPosition(c' e.Position) && CheckOrder(c' e.Position) && states.Click == (int)e.Button && CheckButtons((int)e.Button)) " is 126.
Long Statement,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,KeyPressProcess,The length of the statement  "                else if (e.Key == Microsoft.Xna.Framework.Input.Keys.Tab && !e.Shift && !e.Handled && CheckButtons((int)MouseButton.None)) " is 122.
Long Statement,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,KeyPressProcess,The length of the statement  "                else if (e.Key == Microsoft.Xna.Framework.Input.Keys.Tab && e.Shift && !e.Handled && CheckButtons((int)MouseButton.None)) " is 121.
Long Statement,TomShane.Neoforce.Controls,Panel,C:\repos\NeoforceControls_Neoforce-Mono\Panel.cs,AdjustMargins,The length of the statement  "      ClientMargins = new Margins(Skin.ClientMargins.Left + l' Skin.ClientMargins.Top + t' Skin.ClientMargins.Right + r' Skin.ClientMargins.Bottom + b);       " is 146.
Long Statement,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,DrawControl,The length of the statement  "          if (s > r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4)) s = r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4); " is 127.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,Begin,The length of the statement  "                    sb.Begin(SpriteSortMode.Immediate' state' states.SamplerState' states.DepthStencilState' states.RasterizerState' null' this.customMatrix.Value); " is 144.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,Begin,The length of the statement  "                    sb.Begin(SpriteSortMode.Immediate' BlendState.Opaque' states.SamplerState' states.DepthStencilState' states.RasterizerState' null' this.customMatrix.Value); " is 156.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,Begin,The length of the statement  "                    sb.Begin(SpriteSortMode.Immediate' BlendState.Opaque' states.SamplerState' states.DepthStencilState' states.RasterizerState); " is 125.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawTileTexture,The length of the statement  "                    sb.Begin(SpriteSortMode.Texture' BlendState.AlphaBlend' SamplerState.LinearWrap' DepthStencilState.Default' RasterizerState.CullNone' null' this.customMatrix.Value); " is 165.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawTileTexture,The length of the statement  "                    sb.Begin(SpriteSortMode.Texture' BlendState.AlphaBlend' SamplerState.LinearWrap' DepthStencilState.Default' RasterizerState.CullNone); " is 134.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawTileTexture,The length of the statement  "                sb.Draw(texture' new Vector2(destination.X'destination.Y)' destination' color' 0' Vector2.Zero' 1' SpriteEffects.None' 0); " is 122.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,Draw,The length of the statement  "            sb.Draw(texture' new Vector2(left' top)' null' color' 0.0f' Vector2.Zero' 1.0f' SpriteEffects.None' Manager.GlobalDepth); " is 121.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,Draw,The length of the statement  "                sb.Draw(texture' new Vector2(left' top)' source' color' 0.0f' Vector2.Zero' 1.0f' SpriteEffects.None' Manager.GlobalDepth); " is 123.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The length of the statement  "            sb.DrawString(font' text' new Vector2(left' top)' color' 0.0f' Vector2.Zero' 1.0f' SpriteEffects.None' Manager.GlobalDepth); " is 124.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The length of the statement  "                else if (state == ControlState.Focused || (control.Focused && state == ControlState.Hovered && layer.States.Hovered.Index == -1)) " is 129.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The length of the statement  "                    if (control.TextColor != Control.UndefinedColor && control.ControlState != ControlState.Disabled) col = control.TextColor; " is 122.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.TopLeft)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.TopLeft' index)' color); " is 183.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.TopCenter)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.TopCenter' index)' color); " is 187.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.TopRight)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.TopRight' index)' color); " is 185.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.MiddleLeft)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.MiddleLeft' index)' color); " is 189.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.MiddleCenter)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.MiddleCenter' index)' color); " is 193.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.MiddleRight)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.MiddleRight' index)' color); " is 191.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.BottomLeft)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.BottomLeft' index)' color); " is 189.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.BottomCenter)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.BottomCenter' index)' color); " is 193.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            Draw(layer.Image.Resource' GetDestinationArea(rect' layer.SizingMargins' Alignment.BottomRight)' GetSourceArea(imageSize' partSize' layer.SizingMargins' Alignment.BottomRight' index)' color); " is 191.
Long Statement,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The length of the statement  "            else if (state == ControlState.Focused || (control.Focused && state == ControlState.Hovered && layer.States.Hovered.Index == -1)) " is 129.
Long Statement,TomShane.Neoforce.Controls,Skin,C:\repos\NeoforceControls_Neoforce-Mono\Skin.cs,LoadSkin,The length of the statement  "                        throw new Exception("This version of Neoforce Controls can only read skin files in version of " + Manager._SkinVersion.ToString() + "."); " is 137.
Long Statement,TomShane.Neoforce.Controls,TabControl,C:\repos\NeoforceControls_Neoforce-Mono\TabControl.cs,DrawControl,The length of the statement  "        renderer.DrawString(l2.Text.Font.Resource' tabPages[selectedIndex].Text' si' l2.Text.Colors.Focused' l2.Text.Alignment' l2.Text.OffsetX' l2.Text.OffsetY' false); " is 161.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,ClientArea_Draw,The length of the statement  "            rc = new Rectangle(r.Left + (int)size.X - horz.Value' r.Top + (int)((PosY - vert.Value) * font.LineSpacing)' cursor.Width' font.LineSpacing); " is 141.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The length of the statement  "            r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt' " is 131.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The length of the statement  "            if (i == sl) r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt); " is 242.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The length of the statement  "            else if (i == el) r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X' hgt); " is 158.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The length of the statement  "            else r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X' hgt); " is 124.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,CharAtPos,The length of the statement  "        if (x > ClientLeft + ((int)font.MeasureString(str).X) - horz.Value - (font.MeasureString(str[str.Length - 1].ToString()).X / 3)) px = str.Length; " is 145.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,OnMouseMove,The length of the statement  "      if (e.Button == MouseButton.Left && !selection.IsEmpty && mode != TextBoxMode.Password && selection.Length < Text.Length) " is 121.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,OnKeyPress,The length of the statement  "            System.Windows.Forms.Clipboard.SetText((Text.Substring(selection.Start' selection.Length)).Replace("\n"' Environment.NewLine)); " is 127.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The length of the statement  "        else if ((scrollBars == ScrollBars.Vertical || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline) vert.Visible = true; " is 132.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The length of the statement  "        if (Width < 50 || wordWrap || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Horizontal)) horz.Visible = false; " is 123.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The length of the statement  "        else if ((scrollBars == ScrollBars.Horizontal || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline && !wordWrap) horz.Visible = true; " is 147.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,AdjustMargins,The length of the statement  "        ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' ClientMargins.Right' 18 + Skin.ClientMargins.Bottom); " is 120.
Long Statement,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,AdjustMargins,The length of the statement  "        ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' 18 + Skin.ClientMargins.Right' ClientMargins.Bottom); " is 120.
Long Statement,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,DrawControl,The length of the statement  "      Rectangle r1 = new Rectangle(rect.Left + p.ContentMargins.Left' t + p.ContentMargins.Top' w' h - p.ContentMargins.Vertical); " is 124.
Long Statement,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,btnSlider_KeyPress,The length of the statement  "      if (e.Key == Microsoft.Xna.Framework.Input.Keys.Left || e.Key == Microsoft.Xna.Framework.Input.Keys.Down) Value -= stepSize; " is 124.
Long Statement,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,btnSlider_KeyPress,The length of the statement  "      else if (e.Key == Microsoft.Xna.Framework.Input.Keys.Right || e.Key == Microsoft.Xna.Framework.Input.Keys.Up) Value += stepSize; " is 128.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Render,The length of the statement  "        Color cl = Color.FromNonPremultiplied(l.States.Enabled.Color.R' l.States.Enabled.Color.G' l.States.Enabled.Color.B' Alpha); " is 123.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Render,The length of the statement  "        renderer.DrawLayer(l' new Rectangle(Left - c.OriginMargins.Left' Top - c.OriginMargins.Top' Width + c.OriginMargins.Horizontal' Height + c.OriginMargins.Vertical)' cl' 0); " is 171.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,DrawControl,The length of the statement  "      if ((Focused || (Manager.FocusedControl != null && Manager.FocusedControl.Root == this.Root)) && ControlState != ControlState.Disabled) " is 135.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,DrawControl,The length of the statement  "      renderer.DrawLayer(Skin.Layers[lrWindow]' rect' Skin.Layers[lrWindow].States.Enabled.Color' Skin.Layers[lrWindow].States.Enabled.Index); " is 136.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,DrawControl,The length of the statement  "        renderer.DrawLayer(l2' new Rectangle(rect.Left' rect.Top + l1.Height' l2.Width' rect.Height - l1.Height - l4.Height)' s2.Color' s2.Index);       " is 138.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,DrawControl,The length of the statement  "        renderer.DrawLayer(l3' new Rectangle(rect.Right - l3.Width' rect.Top + l1.Height' l3.Width' rect.Height - l1.Height - l4.Height)' s3.Color' s3.Index); " is 150.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,AdjustMargins,The length of the statement  "        ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.Layers[lrCaption].Height' Skin.ClientMargins.Right' Skin.ClientMargins.Bottom);                 " is 137.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,AdjustMargins,The length of the statement  "        ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top' Skin.ClientMargins.Right' Skin.ClientMargins.Bottom);         " is 130.
Long Statement,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,SetMovableArea,The length of the statement  "        MovableArea = new Rectangle(Skin.OriginMargins.Left' Skin.OriginMargins.Top' Width' Skin.Layers[lrCaption].Height - Skin.OriginMargins.Top); " is 140.
Long Statement,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,DateTimeToPacked,The length of the statement  "            UInt16 packedDate = (UInt16)((time.Day & 0x0000001F) | ((time.Month << 5) & 0x000001E0) | (((time.Year - 1980) << 9) & 0x0000FE00)); " is 132.
Long Statement,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,DateTimeToPacked,The length of the statement  "            UInt16 packedTime = (UInt16)((time.Second & 0x0000001F) | ((time.Minute << 5) & 0x000007E0) | ((time.Hour << 11) & 0x0000F800)); " is 128.
Long Statement,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The length of the statement  "                if (TurnOnDebug) System.Console.WriteLine("  ZipDirEntry::Read(): Bad signature ({0:X8}) at position {1}"' signature' s.Position); " is 130.
Long Statement,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The length of the statement  "                if (ze._Debug) System.Console.WriteLine("  ZipEntry::Read(): Bad signature ({0:X8}) at position {1}"' signature' s.Position); " is 125.
Long Statement,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The length of the statement  "            // the Data Descriptor' and presume that that signature does not appear in the (compressed) data of the compressed file.   " is 120.
Complex Conditional,TomShane.Neoforce.Controls,ArchiveManager,C:\repos\NeoforceControls_Neoforce-Mono\ArchiveManager.cs,GetAssetNames,The conditional expression  "path != null && path != "" && path != "\\" && path != "/""  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ArchiveManager,C:\repos\NeoforceControls_Neoforce-Mono\ArchiveManager.cs,GetDirectories,The conditional expression  "path != null && path != "" && path != "\\" && path != "/""  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,DrawControl,The conditional expression  "ReadOnly && (Focused || lstCombo.Focused) && drawSelection"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,Input_MouseDown,The conditional expression  "ReadOnly &&             (e.Position.X >= AbsoluteLeft &&             e.Position.X <= AbsoluteLeft + Width &&             e.Position.Y >= AbsoluteTop &&             e.Position.Y <= AbsoluteTop + Height)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,Input_MouseDown,The conditional expression  "lstCombo.Visible &&                 (e.Position.X < lstCombo.AbsoluteLeft ||            e.Position.X > lstCombo.AbsoluteLeft + lstCombo.Width ||            e.Position.Y < lstCombo.AbsoluteTop ||            e.Position.Y > lstCombo.AbsoluteTop + lstCombo.Height) &&                    (e.Position.X < btnDown.AbsoluteLeft ||            e.Position.X > btnDown.AbsoluteLeft + btnDown.Width ||            e.Position.Y < btnDown.AbsoluteTop ||            e.Position.Y > btnDown.AbsoluteTop + btnDown.Height)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,SendMessage,The conditional expression  "(k.Key == Microsoft.Xna.Framework.Input.Keys.Enter || g.Button == GamePadActions.Press) && message != null && message != """  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,Update,The conditional expression  "timer != 0 && time - timer >= Manager.MenuDelay && ItemIndex >= 0 && Items[ItemIndex].Items.Count > 0 && ChildMenu == null"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,Input_MouseDown,The conditional expression  "(RootMenu is MainMenu) && RootMenu.ChildMenu != null && !(RootMenu.ChildMenu as ContextMenu).CheckArea(e.Position.X' e.Position.Y) && Visible"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,CheckArea,The conditional expression  "x <= AbsoluteLeft ||                      x >= AbsoluteLeft + Width ||                      y <= AbsoluteTop ||                      y >= AbsoluteTop + Height"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawChildControls,The conditional expression  "((c.Root == c.Parent && !c.Detached) || c.Root != c.Parent) && AbsoluteRect.Intersects(c.AbsoluteRect) && c.visible"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawChildControls,The conditional expression  "c.Root != c.Parent && ((!c.Detached && CheckDetached(c)) || firstDetachedLevel)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,CheckLayer,The conditional expression  "!(skin != null && skin.Layers != null && skin.Layers.Count > 0 && skin.Layers[layer] != null)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,CheckLayer,The conditional expression  "!(skin != null && skin.Layers != null && skin.Layers.Count > 0 && skin.Layers[layer] != null)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,ToolTipUpdate,The conditional expression  "Manager.ToolTipsEnabled && toolTip != null && tooltipTimer > 0 && (TimeSpan.FromTicks(DateTime.Now.Ticks).TotalMilliseconds - tooltipTimer) >= Manager.ToolTipDelay"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,CheckResizableArea,The conditional expression  "(pos.X >= 0 && pos.X < resizerSize && pos.Y >= 0 && pos.Y < Height) ||                      (pos.X >= Width - resizerSize && pos.X < Width && pos.Y >= 0 && pos.Y < Height) ||                      (pos.Y >= 0 && pos.Y < resizerSize && pos.X >= 0 && pos.X < Width) ||                      (pos.Y >= Height - resizerSize && pos.Y < Height && pos.X >= 0 && pos.X < Width)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,PerformResize,The conditional expression  "(resizeArea == Alignment.TopCenter ||                          resizeArea == Alignment.TopLeft ||                          resizeArea == Alignment.TopRight) && (resizeEdge & Anchors.Top) == Anchors.Top"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,PerformResize,The conditional expression  "(resizeArea == Alignment.BottomCenter ||                               resizeArea == Alignment.BottomLeft ||                               resizeArea == Alignment.BottomRight) && (resizeEdge & Anchors.Bottom) == Anchors.Bottom"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,PerformResize,The conditional expression  "(resizeArea == Alignment.MiddleLeft ||                          resizeArea == Alignment.BottomLeft ||                          resizeArea == Alignment.TopLeft) && (resizeEdge & Anchors.Left) == Anchors.Left"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,PerformResize,The conditional expression  "(resizeArea == Alignment.MiddleRight ||                               resizeArea == Alignment.BottomRight ||                               resizeArea == Alignment.TopRight) && (resizeEdge & Anchors.Right) == Anchors.Right"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,UpdateGamePad,The conditional expression  "state.ThumbSticks.Left != gamePadState.ThumbSticks.Left ||            state.ThumbSticks.Right != gamePadState.ThumbSticks.Right ||            state.Triggers.Left != gamePadState.Triggers.Left ||            state.Triggers.Right != gamePadState.Triggers.Right"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,UpdateKeys,The conditional expression  "key.Key == Keys.LeftAlt || key.Key == Keys.RightAlt ||              key.Key == Keys.LeftShift || key.Key == Keys.RightShift ||              key.Key == Keys.LeftControl || key.Key == Keys.RightControl"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,DrawPane,The conditional expression  "s >= 0 && s < c && (Focused || !hideSelection)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,TrackItem,The conditional expression  "i >= 0 && i < Items.Count && i >= (int)Math.Floor((float)sbVert.Value / 10f) && i < (int)Math.Ceiling((float)(sbVert.Value + sbVert.PageSize) / 10f)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,MainMenu,C:\repos\NeoforceControls_Neoforce-Mono\MainMenu.cs,OnMouseMove,The conditional expression  "ItemIndex >= 0 && (i == -1 || i != ItemIndex) && Items[ItemIndex].Items != null && Items[ItemIndex].Items.Count > 0 && ChildMenu != null"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The conditional expression  "(kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The conditional expression  "cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The conditional expression  "(kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The conditional expression  "cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The conditional expression  "(kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The conditional expression  "cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The conditional expression  "(kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The conditional expression  "cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,MouseUpProcess,The conditional expression  "CheckPosition(c' e.Position) && CheckOrder(c' e.Position) && states.Click == (int)e.Button && CheckButtons((int)e.Button)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,MouseMoveProcess,The conditional expression  "chsta && ((chpos && states.Over == c[i]) || (states.Buttons[(int)e.Button] == c[i]))"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,MouseMoveProcess,The conditional expression  "chsta && !chpos && states.Over == c[i] && states.Buttons[(int)e.Button] == null"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,MouseMoveProcess,The conditional expression  "chsta && chpos && states.Over != c[i] && states.Buttons[(int)e.Button] == null"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,GamePadPressProcess,The conditional expression  "(e.Button == c.GamePadActions.Right ||                       e.Button == c.GamePadActions.Left ||                       e.Button == c.GamePadActions.Up ||                       e.Button == c.GamePadActions.Down) && !e.Handled && CheckButtons((int)e.Button)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,KeyPressProcess,The conditional expression  "(e.Key == Microsoft.Xna.Framework.Input.Keys.Right ||                       e.Key == Microsoft.Xna.Framework.Input.Keys.Left ||                       e.Key == Microsoft.Xna.Framework.Input.Keys.Up ||                       e.Key == Microsoft.Xna.Framework.Input.Keys.Down) && !e.Handled && CheckButtons((int)MouseButton.None)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,KeyPressProcess,The conditional expression  "e.Key == Microsoft.Xna.Framework.Input.Keys.Tab && !e.Shift && !e.Handled && CheckButtons((int)MouseButton.None)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,KeyPressProcess,The conditional expression  "e.Key == Microsoft.Xna.Framework.Input.Keys.Tab && e.Shift && !e.Handled && CheckButtons((int)MouseButton.None)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,ModalContainer,C:\repos\NeoforceControls_Neoforce-Mono\ModalContainer.cs,Input_KeyDown,The conditional expression  "Visible && (Manager.FocusedControl != null && Manager.FocusedControl.Root == this) &&             e.Key == Microsoft.Xna.Framework.Input.Keys.Escape"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,Draw,The conditional expression  "source.Width > 0 && source.Height > 0 && destination.Width > 0 && destination.Height > 0"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The conditional expression  "state == ControlState.Focused || (control.Focused && state == ControlState.Hovered && layer.States.Hovered.Index == -1)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawLayer,The conditional expression  "state == ControlState.Focused || (control.Focused && state == ControlState.Hovered && layer.States.Hovered.Index == -1)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,TabControl,C:\repos\NeoforceControls_Neoforce-Mono\TabControl.cs,OnMouseDown,The conditional expression  "p.X >= r.Left && p.X <= r.Right && p.Y >= r.Top && p.Y <= r.Bottom"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,TabControl,C:\repos\NeoforceControls_Neoforce-Mono\TabControl.cs,OnMouseMove,The conditional expression  "p.X >= r.Left && p.X <= r.Right && p.Y >= r.Top && p.Y <= r.Bottom && tabPages[i].Enabled"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,OnMouseMove,The conditional expression  "e.Button == MouseButton.Left && !selection.IsEmpty && mode != TextBoxMode.Password && selection.Length < Text.Length"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The conditional expression  "Width < 50 || wordWrap || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Horizontal)"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The conditional expression  "(scrollBars == ScrollBars.Horizontal || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline && !wordWrap"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,DrawControl,The conditional expression  "(Focused || (Manager.FocusedControl != null && Manager.FocusedControl.Root == this.Root)) && ControlState != ControlState.Disabled"  is complex.
Complex Conditional,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,DrawControl,The conditional expression  "iconVisible && (icon != null || l5 != null) && captionVisible"  is complex.
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Button,C:\repos\NeoforceControls_Neoforce-Mono\Button.cs,Button,The constructor "Button" calls a virtual method "SetDefaultSize".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,ButtonBase,C:\repos\NeoforceControls_Neoforce-Mono\ButtonBase.cs,ButtonBase,The constructor "ButtonBase" calls a virtual method "SetDefaultSize".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,CheckBox,C:\repos\NeoforceControls_Neoforce-Mono\CheckBox.cs,CheckBox,The constructor "CheckBox" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,ClipControl,C:\repos\NeoforceControls_Neoforce-Mono\ClipControl.cs,ClipControl,The constructor "ClipControl" calls a virtual method "Add".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,ComboBox,The constructor "ComboBox" calls a virtual method "Add".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Control,The constructor "Control" calls a virtual method "InitSkin".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Control,The constructor "Control" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Control,The constructor "Control" calls a virtual method "SetDefaultSize".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Control,The constructor "Control" calls a virtual method "SetMinimumSize".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The constructor "ExitDialog" calls a virtual method "Center".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,GroupBox,The constructor "GroupBox" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,GroupBox,The constructor "GroupBox" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The constructor "ScrollBar" calls a virtual method "Add".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The constructor "ScrollBar" calls a virtual method "Add".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The constructor "ScrollBar" calls a virtual method "Add".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,SpinBox,The constructor "SpinBox" calls a virtual method "Add".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,SpinBox,The constructor "SpinBox" calls a virtual method "Add".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,TextBox,The constructor "TextBox" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,TextBox,The constructor "TextBox" calls a virtual method "SetDefaultSize".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "CheckLayer".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "SetDefaultSize".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "SetMinimumSize".
Virtual Method Call from Constructor,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The constructor "Window" calls a virtual method "Center".
Empty Catch Block,TomShane.Neoforce.Controls,Layout,C:\repos\NeoforceControls_Neoforce-Mono\Layout.cs,LoadProperties,The method has an empty catch block.
Empty Catch Block,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,OnMoveBegin,The method has an empty catch block.
Empty Catch Block,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,OnMoveEnd,The method has an empty catch block.
Magic Number,TomShane.Neoforce.Controls,ArchiveManager,C:\repos\NeoforceControls_Neoforce-Mono\ArchiveManager.cs,GetAssetNames,The following statement contains a magic number: if (useArchive && archive != null)        {          List<string> filenames = new List<string>();            foreach (ZipEntry entry in archive)          {            string name = entry.FileName;            if (name.EndsWith(".xnb"))            {              name = name.Remove(name.Length - 4' 4);              filenames.Add(name);            }          }          return filenames.ToArray();        }        else        {          return null;        }
Magic Number,TomShane.Neoforce.Controls,ArchiveManager,C:\repos\NeoforceControls_Neoforce-Mono\ArchiveManager.cs,GetAssetNames,The following statement contains a magic number: if (useArchive && archive != null)        {          List<string> filenames = new List<string>();            foreach (ZipEntry entry in archive)          {            string name = entry.FileName;            if (name.EndsWith(".xnb"))            {              name = name.Remove(name.Length - 4' 4);              filenames.Add(name);            }          }          return filenames.ToArray();        }        else        {          return null;        }
Magic Number,TomShane.Neoforce.Controls,ArchiveManager,C:\repos\NeoforceControls_Neoforce-Mono\ArchiveManager.cs,GetAssetNames,The following statement contains a magic number: if (useArchive && archive != null)        {          if (path != null && path != "" && path != "\\" && path != "/")          {            List<string> filenames = new List<string>();              foreach (ZipEntry entry in archive)            {                          string name = entry.FileName;              if (name.EndsWith(".xnb"))              {                name = name.Remove(name.Length - 4' 4);              }                string[] parts = name.Split('/');              string dir = "";              for (int i = 0; i < parts.Length - 1; i++)              {                dir += parts[i] + '/';              }                path = path.Replace("\\"' "/");              if (path.StartsWith("/")) path = path.Remove(0' 1);              if (!path.EndsWith("/")) path += '/';                if (dir.ToLower() == path.ToLower() && !name.EndsWith("/"))              {                filenames.Add(name);              }            }            return filenames.ToArray();          }          else          {            return GetAssetNames();          }        }        else        {          return null;        }
Magic Number,TomShane.Neoforce.Controls,ArchiveManager,C:\repos\NeoforceControls_Neoforce-Mono\ArchiveManager.cs,GetAssetNames,The following statement contains a magic number: if (useArchive && archive != null)        {          if (path != null && path != "" && path != "\\" && path != "/")          {            List<string> filenames = new List<string>();              foreach (ZipEntry entry in archive)            {                          string name = entry.FileName;              if (name.EndsWith(".xnb"))              {                name = name.Remove(name.Length - 4' 4);              }                string[] parts = name.Split('/');              string dir = "";              for (int i = 0; i < parts.Length - 1; i++)              {                dir += parts[i] + '/';              }                path = path.Replace("\\"' "/");              if (path.StartsWith("/")) path = path.Remove(0' 1);              if (!path.EndsWith("/")) path += '/';                if (dir.ToLower() == path.ToLower() && !name.EndsWith("/"))              {                filenames.Add(name);              }            }            return filenames.ToArray();          }          else          {            return GetAssetNames();          }        }        else        {          return null;        }
Magic Number,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,Bevel,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,Bevel,The following statement contains a magic number: Height = 64;
Magic Number,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,DrawPart,The following statement contains a magic number: if (style == BevelStyle.Bumped || style == BevelStyle.Etched)             {                  if (all && (pos == BevelBorder.Top || pos == BevelBorder.Bottom))          {            rect = new Rectangle(rect.Left + 1' rect.Top' rect.Width - 2' rect.Height);          }          else if (all && (pos == BevelBorder.Left))          {            rect = new Rectangle(rect.Left' rect.Top' rect.Width' rect.Height - 1);          }          switch (pos)          {            case BevelBorder.Left:            {              x1 = rect.Left; y1 = rect.Top; w1 = 1; h1 = rect.Height;              x2 = x1 + 1; y2 = y1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Top:            {              x1 = rect.Left; y1 = rect.Top; w1 = rect.Width; h1 = 1;              x2 = x1; y2 = y1 + 1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Right:            {              x1 = rect.Left + rect.Width - 2; y1 = rect.Top; w1 = 1; h1 = rect.Height;              x2 = x1 + 1; y2 = y1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Bottom:            {              x1 = rect.Left; y1 = rect.Top + rect.Height - 2; w1 = rect.Width; h1 = 1;              x2 = x1; y2 = y1 + 1; w2 = w1; h2 = h1;              break;            }          }                                                     }        else        {          switch (pos)          {            case BevelBorder.Left:            {              x1 = rect.Left; y1 = rect.Top; w1 = 1; h1 = rect.Height;                          break;            }            case BevelBorder.Top:            {              x1 = rect.Left; y1 = rect.Top; w1 = rect.Width; h1 = 1;                          break;            }            case BevelBorder.Right:            {              x1 = rect.Left + rect.Width - 1; y1 = rect.Top; w1 = 1; h1 = rect.Height;                          break;            }            case BevelBorder.Bottom:            {              x1 = rect.Left; y1 = rect.Top + rect.Height - 1; w1 = rect.Width; h1 = 1;                          break;            }          }        }
Magic Number,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,DrawPart,The following statement contains a magic number: if (style == BevelStyle.Bumped || style == BevelStyle.Etched)             {                  if (all && (pos == BevelBorder.Top || pos == BevelBorder.Bottom))          {            rect = new Rectangle(rect.Left + 1' rect.Top' rect.Width - 2' rect.Height);          }          else if (all && (pos == BevelBorder.Left))          {            rect = new Rectangle(rect.Left' rect.Top' rect.Width' rect.Height - 1);          }          switch (pos)          {            case BevelBorder.Left:            {              x1 = rect.Left; y1 = rect.Top; w1 = 1; h1 = rect.Height;              x2 = x1 + 1; y2 = y1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Top:            {              x1 = rect.Left; y1 = rect.Top; w1 = rect.Width; h1 = 1;              x2 = x1; y2 = y1 + 1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Right:            {              x1 = rect.Left + rect.Width - 2; y1 = rect.Top; w1 = 1; h1 = rect.Height;              x2 = x1 + 1; y2 = y1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Bottom:            {              x1 = rect.Left; y1 = rect.Top + rect.Height - 2; w1 = rect.Width; h1 = 1;              x2 = x1; y2 = y1 + 1; w2 = w1; h2 = h1;              break;            }          }                                                     }        else        {          switch (pos)          {            case BevelBorder.Left:            {              x1 = rect.Left; y1 = rect.Top; w1 = 1; h1 = rect.Height;                          break;            }            case BevelBorder.Top:            {              x1 = rect.Left; y1 = rect.Top; w1 = rect.Width; h1 = 1;                          break;            }            case BevelBorder.Right:            {              x1 = rect.Left + rect.Width - 1; y1 = rect.Top; w1 = 1; h1 = rect.Height;                          break;            }            case BevelBorder.Bottom:            {              x1 = rect.Left; y1 = rect.Top + rect.Height - 1; w1 = rect.Width; h1 = 1;                          break;            }          }        }
Magic Number,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,DrawPart,The following statement contains a magic number: if (style == BevelStyle.Bumped || style == BevelStyle.Etched)             {                  if (all && (pos == BevelBorder.Top || pos == BevelBorder.Bottom))          {            rect = new Rectangle(rect.Left + 1' rect.Top' rect.Width - 2' rect.Height);          }          else if (all && (pos == BevelBorder.Left))          {            rect = new Rectangle(rect.Left' rect.Top' rect.Width' rect.Height - 1);          }          switch (pos)          {            case BevelBorder.Left:            {              x1 = rect.Left; y1 = rect.Top; w1 = 1; h1 = rect.Height;              x2 = x1 + 1; y2 = y1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Top:            {              x1 = rect.Left; y1 = rect.Top; w1 = rect.Width; h1 = 1;              x2 = x1; y2 = y1 + 1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Right:            {              x1 = rect.Left + rect.Width - 2; y1 = rect.Top; w1 = 1; h1 = rect.Height;              x2 = x1 + 1; y2 = y1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Bottom:            {              x1 = rect.Left; y1 = rect.Top + rect.Height - 2; w1 = rect.Width; h1 = 1;              x2 = x1; y2 = y1 + 1; w2 = w1; h2 = h1;              break;            }          }                                                     }        else        {          switch (pos)          {            case BevelBorder.Left:            {              x1 = rect.Left; y1 = rect.Top; w1 = 1; h1 = rect.Height;                          break;            }            case BevelBorder.Top:            {              x1 = rect.Left; y1 = rect.Top; w1 = rect.Width; h1 = 1;                          break;            }            case BevelBorder.Right:            {              x1 = rect.Left + rect.Width - 1; y1 = rect.Top; w1 = 1; h1 = rect.Height;                          break;            }            case BevelBorder.Bottom:            {              x1 = rect.Left; y1 = rect.Top + rect.Height - 1; w1 = rect.Width; h1 = 1;                          break;            }          }        }
Magic Number,TomShane.Neoforce.Controls,Button,C:\repos\NeoforceControls_Neoforce-Mono\Button.cs,Button,The following statement contains a magic number: SetDefaultSize(72' 24);
Magic Number,TomShane.Neoforce.Controls,Button,C:\repos\NeoforceControls_Neoforce-Mono\Button.cs,Button,The following statement contains a magic number: SetDefaultSize(72' 24);
Magic Number,TomShane.Neoforce.Controls,ButtonBase,C:\repos\NeoforceControls_Neoforce-Mono\ButtonBase.cs,ButtonBase,The following statement contains a magic number: SetDefaultSize(72' 24);
Magic Number,TomShane.Neoforce.Controls,ButtonBase,C:\repos\NeoforceControls_Neoforce-Mono\ButtonBase.cs,ButtonBase,The following statement contains a magic number: SetDefaultSize(72' 24);
Magic Number,TomShane.Neoforce.Controls,CheckBox,C:\repos\NeoforceControls_Neoforce-Mono\CheckBox.cs,CheckBox,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,CheckBox,C:\repos\NeoforceControls_Neoforce-Mono\CheckBox.cs,CheckBox,The following statement contains a magic number: Height = 16;
Magic Number,TomShane.Neoforce.Controls,CheckBox,C:\repos\NeoforceControls_Neoforce-Mono\CheckBox.cs,DrawControl,The following statement contains a magic number: Rectangle rc = new Rectangle(rect.Left + rect.Width + 4' rect.Y'  Width - (layer.Width + 4)' rect.Height);
Magic Number,TomShane.Neoforce.Controls,CheckBox,C:\repos\NeoforceControls_Neoforce-Mono\CheckBox.cs,DrawControl,The following statement contains a magic number: Rectangle rc = new Rectangle(rect.Left + rect.Width + 4' rect.Y'  Width - (layer.Width + 4)' rect.Height);
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,ComboBox,The following statement contains a magic number: Height = 20;
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,ComboBox,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,DrawControl,The following statement contains a magic number: if (ReadOnly && (Focused || lstCombo.Focused) && drawSelection)        {          SkinLayer lr = Skin.Layers[0];          Rectangle rc = new Rectangle(rect.Left + lr.ContentMargins.Left'                                        rect.Top + lr.ContentMargins.Top'                                        Width - lr.ContentMargins.Horizontal - btnDown.Width'                                       Height - lr.ContentMargins.Vertical);          renderer.Draw(Manager.Skin.Images["ListBox.Selection"].Resource' rc ' Color.FromNonPremultiplied(255' 255' 255' 128));        }
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,DrawControl,The following statement contains a magic number: if (ReadOnly && (Focused || lstCombo.Focused) && drawSelection)        {          SkinLayer lr = Skin.Layers[0];          Rectangle rc = new Rectangle(rect.Left + lr.ContentMargins.Left'                                        rect.Top + lr.ContentMargins.Top'                                        Width - lr.ContentMargins.Horizontal - btnDown.Width'                                       Height - lr.ContentMargins.Vertical);          renderer.Draw(Manager.Skin.Images["ListBox.Selection"].Resource' rc ' Color.FromNonPremultiplied(255' 255' 255' 128));        }
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,DrawControl,The following statement contains a magic number: if (ReadOnly && (Focused || lstCombo.Focused) && drawSelection)        {          SkinLayer lr = Skin.Layers[0];          Rectangle rc = new Rectangle(rect.Left + lr.ContentMargins.Left'                                        rect.Top + lr.ContentMargins.Top'                                        Width - lr.ContentMargins.Horizontal - btnDown.Width'                                       Height - lr.ContentMargins.Vertical);          renderer.Draw(Manager.Skin.Images["ListBox.Selection"].Resource' rc ' Color.FromNonPremultiplied(255' 255' 255' 128));        }
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,DrawControl,The following statement contains a magic number: if (ReadOnly && (Focused || lstCombo.Focused) && drawSelection)        {          SkinLayer lr = Skin.Layers[0];          Rectangle rc = new Rectangle(rect.Left + lr.ContentMargins.Left'                                        rect.Top + lr.ContentMargins.Top'                                        Width - lr.ContentMargins.Horizontal - btnDown.Width'                                       Height - lr.ContentMargins.Vertical);          renderer.Draw(Manager.Skin.Images["ListBox.Selection"].Resource' rc ' Color.FromNonPremultiplied(255' 255' 255' 128));        }
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,OnResize,The following statement contains a magic number: if (btnDown != null)        {          btnDown.Width = 16;          btnDown.Height = Height - Skin.Layers[0].ContentMargins.Vertical;          btnDown.Top = Skin.Layers[0].ContentMargins.Top;          btnDown.Left = Width - btnDown.Width - 2;                                        }
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,OnResize,The following statement contains a magic number: if (btnDown != null)        {          btnDown.Width = 16;          btnDown.Height = Height - Skin.Layers[0].ContentMargins.Vertical;          btnDown.Top = Skin.Layers[0].ContentMargins.Top;          btnDown.Left = Width - btnDown.Width - 2;                                        }
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,btnDown_Click,The following statement contains a magic number: if (items != null && items.Count > 0)        {                  if (this.Root != null && this.Root is Container)          {                      (this.Root as Container).Add(lstCombo' false);            lstCombo.Alpha = Root.Alpha;            lstCombo.Left = AbsoluteLeft - Root.Left;            lstCombo.Top = AbsoluteTop - Root.Top + Height + 1;          }            else          {            Manager.Add(lstCombo);                      lstCombo.Alpha = Alpha;            lstCombo.Left = AbsoluteLeft;            lstCombo.Top = AbsoluteTop + Height + 1;          }            lstCombo.AutoHeight(maxItems);          if (lstCombo.AbsoluteTop + lstCombo.Height > Manager.TargetHeight)          {                      lstCombo.Top = lstCombo.Top - Height - lstCombo.Height - 2;                    }                        lstCombo.Visible = !lstCombo.Visible;          lstCombo.Focused = true;          lstCombo.Width = Width;          lstCombo.AutoHeight(maxItems);                   }
Magic Number,TomShane.Neoforce.Controls,ComboBox,C:\repos\NeoforceControls_Neoforce-Mono\ComboBox.cs,AdjustMargins,The following statement contains a magic number: ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' ClientMargins.Right + 16' ClientMargins.Bottom);
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,Console,The following statement contains a magic number: Width = 320;
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,Console,The following statement contains a magic number: Height = 160;
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,Console,The following statement contains a magic number: MinimumHeight = 64;
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,Console,The following statement contains a magic number: MinimumWidth = 64;
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,Console,The following statement contains a magic number: cmbMain.Width = 128;
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,Console,The following statement contains a magic number: VerticalScrollBar.Top = 2;
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,Console,The following statement contains a magic number: VerticalScrollBar.Left = Width - 18;
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The following statement contains a magic number: if (txtMain != null)              {                  txtMain.Left = channelsVisible ? cmbMain.Width + 1 : 0;                  txtMain.Width = channelsVisible ? Width - cmbMain.Width - 1 : Width;                    if (textBoxVisible)                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4);                      VerticalScrollBar.Height = Height - txtMain.Height - 5;                  }                  else                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' 2);                      VerticalScrollBar.Height = Height - 4;                  }                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The following statement contains a magic number: if (txtMain != null)              {                  txtMain.Left = channelsVisible ? cmbMain.Width + 1 : 0;                  txtMain.Width = channelsVisible ? Width - cmbMain.Width - 1 : Width;                    if (textBoxVisible)                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4);                      VerticalScrollBar.Height = Height - txtMain.Height - 5;                  }                  else                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' 2);                      VerticalScrollBar.Height = Height - 4;                  }                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The following statement contains a magic number: if (txtMain != null)              {                  txtMain.Left = channelsVisible ? cmbMain.Width + 1 : 0;                  txtMain.Width = channelsVisible ? Width - cmbMain.Width - 1 : Width;                    if (textBoxVisible)                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4);                      VerticalScrollBar.Height = Height - txtMain.Height - 5;                  }                  else                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' 2);                      VerticalScrollBar.Height = Height - 4;                  }                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The following statement contains a magic number: if (txtMain != null)              {                  txtMain.Left = channelsVisible ? cmbMain.Width + 1 : 0;                  txtMain.Width = channelsVisible ? Width - cmbMain.Width - 1 : Width;                    if (textBoxVisible)                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4);                      VerticalScrollBar.Height = Height - txtMain.Height - 5;                  }                  else                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' 2);                      VerticalScrollBar.Height = Height - 4;                  }                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The following statement contains a magic number: if (txtMain != null)              {                  txtMain.Left = channelsVisible ? cmbMain.Width + 1 : 0;                  txtMain.Width = channelsVisible ? Width - cmbMain.Width - 1 : Width;                    if (textBoxVisible)                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4);                      VerticalScrollBar.Height = Height - txtMain.Height - 5;                  }                  else                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' 2);                      VerticalScrollBar.Height = Height - 4;                  }                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The following statement contains a magic number: if (txtMain != null)              {                  txtMain.Left = channelsVisible ? cmbMain.Width + 1 : 0;                  txtMain.Width = channelsVisible ? Width - cmbMain.Width - 1 : Width;                    if (textBoxVisible)                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4);                      VerticalScrollBar.Height = Height - txtMain.Height - 5;                  }                  else                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' 2);                      VerticalScrollBar.Height = Height - 4;                  }                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The following statement contains a magic number: if (txtMain != null)              {                  txtMain.Left = channelsVisible ? cmbMain.Width + 1 : 0;                  txtMain.Width = channelsVisible ? Width - cmbMain.Width - 1 : Width;                    if (textBoxVisible)                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4);                      VerticalScrollBar.Height = Height - txtMain.Height - 5;                  }                  else                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' 2);                      VerticalScrollBar.Height = Height - 4;                  }                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,PositionControls,The following statement contains a magic number: if (txtMain != null)              {                  txtMain.Left = channelsVisible ? cmbMain.Width + 1 : 0;                  txtMain.Width = channelsVisible ? Width - cmbMain.Width - 1 : Width;                    if (textBoxVisible)                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' txtMain.Height + 4);                      VerticalScrollBar.Height = Height - txtMain.Height - 5;                  }                  else                  {                      ClientMargins = new Margins(Skin.ClientMargins.Left' Skin.ClientMargins.Top + 4' VerticalScrollBar.Width + 6' 2);                      VerticalScrollBar.Height = Height - 4;                  }                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,Console,C:\repos\NeoforceControls_Neoforce-Mono\Console.cs,ClientArea_Draw,The following statement contains a magic number: if (buffer.Count > 0)              {                  EventedList<ConsoleMessage> b = GetFilteredBuffer(filter);                  int c = b.Count;                  int s = (VerticalScrollBar.Value + VerticalScrollBar.PageSize);                  int f = s - VerticalScrollBar.PageSize;                    if (b.Count > 0)                  {                      for (int i = s - 1; i >= f; i--)                      {                          {                              int x = 4;                              int y = r.Bottom - (pos + 1) * ((int)font.LineSpacing + 0);                                string msg = ((ConsoleMessage)b[i]).Text;                              string pre = "";                              ConsoleChannel ch = (channels[((ConsoleMessage)b[i]).Channel] as ConsoleChannel);                                if ((messageFormat & ConsoleMessageFormats.ChannelName) == ConsoleMessageFormats.ChannelName)                              {                                  pre += string.Format("[{0}]"' channels[((ConsoleMessage)b[i]).Channel].Name);                              }                              if ((messageFormat & ConsoleMessageFormats.Sender) == ConsoleMessageFormats.Sender)                              {                                  pre += string.Format("[{0}]"' ((ConsoleMessage)b[i]).Sender);                              }                              if ((messageFormat & ConsoleMessageFormats.TimeStamp) == ConsoleMessageFormats.TimeStamp)                              {                                  pre = string.Format("[{0}]"' ((ConsoleMessage)b[i]).Time.ToLongTimeString()) + pre;                              }                                if (pre != "") msg = pre + ": " + msg;                                e.Renderer.DrawString(font'                                                  msg'                                                  x' y'                                                  ch.Color);                              pos += 1;                          }                      }                  }              }
Magic Number,TomShane.Neoforce.Controls,Container,C:\repos\NeoforceControls_Neoforce-Mono\Container.cs,AdjustMargins,The following statement contains a magic number: if (sbVert != null && sbVert.Visible)        {          m.Right += (sbVert.Width + 2);        }
Magic Number,TomShane.Neoforce.Controls,Container,C:\repos\NeoforceControls_Neoforce-Mono\Container.cs,AdjustMargins,The following statement contains a magic number: if (sbHorz != null && sbHorz.Visible)        {          m.Bottom += (sbHorz.Height + 2);        }
Magic Number,TomShane.Neoforce.Controls,Container,C:\repos\NeoforceControls_Neoforce-Mono\Container.cs,PositionScrollBars,The following statement contains a magic number: if (sbVert != null)        {          sbVert.Left = ClientLeft + ClientWidth + 1;          sbVert.Top = ClientTop + 1;          int m = (sbHorz != null && sbHorz.Visible) ? 0 : 2;          sbVert.Height = ClientArea.Height - m;            sbVert.Range = ClientArea.VirtualHeight;          sbVert.PageSize = ClientArea.ClientHeight;        }
Magic Number,TomShane.Neoforce.Controls,Container,C:\repos\NeoforceControls_Neoforce-Mono\Container.cs,PositionScrollBars,The following statement contains a magic number: if (sbHorz != null)        {          sbHorz.Left = ClientLeft + 1;          sbHorz.Top = ClientTop + ClientHeight + 1;          int m = (sbVert != null && sbVert.Visible) ? 0 : 2;                        sbHorz.Width = ClientArea.Width - m;          sbHorz.Range = ClientArea.VirtualWidth;          sbHorz.PageSize = ClientArea.ClientWidth;        }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++)              {                  int mod = i > 0 ? 2 : 0;                  int left = rect.Left + l1.ContentMargins.Left + vsize;                  int h = vsize - mod - (i < (Items.Count - 1) ? 1 : 0);                  int top = rect.Top + l1.ContentMargins.Top + (i * vsize) + mod;                      if (Items[i].Separated && i > 0)                  {                      Rectangle r = new Rectangle(left' rect.Top + l1.ContentMargins.Top + (i * vsize)' LineWidth() - vsize + 4' 1);                      renderer.Draw(Manager.Skin.Controls["Control"].Layers[0].Image.Resource' r' l1.Text.Colors.Enabled);                  }                  if (ItemIndex != i)                  {                      if (Items[i].Enabled)                      {                          Rectangle r = new Rectangle(left' top' LineWidth() - vsize' h);                          renderer.DrawString(this' l1' Items[i].Text' r' false);                          col = l1.Text.Colors.Enabled;                      }                      else                      {                          Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l1.Text.Font.Resource' Items[i].Text' r' l1.Text.Colors.Disabled' l1.Text.Alignment);                          col = l1.Text.Colors.Disabled;                      }                  }                  else                  {                      if (Items[i].Enabled)                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       h);                          renderer.DrawLayer(this' l2' rs);                            Rectangle r = new Rectangle(left'                                                      top' LineWidth() - vsize' h);                            renderer.DrawString(this' l2' Items[i].Text' r' false);                          col = l2.Text.Colors.Enabled;                      }                      else                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       vsize);                          renderer.DrawLayer(l2' rs' l2.States.Disabled.Color' l2.States.Disabled.Index);                            Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l2.Text.Font.Resource' Items[i].Text' r' l2.Text.Colors.Disabled' l2.Text.Alignment);                          col = l2.Text.Colors.Disabled;                      }                    }                    if (Items[i].Image != null)                  {                      Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + 3'                                              top + 3'                                              LineHeight() - 6'                                              LineHeight() - 6);                      renderer.Draw(Items[i].Image' r' Color.White);                  }                    if (Items[i].Items != null && Items[i].Items.Count > 0)                  {                      renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col);                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++)              {                  int mod = i > 0 ? 2 : 0;                  int left = rect.Left + l1.ContentMargins.Left + vsize;                  int h = vsize - mod - (i < (Items.Count - 1) ? 1 : 0);                  int top = rect.Top + l1.ContentMargins.Top + (i * vsize) + mod;                      if (Items[i].Separated && i > 0)                  {                      Rectangle r = new Rectangle(left' rect.Top + l1.ContentMargins.Top + (i * vsize)' LineWidth() - vsize + 4' 1);                      renderer.Draw(Manager.Skin.Controls["Control"].Layers[0].Image.Resource' r' l1.Text.Colors.Enabled);                  }                  if (ItemIndex != i)                  {                      if (Items[i].Enabled)                      {                          Rectangle r = new Rectangle(left' top' LineWidth() - vsize' h);                          renderer.DrawString(this' l1' Items[i].Text' r' false);                          col = l1.Text.Colors.Enabled;                      }                      else                      {                          Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l1.Text.Font.Resource' Items[i].Text' r' l1.Text.Colors.Disabled' l1.Text.Alignment);                          col = l1.Text.Colors.Disabled;                      }                  }                  else                  {                      if (Items[i].Enabled)                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       h);                          renderer.DrawLayer(this' l2' rs);                            Rectangle r = new Rectangle(left'                                                      top' LineWidth() - vsize' h);                            renderer.DrawString(this' l2' Items[i].Text' r' false);                          col = l2.Text.Colors.Enabled;                      }                      else                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       vsize);                          renderer.DrawLayer(l2' rs' l2.States.Disabled.Color' l2.States.Disabled.Index);                            Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l2.Text.Font.Resource' Items[i].Text' r' l2.Text.Colors.Disabled' l2.Text.Alignment);                          col = l2.Text.Colors.Disabled;                      }                    }                    if (Items[i].Image != null)                  {                      Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + 3'                                              top + 3'                                              LineHeight() - 6'                                              LineHeight() - 6);                      renderer.Draw(Items[i].Image' r' Color.White);                  }                    if (Items[i].Items != null && Items[i].Items.Count > 0)                  {                      renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col);                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++)              {                  int mod = i > 0 ? 2 : 0;                  int left = rect.Left + l1.ContentMargins.Left + vsize;                  int h = vsize - mod - (i < (Items.Count - 1) ? 1 : 0);                  int top = rect.Top + l1.ContentMargins.Top + (i * vsize) + mod;                      if (Items[i].Separated && i > 0)                  {                      Rectangle r = new Rectangle(left' rect.Top + l1.ContentMargins.Top + (i * vsize)' LineWidth() - vsize + 4' 1);                      renderer.Draw(Manager.Skin.Controls["Control"].Layers[0].Image.Resource' r' l1.Text.Colors.Enabled);                  }                  if (ItemIndex != i)                  {                      if (Items[i].Enabled)                      {                          Rectangle r = new Rectangle(left' top' LineWidth() - vsize' h);                          renderer.DrawString(this' l1' Items[i].Text' r' false);                          col = l1.Text.Colors.Enabled;                      }                      else                      {                          Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l1.Text.Font.Resource' Items[i].Text' r' l1.Text.Colors.Disabled' l1.Text.Alignment);                          col = l1.Text.Colors.Disabled;                      }                  }                  else                  {                      if (Items[i].Enabled)                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       h);                          renderer.DrawLayer(this' l2' rs);                            Rectangle r = new Rectangle(left'                                                      top' LineWidth() - vsize' h);                            renderer.DrawString(this' l2' Items[i].Text' r' false);                          col = l2.Text.Colors.Enabled;                      }                      else                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       vsize);                          renderer.DrawLayer(l2' rs' l2.States.Disabled.Color' l2.States.Disabled.Index);                            Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l2.Text.Font.Resource' Items[i].Text' r' l2.Text.Colors.Disabled' l2.Text.Alignment);                          col = l2.Text.Colors.Disabled;                      }                    }                    if (Items[i].Image != null)                  {                      Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + 3'                                              top + 3'                                              LineHeight() - 6'                                              LineHeight() - 6);                      renderer.Draw(Items[i].Image' r' Color.White);                  }                    if (Items[i].Items != null && Items[i].Items.Count > 0)                  {                      renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col);                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++)              {                  int mod = i > 0 ? 2 : 0;                  int left = rect.Left + l1.ContentMargins.Left + vsize;                  int h = vsize - mod - (i < (Items.Count - 1) ? 1 : 0);                  int top = rect.Top + l1.ContentMargins.Top + (i * vsize) + mod;                      if (Items[i].Separated && i > 0)                  {                      Rectangle r = new Rectangle(left' rect.Top + l1.ContentMargins.Top + (i * vsize)' LineWidth() - vsize + 4' 1);                      renderer.Draw(Manager.Skin.Controls["Control"].Layers[0].Image.Resource' r' l1.Text.Colors.Enabled);                  }                  if (ItemIndex != i)                  {                      if (Items[i].Enabled)                      {                          Rectangle r = new Rectangle(left' top' LineWidth() - vsize' h);                          renderer.DrawString(this' l1' Items[i].Text' r' false);                          col = l1.Text.Colors.Enabled;                      }                      else                      {                          Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l1.Text.Font.Resource' Items[i].Text' r' l1.Text.Colors.Disabled' l1.Text.Alignment);                          col = l1.Text.Colors.Disabled;                      }                  }                  else                  {                      if (Items[i].Enabled)                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       h);                          renderer.DrawLayer(this' l2' rs);                            Rectangle r = new Rectangle(left'                                                      top' LineWidth() - vsize' h);                            renderer.DrawString(this' l2' Items[i].Text' r' false);                          col = l2.Text.Colors.Enabled;                      }                      else                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       vsize);                          renderer.DrawLayer(l2' rs' l2.States.Disabled.Color' l2.States.Disabled.Index);                            Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l2.Text.Font.Resource' Items[i].Text' r' l2.Text.Colors.Disabled' l2.Text.Alignment);                          col = l2.Text.Colors.Disabled;                      }                    }                    if (Items[i].Image != null)                  {                      Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + 3'                                              top + 3'                                              LineHeight() - 6'                                              LineHeight() - 6);                      renderer.Draw(Items[i].Image' r' Color.White);                  }                    if (Items[i].Items != null && Items[i].Items.Count > 0)                  {                      renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col);                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++)              {                  int mod = i > 0 ? 2 : 0;                  int left = rect.Left + l1.ContentMargins.Left + vsize;                  int h = vsize - mod - (i < (Items.Count - 1) ? 1 : 0);                  int top = rect.Top + l1.ContentMargins.Top + (i * vsize) + mod;                      if (Items[i].Separated && i > 0)                  {                      Rectangle r = new Rectangle(left' rect.Top + l1.ContentMargins.Top + (i * vsize)' LineWidth() - vsize + 4' 1);                      renderer.Draw(Manager.Skin.Controls["Control"].Layers[0].Image.Resource' r' l1.Text.Colors.Enabled);                  }                  if (ItemIndex != i)                  {                      if (Items[i].Enabled)                      {                          Rectangle r = new Rectangle(left' top' LineWidth() - vsize' h);                          renderer.DrawString(this' l1' Items[i].Text' r' false);                          col = l1.Text.Colors.Enabled;                      }                      else                      {                          Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l1.Text.Font.Resource' Items[i].Text' r' l1.Text.Colors.Disabled' l1.Text.Alignment);                          col = l1.Text.Colors.Disabled;                      }                  }                  else                  {                      if (Items[i].Enabled)                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       h);                          renderer.DrawLayer(this' l2' rs);                            Rectangle r = new Rectangle(left'                                                      top' LineWidth() - vsize' h);                            renderer.DrawString(this' l2' Items[i].Text' r' false);                          col = l2.Text.Colors.Enabled;                      }                      else                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       vsize);                          renderer.DrawLayer(l2' rs' l2.States.Disabled.Color' l2.States.Disabled.Index);                            Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l2.Text.Font.Resource' Items[i].Text' r' l2.Text.Colors.Disabled' l2.Text.Alignment);                          col = l2.Text.Colors.Disabled;                      }                    }                    if (Items[i].Image != null)                  {                      Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + 3'                                              top + 3'                                              LineHeight() - 6'                                              LineHeight() - 6);                      renderer.Draw(Items[i].Image' r' Color.White);                  }                    if (Items[i].Items != null && Items[i].Items.Count > 0)                  {                      renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col);                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++)              {                  int mod = i > 0 ? 2 : 0;                  int left = rect.Left + l1.ContentMargins.Left + vsize;                  int h = vsize - mod - (i < (Items.Count - 1) ? 1 : 0);                  int top = rect.Top + l1.ContentMargins.Top + (i * vsize) + mod;                      if (Items[i].Separated && i > 0)                  {                      Rectangle r = new Rectangle(left' rect.Top + l1.ContentMargins.Top + (i * vsize)' LineWidth() - vsize + 4' 1);                      renderer.Draw(Manager.Skin.Controls["Control"].Layers[0].Image.Resource' r' l1.Text.Colors.Enabled);                  }                  if (ItemIndex != i)                  {                      if (Items[i].Enabled)                      {                          Rectangle r = new Rectangle(left' top' LineWidth() - vsize' h);                          renderer.DrawString(this' l1' Items[i].Text' r' false);                          col = l1.Text.Colors.Enabled;                      }                      else                      {                          Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l1.Text.Font.Resource' Items[i].Text' r' l1.Text.Colors.Disabled' l1.Text.Alignment);                          col = l1.Text.Colors.Disabled;                      }                  }                  else                  {                      if (Items[i].Enabled)                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       h);                          renderer.DrawLayer(this' l2' rs);                            Rectangle r = new Rectangle(left'                                                      top' LineWidth() - vsize' h);                            renderer.DrawString(this' l2' Items[i].Text' r' false);                          col = l2.Text.Colors.Enabled;                      }                      else                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       vsize);                          renderer.DrawLayer(l2' rs' l2.States.Disabled.Color' l2.States.Disabled.Index);                            Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l2.Text.Font.Resource' Items[i].Text' r' l2.Text.Colors.Disabled' l2.Text.Alignment);                          col = l2.Text.Colors.Disabled;                      }                    }                    if (Items[i].Image != null)                  {                      Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + 3'                                              top + 3'                                              LineHeight() - 6'                                              LineHeight() - 6);                      renderer.Draw(Items[i].Image' r' Color.White);                  }                    if (Items[i].Items != null && Items[i].Items.Count > 0)                  {                      renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col);                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++)              {                  int mod = i > 0 ? 2 : 0;                  int left = rect.Left + l1.ContentMargins.Left + vsize;                  int h = vsize - mod - (i < (Items.Count - 1) ? 1 : 0);                  int top = rect.Top + l1.ContentMargins.Top + (i * vsize) + mod;                      if (Items[i].Separated && i > 0)                  {                      Rectangle r = new Rectangle(left' rect.Top + l1.ContentMargins.Top + (i * vsize)' LineWidth() - vsize + 4' 1);                      renderer.Draw(Manager.Skin.Controls["Control"].Layers[0].Image.Resource' r' l1.Text.Colors.Enabled);                  }                  if (ItemIndex != i)                  {                      if (Items[i].Enabled)                      {                          Rectangle r = new Rectangle(left' top' LineWidth() - vsize' h);                          renderer.DrawString(this' l1' Items[i].Text' r' false);                          col = l1.Text.Colors.Enabled;                      }                      else                      {                          Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l1.Text.Font.Resource' Items[i].Text' r' l1.Text.Colors.Disabled' l1.Text.Alignment);                          col = l1.Text.Colors.Disabled;                      }                  }                  else                  {                      if (Items[i].Enabled)                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       h);                          renderer.DrawLayer(this' l2' rs);                            Rectangle r = new Rectangle(left'                                                      top' LineWidth() - vsize' h);                            renderer.DrawString(this' l2' Items[i].Text' r' false);                          col = l2.Text.Colors.Enabled;                      }                      else                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       vsize);                          renderer.DrawLayer(l2' rs' l2.States.Disabled.Color' l2.States.Disabled.Index);                            Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l2.Text.Font.Resource' Items[i].Text' r' l2.Text.Colors.Disabled' l2.Text.Alignment);                          col = l2.Text.Colors.Disabled;                      }                    }                    if (Items[i].Image != null)                  {                      Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + 3'                                              top + 3'                                              LineHeight() - 6'                                              LineHeight() - 6);                      renderer.Draw(Items[i].Image' r' Color.White);                  }                    if (Items[i].Items != null && Items[i].Items.Count > 0)                  {                      renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col);                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,DrawControl,The following statement contains a magic number: for (int i = 0; i < Items.Count; i++)              {                  int mod = i > 0 ? 2 : 0;                  int left = rect.Left + l1.ContentMargins.Left + vsize;                  int h = vsize - mod - (i < (Items.Count - 1) ? 1 : 0);                  int top = rect.Top + l1.ContentMargins.Top + (i * vsize) + mod;                      if (Items[i].Separated && i > 0)                  {                      Rectangle r = new Rectangle(left' rect.Top + l1.ContentMargins.Top + (i * vsize)' LineWidth() - vsize + 4' 1);                      renderer.Draw(Manager.Skin.Controls["Control"].Layers[0].Image.Resource' r' l1.Text.Colors.Enabled);                  }                  if (ItemIndex != i)                  {                      if (Items[i].Enabled)                      {                          Rectangle r = new Rectangle(left' top' LineWidth() - vsize' h);                          renderer.DrawString(this' l1' Items[i].Text' r' false);                          col = l1.Text.Colors.Enabled;                      }                      else                      {                          Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l1.Text.Font.Resource' Items[i].Text' r' l1.Text.Colors.Disabled' l1.Text.Alignment);                          col = l1.Text.Colors.Disabled;                      }                  }                  else                  {                      if (Items[i].Enabled)                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       h);                          renderer.DrawLayer(this' l2' rs);                            Rectangle r = new Rectangle(left'                                                      top' LineWidth() - vsize' h);                            renderer.DrawString(this' l2' Items[i].Text' r' false);                          col = l2.Text.Colors.Enabled;                      }                      else                      {                          Rectangle rs = new Rectangle(rect.Left + l1.ContentMargins.Left'                                                       top'                                                       Width - (l1.ContentMargins.Horizontal - Skin.OriginMargins.Horizontal)'                                                       vsize);                          renderer.DrawLayer(l2' rs' l2.States.Disabled.Color' l2.States.Disabled.Index);                            Rectangle r = new Rectangle(left + l1.Text.OffsetX'                                                      top + l1.Text.OffsetY'                                                      LineWidth() - vsize' h);                          renderer.DrawString(l2.Text.Font.Resource' Items[i].Text' r' l2.Text.Colors.Disabled' l2.Text.Alignment);                          col = l2.Text.Colors.Disabled;                      }                    }                    if (Items[i].Image != null)                  {                      Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + 3'                                              top + 3'                                              LineHeight() - 6'                                              LineHeight() - 6);                      renderer.Draw(Items[i].Image' r' Color.White);                  }                    if (Items[i].Items != null && Items[i].Items.Count > 0)                  {                      renderer.Draw(Manager.Skin.Images["Shared.ArrowRight"].Resource' rect.Left + LineWidth() - 4' rect.Top + l1.ContentMargins.Top + (i * vsize) + 8' col);                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,LineHeight,The following statement contains a magic number: if (Items.Count > 0)              {                  SkinLayer l = Skin.Layers["Control"];                  h = (int)l.Text.Font.Resource.LineSpacing + 9;              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,LineWidth,The following statement contains a magic number: if (Items.Count > 0)              {                  for (int i = 0; i < Items.Count; i++)                  {                      int wx = (int)font.Resource.MeasureString(Items[i].Text).X + 16;                      if (wx > w) w = wx;                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,LineWidth,The following statement contains a magic number: w += 4 + LineHeight();
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,AutoSize,The following statement contains a magic number: if (Items != null && Items.Count > 0)              {                  Height = (LineHeight() * Items.Count) + (Skin.Layers["Control"].ContentMargins.Vertical - Skin.OriginMargins.Vertical);                  Width = LineWidth() + (Skin.Layers["Control"].ContentMargins.Horizontal - Skin.OriginMargins.Horizontal) + font.OffsetX;              }              else              {                  Height = 16;                  Width = 16;              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,AutoSize,The following statement contains a magic number: if (Items != null && Items.Count > 0)              {                  Height = (LineHeight() * Items.Count) + (Skin.Layers["Control"].ContentMargins.Vertical - Skin.OriginMargins.Vertical);                  Width = LineWidth() + (Skin.Layers["Control"].ContentMargins.Horizontal - Skin.OriginMargins.Horizontal) + font.OffsetX;              }              else              {                  Height = 16;                  Width = 16;              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,Show,The following statement contains a magic number: if (AbsoluteLeft + Width > Manager.TargetWidth)              {                  Left = Left - Width;                  if (ParentMenu != null && ParentMenu is ContextMenu)                  {                      Left = Left - ParentMenu.Width + 2;                  }                  else if (ParentMenu != null)                  {                      Left = Manager.TargetWidth - (Parent != null ? Parent.AbsoluteLeft : 0) - Width - 2;                  }              }
Magic Number,TomShane.Neoforce.Controls,ContextMenu,C:\repos\NeoforceControls_Neoforce-Mono\ContextMenu.cs,Show,The following statement contains a magic number: if (AbsoluteLeft + Width > Manager.TargetWidth)              {                  Left = Left - Width;                  if (ParentMenu != null && ParentMenu is ContextMenu)                  {                      Left = Left - ParentMenu.Width + 2;                  }                  else if (ParentMenu != null)                  {                      Left = Manager.TargetWidth - (Parent != null ? Parent.AbsoluteLeft : 0) - Width - 2;                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Render,The following statement contains a magic number: if (visible && target != null)              {                  bool draw = true;                    if (draw)                  {                      renderer.Begin(BlendingMode.Default);                      renderer.Draw(target' OriginLeft' OriginTop' new Rectangle(0' 0' OriginWidth' OriginHeight)' Color.FromNonPremultiplied(255' 255' 255' Alpha));                      renderer.End();                        DrawDetached(this' renderer' gameTime);                        DrawOutline(renderer' false);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Render,The following statement contains a magic number: if (visible && target != null)              {                  bool draw = true;                    if (draw)                  {                      renderer.Begin(BlendingMode.Default);                      renderer.Draw(target' OriginLeft' OriginTop' new Rectangle(0' 0' OriginWidth' OriginHeight)' Color.FromNonPremultiplied(255' 255' 255' Alpha));                      renderer.End();                        DrawDetached(this' renderer' gameTime);                        DrawOutline(renderer' false);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,Render,The following statement contains a magic number: if (visible && target != null)              {                  bool draw = true;                    if (draw)                  {                      renderer.Begin(BlendingMode.Default);                      renderer.Draw(target' OriginLeft' OriginTop' new Rectangle(0' 0' OriginWidth' OriginHeight)' Color.FromNonPremultiplied(255' 255' 255' Alpha));                      renderer.End();                        DrawDetached(this' renderer' gameTime);                        DrawOutline(renderer' false);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawOutline,The following statement contains a magic number: if (!OutlineRect.IsEmpty)              {                  Rectangle r = OutlineRect;                  if (child)                  {                      r = new Rectangle(OutlineRect.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' OutlineRect.Top + (parent.AbsoluteTop - root.AbsoluteTop)' OutlineRect.Width' OutlineRect.Height);                  }                    Texture2D t = Manager.Skin.Controls["Control.Outline"].Layers[0].Image.Resource;                    int s = resizerSize;                  Rectangle r1 = new Rectangle(r.Left + leftModifier' r.Top + topModifier' r.Width' s);                  Rectangle r2 = new Rectangle(r.Left + leftModifier' r.Top + s + topModifier' resizerSize' r.Height - (2 * s));                  Rectangle r3 = new Rectangle(r.Right - s + leftModifier' r.Top + s + topModifier' s' r.Height - (2 * s));                  Rectangle r4 = new Rectangle(r.Left + leftModifier' r.Bottom - s + topModifier' r.Width' s);                    Color c = Manager.Skin.Controls["Control.Outline"].Layers[0].States.Enabled.Color;                    renderer.Begin(BlendingMode.Default);                  if ((ResizeEdge & Anchors.Top) == Anchors.Top || !partialOutline) renderer.Draw(t' r1' c);                  if ((ResizeEdge & Anchors.Left) == Anchors.Left || !partialOutline) renderer.Draw(t' r2' c);                  if ((ResizeEdge & Anchors.Right) == Anchors.Right || !partialOutline) renderer.Draw(t' r3' c);                  if ((ResizeEdge & Anchors.Bottom) == Anchors.Bottom || !partialOutline) renderer.Draw(t' r4' c);                  renderer.End();              }              else if (DesignMode && Focused)              {                  Rectangle r = ControlRect;                  if (child)                  {                      r = new Rectangle(r.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' r.Top + (parent.AbsoluteTop - root.AbsoluteTop)' r.Width' r.Height);                  }                    Texture2D t = Manager.Skin.Controls["Control.Outline"].Layers[0].Image.Resource;                    int s = resizerSize;                  Rectangle r1 = new Rectangle(r.Left + leftModifier' r.Top + topModifier' r.Width' s);                  Rectangle r2 = new Rectangle(r.Left + leftModifier' r.Top + s + topModifier' resizerSize' r.Height - (2 * s));                  Rectangle r3 = new Rectangle(r.Right - s + leftModifier' r.Top + s + topModifier' s' r.Height - (2 * s));                  Rectangle r4 = new Rectangle(r.Left + leftModifier' r.Bottom - s + topModifier' r.Width' s);                    Color c = Manager.Skin.Controls["Control.Outline"].Layers[0].States.Enabled.Color;                    renderer.Begin(BlendingMode.Default);                  renderer.Draw(t' r1' c);                  renderer.Draw(t' r2' c);                  renderer.Draw(t' r3' c);                  renderer.Draw(t' r4' c);                  renderer.End();              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawOutline,The following statement contains a magic number: if (!OutlineRect.IsEmpty)              {                  Rectangle r = OutlineRect;                  if (child)                  {                      r = new Rectangle(OutlineRect.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' OutlineRect.Top + (parent.AbsoluteTop - root.AbsoluteTop)' OutlineRect.Width' OutlineRect.Height);                  }                    Texture2D t = Manager.Skin.Controls["Control.Outline"].Layers[0].Image.Resource;                    int s = resizerSize;                  Rectangle r1 = new Rectangle(r.Left + leftModifier' r.Top + topModifier' r.Width' s);                  Rectangle r2 = new Rectangle(r.Left + leftModifier' r.Top + s + topModifier' resizerSize' r.Height - (2 * s));                  Rectangle r3 = new Rectangle(r.Right - s + leftModifier' r.Top + s + topModifier' s' r.Height - (2 * s));                  Rectangle r4 = new Rectangle(r.Left + leftModifier' r.Bottom - s + topModifier' r.Width' s);                    Color c = Manager.Skin.Controls["Control.Outline"].Layers[0].States.Enabled.Color;                    renderer.Begin(BlendingMode.Default);                  if ((ResizeEdge & Anchors.Top) == Anchors.Top || !partialOutline) renderer.Draw(t' r1' c);                  if ((ResizeEdge & Anchors.Left) == Anchors.Left || !partialOutline) renderer.Draw(t' r2' c);                  if ((ResizeEdge & Anchors.Right) == Anchors.Right || !partialOutline) renderer.Draw(t' r3' c);                  if ((ResizeEdge & Anchors.Bottom) == Anchors.Bottom || !partialOutline) renderer.Draw(t' r4' c);                  renderer.End();              }              else if (DesignMode && Focused)              {                  Rectangle r = ControlRect;                  if (child)                  {                      r = new Rectangle(r.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' r.Top + (parent.AbsoluteTop - root.AbsoluteTop)' r.Width' r.Height);                  }                    Texture2D t = Manager.Skin.Controls["Control.Outline"].Layers[0].Image.Resource;                    int s = resizerSize;                  Rectangle r1 = new Rectangle(r.Left + leftModifier' r.Top + topModifier' r.Width' s);                  Rectangle r2 = new Rectangle(r.Left + leftModifier' r.Top + s + topModifier' resizerSize' r.Height - (2 * s));                  Rectangle r3 = new Rectangle(r.Right - s + leftModifier' r.Top + s + topModifier' s' r.Height - (2 * s));                  Rectangle r4 = new Rectangle(r.Left + leftModifier' r.Bottom - s + topModifier' r.Width' s);                    Color c = Manager.Skin.Controls["Control.Outline"].Layers[0].States.Enabled.Color;                    renderer.Begin(BlendingMode.Default);                  renderer.Draw(t' r1' c);                  renderer.Draw(t' r2' c);                  renderer.Draw(t' r3' c);                  renderer.Draw(t' r4' c);                  renderer.End();              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawOutline,The following statement contains a magic number: if (!OutlineRect.IsEmpty)              {                  Rectangle r = OutlineRect;                  if (child)                  {                      r = new Rectangle(OutlineRect.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' OutlineRect.Top + (parent.AbsoluteTop - root.AbsoluteTop)' OutlineRect.Width' OutlineRect.Height);                  }                    Texture2D t = Manager.Skin.Controls["Control.Outline"].Layers[0].Image.Resource;                    int s = resizerSize;                  Rectangle r1 = new Rectangle(r.Left + leftModifier' r.Top + topModifier' r.Width' s);                  Rectangle r2 = new Rectangle(r.Left + leftModifier' r.Top + s + topModifier' resizerSize' r.Height - (2 * s));                  Rectangle r3 = new Rectangle(r.Right - s + leftModifier' r.Top + s + topModifier' s' r.Height - (2 * s));                  Rectangle r4 = new Rectangle(r.Left + leftModifier' r.Bottom - s + topModifier' r.Width' s);                    Color c = Manager.Skin.Controls["Control.Outline"].Layers[0].States.Enabled.Color;                    renderer.Begin(BlendingMode.Default);                  if ((ResizeEdge & Anchors.Top) == Anchors.Top || !partialOutline) renderer.Draw(t' r1' c);                  if ((ResizeEdge & Anchors.Left) == Anchors.Left || !partialOutline) renderer.Draw(t' r2' c);                  if ((ResizeEdge & Anchors.Right) == Anchors.Right || !partialOutline) renderer.Draw(t' r3' c);                  if ((ResizeEdge & Anchors.Bottom) == Anchors.Bottom || !partialOutline) renderer.Draw(t' r4' c);                  renderer.End();              }              else if (DesignMode && Focused)              {                  Rectangle r = ControlRect;                  if (child)                  {                      r = new Rectangle(r.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' r.Top + (parent.AbsoluteTop - root.AbsoluteTop)' r.Width' r.Height);                  }                    Texture2D t = Manager.Skin.Controls["Control.Outline"].Layers[0].Image.Resource;                    int s = resizerSize;                  Rectangle r1 = new Rectangle(r.Left + leftModifier' r.Top + topModifier' r.Width' s);                  Rectangle r2 = new Rectangle(r.Left + leftModifier' r.Top + s + topModifier' resizerSize' r.Height - (2 * s));                  Rectangle r3 = new Rectangle(r.Right - s + leftModifier' r.Top + s + topModifier' s' r.Height - (2 * s));                  Rectangle r4 = new Rectangle(r.Left + leftModifier' r.Bottom - s + topModifier' r.Width' s);                    Color c = Manager.Skin.Controls["Control.Outline"].Layers[0].States.Enabled.Color;                    renderer.Begin(BlendingMode.Default);                  renderer.Draw(t' r1' c);                  renderer.Draw(t' r2' c);                  renderer.Draw(t' r3' c);                  renderer.Draw(t' r4' c);                  renderer.End();              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,DrawOutline,The following statement contains a magic number: if (!OutlineRect.IsEmpty)              {                  Rectangle r = OutlineRect;                  if (child)                  {                      r = new Rectangle(OutlineRect.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' OutlineRect.Top + (parent.AbsoluteTop - root.AbsoluteTop)' OutlineRect.Width' OutlineRect.Height);                  }                    Texture2D t = Manager.Skin.Controls["Control.Outline"].Layers[0].Image.Resource;                    int s = resizerSize;                  Rectangle r1 = new Rectangle(r.Left + leftModifier' r.Top + topModifier' r.Width' s);                  Rectangle r2 = new Rectangle(r.Left + leftModifier' r.Top + s + topModifier' resizerSize' r.Height - (2 * s));                  Rectangle r3 = new Rectangle(r.Right - s + leftModifier' r.Top + s + topModifier' s' r.Height - (2 * s));                  Rectangle r4 = new Rectangle(r.Left + leftModifier' r.Bottom - s + topModifier' r.Width' s);                    Color c = Manager.Skin.Controls["Control.Outline"].Layers[0].States.Enabled.Color;                    renderer.Begin(BlendingMode.Default);                  if ((ResizeEdge & Anchors.Top) == Anchors.Top || !partialOutline) renderer.Draw(t' r1' c);                  if ((ResizeEdge & Anchors.Left) == Anchors.Left || !partialOutline) renderer.Draw(t' r2' c);                  if ((ResizeEdge & Anchors.Right) == Anchors.Right || !partialOutline) renderer.Draw(t' r3' c);                  if ((ResizeEdge & Anchors.Bottom) == Anchors.Bottom || !partialOutline) renderer.Draw(t' r4' c);                  renderer.End();              }              else if (DesignMode && Focused)              {                  Rectangle r = ControlRect;                  if (child)                  {                      r = new Rectangle(r.Left + (parent.AbsoluteLeft - root.AbsoluteLeft)' r.Top + (parent.AbsoluteTop - root.AbsoluteTop)' r.Width' r.Height);                  }                    Texture2D t = Manager.Skin.Controls["Control.Outline"].Layers[0].Image.Resource;                    int s = resizerSize;                  Rectangle r1 = new Rectangle(r.Left + leftModifier' r.Top + topModifier' r.Width' s);                  Rectangle r2 = new Rectangle(r.Left + leftModifier' r.Top + s + topModifier' resizerSize' r.Height - (2 * s));                  Rectangle r3 = new Rectangle(r.Right - s + leftModifier' r.Top + s + topModifier' s' r.Height - (2 * s));                  Rectangle r4 = new Rectangle(r.Left + leftModifier' r.Bottom - s + topModifier' r.Width' s);                    Color c = Manager.Skin.Controls["Control.Outline"].Layers[0].States.Enabled.Color;                    renderer.Begin(BlendingMode.Default);                  renderer.Draw(t' r1' c);                  renderer.Draw(t' r2' c);                  renderer.Draw(t' r3' c);                  renderer.Draw(t' r4' c);                  renderer.End();              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,ProcessAnchor,The following statement contains a magic number: if (((Anchor & Anchors.Right) == Anchors.Right) && ((Anchor & Anchors.Left) != Anchors.Left))              {                  Left = Parent.VirtualWidth - Width - anchorMargins.Right;              }              else if (((Anchor & Anchors.Right) == Anchors.Right) && ((Anchor & Anchors.Left) == Anchors.Left))              {                  Width = Parent.VirtualWidth - Left - anchorMargins.Right;              }              else if (((Anchor & Anchors.Right) != Anchors.Right) && ((Anchor & Anchors.Left) != Anchors.Left))              {                  int diff = (e.Width - e.OldWidth);                  if (e.Width % 2 != 0 && diff != 0)                  {                      diff += (diff / Math.Abs(diff));                  }                  Left += (diff / 2);              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,ProcessAnchor,The following statement contains a magic number: if (((Anchor & Anchors.Right) == Anchors.Right) && ((Anchor & Anchors.Left) != Anchors.Left))              {                  Left = Parent.VirtualWidth - Width - anchorMargins.Right;              }              else if (((Anchor & Anchors.Right) == Anchors.Right) && ((Anchor & Anchors.Left) == Anchors.Left))              {                  Width = Parent.VirtualWidth - Left - anchorMargins.Right;              }              else if (((Anchor & Anchors.Right) != Anchors.Right) && ((Anchor & Anchors.Left) != Anchors.Left))              {                  int diff = (e.Width - e.OldWidth);                  if (e.Width % 2 != 0 && diff != 0)                  {                      diff += (diff / Math.Abs(diff));                  }                  Left += (diff / 2);              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,ProcessAnchor,The following statement contains a magic number: if (((Anchor & Anchors.Bottom) == Anchors.Bottom) && ((Anchor & Anchors.Top) != Anchors.Top))              {                  Top = Parent.VirtualHeight - Height - anchorMargins.Bottom;              }              else if (((Anchor & Anchors.Bottom) == Anchors.Bottom) && ((Anchor & Anchors.Top) == Anchors.Top))              {                  Height = Parent.VirtualHeight - Top - anchorMargins.Bottom;              }              else if (((Anchor & Anchors.Bottom) != Anchors.Bottom) && ((Anchor & Anchors.Top) != Anchors.Top))              {                  int diff = (e.Height - e.OldHeight);                  if (e.Height % 2 != 0 && diff != 0)                  {                      diff += (diff / Math.Abs(diff));                  }                  Top += (diff / 2);              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,ProcessAnchor,The following statement contains a magic number: if (((Anchor & Anchors.Bottom) == Anchors.Bottom) && ((Anchor & Anchors.Top) != Anchors.Top))              {                  Top = Parent.VirtualHeight - Height - anchorMargins.Bottom;              }              else if (((Anchor & Anchors.Bottom) == Anchors.Bottom) && ((Anchor & Anchors.Top) == Anchors.Top))              {                  Height = Parent.VirtualHeight - Top - anchorMargins.Bottom;              }              else if (((Anchor & Anchors.Bottom) != Anchors.Bottom) && ((Anchor & Anchors.Top) != Anchors.Top))              {                  int diff = (e.Height - e.OldHeight);                  if (e.Height % 2 != 0 && diff != 0)                  {                      diff += (diff / Math.Abs(diff));                  }                  Top += (diff / 2);              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,GamePadUpProcess,The following statement contains a magic number: if (e.Button == GamePadActions.ContextMenu && !e.Handled)              {                  if (contextMenu != null)                  {                      contextMenu.Show(this' AbsoluteLeft + 8' AbsoluteTop + 8);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,GamePadUpProcess,The following statement contains a magic number: if (e.Button == GamePadActions.ContextMenu && !e.Handled)              {                  if (contextMenu != null)                  {                      contextMenu.Show(this' AbsoluteLeft + 8' AbsoluteTop + 8);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,KeyUpProcess,The following statement contains a magic number: if (e.Key == Microsoft.Xna.Framework.Input.Keys.Apps && !e.Handled)              {                  if (contextMenu != null)                  {                      contextMenu.Show(this' AbsoluteLeft + 8' AbsoluteTop + 8);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,KeyUpProcess,The following statement contains a magic number: if (e.Key == Microsoft.Xna.Framework.Input.Keys.Apps && !e.Handled)              {                  if (contextMenu != null)                  {                      contextMenu.Show(this' AbsoluteLeft + 8' AbsoluteTop + 8);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,MouseDownProcess,The following statement contains a magic number: if (e.Button == MouseButton.Left)              {                  pressSpot = new Point(TransformPosition(e).Position.X' TransformPosition(e).Position.Y);                    if (CheckResizableArea(e.Position))                  {                      pressDiff[0] = pressSpot.X;                      pressDiff[1] = pressSpot.Y;                      pressDiff[2] = Width - pressSpot.X;                      pressDiff[3] = Height - pressSpot.Y;                        IsResizing = true;                      if (outlineResizing) OutlineRect = ControlRect;                      if (!Suspended) OnResizeBegin(e);                  }                  else if (CheckMovableArea(e.Position))                  {                      IsMoving = true;                      if (outlineMoving) OutlineRect = ControlRect;                      if (!Suspended) OnMoveBegin(e);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,MouseDownProcess,The following statement contains a magic number: if (e.Button == MouseButton.Left)              {                  pressSpot = new Point(TransformPosition(e).Position.X' TransformPosition(e).Position.Y);                    if (CheckResizableArea(e.Position))                  {                      pressDiff[0] = pressSpot.X;                      pressDiff[1] = pressSpot.Y;                      pressDiff[2] = Width - pressSpot.X;                      pressDiff[3] = Height - pressSpot.Y;                        IsResizing = true;                      if (outlineResizing) OutlineRect = ControlRect;                      if (!Suspended) OnResizeBegin(e);                  }                  else if (CheckMovableArea(e.Position))                  {                      IsMoving = true;                      if (outlineMoving) OutlineRect = ControlRect;                      if (!Suspended) OnMoveBegin(e);                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,PerformResize,The following statement contains a magic number: if (resizable && !IsMoving)              {                  if (!IsResizing)                  {  #if (!XBOX && !XBOX_FAKE)                      GetResizePosition(e);                      Manager.Cursor = Cursor = GetResizeCursor();  #endif                  }                    if (IsResizing)                  {                      invalidated = true;                        bool top = false;                      bool bottom = false;                      bool left = false;                      bool right = false;                        if ((resizeArea == Alignment.TopCenter ||                          resizeArea == Alignment.TopLeft ||                          resizeArea == Alignment.TopRight) && (resizeEdge & Anchors.Top) == Anchors.Top) top = true;                        else if ((resizeArea == Alignment.BottomCenter ||                               resizeArea == Alignment.BottomLeft ||                               resizeArea == Alignment.BottomRight) && (resizeEdge & Anchors.Bottom) == Anchors.Bottom) bottom = true;                        if ((resizeArea == Alignment.MiddleLeft ||                          resizeArea == Alignment.BottomLeft ||                          resizeArea == Alignment.TopLeft) && (resizeEdge & Anchors.Left) == Anchors.Left) left = true;                        else if ((resizeArea == Alignment.MiddleRight ||                               resizeArea == Alignment.BottomRight ||                               resizeArea == Alignment.TopRight) && (resizeEdge & Anchors.Right) == Anchors.Right) right = true;                        int w = Width;                      int h = Height;                      int l = Left;                      int t = Top;                        if (outlineResizing && !OutlineRect.IsEmpty)                      {                          l = OutlineRect.Left;                          t = OutlineRect.Top;                          w = OutlineRect.Width;                          h = OutlineRect.Height;                      }                        int px = e.Position.X - (parent != null ? parent.AbsoluteLeft : 0);                      int py = e.Position.Y - (parent != null ? parent.AbsoluteTop : 0);                        if (left)                      {                          w = w + (l - px) + leftModifier + pressDiff[0];                          l = px - leftModifier - pressDiff[0] - CheckWidth(ref w);                        }                      else if (right)                      {                          w = px - l - leftModifier + pressDiff[2];                          CheckWidth(ref w);                      }                        if (top)                      {                          h = h + (t - py) + topModifier + pressDiff[1];                          t = py - topModifier - pressDiff[1] - CheckHeight(ref h);                      }                      else if (bottom)                      {                          h = py - t - topModifier + pressDiff[3];                          CheckHeight(ref h);                      }                        if (!Suspended)                      {                          ResizeEventArgs v = new ResizeEventArgs(w' h' Width' Height);                          OnValidateResize(v);                            if (top)                          {                              // Compensate for a possible height change from Validate event                              t += (h - v.Height);                          }                          if (left)                          {                              // Compensate for a possible width change from Validate event                              l += (w - v.Width);                          }                          w = v.Width;                          h = v.Height;                      }                        if (outlineResizing)                      {                          OutlineRect = new Rectangle(l' t' w' h);                          if (parent != null) parent.Invalidate();                      }                      else                      {                          Width = w;                          Height = h;                          Top = t;                          Left = l;                      }                  }              }
Magic Number,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,PerformResize,The following statement contains a magic number: if (resizable && !IsMoving)              {                  if (!IsResizing)                  {  #if (!XBOX && !XBOX_FAKE)                      GetResizePosition(e);                      Manager.Cursor = Cursor = GetResizeCursor();  #endif                  }                    if (IsResizing)                  {                      invalidated = true;                        bool top = false;                      bool bottom = false;                      bool left = false;                      bool right = false;                        if ((resizeArea == Alignment.TopCenter ||                          resizeArea == Alignment.TopLeft ||                          resizeArea == Alignment.TopRight) && (resizeEdge & Anchors.Top) == Anchors.Top) top = true;                        else if ((resizeArea == Alignment.BottomCenter ||                               resizeArea == Alignment.BottomLeft ||                               resizeArea == Alignment.BottomRight) && (resizeEdge & Anchors.Bottom) == Anchors.Bottom) bottom = true;                        if ((resizeArea == Alignment.MiddleLeft ||                          resizeArea == Alignment.BottomLeft ||                          resizeArea == Alignment.TopLeft) && (resizeEdge & Anchors.Left) == Anchors.Left) left = true;                        else if ((resizeArea == Alignment.MiddleRight ||                               resizeArea == Alignment.BottomRight ||                               resizeArea == Alignment.TopRight) && (resizeEdge & Anchors.Right) == Anchors.Right) right = true;                        int w = Width;                      int h = Height;                      int l = Left;                      int t = Top;                        if (outlineResizing && !OutlineRect.IsEmpty)                      {                          l = OutlineRect.Left;                          t = OutlineRect.Top;                          w = OutlineRect.Width;                          h = OutlineRect.Height;                      }                        int px = e.Position.X - (parent != null ? parent.AbsoluteLeft : 0);                      int py = e.Position.Y - (parent != null ? parent.AbsoluteTop : 0);                        if (left)                      {                          w = w + (l - px) + leftModifier + pressDiff[0];                          l = px - leftModifier - pressDiff[0] - CheckWidth(ref w);                        }                      else if (right)                      {                          w = px - l - leftModifier + pressDiff[2];                          CheckWidth(ref w);                      }                        if (top)                      {                          h = h + (t - py) + topModifier + pressDiff[1];                          t = py - topModifier - pressDiff[1] - CheckHeight(ref h);                      }                      else if (bottom)                      {                          h = py - t - topModifier + pressDiff[3];                          CheckHeight(ref h);                      }                        if (!Suspended)                      {                          ResizeEventArgs v = new ResizeEventArgs(w' h' Width' Height);                          OnValidateResize(v);                            if (top)                          {                              // Compensate for a possible height change from Validate event                              t += (h - v.Height);                          }                          if (left)                          {                              // Compensate for a possible width change from Validate event                              l += (w - v.Width);                          }                          w = v.Width;                          h = v.Height;                      }                        if (outlineResizing)                      {                          OutlineRect = new Rectangle(l' t' w' h);                          if (parent != null) parent.Invalidate();                      }                      else                      {                          Width = w;                          Height = h;                          Top = t;                          Left = l;                      }                  }              }
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Dialog,The following statement contains a magic number: pnlTop.Height = 64;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Dialog,The following statement contains a magic number: lblCapt.Width = lblCapt.Parent.ClientWidth - 16;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Dialog,The following statement contains a magic number: lblCapt.Left = 8;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Dialog,The following statement contains a magic number: lblCapt.Top = 8;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Dialog,The following statement contains a magic number: lblDesc.Width = lblDesc.Parent.ClientWidth - 16;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Dialog,The following statement contains a magic number: lblDesc.Left = 8;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Dialog,The following statement contains a magic number: pnlBottom.Height = 24 + 16;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Dialog,The following statement contains a magic number: pnlBottom.Height = 24 + 16;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The following statement contains a magic number: lblDesc.Top = lblCapt.Top + lblCapt.Height + 4;
Magic Number,TomShane.Neoforce.Controls,Dialog,C:\repos\NeoforceControls_Neoforce-Mono\Dialog.cs,Init,The following statement contains a magic number: lblDesc.Height = lblDesc.Parent.ClientHeight - lblDesc.Top - 8;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: ClientWidth = (int)Manager.Skin.Controls["Label"].Layers[0].Text.Font.Resource.MeasureString(msg).X + 48 + 16 + 16 + 16;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: ClientWidth = (int)Manager.Skin.Controls["Label"].Layers[0].Text.Font.Resource.MeasureString(msg).X + 48 + 16 + 16 + 16;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: ClientWidth = (int)Manager.Skin.Controls["Label"].Layers[0].Text.Font.Resource.MeasureString(msg).X + 48 + 16 + 16 + 16;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: ClientWidth = (int)Manager.Skin.Controls["Label"].Layers[0].Text.Font.Resource.MeasureString(msg).X + 48 + 16 + 16 + 16;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: ClientHeight = 120;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: imgIcon.Left = 16;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: imgIcon.Top = 16;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: imgIcon.Width = 48;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: imgIcon.Height = 48;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: lblMessage.Left = 80;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: lblMessage.Top = 16;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: lblMessage.Height = 48;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: btnYes.Left = (BottomPanel.ClientWidth / 2) - btnYes.Width - 4;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: btnYes.Left = (BottomPanel.ClientWidth / 2) - btnYes.Width - 4;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: btnYes.Top = 8;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: btnNo.Left = (BottomPanel.ClientWidth / 2) + 4;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: btnNo.Left = (BottomPanel.ClientWidth / 2) + 4;
Magic Number,TomShane.Neoforce.Controls,ExitDialog,C:\repos\NeoforceControls_Neoforce-Mono\ExitDialog.cs,ExitDialog,The following statement contains a magic number: btnNo.Top = 8;
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,GroupBox,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,GroupBox,The following statement contains a magic number: Height = 64;
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The following statement contains a magic number: Rectangle r = new Rectangle(rect.Left' rect.Top + (int)(size.Y / 2)' rect.Width' rect.Height - (int)(size.Y / 2));
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The following statement contains a magic number: Rectangle r = new Rectangle(rect.Left' rect.Top + (int)(size.Y / 2)' rect.Width' rect.Height - (int)(size.Y / 2));
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The following statement contains a magic number: if (font != null && Text != null && Text != "")              {                  Rectangle bg = new Rectangle(r.Left + offset.X' (r.Top - (int)(size.Y / 2)) + offset.Y' (int)size.X + layer.ContentMargins.Horizontal' (int)size.Y);                  renderer.DrawLayer(Manager.Skin.Controls["Control"].Layers[0]' bg' new Color(64' 64' 64)' 0);                  renderer.DrawString(this' layer' Text' new Rectangle(r.Left' r.Top - (int)(size.Y / 2)' (int)(size.X)' (int)size.Y)' true' 0' 0' false);              }
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The following statement contains a magic number: if (font != null && Text != null && Text != "")              {                  Rectangle bg = new Rectangle(r.Left + offset.X' (r.Top - (int)(size.Y / 2)) + offset.Y' (int)size.X + layer.ContentMargins.Horizontal' (int)size.Y);                  renderer.DrawLayer(Manager.Skin.Controls["Control"].Layers[0]' bg' new Color(64' 64' 64)' 0);                  renderer.DrawString(this' layer' Text' new Rectangle(r.Left' r.Top - (int)(size.Y / 2)' (int)(size.X)' (int)size.Y)' true' 0' 0' false);              }
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The following statement contains a magic number: if (font != null && Text != null && Text != "")              {                  Rectangle bg = new Rectangle(r.Left + offset.X' (r.Top - (int)(size.Y / 2)) + offset.Y' (int)size.X + layer.ContentMargins.Horizontal' (int)size.Y);                  renderer.DrawLayer(Manager.Skin.Controls["Control"].Layers[0]' bg' new Color(64' 64' 64)' 0);                  renderer.DrawString(this' layer' Text' new Rectangle(r.Left' r.Top - (int)(size.Y / 2)' (int)(size.X)' (int)size.Y)' true' 0' 0' false);              }
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The following statement contains a magic number: if (font != null && Text != null && Text != "")              {                  Rectangle bg = new Rectangle(r.Left + offset.X' (r.Top - (int)(size.Y / 2)) + offset.Y' (int)size.X + layer.ContentMargins.Horizontal' (int)size.Y);                  renderer.DrawLayer(Manager.Skin.Controls["Control"].Layers[0]' bg' new Color(64' 64' 64)' 0);                  renderer.DrawString(this' layer' Text' new Rectangle(r.Left' r.Top - (int)(size.Y / 2)' (int)(size.X)' (int)size.Y)' true' 0' 0' false);              }
Magic Number,TomShane.Neoforce.Controls,GroupBox,C:\repos\NeoforceControls_Neoforce-Mono\GroupBox.cs,DrawControl,The following statement contains a magic number: if (font != null && Text != null && Text != "")              {                  Rectangle bg = new Rectangle(r.Left + offset.X' (r.Top - (int)(size.Y / 2)) + offset.Y' (int)size.X + layer.ContentMargins.Horizontal' (int)size.Y);                  renderer.DrawLayer(Manager.Skin.Controls["Control"].Layers[0]' bg' new Color(64' 64' 64)' 0);                  renderer.DrawString(this' layer' Text' new Rectangle(r.Left' r.Top - (int)(size.Y / 2)' (int)(size.X)' (int)size.Y)' true' 0' 0' false);              }
Magic Number,TomShane.Neoforce.Controls,GroupPanel,C:\repos\NeoforceControls_Neoforce-Mono\GroupPanel.cs,GroupPanel,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,GroupPanel,C:\repos\NeoforceControls_Neoforce-Mono\GroupPanel.cs,GroupPanel,The following statement contains a magic number: Height = 64;
Magic Number,TomShane.Neoforce.Controls,ImageBox,C:\repos\NeoforceControls_Neoforce-Mono\ImageBox.cs,DrawControl,The following statement contains a magic number: if (image != null)        {          if (sizeMode == SizeMode.Normal)          {            renderer.Draw(image' rect.X' rect.Y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Auto)          {                      renderer.Draw(image' rect.X' rect.Y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Stretched)          {                renderer.Draw(image' rect' sourceRect' Color);          }          else if (sizeMode == SizeMode.Centered)          {            int x = (rect.Width / 2) - (image.Width / 2);            int y = (rect.Height / 2) - (image.Height / 2);                        renderer.Draw(image' x' y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Tiled)          {              renderer.DrawTileTexture(image' rect' Color);          }        }
Magic Number,TomShane.Neoforce.Controls,ImageBox,C:\repos\NeoforceControls_Neoforce-Mono\ImageBox.cs,DrawControl,The following statement contains a magic number: if (image != null)        {          if (sizeMode == SizeMode.Normal)          {            renderer.Draw(image' rect.X' rect.Y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Auto)          {                      renderer.Draw(image' rect.X' rect.Y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Stretched)          {                renderer.Draw(image' rect' sourceRect' Color);          }          else if (sizeMode == SizeMode.Centered)          {            int x = (rect.Width / 2) - (image.Width / 2);            int y = (rect.Height / 2) - (image.Height / 2);                        renderer.Draw(image' x' y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Tiled)          {              renderer.DrawTileTexture(image' rect' Color);          }        }
Magic Number,TomShane.Neoforce.Controls,ImageBox,C:\repos\NeoforceControls_Neoforce-Mono\ImageBox.cs,DrawControl,The following statement contains a magic number: if (image != null)        {          if (sizeMode == SizeMode.Normal)          {            renderer.Draw(image' rect.X' rect.Y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Auto)          {                      renderer.Draw(image' rect.X' rect.Y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Stretched)          {                renderer.Draw(image' rect' sourceRect' Color);          }          else if (sizeMode == SizeMode.Centered)          {            int x = (rect.Width / 2) - (image.Width / 2);            int y = (rect.Height / 2) - (image.Height / 2);                        renderer.Draw(image' x' y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Tiled)          {              renderer.DrawTileTexture(image' rect' Color);          }        }
Magic Number,TomShane.Neoforce.Controls,ImageBox,C:\repos\NeoforceControls_Neoforce-Mono\ImageBox.cs,DrawControl,The following statement contains a magic number: if (image != null)        {          if (sizeMode == SizeMode.Normal)          {            renderer.Draw(image' rect.X' rect.Y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Auto)          {                      renderer.Draw(image' rect.X' rect.Y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Stretched)          {                renderer.Draw(image' rect' sourceRect' Color);          }          else if (sizeMode == SizeMode.Centered)          {            int x = (rect.Width / 2) - (image.Width / 2);            int y = (rect.Height / 2) - (image.Height / 2);                        renderer.Draw(image' x' y' sourceRect' Color);          }          else if (sizeMode == SizeMode.Tiled)          {              renderer.DrawTileTexture(image' rect' Color);          }        }
Magic Number,TomShane.Neoforce.Controls,KeyboardLayout,C:\repos\NeoforceControls_Neoforce-Mono\KeyboardLayout.cs,KeyboardLayout,The following statement contains a magic number: LayoutList.Add(1033);
Magic Number,TomShane.Neoforce.Controls,CzechKeyboardLayout,C:\repos\NeoforceControls_Neoforce-Mono\KeyboardLayout.cs,CzechKeyboardLayout,The following statement contains a magic number: LayoutList.Add(1029);
Magic Number,TomShane.Neoforce.Controls,GermanKeyboardLayout,C:\repos\NeoforceControls_Neoforce-Mono\KeyboardLayout.cs,GermanKeyboardLayout,The following statement contains a magic number: LayoutList.Add(1031);
Magic Number,TomShane.Neoforce.Controls,PolishKeyboardLayout,C:\repos\NeoforceControls_Neoforce-Mono\KeyboardLayout.cs,PolishKeyboardLayout,The following statement contains a magic number: LayoutList.Add(1045);
Magic Number,TomShane.Neoforce.Controls,Label,C:\repos\NeoforceControls_Neoforce-Mono\Label.cs,Label,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,Label,C:\repos\NeoforceControls_Neoforce-Mono\Label.cs,Label,The following statement contains a magic number: Height = 16;
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ListBox,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ListBox,The following statement contains a magic number: Height = 64;
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ListBox,The following statement contains a magic number: MinimumHeight = 16;
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ListBox,The following statement contains a magic number: sbVert.PageSize = 25;
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ListBox,The following statement contains a magic number: sbVert.StepSize = 10;
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,AutoHeight,The following statement contains a magic number: if (maxItems < 3)              {                  //maxItems = 3;                  sbVert.Visible = false;                  pane.Width = Width - Skin.Layers["Control"].ContentMargins.Horizontal - 1;              }              else              {                  pane.Width = Width - sbVert.Width - Skin.Layers["Control"].ContentMargins.Horizontal - 1;                  sbVert.Visible = true;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,AutoHeight,The following statement contains a magic number: if (items != null && items.Count > 0)              {                  int h = (int)font.Font.Resource.MeasureString(items[0].ToString()).Y;                  Height = (h * maxItems) + (Skin.Layers["Control"].ContentMargins.Vertical);// - Skin.OriginMargins.Vertical);              }              else              {                  Height = 32;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,DrawPane,The following statement contains a magic number: if (items != null && items.Count > 0)              {                  SkinText font = Skin.Layers["Control"].Text;                  SkinLayer sel = Skin.Layers["ListBox.Selection"];                  int h = (int)font.Font.Resource.MeasureString(items[0].ToString()).Y;                  int v = (sbVert.Value / 10);                  int p = (sbVert.PageSize / 10);                  int d = (int)(((sbVert.Value % 10) / 10f) * h);                  int c = items.Count;                  int s = itemIndex;                    for (int i = v; i <= v + p + 1; i++)                  {                      if (i < c)                      {                          e.Renderer.DrawString(this' Skin.Layers["Control"]' items[i].ToString()' new Rectangle(e.Rectangle.Left' e.Rectangle.Top - d + ((i - v) * h)' e.Rectangle.Width' h)' false);                      }                  }                  if (s >= 0 && s < c && (Focused || !hideSelection))                  {                      int pos = -d + ((s - v) * h);                      if (pos > -h && pos < (p + 1) * h)                      {                          e.Renderer.DrawLayer(this' sel' new Rectangle(e.Rectangle.Left' e.Rectangle.Top + pos' e.Rectangle.Width' h));                          e.Renderer.DrawString(this' sel' items[s].ToString()' new Rectangle(e.Rectangle.Left' e.Rectangle.Top + pos' e.Rectangle.Width' h)' false);                      }                  }              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,DrawPane,The following statement contains a magic number: if (items != null && items.Count > 0)              {                  SkinText font = Skin.Layers["Control"].Text;                  SkinLayer sel = Skin.Layers["ListBox.Selection"];                  int h = (int)font.Font.Resource.MeasureString(items[0].ToString()).Y;                  int v = (sbVert.Value / 10);                  int p = (sbVert.PageSize / 10);                  int d = (int)(((sbVert.Value % 10) / 10f) * h);                  int c = items.Count;                  int s = itemIndex;                    for (int i = v; i <= v + p + 1; i++)                  {                      if (i < c)                      {                          e.Renderer.DrawString(this' Skin.Layers["Control"]' items[i].ToString()' new Rectangle(e.Rectangle.Left' e.Rectangle.Top - d + ((i - v) * h)' e.Rectangle.Width' h)' false);                      }                  }                  if (s >= 0 && s < c && (Focused || !hideSelection))                  {                      int pos = -d + ((s - v) * h);                      if (pos > -h && pos < (p + 1) * h)                      {                          e.Renderer.DrawLayer(this' sel' new Rectangle(e.Rectangle.Left' e.Rectangle.Top + pos' e.Rectangle.Width' h));                          e.Renderer.DrawString(this' sel' items[s].ToString()' new Rectangle(e.Rectangle.Left' e.Rectangle.Top + pos' e.Rectangle.Width' h)' false);                      }                  }              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,DrawPane,The following statement contains a magic number: if (items != null && items.Count > 0)              {                  SkinText font = Skin.Layers["Control"].Text;                  SkinLayer sel = Skin.Layers["ListBox.Selection"];                  int h = (int)font.Font.Resource.MeasureString(items[0].ToString()).Y;                  int v = (sbVert.Value / 10);                  int p = (sbVert.PageSize / 10);                  int d = (int)(((sbVert.Value % 10) / 10f) * h);                  int c = items.Count;                  int s = itemIndex;                    for (int i = v; i <= v + p + 1; i++)                  {                      if (i < c)                      {                          e.Renderer.DrawString(this' Skin.Layers["Control"]' items[i].ToString()' new Rectangle(e.Rectangle.Left' e.Rectangle.Top - d + ((i - v) * h)' e.Rectangle.Width' h)' false);                      }                  }                  if (s >= 0 && s < c && (Focused || !hideSelection))                  {                      int pos = -d + ((s - v) * h);                      if (pos > -h && pos < (p + 1) * h)                      {                          e.Renderer.DrawLayer(this' sel' new Rectangle(e.Rectangle.Left' e.Rectangle.Top + pos' e.Rectangle.Width' h));                          e.Renderer.DrawString(this' sel' items[s].ToString()' new Rectangle(e.Rectangle.Left' e.Rectangle.Top + pos' e.Rectangle.Width' h)' false);                      }                  }              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,TrackItem,The following statement contains a magic number: if (items != null && items.Count > 0 && (pane.ControlRect.Contains(new Point(x' y))))              {                  SkinText font = Skin.Layers["Control"].Text;                  int h = (int)font.Font.Resource.MeasureString(items[0].ToString()).Y;                  int d = (int)(((sbVert.Value % 10) / 10f) * h);                  int i = (int)Math.Floor((sbVert.Value / 10f) + ((float)y / h));                  if (i >= 0 && i < Items.Count && i >= (int)Math.Floor((float)sbVert.Value / 10f) && i < (int)Math.Ceiling((float)(sbVert.Value + sbVert.PageSize) / 10f)) ItemIndex = i;                  Focused = true;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,OnKeyPress,The following statement contains a magic number: if (e.Key == Keys.Down)              {                  e.Handled = true;                  itemIndex += sbVert.StepSize / 10;              }              else if (e.Key == Keys.Up)              {                  e.Handled = true;                  itemIndex -= sbVert.StepSize / 10;              }              else if (e.Key == Keys.PageDown)              {                  e.Handled = true;                  itemIndex += sbVert.PageSize / 10;              }              else if (e.Key == Keys.PageUp)              {                  e.Handled = true;                  itemIndex -= sbVert.PageSize / 10;              }              else if (e.Key == Keys.Home)              {                  e.Handled = true;                  itemIndex = 0;              }              else if (e.Key == Keys.End)              {                  e.Handled = true;                  itemIndex = items.Count - 1;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,OnKeyPress,The following statement contains a magic number: if (e.Key == Keys.Down)              {                  e.Handled = true;                  itemIndex += sbVert.StepSize / 10;              }              else if (e.Key == Keys.Up)              {                  e.Handled = true;                  itemIndex -= sbVert.StepSize / 10;              }              else if (e.Key == Keys.PageDown)              {                  e.Handled = true;                  itemIndex += sbVert.PageSize / 10;              }              else if (e.Key == Keys.PageUp)              {                  e.Handled = true;                  itemIndex -= sbVert.PageSize / 10;              }              else if (e.Key == Keys.Home)              {                  e.Handled = true;                  itemIndex = 0;              }              else if (e.Key == Keys.End)              {                  e.Handled = true;                  itemIndex = items.Count - 1;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,OnKeyPress,The following statement contains a magic number: if (e.Key == Keys.Down)              {                  e.Handled = true;                  itemIndex += sbVert.StepSize / 10;              }              else if (e.Key == Keys.Up)              {                  e.Handled = true;                  itemIndex -= sbVert.StepSize / 10;              }              else if (e.Key == Keys.PageDown)              {                  e.Handled = true;                  itemIndex += sbVert.PageSize / 10;              }              else if (e.Key == Keys.PageUp)              {                  e.Handled = true;                  itemIndex -= sbVert.PageSize / 10;              }              else if (e.Key == Keys.Home)              {                  e.Handled = true;                  itemIndex = 0;              }              else if (e.Key == Keys.End)              {                  e.Handled = true;                  itemIndex = items.Count - 1;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,OnKeyPress,The following statement contains a magic number: if (e.Key == Keys.Down)              {                  e.Handled = true;                  itemIndex += sbVert.StepSize / 10;              }              else if (e.Key == Keys.Up)              {                  e.Handled = true;                  itemIndex -= sbVert.StepSize / 10;              }              else if (e.Key == Keys.PageDown)              {                  e.Handled = true;                  itemIndex += sbVert.PageSize / 10;              }              else if (e.Key == Keys.PageUp)              {                  e.Handled = true;                  itemIndex -= sbVert.PageSize / 10;              }              else if (e.Key == Keys.Home)              {                  e.Handled = true;                  itemIndex = 0;              }              else if (e.Key == Keys.End)              {                  e.Handled = true;                  itemIndex = items.Count - 1;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,OnMouseScroll,The following statement contains a magic number: if (e.ScrollDirection == MouseScrollDirection.Down)              {                  e.Handled = true;                  itemIndex += sbVert.StepSize / 10;              }              else if (e.ScrollDirection == MouseScrollDirection.Up)              {                  e.Handled = true;                  itemIndex -= sbVert.StepSize / 10;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,OnMouseScroll,The following statement contains a magic number: if (e.ScrollDirection == MouseScrollDirection.Down)              {                  e.Handled = true;                  itemIndex += sbVert.StepSize / 10;              }              else if (e.ScrollDirection == MouseScrollDirection.Up)              {                  e.Handled = true;                  itemIndex -= sbVert.StepSize / 10;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,OnGamePadPress,The following statement contains a magic number: if (e.Button == GamePadActions.Down)              {                  e.Handled = true;                  itemIndex += sbVert.StepSize / 10;              }              else if (e.Button == GamePadActions.Up)              {                  e.Handled = true;                  itemIndex -= sbVert.StepSize / 10;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,OnGamePadPress,The following statement contains a magic number: if (e.Button == GamePadActions.Down)              {                  e.Handled = true;                  itemIndex += sbVert.StepSize / 10;              }              else if (e.Button == GamePadActions.Up)              {                  e.Handled = true;                  itemIndex -= sbVert.StepSize / 10;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ItemsChanged,The following statement contains a magic number: if (items != null && items.Count > 0)              {                  SkinText font = Skin.Layers["Control"].Text;                  int h = (int)font.Font.Resource.MeasureString(items[0].ToString()).Y;                    int sizev = Height - Skin.Layers["Control"].ContentMargins.Vertical;                  sbVert.Range = items.Count * 10;                  sbVert.PageSize = (int)Math.Floor((float)sizev * 10 / h);                  Invalidate();              }              else if (items == null || items.Count <= 0)              {                  sbVert.Range = 1;                  sbVert.PageSize = 1;                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ItemsChanged,The following statement contains a magic number: if (items != null && items.Count > 0)              {                  SkinText font = Skin.Layers["Control"].Text;                  int h = (int)font.Font.Resource.MeasureString(items[0].ToString()).Y;                    int sizev = Height - Skin.Layers["Control"].ContentMargins.Vertical;                  sbVert.Range = items.Count * 10;                  sbVert.PageSize = (int)Math.Floor((float)sizev * 10 / h);                  Invalidate();              }              else if (items == null || items.Count <= 0)              {                  sbVert.Range = 1;                  sbVert.PageSize = 1;                  Invalidate();              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ScrollTo,The following statement contains a magic number: if ((index * 10) < sbVert.Value)              {                  sbVert.Value = index * 10;              }              else if (index >= (int)Math.Floor(((float)sbVert.Value + sbVert.PageSize) / 10f))              {                  sbVert.Value = ((index + 1) * 10) - sbVert.PageSize;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ScrollTo,The following statement contains a magic number: if ((index * 10) < sbVert.Value)              {                  sbVert.Value = index * 10;              }              else if (index >= (int)Math.Floor(((float)sbVert.Value + sbVert.PageSize) / 10f))              {                  sbVert.Value = ((index + 1) * 10) - sbVert.PageSize;              }
Magic Number,TomShane.Neoforce.Controls,ListBox,C:\repos\NeoforceControls_Neoforce-Mono\ListBox.cs,ScrollTo,The following statement contains a magic number: if ((index * 10) < sbVert.Value)              {                  sbVert.Value = index * 10;              }              else if (index >= (int)Math.Floor(((float)sbVert.Value + sbVert.PageSize) / 10f))              {                  sbVert.Value = ((index + 1) * 10) - sbVert.PageSize;              }
Magic Number,TomShane.Neoforce.Controls,MainMenu,C:\repos\NeoforceControls_Neoforce-Mono\MainMenu.cs,MainMenu,The following statement contains a magic number: Height = 24;
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,Manager,The following statement contains a magic number: states.Buttons = new Control[32];
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The following statement contains a magic number: if (c.Parent != null && c.Parent.Controls != null)              {                  int index = -1;                    if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MinValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && (cx.Left + cx.Width) >= minx && (cx.Left + cx.Width) <= c.Left)                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left + cx.Width;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && cx.Left <= minx && cx.Left >= (c.Left + c.Width))                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled))                  {                      int miny = int.MinValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && (cx.Top + cx.Height) >= miny && (cx.Top + cx.Height) <= c.Top)                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top + cx.Height;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && cx.Top <= miny && cx.Top >= (c.Top + c.Height))                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top;                              index = i;                          }                      }                  }                    if (index != -1)                  {                      (c.Parent.Controls as ControlsList)[index].Focused = true;                      kbe.Handled = true;                      gpe.Handled = true;                  }              }
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The following statement contains a magic number: if (c.Parent != null && c.Parent.Controls != null)              {                  int index = -1;                    if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MinValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && (cx.Left + cx.Width) >= minx && (cx.Left + cx.Width) <= c.Left)                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left + cx.Width;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && cx.Left <= minx && cx.Left >= (c.Left + c.Width))                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled))                  {                      int miny = int.MinValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && (cx.Top + cx.Height) >= miny && (cx.Top + cx.Height) <= c.Top)                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top + cx.Height;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && cx.Top <= miny && cx.Top >= (c.Top + c.Height))                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top;                              index = i;                          }                      }                  }                    if (index != -1)                  {                      (c.Parent.Controls as ControlsList)[index].Focused = true;                      kbe.Handled = true;                      gpe.Handled = true;                  }              }
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The following statement contains a magic number: if (c.Parent != null && c.Parent.Controls != null)              {                  int index = -1;                    if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MinValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && (cx.Left + cx.Width) >= minx && (cx.Left + cx.Width) <= c.Left)                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left + cx.Width;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && cx.Left <= minx && cx.Left >= (c.Left + c.Width))                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled))                  {                      int miny = int.MinValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && (cx.Top + cx.Height) >= miny && (cx.Top + cx.Height) <= c.Top)                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top + cx.Height;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && cx.Top <= miny && cx.Top >= (c.Top + c.Height))                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top;                              index = i;                          }                      }                  }                    if (index != -1)                  {                      (c.Parent.Controls as ControlsList)[index].Focused = true;                      kbe.Handled = true;                      gpe.Handled = true;                  }              }
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The following statement contains a magic number: if (c.Parent != null && c.Parent.Controls != null)              {                  int index = -1;                    if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MinValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && (cx.Left + cx.Width) >= minx && (cx.Left + cx.Width) <= c.Left)                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left + cx.Width;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && cx.Left <= minx && cx.Left >= (c.Left + c.Width))                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled))                  {                      int miny = int.MinValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && (cx.Top + cx.Height) >= miny && (cx.Top + cx.Height) <= c.Top)                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top + cx.Height;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && cx.Top <= miny && cx.Top >= (c.Top + c.Height))                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top;                              index = i;                          }                      }                  }                    if (index != -1)                  {                      (c.Parent.Controls as ControlsList)[index].Focused = true;                      kbe.Handled = true;                      gpe.Handled = true;                  }              }
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The following statement contains a magic number: if (c.Parent != null && c.Parent.Controls != null)              {                  int index = -1;                    if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MinValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && (cx.Left + cx.Width) >= minx && (cx.Left + cx.Width) <= c.Left)                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left + cx.Width;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && cx.Left <= minx && cx.Left >= (c.Left + c.Width))                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled))                  {                      int miny = int.MinValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && (cx.Top + cx.Height) >= miny && (cx.Top + cx.Height) <= c.Top)                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top + cx.Height;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && cx.Top <= miny && cx.Top >= (c.Top + c.Height))                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top;                              index = i;                          }                      }                  }                    if (index != -1)                  {                      (c.Parent.Controls as ControlsList)[index].Focused = true;                      kbe.Handled = true;                      gpe.Handled = true;                  }              }
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The following statement contains a magic number: if (c.Parent != null && c.Parent.Controls != null)              {                  int index = -1;                    if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MinValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && (cx.Left + cx.Width) >= minx && (cx.Left + cx.Width) <= c.Left)                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left + cx.Width;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && cx.Left <= minx && cx.Left >= (c.Left + c.Width))                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled))                  {                      int miny = int.MinValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && (cx.Top + cx.Height) >= miny && (cx.Top + cx.Height) <= c.Top)                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top + cx.Height;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && cx.Top <= miny && cx.Top >= (c.Top + c.Height))                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top;                              index = i;                          }                      }                  }                    if (index != -1)                  {                      (c.Parent.Controls as ControlsList)[index].Focused = true;                      kbe.Handled = true;                      gpe.Handled = true;                  }              }
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The following statement contains a magic number: if (c.Parent != null && c.Parent.Controls != null)              {                  int index = -1;                    if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MinValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && (cx.Left + cx.Width) >= minx && (cx.Left + cx.Width) <= c.Left)                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left + cx.Width;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && cx.Left <= minx && cx.Left >= (c.Left + c.Width))                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled))                  {                      int miny = int.MinValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && (cx.Top + cx.Height) >= miny && (cx.Top + cx.Height) <= c.Top)                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top + cx.Height;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && cx.Top <= miny && cx.Top >= (c.Top + c.Height))                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top;                              index = i;                          }                      }                  }                    if (index != -1)                  {                      (c.Parent.Controls as ControlsList)[index].Focused = true;                      kbe.Handled = true;                      gpe.Handled = true;                  }              }
Magic Number,TomShane.Neoforce.Controls,Manager,C:\repos\NeoforceControls_Neoforce-Mono\Manager.cs,ProcessArrows,The following statement contains a magic number: if (c.Parent != null && c.Parent.Controls != null)              {                  int index = -1;                    if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Left && !kbe.Handled) ||                      (gpe.Button == c.GamePadActions.Left && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MinValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && (cx.Left + cx.Width) >= minx && (cx.Left + cx.Width) <= c.Left)                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left + cx.Width;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Right && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Right && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cay = (int)(c.Top + (c.Height / 2));                          int cby = (int)(cx.Top + (cx.Height / 2));                            if (Math.Abs(cay - cby) <= miny && cx.Left <= minx && cx.Left >= (c.Left + c.Width))                          {                              miny = Math.Abs(cay - cby);                              minx = cx.Left;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Up && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Up && !gpe.Handled))                  {                      int miny = int.MinValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && (cx.Top + cx.Height) >= miny && (cx.Top + cx.Height) <= c.Top)                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top + cx.Height;                              index = i;                          }                      }                  }                  else if ((kbe.Key == Microsoft.Xna.Framework.Input.Keys.Down && !kbe.Handled) ||                           (gpe.Button == c.GamePadActions.Down && !gpe.Handled))                  {                      int miny = int.MaxValue;                      int minx = int.MaxValue;                      for (int i = 0; i < (c.Parent.Controls as ControlsList).Count; i++)                      {                          Control cx = (c.Parent.Controls as ControlsList)[i];                          if (cx == c || !cx.Visible || !cx.Enabled || cx.Passive || !cx.CanFocus) continue;                            int cax = (int)(c.Left + (c.Width / 2));                          int cbx = (int)(cx.Left + (cx.Width / 2));                            if (Math.Abs(cax - cbx) <= minx && cx.Top <= miny && cx.Top >= (c.Top + c.Height))                          {                              minx = Math.Abs(cax - cbx);                              miny = cx.Top;                              index = i;                          }                      }                  }                    if (index != -1)                  {                      (c.Parent.Controls as ControlsList)[index].Focused = true;                      kbe.Handled = true;                      gpe.Handled = true;                  }              }
Magic Number,TomShane.Neoforce.Controls,NativeMethods,C:\repos\NeoforceControls_Neoforce-Mono\NativeMethods.cs,LoadCursor,The following statement contains a magic number: return LoadImage(IntPtr.Zero' fileName' 2' 0' 0' 0x0010);
Magic Number,TomShane.Neoforce.Controls,Panel,C:\repos\NeoforceControls_Neoforce-Mono\Panel.cs,Panel,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,Panel,C:\repos\NeoforceControls_Neoforce-Mono\Panel.cs,Panel,The following statement contains a magic number: Height = 64;
Magic Number,TomShane.Neoforce.Controls,Panel,C:\repos\NeoforceControls_Neoforce-Mono\Panel.cs,AdjustMargins,The following statement contains a magic number: if (bevelBorder != BevelBorder.None)        {          if (bevelStyle != BevelStyle.Flat)          {            s += 2;          }          else          {            s += 1;          }            if (bevelBorder == BevelBorder.Left || bevelBorder == BevelBorder.All)          {            l = s;          }          if (bevelBorder == BevelBorder.Top || bevelBorder == BevelBorder.All)          {            t = s;          }          if (bevelBorder == BevelBorder.Right || bevelBorder == BevelBorder.All)          {            r = s;          }          if (bevelBorder == BevelBorder.Bottom || bevelBorder == BevelBorder.All)          {            b = s;          }        }
Magic Number,TomShane.Neoforce.Controls,Panel,C:\repos\NeoforceControls_Neoforce-Mono\Panel.cs,DrawControl,The following statement contains a magic number: if (bevelBorder != BevelBorder.None)        {                if (bevelStyle != BevelStyle.Flat)          {            s += 2;          }          else           {            s += 1;          }                        if (bevelBorder == BevelBorder.Left || bevelBorder == BevelBorder.All)          {            x += s;             w -= s;           }          if (bevelBorder == BevelBorder.Top || bevelBorder == BevelBorder.All)          {            y += s;            h -= s;          }           if (bevelBorder == BevelBorder.Right || bevelBorder == BevelBorder.All)          {            w -= s;          }           if (bevelBorder == BevelBorder.Bottom || bevelBorder == BevelBorder.All)          {            h -= s;          }                      }
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,ProgressBar,The following statement contains a magic number: Width = 128;
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,ProgressBar,The following statement contains a magic number: Height = 16;
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,ProgressBar,The following statement contains a magic number: MinimumHeight = 8;
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,ProgressBar,The following statement contains a magic number: MinimumWidth = 32;
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,DrawControl,The following statement contains a magic number: if (Value > 0 || mode == ProgressBarMode.Infinite)        {          SkinLayer p = Skin.Layers["Control"];          SkinLayer l = Skin.Layers["Scale"];          Rectangle r = new Rectangle(rect.Left + p.ContentMargins.Left'                                      rect.Top + p.ContentMargins.Top'                                      rect.Width - p.ContentMargins.Vertical'                                      rect.Height - p.ContentMargins.Horizontal);            float perc = ((float)value / range) * 100;          int w = (int)((perc / 100) * r.Width);          Rectangle rx;          if (mode == ProgressBarMode.Default)          {            if (w < l.SizingMargins.Vertical) w = l.SizingMargins.Vertical;            rx = new Rectangle(r.Left' r.Top' w' r.Height);          }          else          {            int s = r.Left + w;            if (s > r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4)) s = r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4);            rx = new Rectangle(s' r.Top' (r.Width / 4)' r.Height);          }                    renderer.DrawLayer(this' l' rx);        }
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,DrawControl,The following statement contains a magic number: if (Value > 0 || mode == ProgressBarMode.Infinite)        {          SkinLayer p = Skin.Layers["Control"];          SkinLayer l = Skin.Layers["Scale"];          Rectangle r = new Rectangle(rect.Left + p.ContentMargins.Left'                                      rect.Top + p.ContentMargins.Top'                                      rect.Width - p.ContentMargins.Vertical'                                      rect.Height - p.ContentMargins.Horizontal);            float perc = ((float)value / range) * 100;          int w = (int)((perc / 100) * r.Width);          Rectangle rx;          if (mode == ProgressBarMode.Default)          {            if (w < l.SizingMargins.Vertical) w = l.SizingMargins.Vertical;            rx = new Rectangle(r.Left' r.Top' w' r.Height);          }          else          {            int s = r.Left + w;            if (s > r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4)) s = r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4);            rx = new Rectangle(s' r.Top' (r.Width / 4)' r.Height);          }                    renderer.DrawLayer(this' l' rx);        }
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,DrawControl,The following statement contains a magic number: if (Value > 0 || mode == ProgressBarMode.Infinite)        {          SkinLayer p = Skin.Layers["Control"];          SkinLayer l = Skin.Layers["Scale"];          Rectangle r = new Rectangle(rect.Left + p.ContentMargins.Left'                                      rect.Top + p.ContentMargins.Top'                                      rect.Width - p.ContentMargins.Vertical'                                      rect.Height - p.ContentMargins.Horizontal);            float perc = ((float)value / range) * 100;          int w = (int)((perc / 100) * r.Width);          Rectangle rx;          if (mode == ProgressBarMode.Default)          {            if (w < l.SizingMargins.Vertical) w = l.SizingMargins.Vertical;            rx = new Rectangle(r.Left' r.Top' w' r.Height);          }          else          {            int s = r.Left + w;            if (s > r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4)) s = r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4);            rx = new Rectangle(s' r.Top' (r.Width / 4)' r.Height);          }                    renderer.DrawLayer(this' l' rx);        }
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,DrawControl,The following statement contains a magic number: if (Value > 0 || mode == ProgressBarMode.Infinite)        {          SkinLayer p = Skin.Layers["Control"];          SkinLayer l = Skin.Layers["Scale"];          Rectangle r = new Rectangle(rect.Left + p.ContentMargins.Left'                                      rect.Top + p.ContentMargins.Top'                                      rect.Width - p.ContentMargins.Vertical'                                      rect.Height - p.ContentMargins.Horizontal);            float perc = ((float)value / range) * 100;          int w = (int)((perc / 100) * r.Width);          Rectangle rx;          if (mode == ProgressBarMode.Default)          {            if (w < l.SizingMargins.Vertical) w = l.SizingMargins.Vertical;            rx = new Rectangle(r.Left' r.Top' w' r.Height);          }          else          {            int s = r.Left + w;            if (s > r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4)) s = r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4);            rx = new Rectangle(s' r.Top' (r.Width / 4)' r.Height);          }                    renderer.DrawLayer(this' l' rx);        }
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,DrawControl,The following statement contains a magic number: if (Value > 0 || mode == ProgressBarMode.Infinite)        {          SkinLayer p = Skin.Layers["Control"];          SkinLayer l = Skin.Layers["Scale"];          Rectangle r = new Rectangle(rect.Left + p.ContentMargins.Left'                                      rect.Top + p.ContentMargins.Top'                                      rect.Width - p.ContentMargins.Vertical'                                      rect.Height - p.ContentMargins.Horizontal);            float perc = ((float)value / range) * 100;          int w = (int)((perc / 100) * r.Width);          Rectangle rx;          if (mode == ProgressBarMode.Default)          {            if (w < l.SizingMargins.Vertical) w = l.SizingMargins.Vertical;            rx = new Rectangle(r.Left' r.Top' w' r.Height);          }          else          {            int s = r.Left + w;            if (s > r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4)) s = r.Left + p.ContentMargins.Left + r.Width - (r.Width / 4);            rx = new Rectangle(s' r.Top' (r.Width / 4)' r.Height);          }                    renderer.DrawLayer(this' l' rx);        }
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,Update,The following statement contains a magic number: if (mode == ProgressBarMode.Infinite && Enabled && Visible)        {          time += gameTime.ElapsedGameTime.TotalMilliseconds;          if (time >= 33f)          {            value += sign * (int)Math.Ceiling(time / 20f);            if (value >= Range - (Range / 4))            {              value = Range - (Range / 4);              sign = -1;            }            else if (value <= 0)            {              value = 0;              sign = 1;            }              time = 0;                      Invalidate();          }                                }
Magic Number,TomShane.Neoforce.Controls,ProgressBar,C:\repos\NeoforceControls_Neoforce-Mono\ProgressBar.cs,Update,The following statement contains a magic number: if (mode == ProgressBarMode.Infinite && Enabled && Visible)        {          time += gameTime.ElapsedGameTime.TotalMilliseconds;          if (time >= 33f)          {            value += sign * (int)Math.Ceiling(time / 20f);            if (value >= Range - (Range / 4))            {              value = Range - (Range / 4);              sign = -1;            }            else if (value <= 0)            {              value = 0;              sign = 1;            }              time = 0;                      Invalidate();          }                                }
Magic Number,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawString,The following statement contains a magic number: if (ellipsis)              {                  const string elli = "...";                  int size = (int)Math.Ceiling(font.MeasureString(text).X);                  if (size > rect.Width)                  {                      int es = (int)Math.Ceiling(font.MeasureString(elli).X);                      for (int i = text.Length - 1; i > 0; i--)                      {                          int c = 1;                          if (char.IsWhiteSpace(text[i - 1]))                          {                              c = 2;                              i--;                          }                          text = text.Remove(i' c);                          size = (int)Math.Ceiling(font.MeasureString(text).X);                          if (size + es <= rect.Width)                          {                              break;                          }                      }                      text += elli;                  }              }
Magic Number,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,GetTextCenter,The following statement contains a magic number: return (int)Math.Ceiling((size1 / 2) - (size2 / 2));
Magic Number,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,GetTextCenter,The following statement contains a magic number: return (int)Math.Ceiling((size1 / 2) - (size2 / 2));
Magic Number,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawGlyph,The following statement contains a magic number: if (glyph.SizeMode == SizeMode.Centered)              {                  rect = new Rectangle((rect.X + (rect.Width - imageSize.Width) / 2) + glyph.Offset.X'                                       (rect.Y + (rect.Height - imageSize.Height) / 2) + glyph.Offset.Y'                                       imageSize.Width'                                       imageSize.Height);              }              else if (glyph.SizeMode == SizeMode.Normal)              {                  rect = new Rectangle(rect.X + glyph.Offset.X' rect.Y + glyph.Offset.Y' imageSize.Width' imageSize.Height);              }              else if (glyph.SizeMode == SizeMode.Auto)              {                  rect = new Rectangle(rect.X + glyph.Offset.X' rect.Y + glyph.Offset.Y' imageSize.Width' imageSize.Height);              }
Magic Number,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,DrawGlyph,The following statement contains a magic number: if (glyph.SizeMode == SizeMode.Centered)              {                  rect = new Rectangle((rect.X + (rect.Width - imageSize.Width) / 2) + glyph.Offset.X'                                       (rect.Y + (rect.Height - imageSize.Height) / 2) + glyph.Offset.Y'                                       imageSize.Width'                                       imageSize.Height);              }              else if (glyph.SizeMode == SizeMode.Normal)              {                  rect = new Rectangle(rect.X + glyph.Offset.X' rect.Y + glyph.Offset.Y' imageSize.Width' imageSize.Height);              }              else if (glyph.SizeMode == SizeMode.Auto)              {                  rect = new Rectangle(rect.X + glyph.Offset.X' rect.Y + glyph.Offset.Y' imageSize.Width' imageSize.Height);              }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          strButton = "ScrollBar.ButtonHorz";          strRail = "ScrollBar.RailHorz";          strSlider = "ScrollBar.SliderHorz";          strGlyph = "ScrollBar.GlyphHorz";          strMinus = "ScrollBar.ArrowLeft";          strPlus = "ScrollBar.ArrowRight";            MinimumHeight = 16;          MinimumWidth = 46;          Width = 64;          Height = 16;                }        else        {          strButton = "ScrollBar.ButtonVert";          strRail = "ScrollBar.RailVert";          strSlider = "ScrollBar.SliderVert";          strGlyph = "ScrollBar.GlyphVert";          strMinus = "ScrollBar.ArrowUp";          strPlus = "ScrollBar.ArrowDown";            MinimumHeight = 46;          MinimumWidth = 16;          Width = 16;          Height = 64;                }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          strButton = "ScrollBar.ButtonHorz";          strRail = "ScrollBar.RailHorz";          strSlider = "ScrollBar.SliderHorz";          strGlyph = "ScrollBar.GlyphHorz";          strMinus = "ScrollBar.ArrowLeft";          strPlus = "ScrollBar.ArrowRight";            MinimumHeight = 16;          MinimumWidth = 46;          Width = 64;          Height = 16;                }        else        {          strButton = "ScrollBar.ButtonVert";          strRail = "ScrollBar.RailVert";          strSlider = "ScrollBar.SliderVert";          strGlyph = "ScrollBar.GlyphVert";          strMinus = "ScrollBar.ArrowUp";          strPlus = "ScrollBar.ArrowDown";            MinimumHeight = 46;          MinimumWidth = 16;          Width = 16;          Height = 64;                }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          strButton = "ScrollBar.ButtonHorz";          strRail = "ScrollBar.RailHorz";          strSlider = "ScrollBar.SliderHorz";          strGlyph = "ScrollBar.GlyphHorz";          strMinus = "ScrollBar.ArrowLeft";          strPlus = "ScrollBar.ArrowRight";            MinimumHeight = 16;          MinimumWidth = 46;          Width = 64;          Height = 16;                }        else        {          strButton = "ScrollBar.ButtonVert";          strRail = "ScrollBar.RailVert";          strSlider = "ScrollBar.SliderVert";          strGlyph = "ScrollBar.GlyphVert";          strMinus = "ScrollBar.ArrowUp";          strPlus = "ScrollBar.ArrowDown";            MinimumHeight = 46;          MinimumWidth = 16;          Width = 16;          Height = 64;                }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          strButton = "ScrollBar.ButtonHorz";          strRail = "ScrollBar.RailHorz";          strSlider = "ScrollBar.SliderHorz";          strGlyph = "ScrollBar.GlyphHorz";          strMinus = "ScrollBar.ArrowLeft";          strPlus = "ScrollBar.ArrowRight";            MinimumHeight = 16;          MinimumWidth = 46;          Width = 64;          Height = 16;                }        else        {          strButton = "ScrollBar.ButtonVert";          strRail = "ScrollBar.RailVert";          strSlider = "ScrollBar.SliderVert";          strGlyph = "ScrollBar.GlyphVert";          strMinus = "ScrollBar.ArrowUp";          strPlus = "ScrollBar.ArrowDown";            MinimumHeight = 46;          MinimumWidth = 16;          Width = 16;          Height = 64;                }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          strButton = "ScrollBar.ButtonHorz";          strRail = "ScrollBar.RailHorz";          strSlider = "ScrollBar.SliderHorz";          strGlyph = "ScrollBar.GlyphHorz";          strMinus = "ScrollBar.ArrowLeft";          strPlus = "ScrollBar.ArrowRight";            MinimumHeight = 16;          MinimumWidth = 46;          Width = 64;          Height = 16;                }        else        {          strButton = "ScrollBar.ButtonVert";          strRail = "ScrollBar.RailVert";          strSlider = "ScrollBar.SliderVert";          strGlyph = "ScrollBar.GlyphVert";          strMinus = "ScrollBar.ArrowUp";          strPlus = "ScrollBar.ArrowDown";            MinimumHeight = 46;          MinimumWidth = 16;          Width = 16;          Height = 64;                }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          strButton = "ScrollBar.ButtonHorz";          strRail = "ScrollBar.RailHorz";          strSlider = "ScrollBar.SliderHorz";          strGlyph = "ScrollBar.GlyphHorz";          strMinus = "ScrollBar.ArrowLeft";          strPlus = "ScrollBar.ArrowRight";            MinimumHeight = 16;          MinimumWidth = 46;          Width = 64;          Height = 16;                }        else        {          strButton = "ScrollBar.ButtonVert";          strRail = "ScrollBar.RailVert";          strSlider = "ScrollBar.SliderVert";          strGlyph = "ScrollBar.GlyphVert";          strMinus = "ScrollBar.ArrowUp";          strPlus = "ScrollBar.ArrowDown";            MinimumHeight = 46;          MinimumWidth = 16;          Width = 16;          Height = 64;                }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          strButton = "ScrollBar.ButtonHorz";          strRail = "ScrollBar.RailHorz";          strSlider = "ScrollBar.SliderHorz";          strGlyph = "ScrollBar.GlyphHorz";          strMinus = "ScrollBar.ArrowLeft";          strPlus = "ScrollBar.ArrowRight";            MinimumHeight = 16;          MinimumWidth = 46;          Width = 64;          Height = 16;                }        else        {          strButton = "ScrollBar.ButtonVert";          strRail = "ScrollBar.RailVert";          strSlider = "ScrollBar.SliderVert";          strGlyph = "ScrollBar.GlyphVert";          strMinus = "ScrollBar.ArrowUp";          strPlus = "ScrollBar.ArrowDown";            MinimumHeight = 46;          MinimumWidth = 16;          Width = 16;          Height = 64;                }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          strButton = "ScrollBar.ButtonHorz";          strRail = "ScrollBar.RailHorz";          strSlider = "ScrollBar.SliderHorz";          strGlyph = "ScrollBar.GlyphHorz";          strMinus = "ScrollBar.ArrowLeft";          strPlus = "ScrollBar.ArrowRight";            MinimumHeight = 16;          MinimumWidth = 46;          Width = 64;          Height = 16;                }        else        {          strButton = "ScrollBar.ButtonVert";          strRail = "ScrollBar.RailVert";          strSlider = "ScrollBar.SliderVert";          strGlyph = "ScrollBar.GlyphVert";          strMinus = "ScrollBar.ArrowUp";          strPlus = "ScrollBar.ArrowDown";            MinimumHeight = 46;          MinimumWidth = 16;          Width = 16;          Height = 64;                }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: btnSlider.MinimumHeight = 16;
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,ScrollBar,The following statement contains a magic number: btnSlider.MinimumWidth = 16;
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,RecalcParams,The following statement contains a magic number: if (btnMinus != null && btnPlus != null && btnSlider != null)        {              if (orientation == Orientation.Horizontal)          {            btnMinus.Width = Height;            btnMinus.Height = Height;                      btnPlus.Width = Height;            btnPlus.Height = Height;            btnPlus.Left = Width - Height;                    btnPlus.Top = 0;                                        btnSlider.Movable = true;                    int size = btnMinus.Width + Skin.Layers[strSlider].OffsetX;              btnSlider.MinimumWidth = Height;            int w = (Width - 2 * size);            btnSlider.Width = (int)Math.Ceiling((pageSize * w) / (float)range);            btnSlider.Height = Height;                float px = (float)(Range - PageSize) / (float)(w - btnSlider.Width);            int pos = (int)(Math.Ceiling(Value / (float)px));            btnSlider.SetPosition(size + pos' 0);            if (btnSlider.Left < size) btnSlider.SetPosition(size' 0);            if (btnSlider.Left + btnSlider.Width + size > Width) btnSlider.SetPosition(Width - size - btnSlider.Width' 0);                              }          else          {                    btnMinus.Width = Width;            btnMinus.Height = Width;                              btnPlus.Width = Width;            btnPlus.Height = Width;            btnPlus.Top = Height - Width;              btnSlider.Movable = true;            int size = btnMinus.Height + Skin.Layers[strSlider].OffsetY;              btnSlider.MinimumHeight = Width;            int h = (Height - 2 * size);            btnSlider.Height = (int)Math.Ceiling((pageSize * h) / (float)range);            btnSlider.Width = Width;                             float px = (float)(Range - PageSize) / (float)(h - btnSlider.Height);            int pos = (int)(Math.Ceiling(Value / (float)px));                      btnSlider.SetPosition(0' size + pos);                      if (btnSlider.Top < size) btnSlider.SetPosition(0' size);            if (btnSlider.Top + btnSlider.Height + size > Height) btnSlider.SetPosition(0' Height - size - btnSlider.Height);          }                        }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,RecalcParams,The following statement contains a magic number: if (btnMinus != null && btnPlus != null && btnSlider != null)        {              if (orientation == Orientation.Horizontal)          {            btnMinus.Width = Height;            btnMinus.Height = Height;                      btnPlus.Width = Height;            btnPlus.Height = Height;            btnPlus.Left = Width - Height;                    btnPlus.Top = 0;                                        btnSlider.Movable = true;                    int size = btnMinus.Width + Skin.Layers[strSlider].OffsetX;              btnSlider.MinimumWidth = Height;            int w = (Width - 2 * size);            btnSlider.Width = (int)Math.Ceiling((pageSize * w) / (float)range);            btnSlider.Height = Height;                float px = (float)(Range - PageSize) / (float)(w - btnSlider.Width);            int pos = (int)(Math.Ceiling(Value / (float)px));            btnSlider.SetPosition(size + pos' 0);            if (btnSlider.Left < size) btnSlider.SetPosition(size' 0);            if (btnSlider.Left + btnSlider.Width + size > Width) btnSlider.SetPosition(Width - size - btnSlider.Width' 0);                              }          else          {                    btnMinus.Width = Width;            btnMinus.Height = Width;                              btnPlus.Width = Width;            btnPlus.Height = Width;            btnPlus.Top = Height - Width;              btnSlider.Movable = true;            int size = btnMinus.Height + Skin.Layers[strSlider].OffsetY;              btnSlider.MinimumHeight = Width;            int h = (Height - 2 * size);            btnSlider.Height = (int)Math.Ceiling((pageSize * h) / (float)range);            btnSlider.Width = Width;                             float px = (float)(Range - PageSize) / (float)(h - btnSlider.Height);            int pos = (int)(Math.Ceiling(Value / (float)px));                      btnSlider.SetPosition(0' size + pos);                      if (btnSlider.Top < size) btnSlider.SetPosition(0' size);            if (btnSlider.Top + btnSlider.Height + size > Height) btnSlider.SetPosition(0' Height - size - btnSlider.Height);          }                        }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,btnSlider_Move,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          int size = btnMinus.Width + Skin.Layers[strSlider].OffsetX;          int w = (Width - 2 * size) - btnSlider.Width;          float px = (float)(Range - PageSize) / (float)w;          Value = (int)(Math.Ceiling((btnSlider.Left - size) * px));                                                }        else        {          int size = btnMinus.Height + Skin.Layers[strSlider].OffsetY;          int h = (Height - 2 * size) - btnSlider.Height;                  float px = (float)(Range - PageSize) / (float)h;          Value = (int)(Math.Ceiling((btnSlider.Top - size) * px));        }
Magic Number,TomShane.Neoforce.Controls,ScrollBar,C:\repos\NeoforceControls_Neoforce-Mono\ScrollBar.cs,btnSlider_Move,The following statement contains a magic number: if (orientation == Orientation.Horizontal)        {          int size = btnMinus.Width + Skin.Layers[strSlider].OffsetX;          int w = (Width - 2 * size) - btnSlider.Width;          float px = (float)(Range - PageSize) / (float)w;          Value = (int)(Math.Ceiling((btnSlider.Left - size) * px));                                                }        else        {          int size = btnMinus.Height + Skin.Layers[strSlider].OffsetY;          int h = (Height - 2 * size) - btnSlider.Height;                  float px = (float)(Range - PageSize) / (float)h;          Value = (int)(Math.Ceiling((btnSlider.Top - size) * px));        }
Magic Number,TomShane.Neoforce.Controls,SideBarPanel,C:\repos\NeoforceControls_Neoforce-Mono\SidebarPanel.cs,SideBarPanel,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,SideBarPanel,C:\repos\NeoforceControls_Neoforce-Mono\SidebarPanel.cs,SideBarPanel,The following statement contains a magic number: Height = 64;
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,SpinBox,The following statement contains a magic number: Height = 20;
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,SpinBox,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,DrawControl,The following statement contains a magic number: if (ReadOnly && Focused)        {          SkinLayer lr = Skin.Layers[0];          Rectangle rc = new Rectangle(rect.Left + lr.ContentMargins.Left'                                       rect.Top + lr.ContentMargins.Top'                                       Width - lr.ContentMargins.Horizontal - btnDown.Width - btnUp.Width'                                       Height - lr.ContentMargins.Vertical);          renderer.Draw(Manager.Skin.Images["ListBox.Selection"].Resource' rc' Color.FromNonPremultiplied(255' 255' 255' 128));        }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,DrawControl,The following statement contains a magic number: if (ReadOnly && Focused)        {          SkinLayer lr = Skin.Layers[0];          Rectangle rc = new Rectangle(rect.Left + lr.ContentMargins.Left'                                       rect.Top + lr.ContentMargins.Top'                                       Width - lr.ContentMargins.Horizontal - btnDown.Width - btnUp.Width'                                       Height - lr.ContentMargins.Vertical);          renderer.Draw(Manager.Skin.Images["ListBox.Selection"].Resource' rc' Color.FromNonPremultiplied(255' 255' 255' 128));        }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,DrawControl,The following statement contains a magic number: if (ReadOnly && Focused)        {          SkinLayer lr = Skin.Layers[0];          Rectangle rc = new Rectangle(rect.Left + lr.ContentMargins.Left'                                       rect.Top + lr.ContentMargins.Top'                                       Width - lr.ContentMargins.Horizontal - btnDown.Width - btnUp.Width'                                       Height - lr.ContentMargins.Vertical);          renderer.Draw(Manager.Skin.Images["ListBox.Selection"].Resource' rc' Color.FromNonPremultiplied(255' 255' 255' 128));        }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,DrawControl,The following statement contains a magic number: if (ReadOnly && Focused)        {          SkinLayer lr = Skin.Layers[0];          Rectangle rc = new Rectangle(rect.Left + lr.ContentMargins.Left'                                       rect.Top + lr.ContentMargins.Top'                                       Width - lr.ContentMargins.Horizontal - btnDown.Width - btnUp.Width'                                       Height - lr.ContentMargins.Vertical);          renderer.Draw(Manager.Skin.Images["ListBox.Selection"].Resource' rc' Color.FromNonPremultiplied(255' 255' 255' 128));        }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,OnResize,The following statement contains a magic number: if (btnUp != null)        {          btnUp.Width = 16;          btnUp.Height = Height - Skin.Layers["Control"].ContentMargins.Vertical;          btnUp.Top = Skin.Layers["Control"].ContentMargins.Top;          btnUp.Left = Width - 16 - 2 - 16 - 1;        }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,OnResize,The following statement contains a magic number: if (btnUp != null)        {          btnUp.Width = 16;          btnUp.Height = Height - Skin.Layers["Control"].ContentMargins.Vertical;          btnUp.Top = Skin.Layers["Control"].ContentMargins.Top;          btnUp.Left = Width - 16 - 2 - 16 - 1;        }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,OnResize,The following statement contains a magic number: if (btnUp != null)        {          btnUp.Width = 16;          btnUp.Height = Height - Skin.Layers["Control"].ContentMargins.Vertical;          btnUp.Top = Skin.Layers["Control"].ContentMargins.Top;          btnUp.Left = Width - 16 - 2 - 16 - 1;        }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,OnResize,The following statement contains a magic number: if (btnUp != null)        {          btnUp.Width = 16;          btnUp.Height = Height - Skin.Layers["Control"].ContentMargins.Vertical;          btnUp.Top = Skin.Layers["Control"].ContentMargins.Top;          btnUp.Left = Width - 16 - 2 - 16 - 1;        }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,OnResize,The following statement contains a magic number: if (btnDown != null)        {          btnDown.Width = 16;          btnDown.Height = Height - Skin.Layers["Control"].ContentMargins.Vertical;          btnDown.Top = Skin.Layers["Control"].ContentMargins.Top; ;          btnDown.Left = Width - 16 - 2;                    }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,OnResize,The following statement contains a magic number: if (btnDown != null)        {          btnDown.Width = 16;          btnDown.Height = Height - Skin.Layers["Control"].ContentMargins.Vertical;          btnDown.Top = Skin.Layers["Control"].ContentMargins.Top; ;          btnDown.Left = Width - 16 - 2;                    }
Magic Number,TomShane.Neoforce.Controls,SpinBox,C:\repos\NeoforceControls_Neoforce-Mono\SpinBox.cs,OnResize,The following statement contains a magic number: if (btnDown != null)        {          btnDown.Width = 16;          btnDown.Height = Height - Skin.Layers["Control"].ContentMargins.Vertical;          btnDown.Top = Skin.Layers["Control"].ContentMargins.Top; ;          btnDown.Left = Width - 16 - 2;                    }
Magic Number,TomShane.Neoforce.Controls,StatusBar,C:\repos\NeoforceControls_Neoforce-Mono\StatusBar.cs,StatusBar,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,StatusBar,C:\repos\NeoforceControls_Neoforce-Mono\StatusBar.cs,StatusBar,The following statement contains a magic number: Height = 24;
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,TextBox,The following statement contains a magic number: SetDefaultSize(128' 20);
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,TextBox,The following statement contains a magic number: SetDefaultSize(128' 20);
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,ClientArea_Draw,The following statement contains a magic number: if (Text != null && font != null)        {          DeterminePages();            if (mode == TextBoxMode.Multiline)          {            shownText = Text;            tmpText = Lines[PosY];          }                  else if (mode == TextBoxMode.Password)          {            shownText = "";            for (int i = 0; i < Text.Length; i++)            {              shownText = shownText + passwordChar;            }            tmpText = shownText;          }          else          {            shownText = Text;            tmpText = Lines[PosY];                  }            if (TextColor != UndefinedColor && ControlState != ControlState.Disabled)          {            col = TextColor;          }            if (mode != TextBoxMode.Multiline)          {            linesDrawn = 0;            vert.Value = 0;          }            if(string.IsNullOrEmpty(text))          {              Rectangle rx = new Rectangle(r.Left - horz.Value' r.Top' r.Width' r.Height);              renderer.DrawString(font' placeholder' rx' placeholderColor' al' false);          }            if (drawsel)          {            DrawSelection(e.Renderer' r);  /*            renderer.End();                      renderer.SpriteBatch.Begin(SpriteBlendMode.AlphaBlend' SpriteSortMode.Immediate' SaveStateMode.None);            renderer.SpriteBatch.GraphicsDevice.RenderState.SeparateAlphaBlendEnabled = true;            renderer.SpriteBatch.GraphicsDevice.RenderState.SourceBlend = Blend.DestinationColor;            renderer.SpriteBatch.GraphicsDevice.RenderState.DestinationBlend = Blend.SourceColor;            renderer.SpriteBatch.GraphicsDevice.RenderState.BlendFunction = BlendFunction.Subtract;                      //renderer.SpriteBatch.GraphicsDevice.RenderState.AlphaFunction = CompareFunction.Equal;            //renderer.SpriteBatch.GraphicsDevice.RenderState.AlphaSourceBlend = Blend.One;            //renderer.SpriteBatch.GraphicsDevice.RenderState.AlphaDestinationBlend = Blend.DestinationAlpha;   */          }            int sizey = (int)font.LineSpacing;            if (showCursor && caretVisible)          {            Vector2 size = Vector2.Zero;            if (PosX > 0 && PosX <= tmpText.Length)            {              size = font.MeasureString(tmpText.Substring(0' PosX));            }            if (size.Y == 0)            {              size = font.MeasureString(" ");              size.X = 0;            }              int m = r.Height - font.LineSpacing;              Rectangle rc = new Rectangle(r.Left - horz.Value + (int)size.X' r.Top + m / 2' cursor.Width' font.LineSpacing);              if (mode == TextBoxMode.Multiline)            {              rc = new Rectangle(r.Left + (int)size.X - horz.Value' r.Top + (int)((PosY - vert.Value) * font.LineSpacing)' cursor.Width' font.LineSpacing);            }            cursor.Alignment = al;            renderer.DrawLayer(cursor' rc' col' 0);          }            for (int i = 0; i < linesDrawn + 1; i++)          {            int ii = i + vert.Value;            if (ii >= Lines.Count || ii < 0) break;              if (Lines[ii] != "")            {              if (mode == TextBoxMode.Multiline)              {                renderer.DrawString(font' Lines[ii]' r.Left - horz.Value' r.Top + (i * sizey)' col);              }              else              {                Rectangle rx = new Rectangle(r.Left - horz.Value' r.Top' r.Width' r.Height);                renderer.DrawString(font' shownText' rx' col' al' false);              }            }          }        /*  if (drawsel)          {            renderer.End();            renderer.Begin(BlendingMode.Premultiplied);          }*/        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The following statement contains a magic number: if (!selection.IsEmpty)        {          int s = selection.Start;          int e = selection.End;            int sl = GetPosY(s);          int el = GetPosY(e);          int sc = GetPosX(s);          int ec = GetPosX(e);            int hgt = font.LineSpacing;            int start = sl;          int end = el;                    if (start < vert.Value) start = vert.Value;          if (end > vert.Value + linesDrawn) end = vert.Value + linesDrawn;                    for (int i = start; i <= end; i++)          {            Rectangle r = Rectangle.Empty;              if (mode == TextBoxMode.Normal)            {              int m = ClientArea.Height - font.LineSpacing;              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + m / 2'                               (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else if (sl == el)            {              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt'                                (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else            {              if (i == sl) r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);              else if (i == el) r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X' hgt);              else r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X' hgt);            }              renderer.Draw(Manager.Skin.Images["Control"].Resource' r' Color.FromNonPremultiplied(160' 160' 160' 128));          }        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The following statement contains a magic number: if (!selection.IsEmpty)        {          int s = selection.Start;          int e = selection.End;            int sl = GetPosY(s);          int el = GetPosY(e);          int sc = GetPosX(s);          int ec = GetPosX(e);            int hgt = font.LineSpacing;            int start = sl;          int end = el;                    if (start < vert.Value) start = vert.Value;          if (end > vert.Value + linesDrawn) end = vert.Value + linesDrawn;                    for (int i = start; i <= end; i++)          {            Rectangle r = Rectangle.Empty;              if (mode == TextBoxMode.Normal)            {              int m = ClientArea.Height - font.LineSpacing;              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + m / 2'                               (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else if (sl == el)            {              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt'                                (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else            {              if (i == sl) r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);              else if (i == el) r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X' hgt);              else r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X' hgt);            }              renderer.Draw(Manager.Skin.Images["Control"].Resource' r' Color.FromNonPremultiplied(160' 160' 160' 128));          }        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The following statement contains a magic number: if (!selection.IsEmpty)        {          int s = selection.Start;          int e = selection.End;            int sl = GetPosY(s);          int el = GetPosY(e);          int sc = GetPosX(s);          int ec = GetPosX(e);            int hgt = font.LineSpacing;            int start = sl;          int end = el;                    if (start < vert.Value) start = vert.Value;          if (end > vert.Value + linesDrawn) end = vert.Value + linesDrawn;                    for (int i = start; i <= end; i++)          {            Rectangle r = Rectangle.Empty;              if (mode == TextBoxMode.Normal)            {              int m = ClientArea.Height - font.LineSpacing;              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + m / 2'                               (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else if (sl == el)            {              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt'                                (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else            {              if (i == sl) r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);              else if (i == el) r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X' hgt);              else r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X' hgt);            }              renderer.Draw(Manager.Skin.Images["Control"].Resource' r' Color.FromNonPremultiplied(160' 160' 160' 128));          }        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The following statement contains a magic number: if (!selection.IsEmpty)        {          int s = selection.Start;          int e = selection.End;            int sl = GetPosY(s);          int el = GetPosY(e);          int sc = GetPosX(s);          int ec = GetPosX(e);            int hgt = font.LineSpacing;            int start = sl;          int end = el;                    if (start < vert.Value) start = vert.Value;          if (end > vert.Value + linesDrawn) end = vert.Value + linesDrawn;                    for (int i = start; i <= end; i++)          {            Rectangle r = Rectangle.Empty;              if (mode == TextBoxMode.Normal)            {              int m = ClientArea.Height - font.LineSpacing;              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + m / 2'                               (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else if (sl == el)            {              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt'                                (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else            {              if (i == sl) r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);              else if (i == el) r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X' hgt);              else r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X' hgt);            }              renderer.Draw(Manager.Skin.Images["Control"].Resource' r' Color.FromNonPremultiplied(160' 160' 160' 128));          }        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,DrawSelection,The following statement contains a magic number: if (!selection.IsEmpty)        {          int s = selection.Start;          int e = selection.End;            int sl = GetPosY(s);          int el = GetPosY(e);          int sc = GetPosX(s);          int ec = GetPosX(e);            int hgt = font.LineSpacing;            int start = sl;          int end = el;                    if (start < vert.Value) start = vert.Value;          if (end > vert.Value + linesDrawn) end = vert.Value + linesDrawn;                    for (int i = start; i <= end; i++)          {            Rectangle r = Rectangle.Empty;              if (mode == TextBoxMode.Normal)            {              int m = ClientArea.Height - font.LineSpacing;              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + m / 2'                               (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else if (sl == el)            {              r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt'                                (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);            }            else            {              if (i == sl) r = new Rectangle(rect.Left - horz.Value + (int)font.MeasureString(Lines[i].Substring(0' sc)).X' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X - (int)font.MeasureString(Lines[i].Substring(0' sc)).X' hgt);              else if (i == el) r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i].Substring(0' ec + 0)).X' hgt);              else r = new Rectangle(rect.Left - horz.Value' rect.Top + (i - vert.Value) * hgt' (int)font.MeasureString(Lines[i]).X' hgt);            }              renderer.Draw(Manager.Skin.Images["Control"].Resource' r' Color.FromNonPremultiplied(160' 160' 160' 128));          }        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,Update,The following statement contains a magic number: if (Focused)        {          flashTime += gameTime.ElapsedGameTime.TotalSeconds;          showCursor = flashTime < 0.5;          if (flashTime > 1) flashTime = 0;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,CharAtPos,The following statement contains a magic number: if (str != null && str != "")        {          for (int i = 1; i <= Lines[py].Length; i++)          {            Vector2 v = font.MeasureString(str.Substring(0' i)) - (font.MeasureString(str[i - 1].ToString()) / 3);            if (x <= (ClientLeft + (int)v.X) - horz.Value)            {              px = i - 1;              break;            }          }          if (x > ClientLeft + ((int)font.MeasureString(str).X) - horz.Value - (font.MeasureString(str[str.Length - 1].ToString()).X / 3)) px = str.Length;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,CharAtPos,The following statement contains a magic number: if (str != null && str != "")        {          for (int i = 1; i <= Lines[py].Length; i++)          {            Vector2 v = font.MeasureString(str.Substring(0' i)) - (font.MeasureString(str[i - 1].ToString()) / 3);            if (x <= (ClientLeft + (int)v.X) - horz.Value)            {              px = i - 1;              break;            }          }          if (x > ClientLeft + ((int)font.MeasureString(str).X) - horz.Value - (font.MeasureString(str[str.Length - 1].ToString()).X / 3)) px = str.Length;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (vert != null)        {          vert.Left = Width - 16 - 2;          vert.Top = 2;          vert.Height = Height - 4 - 16;            if (Height < 50 || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Vertical)) vert.Visible = false;          else if ((scrollBars == ScrollBars.Vertical || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline) vert.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (vert != null)        {          vert.Left = Width - 16 - 2;          vert.Top = 2;          vert.Height = Height - 4 - 16;            if (Height < 50 || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Vertical)) vert.Visible = false;          else if ((scrollBars == ScrollBars.Vertical || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline) vert.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (vert != null)        {          vert.Left = Width - 16 - 2;          vert.Top = 2;          vert.Height = Height - 4 - 16;            if (Height < 50 || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Vertical)) vert.Visible = false;          else if ((scrollBars == ScrollBars.Vertical || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline) vert.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (vert != null)        {          vert.Left = Width - 16 - 2;          vert.Top = 2;          vert.Height = Height - 4 - 16;            if (Height < 50 || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Vertical)) vert.Visible = false;          else if ((scrollBars == ScrollBars.Vertical || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline) vert.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (vert != null)        {          vert.Left = Width - 16 - 2;          vert.Top = 2;          vert.Height = Height - 4 - 16;            if (Height < 50 || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Vertical)) vert.Visible = false;          else if ((scrollBars == ScrollBars.Vertical || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline) vert.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (vert != null)        {          vert.Left = Width - 16 - 2;          vert.Top = 2;          vert.Height = Height - 4 - 16;            if (Height < 50 || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Vertical)) vert.Visible = false;          else if ((scrollBars == ScrollBars.Vertical || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline) vert.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (horz != null)        {          horz.Left = 2;          horz.Top = Height - 16 - 2;          horz.Width = Width - 4 - 16;            if (Width < 50 || wordWrap || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Horizontal)) horz.Visible = false;          else if ((scrollBars == ScrollBars.Horizontal || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline && !wordWrap) horz.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (horz != null)        {          horz.Left = 2;          horz.Top = Height - 16 - 2;          horz.Width = Width - 4 - 16;            if (Width < 50 || wordWrap || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Horizontal)) horz.Visible = false;          else if ((scrollBars == ScrollBars.Horizontal || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline && !wordWrap) horz.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (horz != null)        {          horz.Left = 2;          horz.Top = Height - 16 - 2;          horz.Width = Width - 4 - 16;            if (Width < 50 || wordWrap || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Horizontal)) horz.Visible = false;          else if ((scrollBars == ScrollBars.Horizontal || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline && !wordWrap) horz.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (horz != null)        {          horz.Left = 2;          horz.Top = Height - 16 - 2;          horz.Width = Width - 4 - 16;            if (Width < 50 || wordWrap || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Horizontal)) horz.Visible = false;          else if ((scrollBars == ScrollBars.Horizontal || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline && !wordWrap) horz.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (horz != null)        {          horz.Left = 2;          horz.Top = Height - 16 - 2;          horz.Width = Width - 4 - 16;            if (Width < 50 || wordWrap || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Horizontal)) horz.Visible = false;          else if ((scrollBars == ScrollBars.Horizontal || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline && !wordWrap) horz.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,SetupBars,The following statement contains a magic number: if (horz != null)        {          horz.Left = 2;          horz.Top = Height - 16 - 2;          horz.Width = Width - 4 - 16;            if (Width < 50 || wordWrap || (scrollBars != ScrollBars.Both && scrollBars != ScrollBars.Horizontal)) horz.Visible = false;          else if ((scrollBars == ScrollBars.Horizontal || scrollBars == ScrollBars.Both) && mode == TextBoxMode.Multiline && !wordWrap) horz.Visible = true;        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,AdjustMargins,The following statement contains a magic number: if (horz != null && !horz.Visible)        {          vert.Height = Height - 4;          ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' ClientMargins.Right' Skin.ClientMargins.Bottom);        }        else        {          ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' ClientMargins.Right' 18 + Skin.ClientMargins.Bottom);        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,AdjustMargins,The following statement contains a magic number: if (horz != null && !horz.Visible)        {          vert.Height = Height - 4;          ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' ClientMargins.Right' Skin.ClientMargins.Bottom);        }        else        {          ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' ClientMargins.Right' 18 + Skin.ClientMargins.Bottom);        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,AdjustMargins,The following statement contains a magic number: if (vert != null && !vert.Visible)        {          horz.Width = Width - 4;          ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' Skin.ClientMargins.Right' ClientMargins.Bottom);        }        else        {          ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' 18 + Skin.ClientMargins.Right' ClientMargins.Bottom);        }
Magic Number,TomShane.Neoforce.Controls,TextBox,C:\repos\NeoforceControls_Neoforce-Mono\TextBox.cs,AdjustMargins,The following statement contains a magic number: if (vert != null && !vert.Visible)        {          horz.Width = Width - 4;          ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' Skin.ClientMargins.Right' ClientMargins.Bottom);        }        else        {          ClientMargins = new Margins(ClientMargins.Left' ClientMargins.Top' 18 + Skin.ClientMargins.Right' ClientMargins.Bottom);        }
Magic Number,TomShane.Neoforce.Controls,ToolBar,C:\repos\NeoforceControls_Neoforce-Mono\ToolBar.cs,ToolBar,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,ToolBar,C:\repos\NeoforceControls_Neoforce-Mono\ToolBar.cs,ToolBar,The following statement contains a magic number: Height = 24;
Magic Number,TomShane.Neoforce.Controls,ToolBarPanel,C:\repos\NeoforceControls_Neoforce-Mono\ToolBarPanel.cs,ToolBarPanel,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,ToolBarPanel,C:\repos\NeoforceControls_Neoforce-Mono\ToolBarPanel.cs,ToolBarPanel,The following statement contains a magic number: Height = 25;
Magic Number,TomShane.Neoforce.Controls,ToolBarPanel,C:\repos\NeoforceControls_Neoforce-Mono\ToolBarPanel.cs,AlignBars,The following statement contains a magic number: int[] rx = new int[8];
Magic Number,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,TrackBar,The following statement contains a magic number: Width = 64;
Magic Number,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,TrackBar,The following statement contains a magic number: Height = 20;
Magic Number,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,DrawControl,The following statement contains a magic number: int t = rect.Top + (Height - h) / 2;
Magic Number,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,DrawControl,The following statement contains a magic number: int w = (int)Math.Ceiling(px * (rect.Width - p.ContentMargins.Horizontal - btnSlider.Width)) + 2;
Magic Number,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,RecalcParams,The following statement contains a magic number: if (btnSlider != null)        {          if (btnSlider.Width > 12)          {                    btnSlider.Glyph = new Glyph(Manager.Skin.Images["Shared.Glyph"].Resource);            btnSlider.Glyph.SizeMode = SizeMode.Centered;                }          else          {            btnSlider.Glyph = null;          }                  SkinLayer p = Skin.Layers["Control"];          btnSlider.Width = (int)(Height * 0.8);          btnSlider.Height = Height;          int size = btnSlider.Width;          int w = Width - p.ContentMargins.Horizontal - size;            float px = (float)range / (float)w;          int pos = p.ContentMargins.Left + (int)(Math.Ceiling(Value / (float)px));                                                    if (pos < p.ContentMargins.Left) pos = p.ContentMargins.Left;          if (pos > w + p.ContentMargins.Left) pos = w + p.ContentMargins.Left;                    btnSlider.SetPosition(pos' 0);                        }
Magic Number,TomShane.Neoforce.Controls,TrackBar,C:\repos\NeoforceControls_Neoforce-Mono\TrackBar.cs,RecalcParams,The following statement contains a magic number: if (btnSlider != null)        {          if (btnSlider.Width > 12)          {                    btnSlider.Glyph = new Glyph(Manager.Skin.Images["Shared.Glyph"].Resource);            btnSlider.Glyph.SizeMode = SizeMode.Centered;                }          else          {            btnSlider.Glyph = null;          }                  SkinLayer p = Skin.Layers["Control"];          btnSlider.Width = (int)(Height * 0.8);          btnSlider.Height = Height;          int size = btnSlider.Width;          int w = Width - p.ContentMargins.Horizontal - size;            float px = (float)range / (float)w;          int pos = p.ContentMargins.Left + (int)(Math.Ceiling(Value / (float)px));                                                    if (pos < p.ContentMargins.Left) pos = p.ContentMargins.Left;          if (pos > w + p.ContentMargins.Left) pos = w + p.ContentMargins.Left;                    btnSlider.SetPosition(pos' 0);                        }
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: byte r = 255' g = 255' b = 255' a = 255;
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: byte r = 255' g = 255' b = 255' a = 255;
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: byte r = 255' g = 255' b = 255' a = 255;
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: byte r = 255' g = 255' b = 255' a = 255;
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: if (val.Length >= 2) g = byte.Parse(val[1]);
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: if (val.Length >= 3) b = byte.Parse(val[2]);
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: if (val.Length >= 3) b = byte.Parse(val[2]);
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: if (val.Length >= 4) a = byte.Parse(val[3]);
Magic Number,TomShane.Neoforce.Controls,Utilities,C:\repos\NeoforceControls_Neoforce-Mono\Utilities.cs,ParseColor,The following statement contains a magic number: if (val.Length >= 4) a = byte.Parse(val[3]);
Magic Number,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The following statement contains a magic number: SetDefaultSize(640' 480);
Magic Number,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The following statement contains a magic number: SetDefaultSize(640' 480);
Magic Number,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The following statement contains a magic number: SetMinimumSize(100' 75);
Magic Number,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Window,The following statement contains a magic number: SetMinimumSize(100' 75);
Magic Number,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,DrawControl,The following statement contains a magic number: if (borderVisible)        {          renderer.DrawLayer(l1' new Rectangle(rect.Left' rect.Top' rect.Width' l1.Height)' s1.Color' s1.Index);          renderer.DrawLayer(l2' new Rectangle(rect.Left' rect.Top + l1.Height' l2.Width' rect.Height - l1.Height - l4.Height)' s2.Color' s2.Index);                renderer.DrawLayer(l3' new Rectangle(rect.Right - l3.Width' rect.Top + l1.Height' l3.Width' rect.Height - l1.Height - l4.Height)' s3.Color' s3.Index);          renderer.DrawLayer(l4' new Rectangle(rect.Left' rect.Bottom - l4.Height' rect.Width' l4.Height)'  s4.Color' s4.Index);                 if (iconVisible && (icon != null || l5 != null) && captionVisible)          {                   Texture2D i = (icon != null) ? icon : l5.Image.Resource;                    renderer.Draw(i' GetIconRect()' Color.White);                  }            int icosize = 0;          if (l5 != null && iconVisible && captionVisible)          {            icosize = l1.Height - l1.ContentMargins.Vertical + 4 + l5.OffsetX;          }          int closesize = 0;          if (btnClose.Visible)          {            closesize = btnClose.Width - (btnClose.Skin.Layers[lrButton].OffsetX);          }            Rectangle r = new Rectangle(rect.Left + l1.ContentMargins.Left + icosize'                                      rect.Top + l1.ContentMargins.Top'                                      rect.Width - l1.ContentMargins.Horizontal - closesize - icosize'                                      l1.Height - l1.ContentMargins.Top - l1.ContentMargins.Bottom);          int ox = l1.Text.OffsetX;          int oy = l1.Text.OffsetY;          renderer.DrawString(f1' Text' r' c1' l1.Text.Alignment' ox' oy' true);        }
Magic Number,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Center,The following statement contains a magic number: Left = (Manager.ScreenWidth / 2) - (Width / 2);
Magic Number,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Center,The following statement contains a magic number: Left = (Manager.ScreenWidth / 2) - (Width / 2);
Magic Number,TomShane.Neoforce.Controls,Window,C:\repos\NeoforceControls_Neoforce-Mono\Window.cs,Center,The following statement contains a magic number: Top = (Manager.ScreenHeight - Height) / 2;
Magic Number,TomShane.Neoforce.External.Zip,CRC32,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Crc32.cs,GetCrc32AndCopy,The following statement contains a magic number: unchecked           {              UInt32 crc32Result;              crc32Result = 0xFFFFFFFF;              byte[] buffer = new byte[BUFFER_SIZE];              int readSize = BUFFER_SIZE;    	    _TotalBytesRead= 0;              int count = input.Read(buffer' 0' readSize);  	    if (output != null) output.Write(buffer'0'count);   	    _TotalBytesRead += count;              while (count > 0)              {                 for (int i = 0; i < count; i++)                 {                    crc32Result = ((crc32Result) >> 8) ^ crc32Table[(buffer[i]) ^ ((crc32Result) & 0x000000FF)];                 }                 count = input.Read(buffer' 0' readSize);  	       if (output != null) output.Write(buffer'0'count);   	       _TotalBytesRead += count;                }                            return ~crc32Result;           }
Magic Number,TomShane.Neoforce.External.Zip,CRC32,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Crc32.cs,CRC32,The following statement contains a magic number: unchecked           {              // This is the official polynomial used by CRC32 in PKZip.              // Often the polynomial is shown reversed as 0x04C11DB7.              UInt32 dwPolynomial = 0xEDB88320;              UInt32 i' j;                crc32Table = new UInt32[256];                UInt32 dwCrc;              for(i = 0; i < 256; i++)              {                 dwCrc = i;                 for(j = 8; j > 0; j--)                 {                    if ((dwCrc & 1)==1)                    {                       dwCrc = (dwCrc >> 1) ^ dwPolynomial;                    }                    else                    {                       dwCrc >>= 1;                    }                 }                 crc32Table[i] = dwCrc;              }           }
Magic Number,TomShane.Neoforce.External.Zip,CRC32,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Crc32.cs,CRC32,The following statement contains a magic number: unchecked           {              // This is the official polynomial used by CRC32 in PKZip.              // Often the polynomial is shown reversed as 0x04C11DB7.              UInt32 dwPolynomial = 0xEDB88320;              UInt32 i' j;                crc32Table = new UInt32[256];                UInt32 dwCrc;              for(i = 0; i < 256; i++)              {                 dwCrc = i;                 for(j = 8; j > 0; j--)                 {                    if ((dwCrc & 1)==1)                    {                       dwCrc = (dwCrc >> 1) ^ dwPolynomial;                    }                    else                    {                       dwCrc >>= 1;                    }                 }                 crc32Table[i] = dwCrc;              }           }
Magic Number,TomShane.Neoforce.External.Zip,CRC32,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Crc32.cs,CRC32,The following statement contains a magic number: unchecked           {              // This is the official polynomial used by CRC32 in PKZip.              // Often the polynomial is shown reversed as 0x04C11DB7.              UInt32 dwPolynomial = 0xEDB88320;              UInt32 i' j;                crc32Table = new UInt32[256];                UInt32 dwCrc;              for(i = 0; i < 256; i++)              {                 dwCrc = i;                 for(j = 8; j > 0; j--)                 {                    if ((dwCrc & 1)==1)                    {                       dwCrc = (dwCrc >> 1) ^ dwPolynomial;                    }                    else                    {                       dwCrc >>= 1;                    }                 }                 crc32Table[i] = dwCrc;              }           }
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,ReadSignature,The following statement contains a magic number: byte[] sig = new byte[4];
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,ReadSignature,The following statement contains a magic number: int signature = (((sig[3] * 256 + sig[2]) * 256) + sig[1]) * 256 + sig[0];
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,ReadSignature,The following statement contains a magic number: int signature = (((sig[3] * 256 + sig[2]) * 256) + sig[1]) * 256 + sig[0];
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,ReadSignature,The following statement contains a magic number: int signature = (((sig[3] * 256 + sig[2]) * 256) + sig[1]) * 256 + sig[0];
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,ReadSignature,The following statement contains a magic number: int signature = (((sig[3] * 256 + sig[2]) * 256) + sig[1]) * 256 + sig[0];
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,ReadSignature,The following statement contains a magic number: int signature = (((sig[3] * 256 + sig[2]) * 256) + sig[1]) * 256 + sig[0];
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: int BATCH_SIZE = 1024;
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: byte[] targetBytes = new byte[4];
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: targetBytes[0] = (byte) (SignatureToFind >> 24);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: targetBytes[1] = (byte) ((SignatureToFind & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: targetBytes[2] = (byte) ((SignatureToFind & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: targetBytes[2] = (byte) ((SignatureToFind & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: targetBytes[3] = (byte) (SignatureToFind & 0x000000FF);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: do              {                  n = s.Read(batch' 0' batch.Length);                  if (n != 0)                  {                      for (int i = 0; i < n; i++)                      {                          if (batch[i] == targetBytes[3])                          {                              s.Seek(i - n' System.IO.SeekOrigin.Current);                              int sig = ReadSignature(s);                              success = (sig == SignatureToFind);                              if (!success) s.Seek(-3' System.IO.SeekOrigin.Current);                              break; // out of for loop                          }                      }                  }                  else break;                  if (success) break;              } while (true);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: do              {                  n = s.Read(batch' 0' batch.Length);                  if (n != 0)                  {                      for (int i = 0; i < n; i++)                      {                          if (batch[i] == targetBytes[3])                          {                              s.Seek(i - n' System.IO.SeekOrigin.Current);                              int sig = ReadSignature(s);                              success = (sig == SignatureToFind);                              if (!success) s.Seek(-3' System.IO.SeekOrigin.Current);                              break; // out of for loop                          }                      }                  }                  else break;                  if (success) break;              } while (true);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,FindSignature,The following statement contains a magic number: long bytesRead = (s.Position - startingPosition) - 4 ;
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,PackedToDateTime,The following statement contains a magic number: Int16 packedDate = (Int16)((packedDateTime & 0xffff0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,PackedToDateTime,The following statement contains a magic number: int year = 1980 + ((packedDate & 0xFE00) >> 9);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,PackedToDateTime,The following statement contains a magic number: int year = 1980 + ((packedDate & 0xFE00) >> 9);
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,PackedToDateTime,The following statement contains a magic number: int month = (packedDate & 0x01E0) >> 5;
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,PackedToDateTime,The following statement contains a magic number: int hour = (packedTime & 0xF800) >> 11;
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,PackedToDateTime,The following statement contains a magic number: int minute = (packedTime & 0x07E0) >> 5;
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,DateTimeToPacked,The following statement contains a magic number: UInt16 packedDate = (UInt16)((time.Day & 0x0000001F) | ((time.Month << 5) & 0x000001E0) | (((time.Year - 1980) << 9) & 0x0000FE00));
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,DateTimeToPacked,The following statement contains a magic number: UInt16 packedDate = (UInt16)((time.Day & 0x0000001F) | ((time.Month << 5) & 0x000001E0) | (((time.Year - 1980) << 9) & 0x0000FE00));
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,DateTimeToPacked,The following statement contains a magic number: UInt16 packedDate = (UInt16)((time.Day & 0x0000001F) | ((time.Month << 5) & 0x000001E0) | (((time.Year - 1980) << 9) & 0x0000FE00));
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,DateTimeToPacked,The following statement contains a magic number: UInt16 packedTime = (UInt16)((time.Second & 0x0000001F) | ((time.Minute << 5) & 0x000007E0) | ((time.Hour << 11) & 0x0000F800));
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,DateTimeToPacked,The following statement contains a magic number: UInt16 packedTime = (UInt16)((time.Second & 0x0000001F) | ((time.Minute << 5) & 0x000007E0) | ((time.Hour << 11) & 0x0000F800));
Magic Number,TomShane.Neoforce.External.Zip,Shared,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\Shared.cs,DateTimeToPacked,The following statement contains a magic number: return (Int32)(((UInt32)(packedDate << 16)) | packedTime);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: if (SignatureIsNotValid(signature))              {                  s.Seek(-4' System.IO.SeekOrigin.Current);                  if (TurnOnDebug) System.Console.WriteLine("  ZipDirEntry::Read(): Bad signature ({0:X8}) at position {1}"' signature' s.Position);                  return null;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: byte[] block = new byte[42];
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._VersionMadeBy = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._VersionNeeded = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._BitField = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._CompressionMethod = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: zde._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int16 filenameLength = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int16 extraFieldLength = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int16 commentLength = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int16 diskNumber = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int16 internalFileAttrs = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 externalFileAttrs = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 externalFileAttrs = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 externalFileAttrs = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 externalFileAttrs = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 externalFileAttrs = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 externalFileAttrs = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 Offset = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 Offset = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 Offset = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 Offset = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 Offset = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipDirEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipDirEntry.cs,Read,The following statement contains a magic number: Int32 Offset = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if (SignatureIsNotValid(signature))              {                  s.Seek(-4' System.IO.SeekOrigin.Current);                  if (ze._Debug) System.Console.WriteLine("  ZipEntry::Read(): Bad signature ({0:X8}) at position {1}"' signature' s.Position);                  return false;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: byte[] block = new byte[26];
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._VersionNeeded = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._BitField = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._CompressionMethod = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: ze._LastModDateTime = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) != 0x0008)              {                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;              }              else              {                  // the CRC' compressed size' and uncompressed size are stored later in the stream.                  // here' we advance the pointer.                  i += 12;              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: Int16 filenameLength = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: Int16 extraFieldLength = (short)(block[i++] + block[i++] * 256);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,ReadHeader,The following statement contains a magic number: if ((ze._BitField & 0x0008) == 0x0008)              {                  long posn = s.Position;                  long SizeOfDataRead = TomShane.Neoforce.External.Zip.Shared.FindSignature(s' ZipEntryDataDescriptorSignature);                  if (SizeOfDataRead == -1) return false;                     // read 3x 4-byte fields (CRC' Compressed Size' Uncompressed Size)                  block = new byte[12];                  n = s.Read(block' 0' block.Length);                  if (n != 12) return false;                  i = 0;                  ze._Crc32 = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._CompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                  ze._UncompressedSize = block[i++] + block[i++] * 256 + block[i++] * 256 * 256 + block[i++] * 256 * 256 * 256;                    if (SizeOfDataRead != ze._CompressedSize)                      throw new Exception("Data format error (bit 3 is set)");                                     // seek back to previous position' to read file data                  s.Seek(posn' System.IO.SeekOrigin.Begin);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Read,The following statement contains a magic number: if ((entry._BitField & 0x0008) == 0x0008)              {                  s.Seek(16' System.IO.SeekOrigin.Current);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Extract,The following statement contains a magic number: using (System.IO.MemoryStream memstream = new System.IO.MemoryStream(_FileData))              {                    System.IO.Stream input = null;                  try                  {                        if (CompressedSize == UncompressedSize)                      {                          // the System.IO.Compression.DeflateStream class does not handle uncompressed data.                          // so if an entry is not compressed' then we just translate the bytes directly.                          input = memstream;                      }                      else                      {                          input = new System.IO.Compression.DeflateStream(memstream' System.IO.Compression.CompressionMode.Decompress);                      }                          if (TargetFile != null)                      {                          // ensure the target path exists                          if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(TargetFile)))                          {                              System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(TargetFile));                          }                      }                          System.IO.Stream output = null;                      try                      {                          if (TargetFile != null)                              output = new System.IO.FileStream(TargetFile' System.IO.FileMode.CreateNew);                          else                              output = s;                              byte[] bytes = new byte[4096];                          int n;                            if (_Debug)                          {                              Console.WriteLine("{0}: _FileData.Length= {1}"' TargetFile' _FileData.Length);                              Console.WriteLine("{0}: memstream.Position: {1}"' TargetFile' memstream.Position);                              n = _FileData.Length;                              if (n > 1000)                              {                                  n = 500;                                  Console.WriteLine("{0}: truncating dump from {1} to {2} bytes..."' TargetFile' _FileData.Length' n);                              }                              for (int j = 0; j < n; j += 2)                              {                                  if ((j > 0) && (j % 40 == 0))                                      System.Console.WriteLine();                                  System.Console.Write(" {0:X2}"' _FileData[j]);                                  if (j + 1 < n)                                      System.Console.Write("{0:X2}"' _FileData[j + 1]);                              }                              System.Console.WriteLine("\n");                          }                            n = 1; // anything non-zero                          while (n != 0)                          {                              if (_Debug) Console.WriteLine("{0}: about to read..."' TargetFile);                              n = input.Read(bytes' 0' bytes.Length);                              if (_Debug) Console.WriteLine("{0}: got {1} bytes"' TargetFile' n);                              if (n > 0)                              {                                  if (_Debug) Console.WriteLine("{0}: about to write..."' TargetFile);                                  output.Write(bytes' 0' n);                              }                          }                      }                      finally                      {                          // we only close the output stream if we opened it.                           if ((output != null) && (TargetFile != null))                          {                              output.Close();                              output.Dispose();                          }                      }                        if (TargetFile != null)                      {                        // We may have to adjust the last modified time to compensate                        // for differences in how the .NET Base Class Library deals                        // with daylight saving time (DST) versus how the Windows                        // filesystem deals with daylight saving time. See   		      // http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx for some context.     		      // in a nutshell: Daylight savings time rules change regularly.  In  		      // 2007' for example' the inception week of DST changed.  In 1977'  		      // DST was in place all year round. in 1945' likewise.  And so on.  		      // Win32 does not attempt to guess which time zone rules were in  		      // effect at the time in question.  It will render a time as  		      // "standard time" and allow the app to change to DST as necessary.  		      //  .NET makes a different choice.    		      // -------------------------------------------------------  		      // Compare the output of FileInfo.LastWriteTime.ToString("f") with  		      // what you see in the property sheet for a file that was last  		      // written to on the other side of the DST transition. For example'  		      // suppose the file was last modified on October 17' during DST but  		      // DST is not currently in effect. Explorer's file properties  		      // reports Thursday' October 17' 2003' 8:45:38 AM' but .NETs  		      // FileInfo reports Thursday' October 17' 2003' 9:45 AM.  		        		      // Win32 says' "Thursday' October 17' 2002 8:45:38 AM PST". Note:  		      // Pacific STANDARD Time. Even though October 17 of that year  		      // occurred during Pacific Daylight Time' Win32 displays the time as  		      // standard time because that's what time it is NOW.    		      // .NET BCL assumes that the current DST rules were in place at the  		      // time in question.  So' .NET says' "Well' if the rules in effect  		      // now were also in effect on October 17' 2003' then that would be  		      // daylight time" so it displays "Thursday' October 17' 2003' 9:45  		      // AM PDT" - daylight time.    		      // So .NET gives a value which is more intuitively correct' but is  		      // also potentially incorrect' and which is not invertible. Win32  		      // gives a value which is intuitively incorrect' but is strictly  		      // correct.  		      // -------------------------------------------------------    		      // With this adjustment' I add one hour to the tweaked .NET time' if  		      // necessary.  That is to say' if the time in question had occurred  		      // in what the .NET BCL assumed to be DST (an assumption that may be  		      // wrong given the constantly changing DST rules).    #if !XBOX                          if (LastModified.IsDaylightSavingTime())                          {                              DateTime AdjustedLastModified = LastModified + new System.TimeSpan(1' 0' 0);                              System.IO.File.SetLastWriteTime(TargetFile' AdjustedLastModified);                          }                          else                              System.IO.File.SetLastWriteTime(TargetFile' LastModified);  #endif                      }                    }                  finally                  {  		  // we only close the output stream if we opened it.                       // we cannot use using() here because in some cases we do not want to Dispose the stream!                      if ((input != null) && (input != memstream))                      {                          input.Close();                          input.Dispose();                      }                  }              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Extract,The following statement contains a magic number: using (System.IO.MemoryStream memstream = new System.IO.MemoryStream(_FileData))              {                    System.IO.Stream input = null;                  try                  {                        if (CompressedSize == UncompressedSize)                      {                          // the System.IO.Compression.DeflateStream class does not handle uncompressed data.                          // so if an entry is not compressed' then we just translate the bytes directly.                          input = memstream;                      }                      else                      {                          input = new System.IO.Compression.DeflateStream(memstream' System.IO.Compression.CompressionMode.Decompress);                      }                          if (TargetFile != null)                      {                          // ensure the target path exists                          if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(TargetFile)))                          {                              System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(TargetFile));                          }                      }                          System.IO.Stream output = null;                      try                      {                          if (TargetFile != null)                              output = new System.IO.FileStream(TargetFile' System.IO.FileMode.CreateNew);                          else                              output = s;                              byte[] bytes = new byte[4096];                          int n;                            if (_Debug)                          {                              Console.WriteLine("{0}: _FileData.Length= {1}"' TargetFile' _FileData.Length);                              Console.WriteLine("{0}: memstream.Position: {1}"' TargetFile' memstream.Position);                              n = _FileData.Length;                              if (n > 1000)                              {                                  n = 500;                                  Console.WriteLine("{0}: truncating dump from {1} to {2} bytes..."' TargetFile' _FileData.Length' n);                              }                              for (int j = 0; j < n; j += 2)                              {                                  if ((j > 0) && (j % 40 == 0))                                      System.Console.WriteLine();                                  System.Console.Write(" {0:X2}"' _FileData[j]);                                  if (j + 1 < n)                                      System.Console.Write("{0:X2}"' _FileData[j + 1]);                              }                              System.Console.WriteLine("\n");                          }                            n = 1; // anything non-zero                          while (n != 0)                          {                              if (_Debug) Console.WriteLine("{0}: about to read..."' TargetFile);                              n = input.Read(bytes' 0' bytes.Length);                              if (_Debug) Console.WriteLine("{0}: got {1} bytes"' TargetFile' n);                              if (n > 0)                              {                                  if (_Debug) Console.WriteLine("{0}: about to write..."' TargetFile);                                  output.Write(bytes' 0' n);                              }                          }                      }                      finally                      {                          // we only close the output stream if we opened it.                           if ((output != null) && (TargetFile != null))                          {                              output.Close();                              output.Dispose();                          }                      }                        if (TargetFile != null)                      {                        // We may have to adjust the last modified time to compensate                        // for differences in how the .NET Base Class Library deals                        // with daylight saving time (DST) versus how the Windows                        // filesystem deals with daylight saving time. See   		      // http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx for some context.     		      // in a nutshell: Daylight savings time rules change regularly.  In  		      // 2007' for example' the inception week of DST changed.  In 1977'  		      // DST was in place all year round. in 1945' likewise.  And so on.  		      // Win32 does not attempt to guess which time zone rules were in  		      // effect at the time in question.  It will render a time as  		      // "standard time" and allow the app to change to DST as necessary.  		      //  .NET makes a different choice.    		      // -------------------------------------------------------  		      // Compare the output of FileInfo.LastWriteTime.ToString("f") with  		      // what you see in the property sheet for a file that was last  		      // written to on the other side of the DST transition. For example'  		      // suppose the file was last modified on October 17' during DST but  		      // DST is not currently in effect. Explorer's file properties  		      // reports Thursday' October 17' 2003' 8:45:38 AM' but .NETs  		      // FileInfo reports Thursday' October 17' 2003' 9:45 AM.  		        		      // Win32 says' "Thursday' October 17' 2002 8:45:38 AM PST". Note:  		      // Pacific STANDARD Time. Even though October 17 of that year  		      // occurred during Pacific Daylight Time' Win32 displays the time as  		      // standard time because that's what time it is NOW.    		      // .NET BCL assumes that the current DST rules were in place at the  		      // time in question.  So' .NET says' "Well' if the rules in effect  		      // now were also in effect on October 17' 2003' then that would be  		      // daylight time" so it displays "Thursday' October 17' 2003' 9:45  		      // AM PDT" - daylight time.    		      // So .NET gives a value which is more intuitively correct' but is  		      // also potentially incorrect' and which is not invertible. Win32  		      // gives a value which is intuitively incorrect' but is strictly  		      // correct.  		      // -------------------------------------------------------    		      // With this adjustment' I add one hour to the tweaked .NET time' if  		      // necessary.  That is to say' if the time in question had occurred  		      // in what the .NET BCL assumed to be DST (an assumption that may be  		      // wrong given the constantly changing DST rules).    #if !XBOX                          if (LastModified.IsDaylightSavingTime())                          {                              DateTime AdjustedLastModified = LastModified + new System.TimeSpan(1' 0' 0);                              System.IO.File.SetLastWriteTime(TargetFile' AdjustedLastModified);                          }                          else                              System.IO.File.SetLastWriteTime(TargetFile' LastModified);  #endif                      }                    }                  finally                  {  		  // we only close the output stream if we opened it.                       // we cannot use using() here because in some cases we do not want to Dispose the stream!                      if ((input != null) && (input != memstream))                      {                          input.Close();                          input.Dispose();                      }                  }              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Extract,The following statement contains a magic number: using (System.IO.MemoryStream memstream = new System.IO.MemoryStream(_FileData))              {                    System.IO.Stream input = null;                  try                  {                        if (CompressedSize == UncompressedSize)                      {                          // the System.IO.Compression.DeflateStream class does not handle uncompressed data.                          // so if an entry is not compressed' then we just translate the bytes directly.                          input = memstream;                      }                      else                      {                          input = new System.IO.Compression.DeflateStream(memstream' System.IO.Compression.CompressionMode.Decompress);                      }                          if (TargetFile != null)                      {                          // ensure the target path exists                          if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(TargetFile)))                          {                              System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(TargetFile));                          }                      }                          System.IO.Stream output = null;                      try                      {                          if (TargetFile != null)                              output = new System.IO.FileStream(TargetFile' System.IO.FileMode.CreateNew);                          else                              output = s;                              byte[] bytes = new byte[4096];                          int n;                            if (_Debug)                          {                              Console.WriteLine("{0}: _FileData.Length= {1}"' TargetFile' _FileData.Length);                              Console.WriteLine("{0}: memstream.Position: {1}"' TargetFile' memstream.Position);                              n = _FileData.Length;                              if (n > 1000)                              {                                  n = 500;                                  Console.WriteLine("{0}: truncating dump from {1} to {2} bytes..."' TargetFile' _FileData.Length' n);                              }                              for (int j = 0; j < n; j += 2)                              {                                  if ((j > 0) && (j % 40 == 0))                                      System.Console.WriteLine();                                  System.Console.Write(" {0:X2}"' _FileData[j]);                                  if (j + 1 < n)                                      System.Console.Write("{0:X2}"' _FileData[j + 1]);                              }                              System.Console.WriteLine("\n");                          }                            n = 1; // anything non-zero                          while (n != 0)                          {                              if (_Debug) Console.WriteLine("{0}: about to read..."' TargetFile);                              n = input.Read(bytes' 0' bytes.Length);                              if (_Debug) Console.WriteLine("{0}: got {1} bytes"' TargetFile' n);                              if (n > 0)                              {                                  if (_Debug) Console.WriteLine("{0}: about to write..."' TargetFile);                                  output.Write(bytes' 0' n);                              }                          }                      }                      finally                      {                          // we only close the output stream if we opened it.                           if ((output != null) && (TargetFile != null))                          {                              output.Close();                              output.Dispose();                          }                      }                        if (TargetFile != null)                      {                        // We may have to adjust the last modified time to compensate                        // for differences in how the .NET Base Class Library deals                        // with daylight saving time (DST) versus how the Windows                        // filesystem deals with daylight saving time. See   		      // http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx for some context.     		      // in a nutshell: Daylight savings time rules change regularly.  In  		      // 2007' for example' the inception week of DST changed.  In 1977'  		      // DST was in place all year round. in 1945' likewise.  And so on.  		      // Win32 does not attempt to guess which time zone rules were in  		      // effect at the time in question.  It will render a time as  		      // "standard time" and allow the app to change to DST as necessary.  		      //  .NET makes a different choice.    		      // -------------------------------------------------------  		      // Compare the output of FileInfo.LastWriteTime.ToString("f") with  		      // what you see in the property sheet for a file that was last  		      // written to on the other side of the DST transition. For example'  		      // suppose the file was last modified on October 17' during DST but  		      // DST is not currently in effect. Explorer's file properties  		      // reports Thursday' October 17' 2003' 8:45:38 AM' but .NETs  		      // FileInfo reports Thursday' October 17' 2003' 9:45 AM.  		        		      // Win32 says' "Thursday' October 17' 2002 8:45:38 AM PST". Note:  		      // Pacific STANDARD Time. Even though October 17 of that year  		      // occurred during Pacific Daylight Time' Win32 displays the time as  		      // standard time because that's what time it is NOW.    		      // .NET BCL assumes that the current DST rules were in place at the  		      // time in question.  So' .NET says' "Well' if the rules in effect  		      // now were also in effect on October 17' 2003' then that would be  		      // daylight time" so it displays "Thursday' October 17' 2003' 9:45  		      // AM PDT" - daylight time.    		      // So .NET gives a value which is more intuitively correct' but is  		      // also potentially incorrect' and which is not invertible. Win32  		      // gives a value which is intuitively incorrect' but is strictly  		      // correct.  		      // -------------------------------------------------------    		      // With this adjustment' I add one hour to the tweaked .NET time' if  		      // necessary.  That is to say' if the time in question had occurred  		      // in what the .NET BCL assumed to be DST (an assumption that may be  		      // wrong given the constantly changing DST rules).    #if !XBOX                          if (LastModified.IsDaylightSavingTime())                          {                              DateTime AdjustedLastModified = LastModified + new System.TimeSpan(1' 0' 0);                              System.IO.File.SetLastWriteTime(TargetFile' AdjustedLastModified);                          }                          else                              System.IO.File.SetLastWriteTime(TargetFile' LastModified);  #endif                      }                    }                  finally                  {  		  // we only close the output stream if we opened it.                       // we cannot use using() here because in some cases we do not want to Dispose the stream!                      if ((input != null) && (input != memstream))                      {                          input.Close();                          input.Dispose();                      }                  }              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Extract,The following statement contains a magic number: using (System.IO.MemoryStream memstream = new System.IO.MemoryStream(_FileData))              {                    System.IO.Stream input = null;                  try                  {                        if (CompressedSize == UncompressedSize)                      {                          // the System.IO.Compression.DeflateStream class does not handle uncompressed data.                          // so if an entry is not compressed' then we just translate the bytes directly.                          input = memstream;                      }                      else                      {                          input = new System.IO.Compression.DeflateStream(memstream' System.IO.Compression.CompressionMode.Decompress);                      }                          if (TargetFile != null)                      {                          // ensure the target path exists                          if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(TargetFile)))                          {                              System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(TargetFile));                          }                      }                          System.IO.Stream output = null;                      try                      {                          if (TargetFile != null)                              output = new System.IO.FileStream(TargetFile' System.IO.FileMode.CreateNew);                          else                              output = s;                              byte[] bytes = new byte[4096];                          int n;                            if (_Debug)                          {                              Console.WriteLine("{0}: _FileData.Length= {1}"' TargetFile' _FileData.Length);                              Console.WriteLine("{0}: memstream.Position: {1}"' TargetFile' memstream.Position);                              n = _FileData.Length;                              if (n > 1000)                              {                                  n = 500;                                  Console.WriteLine("{0}: truncating dump from {1} to {2} bytes..."' TargetFile' _FileData.Length' n);                              }                              for (int j = 0; j < n; j += 2)                              {                                  if ((j > 0) && (j % 40 == 0))                                      System.Console.WriteLine();                                  System.Console.Write(" {0:X2}"' _FileData[j]);                                  if (j + 1 < n)                                      System.Console.Write("{0:X2}"' _FileData[j + 1]);                              }                              System.Console.WriteLine("\n");                          }                            n = 1; // anything non-zero                          while (n != 0)                          {                              if (_Debug) Console.WriteLine("{0}: about to read..."' TargetFile);                              n = input.Read(bytes' 0' bytes.Length);                              if (_Debug) Console.WriteLine("{0}: got {1} bytes"' TargetFile' n);                              if (n > 0)                              {                                  if (_Debug) Console.WriteLine("{0}: about to write..."' TargetFile);                                  output.Write(bytes' 0' n);                              }                          }                      }                      finally                      {                          // we only close the output stream if we opened it.                           if ((output != null) && (TargetFile != null))                          {                              output.Close();                              output.Dispose();                          }                      }                        if (TargetFile != null)                      {                        // We may have to adjust the last modified time to compensate                        // for differences in how the .NET Base Class Library deals                        // with daylight saving time (DST) versus how the Windows                        // filesystem deals with daylight saving time. See   		      // http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx for some context.     		      // in a nutshell: Daylight savings time rules change regularly.  In  		      // 2007' for example' the inception week of DST changed.  In 1977'  		      // DST was in place all year round. in 1945' likewise.  And so on.  		      // Win32 does not attempt to guess which time zone rules were in  		      // effect at the time in question.  It will render a time as  		      // "standard time" and allow the app to change to DST as necessary.  		      //  .NET makes a different choice.    		      // -------------------------------------------------------  		      // Compare the output of FileInfo.LastWriteTime.ToString("f") with  		      // what you see in the property sheet for a file that was last  		      // written to on the other side of the DST transition. For example'  		      // suppose the file was last modified on October 17' during DST but  		      // DST is not currently in effect. Explorer's file properties  		      // reports Thursday' October 17' 2003' 8:45:38 AM' but .NETs  		      // FileInfo reports Thursday' October 17' 2003' 9:45 AM.  		        		      // Win32 says' "Thursday' October 17' 2002 8:45:38 AM PST". Note:  		      // Pacific STANDARD Time. Even though October 17 of that year  		      // occurred during Pacific Daylight Time' Win32 displays the time as  		      // standard time because that's what time it is NOW.    		      // .NET BCL assumes that the current DST rules were in place at the  		      // time in question.  So' .NET says' "Well' if the rules in effect  		      // now were also in effect on October 17' 2003' then that would be  		      // daylight time" so it displays "Thursday' October 17' 2003' 9:45  		      // AM PDT" - daylight time.    		      // So .NET gives a value which is more intuitively correct' but is  		      // also potentially incorrect' and which is not invertible. Win32  		      // gives a value which is intuitively incorrect' but is strictly  		      // correct.  		      // -------------------------------------------------------    		      // With this adjustment' I add one hour to the tweaked .NET time' if  		      // necessary.  That is to say' if the time in question had occurred  		      // in what the .NET BCL assumed to be DST (an assumption that may be  		      // wrong given the constantly changing DST rules).    #if !XBOX                          if (LastModified.IsDaylightSavingTime())                          {                              DateTime AdjustedLastModified = LastModified + new System.TimeSpan(1' 0' 0);                              System.IO.File.SetLastWriteTime(TargetFile' AdjustedLastModified);                          }                          else                              System.IO.File.SetLastWriteTime(TargetFile' LastModified);  #endif                      }                    }                  finally                  {  		  // we only close the output stream if we opened it.                       // we cannot use using() here because in some cases we do not want to Dispose the stream!                      if ((input != null) && (input != memstream))                      {                          input.Close();                          input.Dispose();                      }                  }              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Extract,The following statement contains a magic number: using (System.IO.MemoryStream memstream = new System.IO.MemoryStream(_FileData))              {                    System.IO.Stream input = null;                  try                  {                        if (CompressedSize == UncompressedSize)                      {                          // the System.IO.Compression.DeflateStream class does not handle uncompressed data.                          // so if an entry is not compressed' then we just translate the bytes directly.                          input = memstream;                      }                      else                      {                          input = new System.IO.Compression.DeflateStream(memstream' System.IO.Compression.CompressionMode.Decompress);                      }                          if (TargetFile != null)                      {                          // ensure the target path exists                          if (!System.IO.Directory.Exists(System.IO.Path.GetDirectoryName(TargetFile)))                          {                              System.IO.Directory.CreateDirectory(System.IO.Path.GetDirectoryName(TargetFile));                          }                      }                          System.IO.Stream output = null;                      try                      {                          if (TargetFile != null)                              output = new System.IO.FileStream(TargetFile' System.IO.FileMode.CreateNew);                          else                              output = s;                              byte[] bytes = new byte[4096];                          int n;                            if (_Debug)                          {                              Console.WriteLine("{0}: _FileData.Length= {1}"' TargetFile' _FileData.Length);                              Console.WriteLine("{0}: memstream.Position: {1}"' TargetFile' memstream.Position);                              n = _FileData.Length;                              if (n > 1000)                              {                                  n = 500;                                  Console.WriteLine("{0}: truncating dump from {1} to {2} bytes..."' TargetFile' _FileData.Length' n);                              }                              for (int j = 0; j < n; j += 2)                              {                                  if ((j > 0) && (j % 40 == 0))                                      System.Console.WriteLine();                                  System.Console.Write(" {0:X2}"' _FileData[j]);                                  if (j + 1 < n)                                      System.Console.Write("{0:X2}"' _FileData[j + 1]);                              }                              System.Console.WriteLine("\n");                          }                            n = 1; // anything non-zero                          while (n != 0)                          {                              if (_Debug) Console.WriteLine("{0}: about to read..."' TargetFile);                              n = input.Read(bytes' 0' bytes.Length);                              if (_Debug) Console.WriteLine("{0}: got {1} bytes"' TargetFile' n);                              if (n > 0)                              {                                  if (_Debug) Console.WriteLine("{0}: about to write..."' TargetFile);                                  output.Write(bytes' 0' n);                              }                          }                      }                      finally                      {                          // we only close the output stream if we opened it.                           if ((output != null) && (TargetFile != null))                          {                              output.Close();                              output.Dispose();                          }                      }                        if (TargetFile != null)                      {                        // We may have to adjust the last modified time to compensate                        // for differences in how the .NET Base Class Library deals                        // with daylight saving time (DST) versus how the Windows                        // filesystem deals with daylight saving time. See   		      // http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx for some context.     		      // in a nutshell: Daylight savings time rules change regularly.  In  		      // 2007' for example' the inception week of DST changed.  In 1977'  		      // DST was in place all year round. in 1945' likewise.  And so on.  		      // Win32 does not attempt to guess which time zone rules were in  		      // effect at the time in question.  It will render a time as  		      // "standard time" and allow the app to change to DST as necessary.  		      //  .NET makes a different choice.    		      // -------------------------------------------------------  		      // Compare the output of FileInfo.LastWriteTime.ToString("f") with  		      // what you see in the property sheet for a file that was last  		      // written to on the other side of the DST transition. For example'  		      // suppose the file was last modified on October 17' during DST but  		      // DST is not currently in effect. Explorer's file properties  		      // reports Thursday' October 17' 2003' 8:45:38 AM' but .NETs  		      // FileInfo reports Thursday' October 17' 2003' 9:45 AM.  		        		      // Win32 says' "Thursday' October 17' 2002 8:45:38 AM PST". Note:  		      // Pacific STANDARD Time. Even though October 17 of that year  		      // occurred during Pacific Daylight Time' Win32 displays the time as  		      // standard time because that's what time it is NOW.    		      // .NET BCL assumes that the current DST rules were in place at the  		      // time in question.  So' .NET says' "Well' if the rules in effect  		      // now were also in effect on October 17' 2003' then that would be  		      // daylight time" so it displays "Thursday' October 17' 2003' 9:45  		      // AM PDT" - daylight time.    		      // So .NET gives a value which is more intuitively correct' but is  		      // also potentially incorrect' and which is not invertible. Win32  		      // gives a value which is intuitively incorrect' but is strictly  		      // correct.  		      // -------------------------------------------------------    		      // With this adjustment' I add one hour to the tweaked .NET time' if  		      // necessary.  That is to say' if the time in question had occurred  		      // in what the .NET BCL assumed to be DST (an assumption that may be  		      // wrong given the constantly changing DST rules).    #if !XBOX                          if (LastModified.IsDaylightSavingTime())                          {                              DateTime AdjustedLastModified = LastModified + new System.TimeSpan(1' 0' 0);                              System.IO.File.SetLastWriteTime(TargetFile' AdjustedLastModified);                          }                          else                              System.IO.File.SetLastWriteTime(TargetFile' LastModified);  #endif                      }                    }                  finally                  {  		  // we only close the output stream if we opened it.                       // we cannot use using() here because in some cases we do not want to Dispose the stream!                      if ((input != null) && (input != memstream))                      {                          input.Close();                          input.Dispose();                      }                  }              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: byte[] bytes = new byte[4096];
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: bytes[i++] = (byte)((ZipDirEntry.ZipDirEntrySignature & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: bytes[i++] = (byte)((ZipDirEntry.ZipDirEntrySignature & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: bytes[i++] = (byte)((ZipDirEntry.ZipDirEntrySignature & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: bytes[i++] = Header[4];
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: bytes[i++] = Header[5];
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: for (j = 0; j < 26; j++)                  bytes[i + j] = Header[4 + j];
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: for (j = 0; j < 26; j++)                  bytes[i + j] = Header[4 + j];
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: bytes[i++] = (byte)((_RelativeOffsetOfHeader & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: bytes[i++] = (byte)((_RelativeOffsetOfHeader & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: bytes[i++] = (byte)((_RelativeOffsetOfHeader & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: if (_Debug) System.Console.WriteLine("\ninserting filename into CDS: (length= {0})"' Header.Length - 30);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: for (j = 0; j < Header.Length - 30; j++)              {                  bytes[i + j] = Header[30 + j];                  if (_Debug) System.Console.Write(" {0:X2}"' bytes[i + j]);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteCentralDirectoryEntry,The following statement contains a magic number: for (j = 0; j < Header.Length - 30; j++)              {                  bytes[i + j] = Header[30 + j];                  if (_Debug) System.Console.Write(" {0:X2}"' bytes[i + j]);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((ZipEntrySignature & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((ZipEntrySignature & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((ZipEntrySignature & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((FixedVersionNeeded & 0xFF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((BitField & 0xFF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((CompressionMethod & 0xFF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((_LastModDateTime & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((_LastModDateTime & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((_LastModDateTime & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((crc & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((crc & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((crc & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((sz & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((sz & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((sz & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((crc32.TotalBytesRead & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((crc32.TotalBytesRead & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((crc32.TotalBytesRead & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: if ( (TrimVolumeFromFullyQualifiedPaths) && (FileName[1]==':') && (FileName[2]=='\\')) length-=3;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: if ( (TrimVolumeFromFullyQualifiedPaths) && (FileName[1]==':') && (FileName[2]=='\\')) length-=3;
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((length & 0xFF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: bytes[i++] = (byte)((ExtraFieldLength & 0xFF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: char[] c =  ( (TrimVolumeFromFullyQualifiedPaths) && (FileName[1]==':') && (FileName[2]=='\\')) ?   	      FileName.Substring(3).ToCharArray() :  // trim off volume letter' colon' and slash  	      FileName.ToCharArray();
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,WriteHeader,The following statement contains a magic number: char[] c =  ( (TrimVolumeFromFullyQualifiedPaths) && (FileName[1]==':') && (FileName[2]=='\\')) ?   	      FileName.Substring(3).ToCharArray() :  // trim off volume letter' colon' and slash  	      FileName.ToCharArray();
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Write,The following statement contains a magic number: byte[] bytes = new byte[4096];
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Write,The following statement contains a magic number: while ((n = _UnderlyingMemoryStream.Read(bytes' 0' bytes.Length)) != 0)              {                    if (_Debug)                  {                      Console.WriteLine("{0}: transferring {1} bytes..."' FileName' n);                        for (int j = 0; j < n; j += 2)                      {                          if ((j > 0) && (j % 40 == 0))                              System.Console.WriteLine();                          System.Console.Write(" {0:X2}"' bytes[j]);                          if (j + 1 < n)                              System.Console.Write("{0:X2}"' bytes[j + 1]);                      }                      System.Console.WriteLine("\n");                  }                    s.Write(bytes' 0' n);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipEntry,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipEntry.cs,Write,The following statement contains a magic number: while ((n = _UnderlyingMemoryStream.Read(bytes' 0' bytes.Length)) != 0)              {                    if (_Debug)                  {                      Console.WriteLine("{0}: transferring {1} bytes..."' FileName' n);                        for (int j = 0; j < n; j += 2)                      {                          if ((j > 0) && (j % 40 == 0))                              System.Console.WriteLine();                          System.Console.Write(" {0:X2}"' bytes[j]);                          if (j + 1 < n)                              System.Console.Write("{0:X2}"' bytes[j + 1]);                      }                      System.Console.WriteLine("\n");                  }                    s.Write(bytes' 0' n);              }
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: byte[] bytes = new byte[1024];
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((EndOfCentralDirectorySignature & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((EndOfCentralDirectorySignature & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((EndOfCentralDirectorySignature & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((_entries.Count & 0xFF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((_entries.Count & 0xFF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((SizeOfCentralDirectory & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((SizeOfCentralDirectory & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((SizeOfCentralDirectory & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((StartOffset & 0x0000FF00) >> 8);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((StartOffset & 0x00FF0000) >> 16);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,WriteCentralDirectoryFooter,The following statement contains a magic number: bytes[i++] = (byte)((StartOffset & 0xFF000000) >> 24);
Magic Number,TomShane.Neoforce.External.Zip,ZipFile,C:\repos\NeoforceControls_Neoforce-Mono\External\Zip\ZipFile.cs,ExtractAll,The following statement contains a magic number: foreach (ZipEntry e in _entries)              {                  if (header)                  {                      System.Console.WriteLine("\n{1'-22} {2'-6} {3'4}   {4'-8}  {0}"'                                   "Name"' "Modified"' "Size"' "Ratio"' "Packed");                      System.Console.WriteLine(new System.String('-'' 72));                      header = false;                  }                  if (WantVerbose)                      System.Console.WriteLine("{1'-22} {2'-6} {3'4:F0}%   {4'-8} {0}"'                                   e.FileName'                                   e.LastModified.ToString("yyyy-MM-dd HH:mm:ss")'                                   e.UncompressedSize'                                   e.CompressionRatio'                                   e.CompressedSize);                  e.Extract(path);              }
Missing Default,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,DrawPart,The following switch statement is missing a default case: switch (pos)          {            case BevelBorder.Left:            {              x1 = rect.Left; y1 = rect.Top; w1 = 1; h1 = rect.Height;              x2 = x1 + 1; y2 = y1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Top:            {              x1 = rect.Left; y1 = rect.Top; w1 = rect.Width; h1 = 1;              x2 = x1; y2 = y1 + 1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Right:            {              x1 = rect.Left + rect.Width - 2; y1 = rect.Top; w1 = 1; h1 = rect.Height;              x2 = x1 + 1; y2 = y1; w2 = w1; h2 = h1;              break;            }            case BevelBorder.Bottom:            {              x1 = rect.Left; y1 = rect.Top + rect.Height - 2; w1 = rect.Width; h1 = 1;              x2 = x1; y2 = y1 + 1; w2 = w1; h2 = h1;              break;            }          }
Missing Default,TomShane.Neoforce.Controls,Bevel,C:\repos\NeoforceControls_Neoforce-Mono\Bevel.cs,DrawPart,The following switch statement is missing a default case: switch (pos)          {            case BevelBorder.Left:            {              x1 = rect.Left; y1 = rect.Top; w1 = 1; h1 = rect.Height;                          break;            }            case BevelBorder.Top:            {              x1 = rect.Left; y1 = rect.Top; w1 = rect.Width; h1 = 1;                          break;            }            case BevelBorder.Right:            {              x1 = rect.Left + rect.Width - 1; y1 = rect.Top; w1 = 1; h1 = rect.Height;                          break;            }            case BevelBorder.Bottom:            {              x1 = rect.Left; y1 = rect.Top + rect.Height - 1; w1 = rect.Width; h1 = 1;                          break;            }          }
Missing Default,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,MessageProcess,The following switch statement is missing a default case: switch (message)              {                  case Message.Click:                      {                          ClickProcess(e as MouseEventArgs);                          break;                      }                  case Message.MouseDown:                      {                          MouseDownProcess(e as MouseEventArgs);                          break;                      }                  case Message.MouseUp:                      {                          MouseUpProcess(e as MouseEventArgs);                          break;                      }                  case Message.MousePress:                      {                          MousePressProcess(e as MouseEventArgs);                          break;                      }                  case Message.MouseScroll:                      {                          MouseScrollProcess(e as MouseEventArgs);                          break;                      }                  case Message.MouseMove:                      {                          MouseMoveProcess(e as MouseEventArgs);                          break;                      }                  case Message.MouseOver:                      {                          MouseOverProcess(e as MouseEventArgs);                          break;                      }                  case Message.MouseOut:                      {                          MouseOutProcess(e as MouseEventArgs);                          break;                      }                  case Message.GamePadDown:                      {                          GamePadDownProcess(e as GamePadEventArgs);                          break;                      }                  case Message.GamePadUp:                      {                          GamePadUpProcess(e as GamePadEventArgs);                          break;                      }                  case Message.GamePadPress:                      {                          GamePadPressProcess(e as GamePadEventArgs);                          break;                      }                  case Message.KeyDown:                      {                          KeyDownProcess(e as KeyEventArgs);                          break;                      }                  case Message.KeyUp:                      {                          KeyUpProcess(e as KeyEventArgs);                          break;                      }                  case Message.KeyPress:                      {                          KeyPressProcess(e as KeyEventArgs);                          break;                      }              }
Missing Default,TomShane.Neoforce.Controls,Control,C:\repos\NeoforceControls_Neoforce-Mono\Control.cs,GetResizeCursor,The following switch statement is missing a default case: switch (resizeArea)              {                  case Alignment.TopCenter:                      {                          return ((resizeEdge & Anchors.Top) == Anchors.Top) ? Manager.Skin.Cursors["Vertical"].Resource : Cursor;                      }                  case Alignment.BottomCenter:                      {                          return ((resizeEdge & Anchors.Bottom) == Anchors.Bottom) ? Manager.Skin.Cursors["Vertical"].Resource : Cursor;                      }                  case Alignment.MiddleLeft:                      {                          return ((resizeEdge & Anchors.Left) == Anchors.Left) ? Manager.Skin.Cursors["Horizontal"].Resource : Cursor;                      }                  case Alignment.MiddleRight:                      {                          return ((resizeEdge & Anchors.Right) == Anchors.Right) ? Manager.Skin.Cursors["Horizontal"].Resource : Cursor;                      }                  case Alignment.TopLeft:                      {                          return ((resizeEdge & Anchors.Left) == Anchors.Left && (resizeEdge & Anchors.Top) == Anchors.Top) ? Manager.Skin.Cursors["DiagonalLeft"].Resource : Cursor;                      }                  case Alignment.BottomRight:                      {                          return ((resizeEdge & Anchors.Bottom) == Anchors.Bottom && (resizeEdge & Anchors.Right) == Anchors.Right) ? Manager.Skin.Cursors["DiagonalLeft"].Resource : Cursor;                      }                  case Alignment.TopRight:                      {                          return ((resizeEdge & Anchors.Top) == Anchors.Top && (resizeEdge & Anchors.Right) == Anchors.Right) ? Manager.Skin.Cursors["DiagonalRight"].Resource : Cursor;                      }                  case Alignment.BottomLeft:                      {                          return ((resizeEdge & Anchors.Bottom) == Anchors.Bottom && (resizeEdge & Anchors.Left) == Anchors.Left) ? Manager.Skin.Cursors["DiagonalRight"].Resource : Cursor;                      }              }
Missing Default,TomShane.Neoforce.Controls,InputSystem,C:\repos\NeoforceControls_Neoforce-Mono\InputSystem.cs,GetVectorState,The following switch statement is missing a default case: switch (button)        {          case GamePadButton.LeftStickLeft: down = state.ThumbSticks.Left.X < -t; break;          case GamePadButton.LeftStickRight: down = state.ThumbSticks.Left.X > t; break;          case GamePadButton.LeftStickUp: down = state.ThumbSticks.Left.Y > t; break;          case GamePadButton.LeftStickDown: down = state.ThumbSticks.Left.Y < -t; break;            case GamePadButton.RightStickLeft: down = state.ThumbSticks.Right.X < -t; break;          case GamePadButton.RightStickRight: down = state.ThumbSticks.Right.X > t; break;          case GamePadButton.RightStickUp: down = state.ThumbSticks.Right.Y > t; break;          case GamePadButton.RightStickDown: down = state.ThumbSticks.Right.Y < -t; break;                          case GamePadButton.LeftTrigger: down = state.Triggers.Left > t; break;          case GamePadButton.RightTrigger: down = state.Triggers.Right > t; break;        }
Missing Default,TomShane.Neoforce.Controls,PolishKeyboardLayout,C:\repos\NeoforceControls_Neoforce-Mono\KeyboardLayout.cs,KeyToString,The following switch statement is missing a default case: switch (args.Key)          {            case Keys.A:              return (args.Shift) ? "¥" : "Ή";            case Keys.C:              return (args.Shift) ? "Ζ" : "ζ";            case Keys.E:              return (args.Shift) ? "Κ" : "κ";            case Keys.L:              return (args.Shift) ? "£" : "³";            case Keys.N:              return (args.Shift) ? "Ρ" : "ρ";            case Keys.O:              return (args.Shift) ? "Σ" : "σ";            case Keys.S:              return (args.Shift) ? "" : "";            case Keys.X:              return (args.Shift) ? "" : "";            case Keys.Z:              return (args.Shift) ? "―" : "Ώ";          }
Missing Default,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,GetSourceArea,The following switch statement is missing a default case: switch (alignment)              {                  case Alignment.TopLeft:                      {                          rect = new Rectangle((0 + (xm * partSize.Width))'                                               (0 + (ym * partSize.Height))'                                               margins.Left'                                               margins.Top);                          break;                      }                  case Alignment.TopCenter:                      {                          rect = new Rectangle((0 + (xm * partSize.Width)) + margins.Left'                                               (0 + (ym * partSize.Height))'                                               partSize.Width - margins.Left - margins.Right'                                               margins.Top);                          break;                      }                  case Alignment.TopRight:                      {                          rect = new Rectangle((partSize.Width + (xm * partSize.Width)) - margins.Right'                                               (0 + (ym * partSize.Height))'                                               margins.Right'                                               margins.Top);                          break;                      }                  case Alignment.MiddleLeft:                      {                          rect = new Rectangle((0 + (xm * partSize.Width))'                                               (0 + (ym * partSize.Height)) + margins.Top'                                               margins.Left'                                               partSize.Height - margins.Top - margins.Bottom);                          break;                      }                  case Alignment.MiddleCenter:                      {                          rect = new Rectangle((0 + (xm * partSize.Width)) + margins.Left'                                               (0 + (ym * partSize.Height)) + margins.Top'                                               partSize.Width - margins.Left - margins.Right'                                               partSize.Height - margins.Top - margins.Bottom);                          break;                      }                  case Alignment.MiddleRight:                      {                          rect = new Rectangle((partSize.Width + (xm * partSize.Width)) - margins.Right'                                               (0 + (ym * partSize.Height)) + margins.Top'                                               margins.Right'                                               partSize.Height - margins.Top - margins.Bottom);                          break;                      }                  case Alignment.BottomLeft:                      {                          rect = new Rectangle((0 + (xm * partSize.Width))'                                               (partSize.Height + (ym * partSize.Height)) - margins.Bottom'                                               margins.Left'                                               margins.Bottom);                          break;                      }                  case Alignment.BottomCenter:                      {                          rect = new Rectangle((0 + (xm * partSize.Width)) + margins.Left'                                               (partSize.Height + (ym * partSize.Height)) - margins.Bottom'                                               partSize.Width - margins.Left - margins.Right'                                               margins.Bottom);                          break;                      }                  case Alignment.BottomRight:                      {                          rect = new Rectangle((partSize.Width + (xm * partSize.Width)) - margins.Right'                                               (partSize.Height + (ym * partSize.Height)) - margins.Bottom'                                               margins.Right'                                               margins.Bottom);                          break;                      }              }
Missing Default,TomShane.Neoforce.Controls,Renderer,C:\repos\NeoforceControls_Neoforce-Mono\Renderer.cs,GetDestinationArea,The following switch statement is missing a default case: switch (alignment)              {                  case Alignment.TopLeft:                      {                          rect = new Rectangle(area.Left + 0'                                               area.Top + 0'                                               margins.Left'                                               margins.Top);                          break;                        }                  case Alignment.TopCenter:                      {                          rect = new Rectangle(area.Left + margins.Left'                                               area.Top + 0'                                               area.Width - margins.Left - margins.Right'                                               margins.Top);                          break;                        }                  case Alignment.TopRight:                      {                          rect = new Rectangle(area.Left + area.Width - margins.Right'                                               area.Top + 0'                                               margins.Right'                                               margins.Top);                          break;                        }                  case Alignment.MiddleLeft:                      {                          rect = new Rectangle(area.Left + 0'                                               area.Top + margins.Top'                                               margins.Left'                                               area.Height - margins.Top - margins.Bottom);                          break;                      }                  case Alignment.MiddleCenter:                      {                          rect = new Rectangle(area.Left + margins.Left'                                               area.Top + margins.Top'                                               area.Width - margins.Left - margins.Right'                                               area.Height - margins.Top - margins.Bottom);                          break;                      }                  case Alignment.MiddleRight:                      {                          rect = new Rectangle(area.Left + area.Width - margins.Right'                                               area.Top + margins.Top'                                               margins.Right'                                               area.Height - margins.Top - margins.Bottom);                          break;                      }                  case Alignment.BottomLeft:                      {                          rect = new Rectangle(area.Left + 0'                                               area.Top + area.Height - margins.Bottom'                                               margins.Left'                                               margins.Bottom);                          break;                      }                  case Alignment.BottomCenter:                      {                          rect = new Rectangle(area.Left + margins.Left'                                               area.Top + area.Height - margins.Bottom'                                               area.Width - margins.Left - margins.Right'                                               margins.Bottom);                          break;                      }                  case Alignment.BottomRight:                      {                          rect = new Rectangle(area.Left + area.Width - margins.Right'                                               area.Top + area.Height - margins.Bottom'                                               margins.Right'                                               margins.Bottom);                          break;                      }              }
