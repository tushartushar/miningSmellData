Implementation smell,Namespace,Class,File,Method,Description
Long Method,AdRotator.AdProviders,AdProviderSmaato,C:\repos\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderSmaato.cs,AdProviderSmaato,The method has 101 lines of code.
Long Method,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The method has 132 lines of code.
Complex Method,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,Cyclomatic complexity of the method is 19
Long Identifier,AdRotator.Model,AdCultureDescriptor,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdCultureDescriptor.cs,,The length of the parameter enabledInTrialOnlyFieldSpecified is 32.
Long Identifier,AdRotator.Model,AdProvider,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdProvider.cs,,The length of the parameter enabledInTrialOnlyFieldSpecified is 32.
Long Identifier,AdRotator.Model,AdSettingsBase,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettingsBase.cs,,The length of the parameter adSlideDirectionFieldSpecified is 30.
Long Identifier,AdRotator.Model,AdSettingsBase,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettingsBase.cs,,The length of the parameter adRefreshSecondsFieldSpecified is 30.
Long Identifier,AdRotator.Model,AdSettingsBase,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettingsBase.cs,,The length of the parameter adSlideDisplaySecondsFieldSpecified is 35.
Long Identifier,AdRotator.Model,AdSettingsBase,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettingsBase.cs,,The length of the parameter adSlideHiddenSecondsFieldSpecified is 34.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                OnLog(String.Format("Provider {0} DLL not found or not supported on the {1} platform"' adProvider.AdProviderType' platform)); " is 125.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                OnLog(String.Format("Provider {0} DLL not found or not supported on the {1} platform"' adProvider.AdProviderType' platform)); " is 125.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AppId]' adProvider.AppId.ToString()); " is 150.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.SecondaryId]' adProvider.SecondaryId.ToString()); " is 162.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                            reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdType]' "IaAdType_Banner"); " is 141.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                            reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdType]' "Banner"); " is 132.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                            reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdType]' "Banner"); " is 132.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                            reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdType]' "21"); " is 128.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.IsTest]' adProvider.IsTest.ToString()); " is 152.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdWidth]' AdWidth.ToString()); " is 143.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdHeight]' AdHeight.ToString()); " is 145.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.Size]' AdWidth.ToString() + "x" + AdHeight.ToString()); " is 168.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.ShowErrors]' "true"); " is 134.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    WireUpDelegateEvent(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdSuccessEvent]' string.Format("Ads served for: {0}"' _settings.CurrentAdType.ToString())); " is 192.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    WireUpDelegateEvent(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdFailedEvent]' string.Format("Ad failed request for: {0}"' _settings.CurrentAdType.ToString())); " is 198.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    WireUpDelegateEvent(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdClickedEvent]' string.Format("Ad clicked for: {0}"' _settings.CurrentAdType.ToString())); " is 192.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                    reflectionHelper.TryInvokeMethod(providerType' instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.StartMethod]); " is 142.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "                        reflectionHelper.TryInvokeMethod(providerType' instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.StopMethod]); " is 141.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadSettingsFileLocal,The length of the statement  "            var SETTINGS_FILE_NAME = string.IsNullOrEmpty(LocalSettingsLocation) ? GlobalConfig.DEFAULT_SETTINGS_FILE_NAME : LocalSettingsLocation; " is 135.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadSettingsFileProject,The length of the statement  "                    throw new FileNotFoundException(string.Format("The ad configuration file {0} could not be found. Either the path is incorrect or the build type is not set correctly"' LocalSettingsLocation)); " is 191.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,SaveAdSettings,The length of the statement  "            var SETTINGS_FILE_NAME = string.IsNullOrEmpty(LocalSettingsLocation) ? GlobalConfig.DEFAULT_SETTINGS_FILE_NAME : LocalSettingsLocation; " is 135.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The length of the statement  "                MethodInfo invokeMethod = inquiry.FirstOrDefault(rm => rm.Name == "Invoke"); // handlerType.GetRuntimeMethod("Invoke"' new Type[0]); " is 132.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The length of the statement  "                //Func<EventHandler<typeof(handlerType)>' System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> add = a => (System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)ei.AddMethod.Invoke(o' new object[] { a }); " is 236.
Long Statement,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The length of the statement  "                //Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> remove = a => ei.RemoveMethod.Invoke(o' new object[] { a }); " is 139.
Long Statement,AdRotator,ReflectionHelpers,C:\repos\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,TryGetType,The length of the statement  "                throw new PlatformNotSupportedException(String.Format("Provider dll not located in this solution ({0})"' assemblyName)); " is 120.
Long Statement,AdRotator,ReflectionHelpers,C:\repos\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,TrySetProperty,The length of the statement  "                    propertyInfo.SetValue(instance' Convert.ChangeType(PropertyValue' propertyInfo.PropertyType' CultureInfo.InvariantCulture)' null); " is 130.
Long Statement,AdRotator,ReflectionHelpers,C:\repos\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,GetMethodInfo,The length of the statement  "                mi = targetObject.GetType().GetMethod(methodname' BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic); " is 120.
Long Statement,AdRotator.Model,AdSettingsExtensions,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAdDescriptorBasedOnUICulture,The length of the statement  "            var sameLanguageDescriptor = adsettings.CultureDescriptors.Where(x => x.CultureName.StartsWith(cultureShortName)).FirstOrDefault(); " is 131.
Long Statement,AdRotator.Model,AdSettingsExtensions,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAdDescriptorBasedOnUICulture,The length of the statement  "            var defaultDescriptor = adsettings.CultureDescriptors.Where(x => x.CultureName.ToLower() == GlobalConfig.DEFAULT_CULTURE || string.IsNullOrEmpty(x.CultureName)).FirstOrDefault(); " is 178.
Long Statement,AdRotator.Model,AdSettingsExtensions,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The length of the statement  "            var activeDescriptors = adsettings.CurrentCulture.Items.Where(x => !adsettings._failedAdTypes.Contains(((AdProvider)x).AdProviderType)); " is 136.
Long Statement,AdRotator.Model,AdSettingsExtensions,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The length of the statement  "            var supportedDescriptors = activeDescriptors.Where(x => AdRotatorComponent.PlatformSupportedAdProviders.Contains(((AdProvider)x).AdProviderType)); " is 146.
Long Statement,AdRotator.Model,AdSettingsExtensions,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The length of the statement  "            var validDescriptors = supportedDescriptors.Where(x => (((AdProvider)x).Probability > 0) || ((AdProvider)x).AdOrder > 0).Cast<AdProvider>().ToArray(); " is 150.
Long Statement,AdRotator.Model,AdSettingsExtensions,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The length of the statement  "            var defaultHouseAd = (AdProvider)adsettings.CurrentCulture.Items.FirstOrDefault(x => ((AdProvider)x).AdProviderType == AdType.DefaultHouseAd && !adsettings._failedAdTypes.Contains(AdType.DefaultHouseAd)); " is 204.
Empty Catch Block,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetConfig,The method has an empty catch block.
Empty Catch Block,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadAdSettings,The method has an empty catch block.
Empty Catch Block,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadAdSettings,The method has an empty catch block.
Empty Catch Block,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadSettingsFileProject,The method has an empty catch block.
Empty Catch Block,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,RemoveEventDelegatesFromActiveControl,The method has an empty catch block.
Empty Catch Block,AdRotator,ReflectionHelpers,C:\repos\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,TrySetProperty,The method has an empty catch block.
Empty Catch Block,AdRotator,ReflectionHelpers,C:\repos\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,GetMethodInfo,The method has an empty catch block.
Empty Catch Block,AdRotator,ReflectionHelpers,C:\repos\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,GetAssemblyFromClassName,The method has an empty catch block.
Empty Catch Block,AdRotator,ReflectionHelpers,C:\repos\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,GetAssemblyFromAssemblyName,The method has an empty catch block.
Magic Number,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,AdRotatorComponent,The following statement contains a magic number: this.AdHeight = 80;
Magic Number,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,AdRotatorComponent,The following statement contains a magic number: this.AdWidth = 480;
Magic Number,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,StartAdTimer,The following statement contains a magic number: TimeSpan intervalTime = new TimeSpan(0' 0' 0' 0' adRotatorRefreshInterval * 1000);
Magic Number,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The following statement contains a magic number: try              {  #if UNIVERSAL                  EventInfo ei = o.GetType().GetRuntimeEvent(eventName);                  Type handlerType = ei.EventHandlerType;                  var inquiry = handlerType.GetRuntimeMethods();                  MethodInfo invokeMethod = inquiry.FirstOrDefault(rm => rm.Name == "Invoke"); // handlerType.GetRuntimeMethod("Invoke"' new Type[0]);                  ParameterInfo[] parameters = invokeMethod.GetParameters();  #else                  EventInfo ei = o.GetType().GetEvent(eventName);                  var parameters = ei.EventHandlerType.GetMethod("Invoke").GetParameters();  #endif                  switch (parameters.Count())                  {                      case 2:                          handler = new Action<object' object>((o1' o2) => DelegateEventHandler(message));                          break;                      case 3:                          handler = new Action<object' object' object>((o1' o2' o3) => DelegateEventHandler(message));                          break;                      default:                          handler = new Action<object>((o1) => DelegateEventHandler(message));                          break;                  }  #if UNIVERSAL                  var methodInfo = handler.GetMethodInfo();                  Delegate eventDel = methodInfo.CreateDelegate(ei.EventHandlerType' null);                  //Testing getting WinRT events working ;-( - Help me obi wan kenobi' you're my only hope                  //Seems this only works with determined types' so needs perfroming within the app boundary' won't reflect fully.                  //Func<EventHandler<typeof(handlerType)>' System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> add = a => (System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)ei.AddMethod.Invoke(o' new object[] { a });                  //Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> remove = a => ei.RemoveMethod.Invoke(o' new object[] { a });                  //System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.AddEventHandler<Delegate>(add' remove' handler);       #else                  Delegate eventDel = Delegate.CreateDelegate(ei.EventHandlerType' handler.Target' handler.Method);                  ei.AddEventHandler(o' eventDel);  #endif                  currentProviderDelegates.Add(new AdProviderDelegate() { instance = o' eventInfo = ei' delegateMethod = eventDel });              }              catch (Exception e)              {                  System.Diagnostics.Debug.WriteLine(e.InnerException);                  throw new Exception("Failed to bind events' general failure");              }
Magic Number,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The following statement contains a magic number: try              {  #if UNIVERSAL                  EventInfo ei = o.GetType().GetRuntimeEvent(eventName);                  Type handlerType = ei.EventHandlerType;                  var inquiry = handlerType.GetRuntimeMethods();                  MethodInfo invokeMethod = inquiry.FirstOrDefault(rm => rm.Name == "Invoke"); // handlerType.GetRuntimeMethod("Invoke"' new Type[0]);                  ParameterInfo[] parameters = invokeMethod.GetParameters();  #else                  EventInfo ei = o.GetType().GetEvent(eventName);                  var parameters = ei.EventHandlerType.GetMethod("Invoke").GetParameters();  #endif                  switch (parameters.Count())                  {                      case 2:                          handler = new Action<object' object>((o1' o2) => DelegateEventHandler(message));                          break;                      case 3:                          handler = new Action<object' object' object>((o1' o2' o3) => DelegateEventHandler(message));                          break;                      default:                          handler = new Action<object>((o1) => DelegateEventHandler(message));                          break;                  }  #if UNIVERSAL                  var methodInfo = handler.GetMethodInfo();                  Delegate eventDel = methodInfo.CreateDelegate(ei.EventHandlerType' null);                  //Testing getting WinRT events working ;-( - Help me obi wan kenobi' you're my only hope                  //Seems this only works with determined types' so needs perfroming within the app boundary' won't reflect fully.                  //Func<EventHandler<typeof(handlerType)>' System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> add = a => (System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)ei.AddMethod.Invoke(o' new object[] { a });                  //Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> remove = a => ei.RemoveMethod.Invoke(o' new object[] { a });                  //System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.AddEventHandler<Delegate>(add' remove' handler);       #else                  Delegate eventDel = Delegate.CreateDelegate(ei.EventHandlerType' handler.Target' handler.Method);                  ei.AddEventHandler(o' eventDel);  #endif                  currentProviderDelegates.Add(new AdProviderDelegate() { instance = o' eventInfo = ei' delegateMethod = eventDel });              }              catch (Exception e)              {                  System.Diagnostics.Debug.WriteLine(e.InnerException);                  throw new Exception("Failed to bind events' general failure");              }
Magic Number,AdRotator.Model,AdSettingsExtensions,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAdDescriptorBasedOnUICulture,The following statement contains a magic number: var cultureShortName = culture.Substring(0' 2);
Magic Number,AdRotator.Networking,Network,C:\repos\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: request.BeginGetResponse(r =>              {                  try                  {                      var httpRequest = (HttpWebRequest)r.AsyncState;                      var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse(r);                      using (StreamReader streamReader1 =                        new StreamReader(httpResponse.GetResponseStream()))                      {                          string resultString = streamReader1.ReadToEnd();                          var value = (resultString).Split(new Char[] { '"' });                          if (value.Length > 2)                          {                              var iPValue = (value[3]).Split(new Char[] { '.' });                              if (iPValue.Length == 4)                              {                                  CurrentIP = value[3];                                  callback(CurrentIP' null);                                  return;                              }                          }                          callback(null' new Exception("Failed to get IP Successfully"));                      }                  }                  catch (Exception e)                  {                      callback(null' e);                  }              }' request);
Magic Number,AdRotator.Networking,Network,C:\repos\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: request.BeginGetResponse(r =>              {                  try                  {                      var httpRequest = (HttpWebRequest)r.AsyncState;                      var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse(r);                      using (StreamReader streamReader1 =                        new StreamReader(httpResponse.GetResponseStream()))                      {                          string resultString = streamReader1.ReadToEnd();                          var value = (resultString).Split(new Char[] { '"' });                          if (value.Length > 2)                          {                              var iPValue = (value[3]).Split(new Char[] { '.' });                              if (iPValue.Length == 4)                              {                                  CurrentIP = value[3];                                  callback(CurrentIP' null);                                  return;                              }                          }                          callback(null' new Exception("Failed to get IP Successfully"));                      }                  }                  catch (Exception e)                  {                      callback(null' e);                  }              }' request);
Magic Number,AdRotator.Networking,Network,C:\repos\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: request.BeginGetResponse(r =>              {                  try                  {                      var httpRequest = (HttpWebRequest)r.AsyncState;                      var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse(r);                      using (StreamReader streamReader1 =                        new StreamReader(httpResponse.GetResponseStream()))                      {                          string resultString = streamReader1.ReadToEnd();                          var value = (resultString).Split(new Char[] { '"' });                          if (value.Length > 2)                          {                              var iPValue = (value[3]).Split(new Char[] { '.' });                              if (iPValue.Length == 4)                              {                                  CurrentIP = value[3];                                  callback(CurrentIP' null);                                  return;                              }                          }                          callback(null' new Exception("Failed to get IP Successfully"));                      }                  }                  catch (Exception e)                  {                      callback(null' e);                  }              }' request);
Magic Number,AdRotator.Networking,Network,C:\repos\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: request.BeginGetResponse(r =>              {                  try                  {                      var httpRequest = (HttpWebRequest)r.AsyncState;                      var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse(r);                      using (StreamReader streamReader1 =                        new StreamReader(httpResponse.GetResponseStream()))                      {                          string resultString = streamReader1.ReadToEnd();                          var value = (resultString).Split(new Char[] { '"' });                          if (value.Length > 2)                          {                              var iPValue = (value[3]).Split(new Char[] { '.' });                              if (iPValue.Length == 4)                              {                                  CurrentIP = value[3];                                  callback(CurrentIP' null);                                  return;                              }                          }                          callback(null' new Exception("Failed to get IP Successfully"));                      }                  }                  catch (Exception e)                  {                      callback(null' e);                  }              }' request);
Magic Number,AdRotator.Networking,Network,C:\repos\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: try              {                  var IP = await GetStringFromURLAsync(IPValidatorHost);                  var value = IP.Split(new Char[] { '"' });                  if (value.Length > 2)                  {                      var iPValue = (value[3]).Split(new Char[] { '.' });                      if (iPValue.Length == 4)                      {                          CurrentIP = value[3];                          return CurrentIP;                      }                  }                  //IP Unresolved                  return string.Empty;              }              catch              {                  //error occured trying to resolve IP                  return string.Empty;              }
Magic Number,AdRotator.Networking,Network,C:\repos\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: try              {                  var IP = await GetStringFromURLAsync(IPValidatorHost);                  var value = IP.Split(new Char[] { '"' });                  if (value.Length > 2)                  {                      var iPValue = (value[3]).Split(new Char[] { '.' });                      if (iPValue.Length == 4)                      {                          CurrentIP = value[3];                          return CurrentIP;                      }                  }                  //IP Unresolved                  return string.Empty;              }              catch              {                  //error occured trying to resolve IP                  return string.Empty;              }
Magic Number,AdRotator.Networking,Network,C:\repos\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: try              {                  var IP = await GetStringFromURLAsync(IPValidatorHost);                  var value = IP.Split(new Char[] { '"' });                  if (value.Length > 2)                  {                      var iPValue = (value[3]).Split(new Char[] { '.' });                      if (iPValue.Length == 4)                      {                          CurrentIP = value[3];                          return CurrentIP;                      }                  }                  //IP Unresolved                  return string.Empty;              }              catch              {                  //error occured trying to resolve IP                  return string.Empty;              }
Magic Number,AdRotator.Networking,Network,C:\repos\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: try              {                  var IP = await GetStringFromURLAsync(IPValidatorHost);                  var value = IP.Split(new Char[] { '"' });                  if (value.Length > 2)                  {                      var iPValue = (value[3]).Split(new Char[] { '.' });                      if (iPValue.Length == 4)                      {                          CurrentIP = value[3];                          return CurrentIP;                      }                  }                  //IP Unresolved                  return string.Empty;              }              catch              {                  //error occured trying to resolve IP                  return string.Empty;              }
Missing Default,AdRotator,AdRotatorComponent,C:\repos\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The following switch statement is missing a default case: switch (adProvider.AdProviderType)                      {                          case AdType.InnerActive:                              reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdType]' "IaAdType_Banner");                              break;                          case AdType.AdMob:                              reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdType]' "Banner");                              break;                          case AdType.Vserv:                              reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdType]' "Banner");                              break;                          case AdType.Inmobi:                              reflectionHelper.TrySetProperty(instance' provider.ConfigurationOptions[AdProviderConfig.AdProviderConfigOptions.AdType]' "21");                              //INMOBI_AD_UNIT_480x75 = 21;                              //INMOBI_AD_UNIT_320X50 = 15;                              break;                      }
Missing Default,AdRotator.Model,AdSettingsExtensions,C:\repos\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The following switch statement is missing a default case: switch (mode)                  {                      case AdMode.Random:                          validDescriptors = RandomPermutation<AdProvider>(validDescriptors);                            var totalValueBetweenValidAds = validDescriptors.Sum(x => ((AdProvider)x).Probability);                          var randomValue = AdRotator.AdRotatorComponent._rnd.NextDouble() * totalValueBetweenValidAds;                          double totalCounter = 0;                          foreach (AdProvider probabilityDescriptor in validDescriptors)                          {                              totalCounter += probabilityDescriptor.Probability;                              if (randomValue < totalCounter)                              {                                  adsettings.CurrentAdType = probabilityDescriptor.AdProviderType;                                  return probabilityDescriptor;                              }                          }                          break;                      case AdMode.Stepped:                      case AdMode.Ordered:                          validDescriptors = validDescriptors.OrderBy(x => x.AdOrder).Cast<AdProvider>().ToArray();                          AdProvider selectedAdProvider = validDescriptors[0];                          adsettings.CurrentAdType = selectedAdProvider.AdProviderType;  						//If Admode == ordered' then use top most successful ad. Order only moves next on fail                          if (mode == AdMode.Ordered) return selectedAdProvider;  						                          adsettings.CurrentAdProvider = validDescriptors[adsettings.CurrentAdOrderIndex];                          adsettings.CurrentAdOrderIndex++;                          if (adsettings.CurrentAdOrderIndex > validDescriptors.Length - 1)                          {                              adsettings.CurrentAdOrderIndex = 0;                          }                          return adsettings.CurrentAdProvider;                  }
