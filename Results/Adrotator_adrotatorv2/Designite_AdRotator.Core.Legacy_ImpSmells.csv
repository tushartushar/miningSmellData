Implementation smell,Namespace,Class,File,Method,Description
Long Method,AdRotator.AdProviders,AdProviderAdDuplex,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderAdDuplex.cs,AdProviderAdDuplex,The method has 129 lines of code.
Long Method,AdRotator.AdProviders,AdProviderInmobi,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderInmobi.cs,AdProviderInmobi,The method has 169 lines of code.
Long Method,AdRotator.AdProviders,AdProviderPubCenter,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderPubCenter.cs,AdProviderPubCenter,The method has 149 lines of code.
Long Method,AdRotator.AdProviders,AdProviderSmaato,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderSmaato.cs,AdProviderSmaato,The method has 250 lines of code.
Long Method,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The method has 100 lines of code.
Complex Method,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,Cyclomatic complexity of the method is 34
Complex Method,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,Cyclomatic complexity of the method is 10
Complex Method,AdRotator.Model,AdSettingsExtensions,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,Cyclomatic complexity of the method is 23
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "		OnLog (String.Format ("Provider {0} DLL not found or not supported on the {1} platform"' adProvider.AdProviderType' platform)); " is 127.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "		OnLog (String.Format ("Provider {0} DLL not found or not supported on the {1} platform"' adProvider.AdProviderType' platform)); " is 127.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AppId]' adProvider.AppId.ToString ()); " is 153.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.SecondaryId]' adProvider.SecondaryId.ToString ()); " is 165.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "				reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdType]' "IaAdType_Banner"); " is 143.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "				reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdType]' "Banner"); " is 134.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "				reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdType]' "Banner"); " is 134.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "				reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdType]' "21"); " is 130.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.IsTest]' adProvider.IsTest.ToString ()); " is 155.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdWidth]' AdWidth.ToString ()); " is 146.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdHeight]' AdHeight.ToString ()); " is 148.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.Size]' AdWidth.ToString () + "x" + AdHeight.ToString ()); " is 172.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.ShowErrors]' "true"); " is 136.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			WireUpDelegateEvent (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdSuccessEvent]' string.Format ("Ads served for: {0}"' _settings.CurrentAdType.ToString ())); " is 196.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			WireUpDelegateEvent (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdFailedEvent]' string.Format ("Ad failed request for: {0}"' _settings.CurrentAdType.ToString ())); " is 202.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			WireUpDelegateEvent (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdClickedEvent]' string.Format ("Ad clicked for: {0}"' _settings.CurrentAdType.ToString ())); " is 196.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "			reflectionHelper.TryInvokeMethod (providerType' instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.StartMethod]); " is 144.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "				reflectionHelper.TryInvokeMethod (providerType' instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.StopMethod]); " is 143.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The length of the statement  "		OnLog (string.Format ("Configured provider {0} not found in this installation"' adProvider.AdProviderType.ToString ())); " is 120.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadSettingsFileLocal,The length of the statement  "	var SETTINGS_FILE_NAME = string.IsNullOrEmpty (LocalSettingsLocation) ? GlobalConfig.DEFAULT_SETTINGS_FILE_NAME : LocalSettingsLocation; " is 136.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadSettingsFileProject,The length of the statement  "			throw new FileNotFoundException (string.Format ("The ad configuration file {0} could not be found. Either the path is incorrect or the build type is not set correctly"' LocalSettingsLocation)); " is 193.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,SaveAdSettings,The length of the statement  "	var SETTINGS_FILE_NAME = string.IsNullOrEmpty (LocalSettingsLocation) ? GlobalConfig.DEFAULT_SETTINGS_FILE_NAME : LocalSettingsLocation; " is 136.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The length of the statement  "                MethodInfo invokeMethod = inquiry.FirstOrDefault(rm => rm.Name == "Invoke"); // handlerType.GetRuntimeMethod("Invoke"' new Type[0]);" is 132.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The length of the statement  "                //Func<EventHandler<typeof(handlerType)>' System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> add = a => (System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)ei.AddMethod.Invoke(o' new object[] { a });" is 236.
Long Statement,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The length of the statement  "                //Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> remove = a => ei.RemoveMethod.Invoke(o' new object[] { a });" is 139.
Long Statement,AdRotator,ReflectionHelpers,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,TryGetType,The length of the statement  "		throw new PlatformNotSupportedException (String.Format ("Provider dll not located in this solution ({0})"' assemblyName)); " is 122.
Long Statement,AdRotator,ReflectionHelpers,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,TrySetProperty,The length of the statement  "			propertyInfo.SetValue (instance' Convert.ChangeType (PropertyValue' propertyInfo.PropertyType' CultureInfo.InvariantCulture)' null); " is 132.
Long Statement,AdRotator,ReflectionHelpers,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,GetMethodInfo,The length of the statement  "		mi = targetObject.GetType ().GetMethod (methodname' BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic); " is 122.
Long Statement,AdRotator.Model,AdSettingsExtensions,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAdDescriptorBasedOnUICulture,The length of the statement  "	var sameLanguageDescriptor = adsettings.CultureDescriptors.Where (x => x.CultureName.StartsWith (cultureShortName)).FirstOrDefault (); " is 134.
Long Statement,AdRotator.Model,AdSettingsExtensions,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAdDescriptorBasedOnUICulture,The length of the statement  "	var defaultDescriptor = adsettings.CultureDescriptors.Where (x => x.CultureName.ToLower () == GlobalConfig.DEFAULT_CULTURE || string.IsNullOrEmpty (x.CultureName)).FirstOrDefault (); " is 182.
Long Statement,AdRotator.Model,AdSettingsExtensions,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The length of the statement  "	var activeDescriptors = adsettings.CurrentCulture.Items.Where (x => !adsettings._failedAdTypes.Contains (((AdProvider)x).AdProviderType)); " is 138.
Long Statement,AdRotator.Model,AdSettingsExtensions,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The length of the statement  "	var supportedDescriptors = activeDescriptors.Where (x => AdRotatorComponent.PlatformSupportedAdProviders.Contains (((AdProvider)x).AdProviderType)); " is 148.
Long Statement,AdRotator.Model,AdSettingsExtensions,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The length of the statement  "	var validDescriptors = supportedDescriptors.Where (x => (((AdProvider)x).Probability > 0) || ((AdProvider)x).AdOrder > 0).Cast<AdProvider> ().ToArray (); " is 153.
Long Statement,AdRotator.Model,AdSettingsExtensions,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The length of the statement  "	var defaultHouseAd = (AdProvider)adsettings.CurrentCulture.Items.FirstOrDefault (x => ((AdProvider)x).AdProviderType == AdType.DefaultHouseAd && !adsettings._failedAdTypes.Contains (AdType.DefaultHouseAd)); " is 206.
Empty Catch Block,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetConfig,The method has an empty catch block.
Empty Catch Block,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadAdSettings,The method has an empty catch block.
Empty Catch Block,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadAdSettings,The method has an empty catch block.
Empty Catch Block,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,LoadSettingsFileProject,The method has an empty catch block.
Empty Catch Block,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,RemoveEventDelegatesFromActiveControl,The method has an empty catch block.
Empty Catch Block,AdRotator,ReflectionHelpers,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,TrySetProperty,The method has an empty catch block.
Empty Catch Block,AdRotator,ReflectionHelpers,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,GetMethodInfo,The method has an empty catch block.
Empty Catch Block,AdRotator,ReflectionHelpers,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,GetAssemblyFromClassName,The method has an empty catch block.
Empty Catch Block,AdRotator,ReflectionHelpers,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Utilities\ReflectionHelpers.cs,GetAssemblyFromAssemblyName,The method has an empty catch block.
Magic Number,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,AdRotatorComponent,The following statement contains a magic number: this.AdHeight = 80;  
Magic Number,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,AdRotatorComponent,The following statement contains a magic number: this.AdWidth = 480;  
Magic Number,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The following statement contains a magic number: try {  	#if UNIVERSAL  	                EventInfo ei = o.GetType().GetRuntimeEvent(eventName);                 Type handlerType = ei.EventHandlerType;                 var inquiry = handlerType.GetRuntimeMethods();                 MethodInfo invokeMethod = inquiry.FirstOrDefault(rm => rm.Name == "Invoke"); // handlerType.GetRuntimeMethod("Invoke"' new Type[0]);                 ParameterInfo[] parameters = invokeMethod.GetParameters(); #else  	EventInfo ei = o.GetType ().GetEvent (eventName);  	var parameters = ei.EventHandlerType.GetMethod ("Invoke").GetParameters ();  	#endif  	switch (parameters.Count ()) {  	case 2:  		handler = new Action<object' object> ((o1' o2) => DelegateEventHandler (message));  		break;  	case 3:  		handler = new Action<object' object' object> ((o1' o2' o3) => DelegateEventHandler (message));  		break;  	default:  		handler = new Action<object> (o1 => DelegateEventHandler (message));  		break;  	}  	#if UNIVERSAL  	                var methodInfo = handler.GetMethodInfo();                 Delegate eventDel = methodInfo.CreateDelegate(ei.EventHandlerType' null);                 //Testing getting WinRT events working ;-( - Help me obi wan kenobi' you're my only hope                 //Seems this only works with determined types' so needs perfroming within the app boundary' won't reflect fully.                 //Func<EventHandler<typeof(handlerType)>' System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> add = a => (System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)ei.AddMethod.Invoke(o' new object[] { a });                 //Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> remove = a => ei.RemoveMethod.Invoke(o' new object[] { a });                 //System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.AddEventHandler<Delegate>(add' remove' handler);     #else  	Delegate eventDel = Delegate.CreateDelegate (ei.EventHandlerType' handler.Target' handler.Method);  	ei.AddEventHandler (o' eventDel);  	#endif  	currentProviderDelegates.Add (new AdProviderDelegate () {  		instance = o'  		eventInfo = ei'  		delegateMethod = eventDel  	});  } catch (Exception e) {  	System.Diagnostics.Debug.WriteLine (e.InnerException);  	throw new Exception ("Failed to bind events' general failure");  }  
Magic Number,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The following statement contains a magic number: try {  	#if UNIVERSAL  	                EventInfo ei = o.GetType().GetRuntimeEvent(eventName);                 Type handlerType = ei.EventHandlerType;                 var inquiry = handlerType.GetRuntimeMethods();                 MethodInfo invokeMethod = inquiry.FirstOrDefault(rm => rm.Name == "Invoke"); // handlerType.GetRuntimeMethod("Invoke"' new Type[0]);                 ParameterInfo[] parameters = invokeMethod.GetParameters(); #else  	EventInfo ei = o.GetType ().GetEvent (eventName);  	var parameters = ei.EventHandlerType.GetMethod ("Invoke").GetParameters ();  	#endif  	switch (parameters.Count ()) {  	case 2:  		handler = new Action<object' object> ((o1' o2) => DelegateEventHandler (message));  		break;  	case 3:  		handler = new Action<object' object' object> ((o1' o2' o3) => DelegateEventHandler (message));  		break;  	default:  		handler = new Action<object> (o1 => DelegateEventHandler (message));  		break;  	}  	#if UNIVERSAL  	                var methodInfo = handler.GetMethodInfo();                 Delegate eventDel = methodInfo.CreateDelegate(ei.EventHandlerType' null);                 //Testing getting WinRT events working ;-( - Help me obi wan kenobi' you're my only hope                 //Seems this only works with determined types' so needs perfroming within the app boundary' won't reflect fully.                 //Func<EventHandler<typeof(handlerType)>' System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> add = a => (System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)ei.AddMethod.Invoke(o' new object[] { a });                 //Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> remove = a => ei.RemoveMethod.Invoke(o' new object[] { a });                 //System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.AddEventHandler<Delegate>(add' remove' handler);     #else  	Delegate eventDel = Delegate.CreateDelegate (ei.EventHandlerType' handler.Target' handler.Method);  	ei.AddEventHandler (o' eventDel);  	#endif  	currentProviderDelegates.Add (new AdProviderDelegate () {  		instance = o'  		eventInfo = ei'  		delegateMethod = eventDel  	});  } catch (Exception e) {  	System.Diagnostics.Debug.WriteLine (e.InnerException);  	throw new Exception ("Failed to bind events' general failure");  }  
Magic Number,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The following statement contains a magic number: switch (parameters.Count ()) {  case 2:  	handler = new Action<object' object> ((o1' o2) => DelegateEventHandler (message));  	break;  case 3:  	handler = new Action<object' object' object> ((o1' o2' o3) => DelegateEventHandler (message));  	break;  default:  	handler = new Action<object> (o1 => DelegateEventHandler (message));  	break;  }  
Magic Number,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,WireUpDelegateEvent,The following statement contains a magic number: switch (parameters.Count ()) {  case 2:  	handler = new Action<object' object> ((o1' o2) => DelegateEventHandler (message));  	break;  case 3:  	handler = new Action<object' object' object> ((o1' o2' o3) => DelegateEventHandler (message));  	break;  default:  	handler = new Action<object> (o1 => DelegateEventHandler (message));  	break;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: request.BeginGetResponse (r => {  	try {  		var httpRequest = (HttpWebRequest)r.AsyncState;  		var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse (r);  		using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  			string resultString = streamReader1.ReadToEnd ();  			var value = (resultString).Split (new Char[] {  				'"'  			});  			if (value.Length > 2) {  				var iPValue = (value [3]).Split (new Char[] {  					'.'  				});  				if (iPValue.Length == 4) {  					CurrentIP = value [3];  					callback (CurrentIP' null);  					return;  				}  			}  			callback (null' new Exception ("Failed to get IP Successfully"));  		}  	} catch (Exception e) {  		callback (null' e);  	}  }' request);  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: request.BeginGetResponse (r => {  	try {  		var httpRequest = (HttpWebRequest)r.AsyncState;  		var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse (r);  		using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  			string resultString = streamReader1.ReadToEnd ();  			var value = (resultString).Split (new Char[] {  				'"'  			});  			if (value.Length > 2) {  				var iPValue = (value [3]).Split (new Char[] {  					'.'  				});  				if (iPValue.Length == 4) {  					CurrentIP = value [3];  					callback (CurrentIP' null);  					return;  				}  			}  			callback (null' new Exception ("Failed to get IP Successfully"));  		}  	} catch (Exception e) {  		callback (null' e);  	}  }' request);  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: request.BeginGetResponse (r => {  	try {  		var httpRequest = (HttpWebRequest)r.AsyncState;  		var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse (r);  		using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  			string resultString = streamReader1.ReadToEnd ();  			var value = (resultString).Split (new Char[] {  				'"'  			});  			if (value.Length > 2) {  				var iPValue = (value [3]).Split (new Char[] {  					'.'  				});  				if (iPValue.Length == 4) {  					CurrentIP = value [3];  					callback (CurrentIP' null);  					return;  				}  			}  			callback (null' new Exception ("Failed to get IP Successfully"));  		}  	} catch (Exception e) {  		callback (null' e);  	}  }' request);  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: request.BeginGetResponse (r => {  	try {  		var httpRequest = (HttpWebRequest)r.AsyncState;  		var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse (r);  		using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  			string resultString = streamReader1.ReadToEnd ();  			var value = (resultString).Split (new Char[] {  				'"'  			});  			if (value.Length > 2) {  				var iPValue = (value [3]).Split (new Char[] {  					'.'  				});  				if (iPValue.Length == 4) {  					CurrentIP = value [3];  					callback (CurrentIP' null);  					return;  				}  			}  			callback (null' new Exception ("Failed to get IP Successfully"));  		}  	} catch (Exception e) {  		callback (null' e);  	}  }' request);  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: try {  	var httpRequest = (HttpWebRequest)r.AsyncState;  	var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse (r);  	using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  		string resultString = streamReader1.ReadToEnd ();  		var value = (resultString).Split (new Char[] {  			'"'  		});  		if (value.Length > 2) {  			var iPValue = (value [3]).Split (new Char[] {  				'.'  			});  			if (iPValue.Length == 4) {  				CurrentIP = value [3];  				callback (CurrentIP' null);  				return;  			}  		}  		callback (null' new Exception ("Failed to get IP Successfully"));  	}  } catch (Exception e) {  	callback (null' e);  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: try {  	var httpRequest = (HttpWebRequest)r.AsyncState;  	var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse (r);  	using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  		string resultString = streamReader1.ReadToEnd ();  		var value = (resultString).Split (new Char[] {  			'"'  		});  		if (value.Length > 2) {  			var iPValue = (value [3]).Split (new Char[] {  				'.'  			});  			if (iPValue.Length == 4) {  				CurrentIP = value [3];  				callback (CurrentIP' null);  				return;  			}  		}  		callback (null' new Exception ("Failed to get IP Successfully"));  	}  } catch (Exception e) {  	callback (null' e);  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: try {  	var httpRequest = (HttpWebRequest)r.AsyncState;  	var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse (r);  	using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  		string resultString = streamReader1.ReadToEnd ();  		var value = (resultString).Split (new Char[] {  			'"'  		});  		if (value.Length > 2) {  			var iPValue = (value [3]).Split (new Char[] {  				'.'  			});  			if (iPValue.Length == 4) {  				CurrentIP = value [3];  				callback (CurrentIP' null);  				return;  			}  		}  		callback (null' new Exception ("Failed to get IP Successfully"));  	}  } catch (Exception e) {  	callback (null' e);  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: try {  	var httpRequest = (HttpWebRequest)r.AsyncState;  	var httpResponse = (HttpWebResponse)httpRequest.EndGetResponse (r);  	using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  		string resultString = streamReader1.ReadToEnd ();  		var value = (resultString).Split (new Char[] {  			'"'  		});  		if (value.Length > 2) {  			var iPValue = (value [3]).Split (new Char[] {  				'.'  			});  			if (iPValue.Length == 4) {  				CurrentIP = value [3];  				callback (CurrentIP' null);  				return;  			}  		}  		callback (null' new Exception ("Failed to get IP Successfully"));  	}  } catch (Exception e) {  	callback (null' e);  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  	string resultString = streamReader1.ReadToEnd ();  	var value = (resultString).Split (new Char[] {  		'"'  	});  	if (value.Length > 2) {  		var iPValue = (value [3]).Split (new Char[] {  			'.'  		});  		if (iPValue.Length == 4) {  			CurrentIP = value [3];  			callback (CurrentIP' null);  			return;  		}  	}  	callback (null' new Exception ("Failed to get IP Successfully"));  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  	string resultString = streamReader1.ReadToEnd ();  	var value = (resultString).Split (new Char[] {  		'"'  	});  	if (value.Length > 2) {  		var iPValue = (value [3]).Split (new Char[] {  			'.'  		});  		if (iPValue.Length == 4) {  			CurrentIP = value [3];  			callback (CurrentIP' null);  			return;  		}  	}  	callback (null' new Exception ("Failed to get IP Successfully"));  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  	string resultString = streamReader1.ReadToEnd ();  	var value = (resultString).Split (new Char[] {  		'"'  	});  	if (value.Length > 2) {  		var iPValue = (value [3]).Split (new Char[] {  			'.'  		});  		if (iPValue.Length == 4) {  			CurrentIP = value [3];  			callback (CurrentIP' null);  			return;  		}  	}  	callback (null' new Exception ("Failed to get IP Successfully"));  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: using (StreamReader streamReader1 = new StreamReader (httpResponse.GetResponseStream ())) {  	string resultString = streamReader1.ReadToEnd ();  	var value = (resultString).Split (new Char[] {  		'"'  	});  	if (value.Length > 2) {  		var iPValue = (value [3]).Split (new Char[] {  			'.'  		});  		if (iPValue.Length == 4) {  			CurrentIP = value [3];  			callback (CurrentIP' null);  			return;  		}  	}  	callback (null' new Exception ("Failed to get IP Successfully"));  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: if (value.Length > 2) {  	var iPValue = (value [3]).Split (new Char[] {  		'.'  	});  	if (iPValue.Length == 4) {  		CurrentIP = value [3];  		callback (CurrentIP' null);  		return;  	}  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: if (value.Length > 2) {  	var iPValue = (value [3]).Split (new Char[] {  		'.'  	});  	if (iPValue.Length == 4) {  		CurrentIP = value [3];  		callback (CurrentIP' null);  		return;  	}  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: if (value.Length > 2) {  	var iPValue = (value [3]).Split (new Char[] {  		'.'  	});  	if (iPValue.Length == 4) {  		CurrentIP = value [3];  		callback (CurrentIP' null);  		return;  	}  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: if (value.Length > 2) {  	var iPValue = (value [3]).Split (new Char[] {  		'.'  	});  	if (iPValue.Length == 4) {  		CurrentIP = value [3];  		callback (CurrentIP' null);  		return;  	}  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: if (iPValue.Length == 4) {  	CurrentIP = value [3];  	callback (CurrentIP' null);  	return;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: if (iPValue.Length == 4) {  	CurrentIP = value [3];  	callback (CurrentIP' null);  	return;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIP,The following statement contains a magic number: CurrentIP = value [3];  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: try {  	var IP = await GetStringFromURLAsync (IPValidatorHost);  	var value = IP.Split (new Char[] {  		'"'  	});  	if (value.Length > 2) {  		var iPValue = (value [3]).Split (new Char[] {  			'.'  		});  		if (iPValue.Length == 4) {  			CurrentIP = value [3];  			return CurrentIP;  		}  	}  	//IP Unresolved  	return string.Empty;  } catch {  	//error occured trying to resolve IP  	return string.Empty;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: try {  	var IP = await GetStringFromURLAsync (IPValidatorHost);  	var value = IP.Split (new Char[] {  		'"'  	});  	if (value.Length > 2) {  		var iPValue = (value [3]).Split (new Char[] {  			'.'  		});  		if (iPValue.Length == 4) {  			CurrentIP = value [3];  			return CurrentIP;  		}  	}  	//IP Unresolved  	return string.Empty;  } catch {  	//error occured trying to resolve IP  	return string.Empty;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: try {  	var IP = await GetStringFromURLAsync (IPValidatorHost);  	var value = IP.Split (new Char[] {  		'"'  	});  	if (value.Length > 2) {  		var iPValue = (value [3]).Split (new Char[] {  			'.'  		});  		if (iPValue.Length == 4) {  			CurrentIP = value [3];  			return CurrentIP;  		}  	}  	//IP Unresolved  	return string.Empty;  } catch {  	//error occured trying to resolve IP  	return string.Empty;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: try {  	var IP = await GetStringFromURLAsync (IPValidatorHost);  	var value = IP.Split (new Char[] {  		'"'  	});  	if (value.Length > 2) {  		var iPValue = (value [3]).Split (new Char[] {  			'.'  		});  		if (iPValue.Length == 4) {  			CurrentIP = value [3];  			return CurrentIP;  		}  	}  	//IP Unresolved  	return string.Empty;  } catch {  	//error occured trying to resolve IP  	return string.Empty;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: if (value.Length > 2) {  	var iPValue = (value [3]).Split (new Char[] {  		'.'  	});  	if (iPValue.Length == 4) {  		CurrentIP = value [3];  		return CurrentIP;  	}  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: if (value.Length > 2) {  	var iPValue = (value [3]).Split (new Char[] {  		'.'  	});  	if (iPValue.Length == 4) {  		CurrentIP = value [3];  		return CurrentIP;  	}  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: if (value.Length > 2) {  	var iPValue = (value [3]).Split (new Char[] {  		'.'  	});  	if (iPValue.Length == 4) {  		CurrentIP = value [3];  		return CurrentIP;  	}  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: if (value.Length > 2) {  	var iPValue = (value [3]).Split (new Char[] {  		'.'  	});  	if (iPValue.Length == 4) {  		CurrentIP = value [3];  		return CurrentIP;  	}  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: if (iPValue.Length == 4) {  	CurrentIP = value [3];  	return CurrentIP;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: if (iPValue.Length == 4) {  	CurrentIP = value [3];  	return CurrentIP;  }  
Magic Number,AdRotator.Networking,Network,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Networking\NetworkWire.cs,GetDeviceIPAsync,The following statement contains a magic number: CurrentIP = value [3];  
Duplicate Code,AdRotator.AdProviders,AdProviderAdDuplex,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderAdDuplex.cs,AdProviderAdDuplex,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 33)' (35' 62))
Duplicate Code,AdRotator.AdProviders,AdProviderAdDuplex,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderAdDuplex.cs,AdProviderAdDuplex,The method contains a code clone-set at the following line numbers (starting from the method definition): ((64' 84)' (86' 106))
Duplicate Code,AdRotator.AdProviders,AdProviderAdDuplex,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderAdDuplex.cs,AdProviderAdDuplex,The method contains a code clone-set at the following line numbers (starting from the method definition): ((64' 83)' (108' 127)' (86' 105))
Duplicate Code,AdRotator.AdProviders,AdProviderInmobi,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderInmobi.cs,AdProviderInmobi,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 31)' (50' 72)' (91' 113)' (132' 154))
Duplicate Code,AdRotator.AdProviders,AdProviderInmobi,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderInmobi.cs,AdProviderInmobi,The method contains a code clone-set at the following line numbers (starting from the method definition): ((50' 86)' (91' 127))
Duplicate Code,AdRotator.AdProviders,AdProviderInmobi,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderInmobi.cs,AdProviderInmobi,The method contains a code clone-set at the following line numbers (starting from the method definition): ((50' 85)' (132' 167)' (91' 126))
Duplicate Code,AdRotator.AdProviders,AdProviderInmobi,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderInmobi.cs,AdProviderInmobi,The method contains a code clone-set at the following line numbers (starting from the method definition): ((88' 109)' (129' 150))
Duplicate Code,AdRotator.AdProviders,AdProviderInnerActive,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderInnerActive.cs,AdProviderInnerActive,The method contains a code clone-set at the following line numbers (starting from the method definition): ((10' 37)' (43' 70))
Duplicate Code,AdRotator.AdProviders,AdProviderMobFox,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderMobFox.cs,AdProviderMobFox,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 32)' (35' 61))
Duplicate Code,AdRotator.AdProviders,AdProviderPubCenter,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderPubCenter.cs,AdProviderPubCenter,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 37)' (39' 70))
Duplicate Code,AdRotator.AdProviders,AdProviderPubCenter,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderPubCenter.cs,AdProviderPubCenter,The method contains a code clone-set at the following line numbers (starting from the method definition): ((72' 96)' (98' 122))
Duplicate Code,AdRotator.AdProviders,AdProviderPubCenter,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderPubCenter.cs,AdProviderPubCenter,The method contains a code clone-set at the following line numbers (starting from the method definition): ((72' 95)' (124' 147)' (98' 121))
Duplicate Code,AdRotator.AdProviders,AdProviderSmaato,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderSmaato.cs,AdProviderSmaato,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 53)' (58' 102)' (107' 151)' (156' 200))
Duplicate Code,AdRotator.AdProviders,AdProviderSmaato,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderSmaato.cs,AdProviderSmaato,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 52)' (205' 248)' (58' 101)' (107' 150)' (156' 199))
Duplicate Code,AdRotator.AdProviders,AdProviderSmaato,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderSmaato.cs,AdProviderSmaato,The method contains a code clone-set at the following line numbers (starting from the method definition): ((104' 125)' (153' 174))
Duplicate Code,AdRotator.AdProviders,AdProviderVserv,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdProviders\AdProviderVserv.cs,AdProviderVserv,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 47)' (54' 92))
Missing Default,AdRotator,AdRotatorComponent,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\AdRotatorComponent.cs,GetProviderFrameworkElement,The following switch statement is missing a default case: switch (adProvider.AdProviderType) {  case AdType.InnerActive:  	reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdType]' "IaAdType_Banner");  	break;  case AdType.AdMob:  	reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdType]' "Banner");  	break;  case AdType.Vserv:  	reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdType]' "Banner");  	break;  case AdType.Inmobi:  	reflectionHelper.TrySetProperty (instance' provider.ConfigurationOptions [AdProviderConfig.AdProviderConfigOptions.AdType]' "21");  	//INMOBI_AD_UNIT_480x75 = 21;  	//INMOBI_AD_UNIT_320X50 = 15;  	break;  }  
Missing Default,AdRotator.Model,AdSettingsExtensions,F:\newReposMay17\Adrotator_adrotatorv2\AdRotator\Model\AdSettings.cs,GetAd,The following switch statement is missing a default case: switch (mode) {  case AdMode.Random:  	validDescriptors = RandomPermutation<AdProvider> (validDescriptors);  	var totalValueBetweenValidAds = validDescriptors.Sum (x => ((AdProvider)x).Probability);  	var randomValue = AdRotator.AdRotatorComponent._rnd.NextDouble () * totalValueBetweenValidAds;  	double totalCounter = 0;  	foreach (AdProvider probabilityDescriptor in validDescriptors) {  		totalCounter += probabilityDescriptor.Probability;  		if (randomValue < totalCounter) {  			adsettings.CurrentAdType = probabilityDescriptor.AdProviderType;  			return probabilityDescriptor;  		}  	}  	break;  case AdMode.Stepped:  case AdMode.Ordered:  	validDescriptors = validDescriptors.OrderBy (x => x.AdOrder).Cast<AdProvider> ().ToArray ();  	AdProvider selectedAdProvider = validDescriptors [0];  	adsettings.CurrentAdType = selectedAdProvider.AdProviderType;  	//If Admode == ordered' then use top most successful ad. Order only moves next on fail  	if (mode == AdMode.Ordered)  		return selectedAdProvider;  	adsettings.CurrentAdProvider = validDescriptors [adsettings.CurrentAdOrderIndex];  	adsettings.CurrentAdOrderIndex++;  	if (adsettings.CurrentAdOrderIndex > validDescriptors.Length - 1) {  		adsettings.CurrentAdOrderIndex = 0;  	}  	return adsettings.CurrentAdProvider;  }  
