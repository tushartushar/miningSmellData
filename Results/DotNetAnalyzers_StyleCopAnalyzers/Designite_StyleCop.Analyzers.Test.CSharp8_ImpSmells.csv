Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,StyleCop.Analyzers.Test.CSharp8.Lightup,SwitchExpressionSyntaxWrapperTestsCSharp8,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\SwitchExpressionSyntaxWrapperTestsCSharp8.cs,TestGoverningExpressionProperty,The length of the parameter wrapperWithGoverningExpression is 30.
Long Statement,StyleCop.Analyzers.Test.CSharp8.LayoutRules,SA1503CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\LayoutRules\SA1503CSharp8UnitTests.cs,TestNoDiagnosticForUsingDeclarationStatementAsync,The length of the statement  "            await VerifyCSharpDiagnosticAsync(testCode' DiagnosticResult.EmptyDiagnosticResults' CancellationToken.None).ConfigureAwait(false); " is 131.
Long Statement,StyleCop.Analyzers.Test.CSharp8.LayoutRules,SA1514CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\LayoutRules\SA1514CSharp8UnitTests.cs,TestValidPropertyDeclarationAsync,The length of the statement  "            await VerifyCSharpDiagnosticAsync(testCode' DiagnosticResult.EmptyDiagnosticResults' CancellationToken.None).ConfigureAwait(false); " is 131.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,CommonForEachStatementSyntaxWrapperTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\CommonForEachStatementSyntaxWrapperTests.cs,TestNull,The length of the statement  "            Assert.Throws<NullReferenceException>(() => wrapper.WithForEachKeyword(SyntaxFactory.Token(SyntaxKind.ForEachKeyword))); " is 120.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,CommonForEachStatementSyntaxWrapperTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\CommonForEachStatementSyntaxWrapperTests.cs,TestNull,The length of the statement  "            Assert.Throws<NullReferenceException>(() => wrapper.WithOpenParenToken(SyntaxFactory.Token(SyntaxKind.OpenParenToken))); " is 120.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,CommonForEachStatementSyntaxWrapperTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\CommonForEachStatementSyntaxWrapperTests.cs,TestNull,The length of the statement  "            Assert.Throws<NullReferenceException>(() => wrapper.WithExpression(SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))); " is 135.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,CommonForEachStatementSyntaxWrapperTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\CommonForEachStatementSyntaxWrapperTests.cs,TestNull,The length of the statement  "            Assert.Throws<NullReferenceException>(() => wrapper.WithCloseParenToken(SyntaxFactory.Token(SyntaxKind.CloseParenToken))); " is 122.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,CommonForEachStatementSyntaxWrapperTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\CommonForEachStatementSyntaxWrapperTests.cs,TestExpression,The length of the statement  "            wrapper = wrapper.WithExpression(SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal(0))); " is 129.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,CommonForEachStatementSyntaxWrapperTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\CommonForEachStatementSyntaxWrapperTests.cs,TestCloseParenToken,The length of the statement  "            wrapper = wrapper.WithCloseParenToken(SpacingExtensions.WithoutTrivia(SyntaxFactory.Token(SyntaxKind.CloseParenToken))); " is 120.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,CommonForEachStatementSyntaxWrapperTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\CommonForEachStatementSyntaxWrapperTests.cs,TestIsInstance,The length of the statement  "            Assert.False(CommonForEachStatementSyntaxWrapper.IsInstance(SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))); " is 128.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,SwitchExpressionArmSyntaxWrapperTestsCSharp8,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\SwitchExpressionArmSyntaxWrapperTestsCSharp8.cs,TestEqualsGreaterThanTokenProperty,The length of the statement  "            Assert.Throws<ArgumentException>(() => wrapper.WithEqualsGreaterThanToken(SyntaxFactory.Token(SyntaxKind.EqualsEqualsToken))); " is 126.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,SwitchExpressionArmSyntaxWrapperTestsCSharp8,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\SwitchExpressionArmSyntaxWrapperTestsCSharp8.cs,TestEqualsGreaterThanTokenProperty,The length of the statement  "            var newToken = SyntaxFactory.Token(SyntaxTriviaList.Create(SyntaxFactory.SyntaxTrivia(SyntaxKind.SingleLineCommentTrivia' "/* 1 */"))' SyntaxKind.EqualsGreaterThanToken' SyntaxTriviaList.Empty); " is 194.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,SwitchExpressionArmSyntaxWrapperTestsCSharp8,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\SwitchExpressionArmSyntaxWrapperTestsCSharp8.cs,TestIsInstance,The length of the statement  "            Assert.False(SwitchExpressionArmSyntaxWrapper.IsInstance(SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))); " is 125.
Long Statement,StyleCop.Analyzers.Test.CSharp8.Lightup,SwitchExpressionSyntaxWrapperTestsCSharp8,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\Lightup\SwitchExpressionSyntaxWrapperTestsCSharp8.cs,TestArmsProperty,The length of the statement  "            var wrapperWithArms = wrapper.WithArms(new SeparatedSyntaxListWrapper<SwitchExpressionArmSyntaxWrapper>.AutoWrapSeparatedSyntaxList<SwitchExpressionArmSyntax>(arms)); " is 166.
Long Statement,StyleCop.Analyzers.Test.CSharp8.MaintainabilityRules,SA1413CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\MaintainabilityRules\SA1413CSharp8UnitTests.cs,TestSwitchExpressionAsync,The length of the statement  "            await VerifyCSharpFixAsync(LanguageVersion.CSharp8' testCode' DiagnosticResult.EmptyDiagnosticResults' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 160.
Long Statement,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The length of the statement  "                DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")' " is 166.
Long Statement,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The length of the statement  "                DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")' " is 189.
Long Statement,StyleCop.Analyzers.Test.CSharp8.ReadabilityRules,SA1106CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\ReadabilityRules\SA1106CSharp8UnitTests.cs,TestNoDiagnosticForUsingDeclarationStatementAsync,The length of the statement  "            await VerifyCSharpDiagnosticAsync(testCode' DiagnosticResult.EmptyDiagnosticResults' CancellationToken.None).ConfigureAwait(false); " is 131.
Long Statement,StyleCop.Analyzers.Test.CSharp8.ReadabilityRules,SA1122CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\ReadabilityRules\SA1122CSharp8UnitTests.cs,TestEmptyStringInSwitchExpressionAsync,The length of the statement  "            await VerifyCSharpFixAsync(testCode' DiagnosticResult.EmptyDiagnosticResults' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 135.
Long Statement,StyleCop.Analyzers.Test.CSharp8.ReadabilityRules,SA1122CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\ReadabilityRules\SA1122CSharp8UnitTests.cs,TestEmptyStringInTuplePatternAsync,The length of the statement  "            await VerifyCSharpDiagnosticAsync(testCode' DiagnosticResult.EmptyDiagnosticResults' CancellationToken.None).ConfigureAwait(false); " is 131.
Long Statement,StyleCop.Analyzers.Test.CSharp8.ReadabilityRules,SA1122CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\ReadabilityRules\SA1122CSharp8UnitTests.cs,TestEmptyStringInRecursivePatternAsync,The length of the statement  "            await VerifyCSharpDiagnosticAsync(testCode' DiagnosticResult.EmptyDiagnosticResults' CancellationToken.None).ConfigureAwait(false); " is 131.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1002CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1002CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The length of the statement  "            await VerifyCSharpFixAsync(LanguageVersion.CSharp8' testCode' expected' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 129.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1009CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1009CSharp8UnitTests.cs,TestFollowedBySuppressionOperatorAsync,The length of the statement  "            await VerifyCSharpFixAsync(LanguageVersion.CSharp8' testCode' DiagnosticResult.EmptyDiagnosticResults' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 160.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1009CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1009CSharp8UnitTests.cs,TestExpressionBodyEndsWithSuppressionAsync,The length of the statement  "            await VerifyCSharpFixAsync(LanguageVersion.CSharp8' testCode' DiagnosticResult.EmptyDiagnosticResults' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 160.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1009CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1009CSharp8UnitTests.cs,TestBlockBodyEndsWithSuppressionAsync,The length of the statement  "            await VerifyCSharpFixAsync(LanguageVersion.CSharp8' testCode' DiagnosticResult.EmptyDiagnosticResults' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 160.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1009CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1009CSharp8UnitTests.cs,TestBeforeRangeExpressionAsync,The length of the statement  "            await VerifyCSharpFixAsync(LanguageVersion.CSharp8' testCode' expected' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 129.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,VerifyNullableContextWithArraysAsync,The length of the statement  "            await VerifyCSharpDiagnosticAsync(LanguageVersion.CSharp8' testCode' DiagnosticResult.EmptyDiagnosticResults' CancellationToken.None).ConfigureAwait(false); " is 156.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,VerifyNullableContextWithArrayReturnsAsync,The length of the statement  "            await VerifyCSharpDiagnosticAsync(LanguageVersion.CSharp8' testCode' DiagnosticResult.EmptyDiagnosticResults' CancellationToken.None).ConfigureAwait(false); " is 156.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The length of the statement  "            await VerifyCSharpFixAsync(LanguageVersion.CSharp8' testCode' expected' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 129.
Long Statement,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The length of the statement  "            await VerifyCSharpFixAsync(LanguageVersion.CSharp8' testCode' expected' fixedCode' CancellationToken.None).ConfigureAwait(false); " is 129.
Magic Number,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The following statement contains a magic number: return new DiagnosticResult[]              {                  DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")'                  DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")'                  DiagnosticResult.CompilerError("CS1001").WithLocation(11' 51).WithMessage("Identifier expected")'                  DiagnosticResult.CompilerError("CS1003").WithLocation(11' 51).WithMessage("Syntax error' ''' expected")'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The following statement contains a magic number: return new DiagnosticResult[]              {                  DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")'                  DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")'                  DiagnosticResult.CompilerError("CS1001").WithLocation(11' 51).WithMessage("Identifier expected")'                  DiagnosticResult.CompilerError("CS1003").WithLocation(11' 51).WithMessage("Syntax error' ''' expected")'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The following statement contains a magic number: return new DiagnosticResult[]              {                  DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")'                  DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")'                  DiagnosticResult.CompilerError("CS1001").WithLocation(11' 51).WithMessage("Identifier expected")'                  DiagnosticResult.CompilerError("CS1003").WithLocation(11' 51).WithMessage("Syntax error' ''' expected")'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The following statement contains a magic number: return new DiagnosticResult[]              {                  DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")'                  DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")'                  DiagnosticResult.CompilerError("CS1001").WithLocation(11' 51).WithMessage("Identifier expected")'                  DiagnosticResult.CompilerError("CS1003").WithLocation(11' 51).WithMessage("Syntax error' ''' expected")'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The following statement contains a magic number: return new DiagnosticResult[]              {                  DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")'                  DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")'                  DiagnosticResult.CompilerError("CS1001").WithLocation(11' 51).WithMessage("Identifier expected")'                  DiagnosticResult.CompilerError("CS1003").WithLocation(11' 51).WithMessage("Syntax error' ''' expected")'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The following statement contains a magic number: return new DiagnosticResult[]              {                  DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")'                  DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")'                  DiagnosticResult.CompilerError("CS1001").WithLocation(11' 51).WithMessage("Identifier expected")'                  DiagnosticResult.CompilerError("CS1003").WithLocation(11' 51).WithMessage("Syntax error' ''' expected")'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The following statement contains a magic number: return new DiagnosticResult[]              {                  DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")'                  DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")'                  DiagnosticResult.CompilerError("CS1001").WithLocation(11' 51).WithMessage("Identifier expected")'                  DiagnosticResult.CompilerError("CS1003").WithLocation(11' 51).WithMessage("Syntax error' ''' expected")'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.NamingRules,SA1313CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\NamingRules\SA1313CSharp8UnitTests.cs,GetInvalidMethodOverrideShouldNotProduceDiagnosticAsyncDiagnostics,The following statement contains a magic number: return new DiagnosticResult[]              {                  DiagnosticResult.CompilerError("CS0534").WithLocation(9' 18).WithMessage("'TestClass' does not implement inherited abstract member 'BaseClass.TestMethod(int' int)'")'                  DiagnosticResult.CompilerError("CS0246").WithLocation(11' 49).WithMessage("The type or namespace name 'X' could not be found (are you missing a using directive or an assembly reference?)")'                  DiagnosticResult.CompilerError("CS1001").WithLocation(11' 51).WithMessage("Identifier expected")'                  DiagnosticResult.CompilerError("CS1003").WithLocation(11' 51).WithMessage("Syntax error' ''' expected")'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1002CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1002CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments(" not"' "preceded").WithLocation(9' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1002CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1002CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments(" not"' "preceded").WithLocation(9' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1002CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1002CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments(" not"' "preceded").WithLocation(9' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1002CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1002CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments(" not"' "preceded").WithLocation(9' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1008CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1008CSharp8UnitTests.cs,TestAfterRangeExpressionAsync,The following statement contains a magic number: var expectedResults = new DiagnosticResult[]              {                  Diagnostic(DescriptorNotPreceded).WithLocation(28' 27)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1008CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1008CSharp8UnitTests.cs,TestAfterRangeExpressionAsync,The following statement contains a magic number: var expectedResults = new DiagnosticResult[]              {                  Diagnostic(DescriptorNotPreceded).WithLocation(28' 27)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1009CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1009CSharp8UnitTests.cs,TestBeforeRangeExpressionAsync,The following statement contains a magic number: DiagnosticResult expected = Diagnostic().WithSpan(28' 37' 28' 38).WithArguments(" not"' "followed");
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1009CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1009CSharp8UnitTests.cs,TestBeforeRangeExpressionAsync,The following statement contains a magic number: DiagnosticResult expected = Diagnostic().WithSpan(28' 37' 28' 38).WithArguments(" not"' "followed");
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1009CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1009CSharp8UnitTests.cs,TestBeforeRangeExpressionAsync,The following statement contains a magic number: DiagnosticResult expected = Diagnostic().WithSpan(28' 37' 28' 38).WithArguments(" not"' "followed");
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1009CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1009CSharp8UnitTests.cs,TestBeforeRangeExpressionAsync,The following statement contains a magic number: DiagnosticResult expected = Diagnostic().WithSpan(28' 37' 28' 38).WithArguments(" not"' "followed");
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "followed").WithLocation(7' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(9' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(10' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(12' 36)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "followed").WithLocation(7' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(9' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(10' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(12' 36)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "followed").WithLocation(7' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(9' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(10' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(12' 36)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "followed").WithLocation(7' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(9' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(10' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(12' 36)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "followed").WithLocation(7' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(9' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(10' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(12' 36)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "followed").WithLocation(7' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(9' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(10' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(12' 36)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "followed").WithLocation(7' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(9' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(10' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(12' 36)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1011CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1011CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments(" not"' "followed").WithLocation(7' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(9' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(10' 36)'                  Diagnostic().WithArguments(" not"' "followed").WithLocation(12' 36)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1013CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1013CSharp8UnitTests.cs,TestSpacingAroundClosingBraceInPatternAsync,The following statement contains a magic number: var expected = Diagnostic().WithSpan(14' 37' 14' 38).WithArguments(string.Empty' "followed");
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1013CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1013CSharp8UnitTests.cs,TestSpacingAroundClosingBraceInPatternAsync,The following statement contains a magic number: var expected = Diagnostic().WithSpan(14' 37' 14' 38).WithArguments(string.Empty' "followed");
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1013CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1013CSharp8UnitTests.cs,TestSpacingAroundClosingBraceInPatternAsync,The following statement contains a magic number: var expected = Diagnostic().WithSpan(14' 37' 14' 38).WithArguments(string.Empty' "followed");
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1013CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1013CSharp8UnitTests.cs,TestSpacingAroundClosingBraceInPatternAsync,The following statement contains a magic number: var expected = Diagnostic().WithSpan(14' 37' 14' 38).WithArguments(string.Empty' "followed");
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments("."' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments("."' "preceded").WithLocation(9' 40)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(11' 39)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(12' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments("."' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments("."' "preceded").WithLocation(9' 40)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(11' 39)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(12' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments("."' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments("."' "preceded").WithLocation(9' 40)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(11' 39)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(12' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments("."' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments("."' "preceded").WithLocation(9' 40)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(11' 39)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(12' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments("."' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments("."' "preceded").WithLocation(9' 40)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(11' 39)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(12' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments("."' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments("."' "preceded").WithLocation(9' 40)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(11' 39)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(12' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments("."' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments("."' "preceded").WithLocation(9' 40)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(11' 39)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(12' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1019CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1019CSharp8UnitTests.cs,TestClosingSquareBracketFollowedByExclamationAsync,The following statement contains a magic number: DiagnosticResult[] expected =              {                  Diagnostic().WithArguments("."' "preceded").WithLocation(8' 39)'                  Diagnostic().WithArguments("."' "preceded").WithLocation(9' 40)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(11' 39)'                  Diagnostic().WithArguments("?"' "preceded").WithLocation(12' 40)'              };
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1024CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1024CSharp8UnitTests.cs,TestColonAfterClosingBraceInPatternAsync,The following statement contains a magic number: var expected = Diagnostic().WithSpan(9' 49' 9' 50).WithArguments(" not"' "preceded"' string.Empty);
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1024CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1024CSharp8UnitTests.cs,TestColonAfterClosingBraceInPatternAsync,The following statement contains a magic number: var expected = Diagnostic().WithSpan(9' 49' 9' 50).WithArguments(" not"' "preceded"' string.Empty);
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1024CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1024CSharp8UnitTests.cs,TestColonAfterClosingBraceInPatternAsync,The following statement contains a magic number: var expected = Diagnostic().WithSpan(9' 49' 9' 50).WithArguments(" not"' "preceded"' string.Empty);
Magic Number,StyleCop.Analyzers.Test.CSharp8.SpacingRules,SA1024CSharp8UnitTests,D:\research\architectureSmells\repos\DotNetAnalyzers_StyleCopAnalyzers\StyleCop.Analyzers\StyleCop.Analyzers.Test.CSharp8\SpacingRules\SA1024CSharp8UnitTests.cs,TestColonAfterClosingBraceInPatternAsync,The following statement contains a magic number: var expected = Diagnostic().WithSpan(9' 49' 9' 50).WithArguments(" not"' "preceded"' string.Empty);
